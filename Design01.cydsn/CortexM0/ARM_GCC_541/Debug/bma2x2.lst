ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"bma2x2.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.bss
  20              		.align	2
  21              	p_bma2x2:
  22 0000 00000000 		.space	4
  23              		.global	V_BMA2x2RESOLUTION_U8
  24              		.data
  25              		.type	V_BMA2x2RESOLUTION_U8, %object
  26              		.size	V_BMA2x2RESOLUTION_U8, 1
  27              	V_BMA2x2RESOLUTION_U8:
  28 0000 02       		.byte	2
  29              		.section	.text.bma2x2_burst_read,"ax",%progbits
  30              		.align	2
  31              		.global	bma2x2_burst_read
  32              		.code	16
  33              		.thumb_func
  34              		.type	bma2x2_burst_read, %function
  35              	bma2x2_burst_read:
  36              	.LFB0:
  37              		.file 1 "bma2x2.c"
   1:bma2x2.c      **** /*!
   2:bma2x2.c      **** ****************************************************************************
   3:bma2x2.c      **** * Copyright (C) 2015 - 2016 Bosch Sensortec GmbH
   4:bma2x2.c      **** *
   5:bma2x2.c      **** * bma2x2.c
   6:bma2x2.c      **** * Date: 2016/11/14
   7:bma2x2.c      **** * Revision: 2.0.7 $
   8:bma2x2.c      **** *
   9:bma2x2.c      **** * Usage: Sensor Driver for BMA2x2 sensor
  10:bma2x2.c      **** *
  11:bma2x2.c      **** ****************************************************************************
  12:bma2x2.c      **** * Disclaimer
  13:bma2x2.c      **** *
  14:bma2x2.c      **** * Common:
  15:bma2x2.c      **** * Bosch Sensortec products are developed for the consumer goods industry.
  16:bma2x2.c      **** * They may only be used within the parameters of the respective valid
  17:bma2x2.c      **** * product data sheet.  Bosch Sensortec products are provided with the
  18:bma2x2.c      **** * express understanding that there is no warranty of fitness for a
  19:bma2x2.c      **** * particular purpose.They are not fit for use in life-sustaining,
  20:bma2x2.c      **** * safety or security sensitive systems or any system or device
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 2


  21:bma2x2.c      **** * that may lead to bodily harm or property damage if the system
  22:bma2x2.c      **** * or device malfunctions. In addition,Bosch Sensortec products are
  23:bma2x2.c      **** * not fit for use in products which interact with motor vehicle systems.
  24:bma2x2.c      **** * The resale and or use of products are at the purchasers own risk and
  25:bma2x2.c      **** * his own responsibility. The examination of fitness for the intended use
  26:bma2x2.c      **** * is the sole responsibility of the Purchaser.
  27:bma2x2.c      **** *
  28:bma2x2.c      **** * The purchaser shall indemnify Bosch Sensortec from all third party
  29:bma2x2.c      **** * claims, including any claims for incidental, or consequential damages,
  30:bma2x2.c      **** * arising from any product use not covered by the parameters of
  31:bma2x2.c      **** * the respective valid product data sheet or not approved by
  32:bma2x2.c      **** * Bosch Sensortec and reimburse Bosch Sensortec for all costs in
  33:bma2x2.c      **** * connection with such claims.
  34:bma2x2.c      **** *
  35:bma2x2.c      **** * The purchaser must monitor the market for the purchased products,
  36:bma2x2.c      **** * particularly with regard to product safety and inform Bosch Sensortec
  37:bma2x2.c      **** * without delay of all security relevant incidents.
  38:bma2x2.c      **** *
  39:bma2x2.c      **** * Engineering Samples are marked with an asterisk (*) or (e).
  40:bma2x2.c      **** * Samples may vary from the valid technical specifications of the product
  41:bma2x2.c      **** * series. They are therefore not intended or fit for resale to third
  42:bma2x2.c      **** * parties or for use in end products. Their sole purpose is internal
  43:bma2x2.c      **** * client testing. The testing of an engineering sample may in no way
  44:bma2x2.c      **** * replace the testing of a product series. Bosch Sensortec assumes
  45:bma2x2.c      **** * no liability for the use of engineering samples.
  46:bma2x2.c      **** * By accepting the engineering samples, the Purchaser agrees to indemnify
  47:bma2x2.c      **** * Bosch Sensortec from all claims arising from the use of engineering
  48:bma2x2.c      **** * samples.
  49:bma2x2.c      **** *
  50:bma2x2.c      **** * Special:
  51:bma2x2.c      **** * This software module (hereinafter called "Software") and any information
  52:bma2x2.c      **** * on application-sheets (hereinafter called "Information") is provided
  53:bma2x2.c      **** * free of charge for the sole purpose to support your application work.
  54:bma2x2.c      **** * The Software and Information is subject to the following
  55:bma2x2.c      **** * terms and conditions:
  56:bma2x2.c      **** *
  57:bma2x2.c      **** * The Software is specifically designed for the exclusive use for
  58:bma2x2.c      **** * Bosch Sensortec products by personnel who have special experience
  59:bma2x2.c      **** * and training. Do not use this Software if you do not have the
  60:bma2x2.c      **** * proper experience or training.
  61:bma2x2.c      **** *
  62:bma2x2.c      **** * This Software package is provided `` as is `` and without any expressed
  63:bma2x2.c      **** * or implied warranties,including without limitation, the implied warranties
  64:bma2x2.c      **** * of merchantability and fitness for a particular purpose.
  65:bma2x2.c      **** *
  66:bma2x2.c      **** * Bosch Sensortec and their representatives and agents deny any liability
  67:bma2x2.c      **** * for the functional impairment
  68:bma2x2.c      **** * of this Software in terms of fitness, performance and safety.
  69:bma2x2.c      **** * Bosch Sensortec and their representatives and agents shall not be liable
  70:bma2x2.c      **** * for any direct or indirect damages or injury, except as
  71:bma2x2.c      **** * otherwise stipulated in mandatory applicable law.
  72:bma2x2.c      **** *
  73:bma2x2.c      **** * The Information provided is believed to be accurate and reliable.
  74:bma2x2.c      **** * Bosch Sensortec assumes no responsibility for the consequences of use
  75:bma2x2.c      **** * of such Information nor for any infringement of patents or
  76:bma2x2.c      **** * other rights of third parties which may result from its use.
  77:bma2x2.c      **** * No license is granted by implication or otherwise under any patent or
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 3


  78:bma2x2.c      **** * patent rights of Bosch. Specifications mentioned in the Information are
  79:bma2x2.c      **** * subject to change without notice.
  80:bma2x2.c      **** **************************************************************************/
  81:bma2x2.c      **** /*! file <BMA2x2 >
  82:bma2x2.c      ****     brief <Sensor driver for BMA2x2> */
  83:bma2x2.c      **** #include "bma2x2.h"
  84:bma2x2.c      **** /*! user defined code to be added here ... */
  85:bma2x2.c      **** static struct bma2x2_t *p_bma2x2;
  86:bma2x2.c      **** /*! Based on Bit resolution value_u8 should be modified */
  87:bma2x2.c      **** u8 V_BMA2x2RESOLUTION_U8 = BMA2x2_14_RESOLUTION;
  88:bma2x2.c      **** 
  89:bma2x2.c      **** /****************************************************************************/
  90:bma2x2.c      **** /*!	Static Function Declarations
  91:bma2x2.c      **** *****************************************************************************/
  92:bma2x2.c      **** /*!
  93:bma2x2.c      ****  *  @brief This API computes the number of bytes of accel FIFO data
  94:bma2x2.c      ****  *  which is to be parsed.
  95:bma2x2.c      ****  *
  96:bma2x2.c      ****  *  @param[out] data_index       : The start index for parsing data
  97:bma2x2.c      ****  *  @param[out] data_read_length : No of bytes to be parsed from FIFO buffer
  98:bma2x2.c      ****  *  @param[in] accel_frame_count : Number of accelerometer frames to be read
  99:bma2x2.c      ****  *  @param[in] fifo_data_select  : Denoting enabled axes data stored in FIFO
 100:bma2x2.c      ****  *  @param[in] fifo_conf         : FIFO configuration structure
 101:bma2x2.c      ****  *
 102:bma2x2.c      ****  */
 103:bma2x2.c      **** static void get_accel_len_to_parse(u8 *data_index, u8 *data_read_length,
 104:bma2x2.c      **** 		u8 accel_frame_count, u8 fifo_data_select,
 105:bma2x2.c      **** 		struct fifo_configuration *fifo_conf);
 106:bma2x2.c      **** 
 107:bma2x2.c      **** /*!
 108:bma2x2.c      ****  *  @brief This API is used to parse the accelerometer frame from the
 109:bma2x2.c      ****  *  user defined FIFO data buffer mapped to the structure fifo_conf and store
 110:bma2x2.c      ****  *  it in the union fifo_frame
 111:bma2x2.c      ****  *
 112:bma2x2.c      ****  *  @note It update the data_index value which is used to store the index of
 113:bma2x2.c      ****  *  the current data byte which is parsed.
 114:bma2x2.c      ****  *
 115:bma2x2.c      ****  *  @note The parsed accel frames stored in the union fifo_conf contains data
 116:bma2x2.c      ****  *  in accordance with the enabled data axes to be stored in FIFO
 117:bma2x2.c      ****  *  (XYZ axes or individual axis)
 118:bma2x2.c      ****  *
 119:bma2x2.c      ****  *  @param[in,out] accel_frame  : Instance of union fifo_frame
 120:bma2x2.c      ****  *  @param[in,out] data_index   : Index value of noumber of bytes parsed
 121:bma2x2.c      ****  *  @param[in,out] accel_index  : Index value of accelerometer frame parsed
 122:bma2x2.c      ****  *  @param[in] fifo_data_select : Denoting enabled axes data stored in FIFO
 123:bma2x2.c      ****  *  @param[in] fifo_conf        : FIFO configuration structure
 124:bma2x2.c      ****  *
 125:bma2x2.c      ****  */
 126:bma2x2.c      **** static void unpack_accel_frame(union fifo_frame *accel_frame, u8 *data_index,
 127:bma2x2.c      **** 		u8 *accel_index, u8 fifo_data_select,
 128:bma2x2.c      **** 		struct fifo_configuration *fifo_conf);
 129:bma2x2.c      **** 
 130:bma2x2.c      **** /*!
 131:bma2x2.c      ****  *  @brief This API is used to parse the accelerometer data and
 132:bma2x2.c      ****  *  store it in the union fifo_frame
 133:bma2x2.c      ****  *  It also updates the data_index value which stores the index of
 134:bma2x2.c      ****  *  the current data byte which is parsed
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 4


 135:bma2x2.c      ****  *
 136:bma2x2.c      ****  *  @param[in,out] accel_frame  : Instance of union fifo_frame
 137:bma2x2.c      ****  *  @param[in,out] data_index   : Index value of noumber of bytes parsed
 138:bma2x2.c      ****  *  @param[in] fifo_conf        : FIFO configuration structure
 139:bma2x2.c      ****  *
 140:bma2x2.c      ****  */
 141:bma2x2.c      **** static void unpack_accel_xyz(union fifo_frame *accel_frame, u8 *data_index,
 142:bma2x2.c      **** 		struct fifo_configuration *fifo_conf);
 143:bma2x2.c      **** /*!
 144:bma2x2.c      ****  * @brief
 145:bma2x2.c      ****  *	This API reads the data from
 146:bma2x2.c      ****  *	the given register continuously
 147:bma2x2.c      ****  *
 148:bma2x2.c      ****  *
 149:bma2x2.c      ****  *	@param addr_u8 -> Address of the register
 150:bma2x2.c      ****  *	@param data_u8 -> The data from the register
 151:bma2x2.c      ****  *	@param len_u32 -> no of bytes to read
 152:bma2x2.c      ****  *
 153:bma2x2.c      ****  *
 154:bma2x2.c      ****  *	@return results of bus communication function
 155:bma2x2.c      ****  *	@retval 0 -> Success
 156:bma2x2.c      ****  *	@retval -1 -> Error
 157:bma2x2.c      ****  *
 158:bma2x2.c      ****  *
 159:bma2x2.c      ****  */
 160:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_burst_read(u8 addr_u8,
 161:bma2x2.c      **** u8 *data_u8, u32 len_u32)
 162:bma2x2.c      **** {
  38              		.loc 1 162 0
  39              		.cfi_startproc
  40              		@ args = 0, pretend = 0, frame = 24
  41              		@ frame_needed = 1, uses_anonymous_args = 0
  42 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  43              		.cfi_def_cfa_offset 20
  44              		.cfi_offset 4, -20
  45              		.cfi_offset 5, -16
  46              		.cfi_offset 6, -12
  47              		.cfi_offset 7, -8
  48              		.cfi_offset 14, -4
  49 0002 87B0     		sub	sp, sp, #28
  50              		.cfi_def_cfa_offset 48
  51 0004 00AF     		add	r7, sp, #0
  52              		.cfi_def_cfa_register 7
  53 0006 B960     		str	r1, [r7, #8]
  54 0008 7A60     		str	r2, [r7, #4]
  55 000a 0F23     		movs	r3, #15
  56 000c FB18     		adds	r3, r7, r3
  57 000e 021C     		adds	r2, r0, #0
  58 0010 1A70     		strb	r2, [r3]
 163:bma2x2.c      **** 	/* Variable used to return value of
 164:bma2x2.c      **** 	communication routine*/
 165:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
  59              		.loc 1 165 0
  60 0012 1723     		movs	r3, #23
  61 0014 FB18     		adds	r3, r7, r3
  62 0016 FF22     		movs	r2, #255
  63 0018 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 5


 166:bma2x2.c      **** 
 167:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
  64              		.loc 1 167 0
  65 001a 104B     		ldr	r3, .L4
  66 001c 1B68     		ldr	r3, [r3]
  67 001e 002B     		cmp	r3, #0
  68 0020 02D1     		bne	.L2
 168:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
 169:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
  69              		.loc 1 169 0
  70 0022 7F23     		movs	r3, #127
  71 0024 5B42     		rsbs	r3, r3, #0
  72 0026 14E0     		b	.L3
  73              	.L2:
 170:bma2x2.c      **** 		} else {
 171:bma2x2.c      **** 			/* Read the data from the register*/
 172:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BURST_READ_FUNC
  74              		.loc 1 172 0
  75 0028 0C4B     		ldr	r3, .L4
  76 002a 1B68     		ldr	r3, [r3]
  77 002c 1D69     		ldr	r5, [r3, #16]
  78 002e 0B4B     		ldr	r3, .L4
  79 0030 1B68     		ldr	r3, [r3]
  80 0032 1879     		ldrb	r0, [r3, #4]
  81 0034 1723     		movs	r3, #23
  82 0036 FC18     		adds	r4, r7, r3
  83 0038 7E68     		ldr	r6, [r7, #4]
  84 003a BA68     		ldr	r2, [r7, #8]
  85 003c 0F23     		movs	r3, #15
  86 003e FB18     		adds	r3, r7, r3
  87 0040 1978     		ldrb	r1, [r3]
  88 0042 3300     		movs	r3, r6
  89 0044 A847     		blx	r5
  90 0046 0300     		movs	r3, r0
  91 0048 2370     		strb	r3, [r4]
 173:bma2x2.c      **** 			(p_bma2x2->dev_addr, addr_u8, data_u8, len_u32);
 174:bma2x2.c      **** 		}
 175:bma2x2.c      **** 	return com_rslt;
  92              		.loc 1 175 0
  93 004a 1723     		movs	r3, #23
  94 004c FB18     		adds	r3, r7, r3
  95 004e 1B78     		ldrb	r3, [r3]
  96 0050 5BB2     		sxtb	r3, r3
  97              	.L3:
 176:bma2x2.c      **** }
  98              		.loc 1 176 0
  99 0052 1800     		movs	r0, r3
 100 0054 BD46     		mov	sp, r7
 101 0056 07B0     		add	sp, sp, #28
 102              		@ sp needed
 103 0058 F0BD     		pop	{r4, r5, r6, r7, pc}
 104              	.L5:
 105 005a C046     		.align	2
 106              	.L4:
 107 005c 00000000 		.word	p_bma2x2
 108              		.cfi_endproc
 109              	.LFE0:
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 6


 110              		.size	bma2x2_burst_read, .-bma2x2_burst_read
 111              		.section	.text.bma2x2_init,"ax",%progbits
 112              		.align	2
 113              		.global	bma2x2_init
 114              		.code	16
 115              		.thumb_func
 116              		.type	bma2x2_init, %function
 117              	bma2x2_init:
 118              	.LFB1:
 177:bma2x2.c      **** /*!
 178:bma2x2.c      ****  *	@brief
 179:bma2x2.c      ****  *	This function is used for initialize
 180:bma2x2.c      ****  *	bus read and bus write functions
 181:bma2x2.c      ****  *	assign the chip id and device address
 182:bma2x2.c      ****  *	chip id is read in the register 0x00 bit from 0 to 7
 183:bma2x2.c      ****  *
 184:bma2x2.c      ****  *	@param bma2x2 : structure pointer
 185:bma2x2.c      ****  *
 186:bma2x2.c      ****  *	@return results of bus communication function
 187:bma2x2.c      ****  *	@retval 0 -> Success
 188:bma2x2.c      ****  *	@retval -1 -> Error
 189:bma2x2.c      ****  *
 190:bma2x2.c      ****  *	@note
 191:bma2x2.c      ****  *	While changing the parameter of the bma2x2_t
 192:bma2x2.c      ****  *	consider the following point:
 193:bma2x2.c      ****  *	Changing the reference value of the parameter
 194:bma2x2.c      ****  *	will changes the local copy or local reference
 195:bma2x2.c      ****  *	make sure your changes will not
 196:bma2x2.c      ****  *	affect the reference value of the parameter
 197:bma2x2.c      ****  *	(Better case don't change the reference value of the parameter)
 198:bma2x2.c      ****  *
 199:bma2x2.c      **** */
 200:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_init(struct bma2x2_t *bma2x2)
 201:bma2x2.c      **** {
 119              		.loc 1 201 0
 120              		.cfi_startproc
 121              		@ args = 0, pretend = 0, frame = 16
 122              		@ frame_needed = 1, uses_anonymous_args = 0
 123 0000 B0B5     		push	{r4, r5, r7, lr}
 124              		.cfi_def_cfa_offset 16
 125              		.cfi_offset 4, -16
 126              		.cfi_offset 5, -12
 127              		.cfi_offset 7, -8
 128              		.cfi_offset 14, -4
 129 0002 84B0     		sub	sp, sp, #16
 130              		.cfi_def_cfa_offset 32
 131 0004 00AF     		add	r7, sp, #0
 132              		.cfi_def_cfa_register 7
 133 0006 7860     		str	r0, [r7, #4]
 202:bma2x2.c      **** 	/*  Variable used to return value of
 203:bma2x2.c      **** 	communication routine*/
 204:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 134              		.loc 1 204 0
 135 0008 0F23     		movs	r3, #15
 136 000a FB18     		adds	r3, r7, r3
 137 000c FF22     		movs	r2, #255
 138 000e 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 7


 205:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 139              		.loc 1 205 0
 140 0010 0E23     		movs	r3, #14
 141 0012 FB18     		adds	r3, r7, r3
 142 0014 0022     		movs	r2, #0
 143 0016 1A70     		strb	r2, [r3]
 206:bma2x2.c      **** 	u8 config_data_u8 = BMA2x2_INIT_VALUE;
 144              		.loc 1 206 0
 145 0018 0D23     		movs	r3, #13
 146 001a FB18     		adds	r3, r7, r3
 147 001c 0022     		movs	r2, #0
 148 001e 1A70     		strb	r2, [r3]
 207:bma2x2.c      **** 	/* assign bma2x2 ptr */
 208:bma2x2.c      **** 	p_bma2x2 = bma2x2;
 149              		.loc 1 208 0
 150 0020 1F4B     		ldr	r3, .L10
 151 0022 7A68     		ldr	r2, [r7, #4]
 152 0024 1A60     		str	r2, [r3]
 209:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 153              		.loc 1 209 0
 154 0026 1E4B     		ldr	r3, .L10
 155 0028 1B68     		ldr	r3, [r3]
 156 002a 002B     		cmp	r3, #0
 157 002c 04D1     		bne	.L7
 210:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
 211:bma2x2.c      **** 		com_rslt = E_BMA2x2_NULL_PTR;
 158              		.loc 1 211 0
 159 002e 0F23     		movs	r3, #15
 160 0030 FB18     		adds	r3, r7, r3
 161 0032 8122     		movs	r2, #129
 162 0034 1A70     		strb	r2, [r3]
 163 0036 2BE0     		b	.L8
 164              	.L7:
 212:bma2x2.c      **** 	} else {
 213:bma2x2.c      **** 		/* read Chip Id */
 214:bma2x2.c      **** 		com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 165              		.loc 1 214 0
 166 0038 194B     		ldr	r3, .L10
 167 003a 1B68     		ldr	r3, [r3]
 168 003c DD68     		ldr	r5, [r3, #12]
 169 003e 184B     		ldr	r3, .L10
 170 0040 1B68     		ldr	r3, [r3]
 171 0042 1879     		ldrb	r0, [r3, #4]
 172 0044 0F23     		movs	r3, #15
 173 0046 FC18     		adds	r4, r7, r3
 174 0048 0E23     		movs	r3, #14
 175 004a FA18     		adds	r2, r7, r3
 176 004c 0123     		movs	r3, #1
 177 004e 0021     		movs	r1, #0
 178 0050 A847     		blx	r5
 179 0052 0300     		movs	r3, r0
 180 0054 2370     		strb	r3, [r4]
 215:bma2x2.c      **** 		(p_bma2x2->dev_addr,
 216:bma2x2.c      **** 		BMA2x2_CHIP_ID_REG, &data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
 217:bma2x2.c      **** 		p_bma2x2->chip_id = data_u8;    /* get bit slice */
 181              		.loc 1 217 0
 182 0056 124B     		ldr	r3, .L10
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 8


 183 0058 1B68     		ldr	r3, [r3]
 184 005a 0E22     		movs	r2, #14
 185 005c BA18     		adds	r2, r7, r2
 186 005e 1278     		ldrb	r2, [r2]
 187 0060 5A70     		strb	r2, [r3, #1]
 218:bma2x2.c      **** 		/* read the fifo config register and update
 219:bma2x2.c      **** 		the value to the fifo_config*/
 220:bma2x2.c      **** 		com_rslt += bma2x2_read_reg(BMA2x2_FIFO_MODE_REG,
 188              		.loc 1 220 0
 189 0062 0D23     		movs	r3, #13
 190 0064 FB18     		adds	r3, r7, r3
 191 0066 0122     		movs	r2, #1
 192 0068 1900     		movs	r1, r3
 193 006a 3E20     		movs	r0, #62
 194 006c FFF7FEFF 		bl	bma2x2_read_reg
 195 0070 0300     		movs	r3, r0
 196 0072 DAB2     		uxtb	r2, r3
 197 0074 0F23     		movs	r3, #15
 198 0076 FB18     		adds	r3, r7, r3
 199 0078 1B78     		ldrb	r3, [r3]
 200 007a D318     		adds	r3, r2, r3
 201 007c DAB2     		uxtb	r2, r3
 202 007e 0F23     		movs	r3, #15
 203 0080 FB18     		adds	r3, r7, r3
 204 0082 1A70     		strb	r2, [r3]
 221:bma2x2.c      **** 		&config_data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
 222:bma2x2.c      **** 		p_bma2x2->fifo_config = config_data_u8;
 205              		.loc 1 222 0
 206 0084 064B     		ldr	r3, .L10
 207 0086 1B68     		ldr	r3, [r3]
 208 0088 0D22     		movs	r2, #13
 209 008a BA18     		adds	r2, r7, r2
 210 008c 1278     		ldrb	r2, [r2]
 211 008e 5A71     		strb	r2, [r3, #5]
 212              	.L8:
 223:bma2x2.c      **** 	}
 224:bma2x2.c      **** 	return com_rslt;
 213              		.loc 1 224 0
 214 0090 0F23     		movs	r3, #15
 215 0092 FB18     		adds	r3, r7, r3
 216 0094 1B78     		ldrb	r3, [r3]
 217 0096 5BB2     		sxtb	r3, r3
 225:bma2x2.c      **** }
 218              		.loc 1 225 0
 219 0098 1800     		movs	r0, r3
 220 009a BD46     		mov	sp, r7
 221 009c 04B0     		add	sp, sp, #16
 222              		@ sp needed
 223 009e B0BD     		pop	{r4, r5, r7, pc}
 224              	.L11:
 225              		.align	2
 226              	.L10:
 227 00a0 00000000 		.word	p_bma2x2
 228              		.cfi_endproc
 229              	.LFE1:
 230              		.size	bma2x2_init, .-bma2x2_init
 231              		.section	.text.bma2x2_write_reg,"ax",%progbits
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 9


 232              		.align	2
 233              		.global	bma2x2_write_reg
 234              		.code	16
 235              		.thumb_func
 236              		.type	bma2x2_write_reg, %function
 237              	bma2x2_write_reg:
 238              	.LFB2:
 226:bma2x2.c      **** /*!
 227:bma2x2.c      ****  * @brief
 228:bma2x2.c      ****  *	This API gives data to the given register and
 229:bma2x2.c      ****  *	the data is written in the corresponding register address
 230:bma2x2.c      ****  *
 231:bma2x2.c      ****  *
 232:bma2x2.c      ****  *	@param adr_u8  -> Address of the register
 233:bma2x2.c      ****  *	@param data_u8 -> The data to the register
 234:bma2x2.c      ****  *	@param len_u8 -> no of bytes to read
 235:bma2x2.c      ****  *
 236:bma2x2.c      ****  *
 237:bma2x2.c      ****  *
 238:bma2x2.c      ****  *	@return results of bus communication function
 239:bma2x2.c      ****  *	@retval 0 -> Success
 240:bma2x2.c      ****  *	@retval -1 -> Error
 241:bma2x2.c      ****  *
 242:bma2x2.c      ****  *
 243:bma2x2.c      **** */
 244:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_write_reg(u8 adr_u8,
 245:bma2x2.c      **** u8 *data_u8, u8 len_u8)
 246:bma2x2.c      **** {
 239              		.loc 1 246 0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 16
 242              		@ frame_needed = 1, uses_anonymous_args = 0
 243 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 244              		.cfi_def_cfa_offset 20
 245              		.cfi_offset 4, -20
 246              		.cfi_offset 5, -16
 247              		.cfi_offset 6, -12
 248              		.cfi_offset 7, -8
 249              		.cfi_offset 14, -4
 250 0002 85B0     		sub	sp, sp, #20
 251              		.cfi_def_cfa_offset 40
 252 0004 00AF     		add	r7, sp, #0
 253              		.cfi_def_cfa_register 7
 254 0006 3960     		str	r1, [r7]
 255 0008 1100     		movs	r1, r2
 256 000a FB1D     		adds	r3, r7, #7
 257 000c 021C     		adds	r2, r0, #0
 258 000e 1A70     		strb	r2, [r3]
 259 0010 BB1D     		adds	r3, r7, #6
 260 0012 0A1C     		adds	r2, r1, #0
 261 0014 1A70     		strb	r2, [r3]
 247:bma2x2.c      **** 	/*  Variable used to return value of
 248:bma2x2.c      **** 	communication routine*/
 249:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 262              		.loc 1 249 0
 263 0016 0F23     		movs	r3, #15
 264 0018 FB18     		adds	r3, r7, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 10


 265 001a FF22     		movs	r2, #255
 266 001c 1A70     		strb	r2, [r3]
 250:bma2x2.c      **** 
 251:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 267              		.loc 1 251 0
 268 001e 154B     		ldr	r3, .L16
 269 0020 1B68     		ldr	r3, [r3]
 270 0022 002B     		cmp	r3, #0
 271 0024 02D1     		bne	.L13
 252:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
 253:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 272              		.loc 1 253 0
 273 0026 7F23     		movs	r3, #127
 274 0028 5B42     		rsbs	r3, r3, #0
 275 002a 1EE0     		b	.L14
 276              	.L13:
 254:bma2x2.c      **** 		} else {
 255:bma2x2.c      **** 		/* Write the data to the register*/
 256:bma2x2.c      **** 		com_rslt = p_bma2x2->BMA2x2_BUS_WRITE_FUNC
 277              		.loc 1 256 0
 278 002c 114B     		ldr	r3, .L16
 279 002e 1B68     		ldr	r3, [r3]
 280 0030 9D68     		ldr	r5, [r3, #8]
 281 0032 104B     		ldr	r3, .L16
 282 0034 1B68     		ldr	r3, [r3]
 283 0036 1879     		ldrb	r0, [r3, #4]
 284 0038 0F23     		movs	r3, #15
 285 003a FC18     		adds	r4, r7, r3
 286 003c BB1D     		adds	r3, r7, #6
 287 003e 1E78     		ldrb	r6, [r3]
 288 0040 3A68     		ldr	r2, [r7]
 289 0042 FB1D     		adds	r3, r7, #7
 290 0044 1978     		ldrb	r1, [r3]
 291 0046 3300     		movs	r3, r6
 292 0048 A847     		blx	r5
 293 004a 0300     		movs	r3, r0
 294 004c 2370     		strb	r3, [r4]
 257:bma2x2.c      **** 		(p_bma2x2->dev_addr, adr_u8, data_u8, len_u8);
 258:bma2x2.c      **** 
 259:bma2x2.c      **** 		if (p_bma2x2->power_mode_u8 != BMA2x2_MODE_NORMAL) {
 295              		.loc 1 259 0
 296 004e 094B     		ldr	r3, .L16
 297 0050 1B68     		ldr	r3, [r3]
 298 0052 1B78     		ldrb	r3, [r3]
 299 0054 002B     		cmp	r3, #0
 300 0056 04D0     		beq	.L15
 260:bma2x2.c      **** 			/*A minimum interface idle time delay
 261:bma2x2.c      **** 			of atleast 450us is required as per the data sheet.*/
 262:bma2x2.c      **** 			p_bma2x2->delay_msec(BMA2x2_INTERFACE_IDLE_TIME_DELAY);
 301              		.loc 1 262 0
 302 0058 064B     		ldr	r3, .L16
 303 005a 1B68     		ldr	r3, [r3]
 304 005c 5B69     		ldr	r3, [r3, #20]
 305 005e 0120     		movs	r0, #1
 306 0060 9847     		blx	r3
 307              	.L15:
 263:bma2x2.c      **** 		}
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 11


 264:bma2x2.c      **** 	}
 265:bma2x2.c      **** 	return com_rslt;
 308              		.loc 1 265 0
 309 0062 0F23     		movs	r3, #15
 310 0064 FB18     		adds	r3, r7, r3
 311 0066 1B78     		ldrb	r3, [r3]
 312 0068 5BB2     		sxtb	r3, r3
 313              	.L14:
 266:bma2x2.c      **** }
 314              		.loc 1 266 0
 315 006a 1800     		movs	r0, r3
 316 006c BD46     		mov	sp, r7
 317 006e 05B0     		add	sp, sp, #20
 318              		@ sp needed
 319 0070 F0BD     		pop	{r4, r5, r6, r7, pc}
 320              	.L17:
 321 0072 C046     		.align	2
 322              	.L16:
 323 0074 00000000 		.word	p_bma2x2
 324              		.cfi_endproc
 325              	.LFE2:
 326              		.size	bma2x2_write_reg, .-bma2x2_write_reg
 327              		.section	.text.bma2x2_read_reg,"ax",%progbits
 328              		.align	2
 329              		.global	bma2x2_read_reg
 330              		.code	16
 331              		.thumb_func
 332              		.type	bma2x2_read_reg, %function
 333              	bma2x2_read_reg:
 334              	.LFB3:
 267:bma2x2.c      **** /*!
 268:bma2x2.c      ****  * @brief This API reads the data from
 269:bma2x2.c      ****  *           the given register address
 270:bma2x2.c      ****  *
 271:bma2x2.c      ****  *
 272:bma2x2.c      ****  *	@param adr_u8 -> Address of the register
 273:bma2x2.c      ****  *	@param data_u8 -> The data from the register
 274:bma2x2.c      ****  *	@param len_u8 -> no of bytes to read
 275:bma2x2.c      ****  *
 276:bma2x2.c      ****  *
 277:bma2x2.c      ****  *
 278:bma2x2.c      ****  *	@return results of bus communication function
 279:bma2x2.c      ****  *	@retval 0 -> Success
 280:bma2x2.c      ****  *	@retval -1 -> Error
 281:bma2x2.c      ****  *
 282:bma2x2.c      ****  *
 283:bma2x2.c      **** */
 284:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_read_reg(u8 adr_u8,
 285:bma2x2.c      **** u8 *data_u8, u8 len_u8)
 286:bma2x2.c      **** {
 335              		.loc 1 286 0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 16
 338              		@ frame_needed = 1, uses_anonymous_args = 0
 339 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 340              		.cfi_def_cfa_offset 20
 341              		.cfi_offset 4, -20
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 12


 342              		.cfi_offset 5, -16
 343              		.cfi_offset 6, -12
 344              		.cfi_offset 7, -8
 345              		.cfi_offset 14, -4
 346 0002 85B0     		sub	sp, sp, #20
 347              		.cfi_def_cfa_offset 40
 348 0004 00AF     		add	r7, sp, #0
 349              		.cfi_def_cfa_register 7
 350 0006 3960     		str	r1, [r7]
 351 0008 1100     		movs	r1, r2
 352 000a FB1D     		adds	r3, r7, #7
 353 000c 021C     		adds	r2, r0, #0
 354 000e 1A70     		strb	r2, [r3]
 355 0010 BB1D     		adds	r3, r7, #6
 356 0012 0A1C     		adds	r2, r1, #0
 357 0014 1A70     		strb	r2, [r3]
 287:bma2x2.c      **** 	/*  Variable used to return value of
 288:bma2x2.c      **** 	communication routine*/
 289:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 358              		.loc 1 289 0
 359 0016 0F23     		movs	r3, #15
 360 0018 FB18     		adds	r3, r7, r3
 361 001a FF22     		movs	r2, #255
 362 001c 1A70     		strb	r2, [r3]
 290:bma2x2.c      **** 
 291:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 363              		.loc 1 291 0
 364 001e 104B     		ldr	r3, .L21
 365 0020 1B68     		ldr	r3, [r3]
 366 0022 002B     		cmp	r3, #0
 367 0024 02D1     		bne	.L19
 292:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
 293:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 368              		.loc 1 293 0
 369 0026 7F23     		movs	r3, #127
 370 0028 5B42     		rsbs	r3, r3, #0
 371 002a 14E0     		b	.L20
 372              	.L19:
 294:bma2x2.c      **** 		} else {
 295:bma2x2.c      **** 			/*Read the data from the register*/
 296:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 373              		.loc 1 296 0
 374 002c 0C4B     		ldr	r3, .L21
 375 002e 1B68     		ldr	r3, [r3]
 376 0030 DD68     		ldr	r5, [r3, #12]
 377 0032 0B4B     		ldr	r3, .L21
 378 0034 1B68     		ldr	r3, [r3]
 379 0036 1879     		ldrb	r0, [r3, #4]
 380 0038 0F23     		movs	r3, #15
 381 003a FC18     		adds	r4, r7, r3
 382 003c BB1D     		adds	r3, r7, #6
 383 003e 1E78     		ldrb	r6, [r3]
 384 0040 3A68     		ldr	r2, [r7]
 385 0042 FB1D     		adds	r3, r7, #7
 386 0044 1978     		ldrb	r1, [r3]
 387 0046 3300     		movs	r3, r6
 388 0048 A847     		blx	r5
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 13


 389 004a 0300     		movs	r3, r0
 390 004c 2370     		strb	r3, [r4]
 297:bma2x2.c      **** 			(p_bma2x2->dev_addr, adr_u8, data_u8, len_u8);
 298:bma2x2.c      **** 		}
 299:bma2x2.c      **** 	return com_rslt;
 391              		.loc 1 299 0
 392 004e 0F23     		movs	r3, #15
 393 0050 FB18     		adds	r3, r7, r3
 394 0052 1B78     		ldrb	r3, [r3]
 395 0054 5BB2     		sxtb	r3, r3
 396              	.L20:
 300:bma2x2.c      **** }
 397              		.loc 1 300 0
 398 0056 1800     		movs	r0, r3
 399 0058 BD46     		mov	sp, r7
 400 005a 05B0     		add	sp, sp, #20
 401              		@ sp needed
 402 005c F0BD     		pop	{r4, r5, r6, r7, pc}
 403              	.L22:
 404 005e C046     		.align	2
 405              	.L21:
 406 0060 00000000 		.word	p_bma2x2
 407              		.cfi_endproc
 408              	.LFE3:
 409              		.size	bma2x2_read_reg, .-bma2x2_read_reg
 410              		.section	.text.bma2x2_read_accel_x,"ax",%progbits
 411              		.align	2
 412              		.global	bma2x2_read_accel_x
 413              		.code	16
 414              		.thumb_func
 415              		.type	bma2x2_read_accel_x, %function
 416              	bma2x2_read_accel_x:
 417              	.LFB4:
 301:bma2x2.c      **** /*!
 302:bma2x2.c      ****  * @brief
 303:bma2x2.c      ****  *	This API reads acceleration data X values
 304:bma2x2.c      ****  *	from location 02h and 03h
 305:bma2x2.c      ****  *
 306:bma2x2.c      ****  *
 307:bma2x2.c      ****  *  @param   accel_x_s16 : pointer holding the data of accel X
 308:bma2x2.c      ****  *		       value       |   resolution
 309:bma2x2.c      ****  *       ----------------- | --------------
 310:bma2x2.c      ****  *              0          | BMA2x2_12_RESOLUTION
 311:bma2x2.c      ****  *              1          | BMA2x2_10_RESOLUTION
 312:bma2x2.c      ****  *              2          | BMA2x2_14_RESOLUTION
 313:bma2x2.c      ****  *
 314:bma2x2.c      ****  *
 315:bma2x2.c      ****  *	@return results of bus communication function
 316:bma2x2.c      ****  *	@retval 0 -> Success
 317:bma2x2.c      ****  *	@retval -1 -> Error
 318:bma2x2.c      ****  *
 319:bma2x2.c      ****  *
 320:bma2x2.c      ****  */
 321:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_read_accel_x(s16 *accel_x_s16)
 322:bma2x2.c      **** {
 418              		.loc 1 322 0
 419              		.cfi_startproc
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 14


 420              		@ args = 0, pretend = 0, frame = 16
 421              		@ frame_needed = 1, uses_anonymous_args = 0
 422 0000 B0B5     		push	{r4, r5, r7, lr}
 423              		.cfi_def_cfa_offset 16
 424              		.cfi_offset 4, -16
 425              		.cfi_offset 5, -12
 426              		.cfi_offset 7, -8
 427              		.cfi_offset 14, -4
 428 0002 84B0     		sub	sp, sp, #16
 429              		.cfi_def_cfa_offset 32
 430 0004 00AF     		add	r7, sp, #0
 431              		.cfi_def_cfa_register 7
 432 0006 7860     		str	r0, [r7, #4]
 323:bma2x2.c      **** 	/*  Variable used to return value of
 324:bma2x2.c      **** 	communication routine*/
 325:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 433              		.loc 1 325 0
 434 0008 0F23     		movs	r3, #15
 435 000a FB18     		adds	r3, r7, r3
 436 000c FF22     		movs	r2, #255
 437 000e 1A70     		strb	r2, [r3]
 326:bma2x2.c      **** 	/* Array holding the accel x value
 327:bma2x2.c      **** 	data_u8[0] - x->LSB
 328:bma2x2.c      **** 	data_u8[1] - x->MSB
 329:bma2x2.c      **** 	*/
 330:bma2x2.c      **** 	u8	data_u8[BMA2x2_ACCEL_DATA_SIZE] = {
 438              		.loc 1 330 0
 439 0010 0C23     		movs	r3, #12
 440 0012 FB18     		adds	r3, r7, r3
 441 0014 0022     		movs	r2, #0
 442 0016 1A70     		strb	r2, [r3]
 443 0018 0C23     		movs	r3, #12
 444 001a FB18     		adds	r3, r7, r3
 445 001c 0022     		movs	r2, #0
 446 001e 5A70     		strb	r2, [r3, #1]
 331:bma2x2.c      **** 	BMA2x2_INIT_VALUE, BMA2x2_INIT_VALUE};
 332:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 447              		.loc 1 332 0
 448 0020 474B     		ldr	r3, .L32
 449 0022 1B68     		ldr	r3, [r3]
 450 0024 002B     		cmp	r3, #0
 451 0026 02D1     		bne	.L24
 333:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
 334:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 452              		.loc 1 334 0
 453 0028 7F23     		movs	r3, #127
 454 002a 5B42     		rsbs	r3, r3, #0
 455 002c 84E0     		b	.L31
 456              	.L24:
 335:bma2x2.c      **** 		} else {
 336:bma2x2.c      **** 		switch (V_BMA2x2RESOLUTION_U8) {
 457              		.loc 1 336 0
 458 002e 454B     		ldr	r3, .L32+4
 459 0030 1B78     		ldrb	r3, [r3]
 460 0032 012B     		cmp	r3, #1
 461 0034 2CD0     		beq	.L27
 462 0036 022B     		cmp	r3, #2
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 15


 463 0038 52D0     		beq	.L28
 464 003a 002B     		cmp	r3, #0
 465 003c 00D0     		beq	.L29
 337:bma2x2.c      **** 		/* This case used for the resolution bit 12*/
 338:bma2x2.c      **** 		case BMA2x2_12_RESOLUTION:
 339:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 340:bma2x2.c      **** 			(p_bma2x2->dev_addr,
 341:bma2x2.c      **** 			BMA2x2_ACCEL_X12_LSB_REG, data_u8,
 342:bma2x2.c      **** 			BMA2x2_LSB_MSB_READ_LENGTH);
 343:bma2x2.c      **** 			*accel_x_s16 = (s16)((((s32)((s8)
 344:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 345:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS) |
 346:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_ACCEL_LSB] &
 347:bma2x2.c      **** 			BMA2x2_RESOLUTION_12_MASK));
 348:bma2x2.c      **** 			*accel_x_s16 = *accel_x_s16 >>
 349:bma2x2.c      **** 			BMA2x2_SHIFT_FOUR_BITS;
 350:bma2x2.c      **** 		break;
 351:bma2x2.c      **** 		/* This case used for the resolution bit 10*/
 352:bma2x2.c      **** 		case BMA2x2_10_RESOLUTION:
 353:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 354:bma2x2.c      **** 			(p_bma2x2->dev_addr,
 355:bma2x2.c      **** 			BMA2x2_ACCEL_X10_LSB_REG, data_u8,
 356:bma2x2.c      **** 			BMA2x2_LSB_MSB_READ_LENGTH);
 357:bma2x2.c      **** 			*accel_x_s16 = (s16)((((s32)((s8)
 358:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 359:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS) |
 360:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_ACCEL_LSB] &
 361:bma2x2.c      **** 			BMA2x2_RESOLUTION_10_MASK));
 362:bma2x2.c      **** 			*accel_x_s16 = *accel_x_s16 >>
 363:bma2x2.c      **** 			BMA2x2_SHIFT_SIX_BITS;
 364:bma2x2.c      **** 		break;
 365:bma2x2.c      **** 		/* This case used for the resolution bit 14*/
 366:bma2x2.c      **** 		case BMA2x2_14_RESOLUTION:
 367:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 368:bma2x2.c      **** 			(p_bma2x2->dev_addr,
 369:bma2x2.c      **** 			BMA2x2_ACCEL_X14_LSB_REG, data_u8,
 370:bma2x2.c      **** 			BMA2x2_LSB_MSB_READ_LENGTH);
 371:bma2x2.c      **** 			*accel_x_s16 = (s16)((((s32)((s8)
 372:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 373:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS) |
 374:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_ACCEL_LSB] &
 375:bma2x2.c      **** 			BMA2x2_RESOLUTION_14_MASK));
 376:bma2x2.c      **** 			*accel_x_s16 = *accel_x_s16 >>
 377:bma2x2.c      **** 			BMA2x2_SHIFT_TWO_BITS;
 378:bma2x2.c      **** 		break;
 379:bma2x2.c      **** 		default:
 380:bma2x2.c      **** 		break;
 466              		.loc 1 380 0
 467 003e 77E0     		b	.L30
 468              	.L29:
 339:bma2x2.c      **** 			(p_bma2x2->dev_addr,
 469              		.loc 1 339 0
 470 0040 3F4B     		ldr	r3, .L32
 471 0042 1B68     		ldr	r3, [r3]
 472 0044 DD68     		ldr	r5, [r3, #12]
 473 0046 3E4B     		ldr	r3, .L32
 474 0048 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 16


 475 004a 1879     		ldrb	r0, [r3, #4]
 476 004c 0F23     		movs	r3, #15
 477 004e FC18     		adds	r4, r7, r3
 478 0050 0C23     		movs	r3, #12
 479 0052 FA18     		adds	r2, r7, r3
 480 0054 0223     		movs	r3, #2
 481 0056 0221     		movs	r1, #2
 482 0058 A847     		blx	r5
 483 005a 0300     		movs	r3, r0
 484 005c 2370     		strb	r3, [r4]
 344:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS) |
 485              		.loc 1 344 0
 486 005e 0C23     		movs	r3, #12
 487 0060 FB18     		adds	r3, r7, r3
 488 0062 5B78     		ldrb	r3, [r3, #1]
 343:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 489              		.loc 1 343 0
 490 0064 5BB2     		sxtb	r3, r3
 345:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_ACCEL_LSB] &
 491              		.loc 1 345 0
 492 0066 1B02     		lsls	r3, r3, #8
 343:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 493              		.loc 1 343 0
 494 0068 1AB2     		sxth	r2, r3
 346:bma2x2.c      **** 			BMA2x2_RESOLUTION_12_MASK));
 495              		.loc 1 346 0
 496 006a 0C23     		movs	r3, #12
 497 006c FB18     		adds	r3, r7, r3
 498 006e 1B78     		ldrb	r3, [r3]
 343:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 499              		.loc 1 343 0
 500 0070 1BB2     		sxth	r3, r3
 501 0072 F021     		movs	r1, #240
 502 0074 0B40     		ands	r3, r1
 503 0076 1BB2     		sxth	r3, r3
 504 0078 1343     		orrs	r3, r2
 505 007a 1AB2     		sxth	r2, r3
 506 007c 7B68     		ldr	r3, [r7, #4]
 507 007e 1A80     		strh	r2, [r3]
 348:bma2x2.c      **** 			BMA2x2_SHIFT_FOUR_BITS;
 508              		.loc 1 348 0
 509 0080 7B68     		ldr	r3, [r7, #4]
 510 0082 0022     		movs	r2, #0
 511 0084 9B5E     		ldrsh	r3, [r3, r2]
 512 0086 1B11     		asrs	r3, r3, #4
 513 0088 1AB2     		sxth	r2, r3
 514 008a 7B68     		ldr	r3, [r7, #4]
 515 008c 1A80     		strh	r2, [r3]
 350:bma2x2.c      **** 		/* This case used for the resolution bit 10*/
 516              		.loc 1 350 0
 517 008e 4FE0     		b	.L30
 518              	.L27:
 353:bma2x2.c      **** 			(p_bma2x2->dev_addr,
 519              		.loc 1 353 0
 520 0090 2B4B     		ldr	r3, .L32
 521 0092 1B68     		ldr	r3, [r3]
 522 0094 DD68     		ldr	r5, [r3, #12]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 17


 523 0096 2A4B     		ldr	r3, .L32
 524 0098 1B68     		ldr	r3, [r3]
 525 009a 1879     		ldrb	r0, [r3, #4]
 526 009c 0F23     		movs	r3, #15
 527 009e FC18     		adds	r4, r7, r3
 528 00a0 0C23     		movs	r3, #12
 529 00a2 FA18     		adds	r2, r7, r3
 530 00a4 0223     		movs	r3, #2
 531 00a6 0221     		movs	r1, #2
 532 00a8 A847     		blx	r5
 533 00aa 0300     		movs	r3, r0
 534 00ac 2370     		strb	r3, [r4]
 358:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS) |
 535              		.loc 1 358 0
 536 00ae 0C23     		movs	r3, #12
 537 00b0 FB18     		adds	r3, r7, r3
 538 00b2 5B78     		ldrb	r3, [r3, #1]
 357:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 539              		.loc 1 357 0
 540 00b4 5BB2     		sxtb	r3, r3
 359:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_ACCEL_LSB] &
 541              		.loc 1 359 0
 542 00b6 1B02     		lsls	r3, r3, #8
 357:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 543              		.loc 1 357 0
 544 00b8 1AB2     		sxth	r2, r3
 360:bma2x2.c      **** 			BMA2x2_RESOLUTION_10_MASK));
 545              		.loc 1 360 0
 546 00ba 0C23     		movs	r3, #12
 547 00bc FB18     		adds	r3, r7, r3
 548 00be 1B78     		ldrb	r3, [r3]
 357:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 549              		.loc 1 357 0
 550 00c0 1BB2     		sxth	r3, r3
 551 00c2 C021     		movs	r1, #192
 552 00c4 0B40     		ands	r3, r1
 553 00c6 1BB2     		sxth	r3, r3
 554 00c8 1343     		orrs	r3, r2
 555 00ca 1AB2     		sxth	r2, r3
 556 00cc 7B68     		ldr	r3, [r7, #4]
 557 00ce 1A80     		strh	r2, [r3]
 362:bma2x2.c      **** 			BMA2x2_SHIFT_SIX_BITS;
 558              		.loc 1 362 0
 559 00d0 7B68     		ldr	r3, [r7, #4]
 560 00d2 0022     		movs	r2, #0
 561 00d4 9B5E     		ldrsh	r3, [r3, r2]
 562 00d6 9B11     		asrs	r3, r3, #6
 563 00d8 1AB2     		sxth	r2, r3
 564 00da 7B68     		ldr	r3, [r7, #4]
 565 00dc 1A80     		strh	r2, [r3]
 364:bma2x2.c      **** 		/* This case used for the resolution bit 14*/
 566              		.loc 1 364 0
 567 00de 27E0     		b	.L30
 568              	.L28:
 367:bma2x2.c      **** 			(p_bma2x2->dev_addr,
 569              		.loc 1 367 0
 570 00e0 174B     		ldr	r3, .L32
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 18


 571 00e2 1B68     		ldr	r3, [r3]
 572 00e4 DD68     		ldr	r5, [r3, #12]
 573 00e6 164B     		ldr	r3, .L32
 574 00e8 1B68     		ldr	r3, [r3]
 575 00ea 1879     		ldrb	r0, [r3, #4]
 576 00ec 0F23     		movs	r3, #15
 577 00ee FC18     		adds	r4, r7, r3
 578 00f0 0C23     		movs	r3, #12
 579 00f2 FA18     		adds	r2, r7, r3
 580 00f4 0223     		movs	r3, #2
 581 00f6 0221     		movs	r1, #2
 582 00f8 A847     		blx	r5
 583 00fa 0300     		movs	r3, r0
 584 00fc 2370     		strb	r3, [r4]
 372:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS) |
 585              		.loc 1 372 0
 586 00fe 0C23     		movs	r3, #12
 587 0100 FB18     		adds	r3, r7, r3
 588 0102 5B78     		ldrb	r3, [r3, #1]
 371:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 589              		.loc 1 371 0
 590 0104 5BB2     		sxtb	r3, r3
 373:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_ACCEL_LSB] &
 591              		.loc 1 373 0
 592 0106 1B02     		lsls	r3, r3, #8
 371:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 593              		.loc 1 371 0
 594 0108 1AB2     		sxth	r2, r3
 374:bma2x2.c      **** 			BMA2x2_RESOLUTION_14_MASK));
 595              		.loc 1 374 0
 596 010a 0C23     		movs	r3, #12
 597 010c FB18     		adds	r3, r7, r3
 598 010e 1B78     		ldrb	r3, [r3]
 371:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 599              		.loc 1 371 0
 600 0110 1BB2     		sxth	r3, r3
 601 0112 FC21     		movs	r1, #252
 602 0114 0B40     		ands	r3, r1
 603 0116 1BB2     		sxth	r3, r3
 604 0118 1343     		orrs	r3, r2
 605 011a 1AB2     		sxth	r2, r3
 606 011c 7B68     		ldr	r3, [r7, #4]
 607 011e 1A80     		strh	r2, [r3]
 376:bma2x2.c      **** 			BMA2x2_SHIFT_TWO_BITS;
 608              		.loc 1 376 0
 609 0120 7B68     		ldr	r3, [r7, #4]
 610 0122 0022     		movs	r2, #0
 611 0124 9B5E     		ldrsh	r3, [r3, r2]
 612 0126 9B10     		asrs	r3, r3, #2
 613 0128 1AB2     		sxth	r2, r3
 614 012a 7B68     		ldr	r3, [r7, #4]
 615 012c 1A80     		strh	r2, [r3]
 378:bma2x2.c      **** 		default:
 616              		.loc 1 378 0
 617 012e C046     		nop
 618              	.L30:
 381:bma2x2.c      **** 		}
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 19


 382:bma2x2.c      **** 	}
 383:bma2x2.c      **** 	return com_rslt;
 619              		.loc 1 383 0
 620 0130 0F23     		movs	r3, #15
 621 0132 FB18     		adds	r3, r7, r3
 622 0134 1B78     		ldrb	r3, [r3]
 623 0136 5BB2     		sxtb	r3, r3
 624              	.L31:
 384:bma2x2.c      **** }
 625              		.loc 1 384 0 discriminator 1
 626 0138 1800     		movs	r0, r3
 627 013a BD46     		mov	sp, r7
 628 013c 04B0     		add	sp, sp, #16
 629              		@ sp needed
 630 013e B0BD     		pop	{r4, r5, r7, pc}
 631              	.L33:
 632              		.align	2
 633              	.L32:
 634 0140 00000000 		.word	p_bma2x2
 635 0144 00000000 		.word	V_BMA2x2RESOLUTION_U8
 636              		.cfi_endproc
 637              	.LFE4:
 638              		.size	bma2x2_read_accel_x, .-bma2x2_read_accel_x
 639              		.section	.text.bma2x2_read_accel_eight_resolution_x,"ax",%progbits
 640              		.align	2
 641              		.global	bma2x2_read_accel_eight_resolution_x
 642              		.code	16
 643              		.thumb_func
 644              		.type	bma2x2_read_accel_eight_resolution_x, %function
 645              	bma2x2_read_accel_eight_resolution_x:
 646              	.LFB5:
 385:bma2x2.c      **** /*!
 386:bma2x2.c      ****  * @brief
 387:bma2x2.c      ****  *	This API reads acceleration data X values
 388:bma2x2.c      ****  *	from location 02h and 03h bit resolution support 8bit
 389:bma2x2.c      ****  *
 390:bma2x2.c      ****  *
 391:bma2x2.c      ****  *  @param   accel_x_s8 : pointer holding the data of accel X
 392:bma2x2.c      ****  *
 393:bma2x2.c      ****  *
 394:bma2x2.c      ****  *
 395:bma2x2.c      ****  *	@return results of bus communication function
 396:bma2x2.c      ****  *	@retval 0 -> Success
 397:bma2x2.c      ****  *	@retval -1 -> Error
 398:bma2x2.c      ****  *
 399:bma2x2.c      ****  *
 400:bma2x2.c      ****  */
 401:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_read_accel_eight_resolution_x(
 402:bma2x2.c      **** s8 *accel_x_s8)
 403:bma2x2.c      **** {
 647              		.loc 1 403 0
 648              		.cfi_startproc
 649              		@ args = 0, pretend = 0, frame = 16
 650              		@ frame_needed = 1, uses_anonymous_args = 0
 651 0000 B0B5     		push	{r4, r5, r7, lr}
 652              		.cfi_def_cfa_offset 16
 653              		.cfi_offset 4, -16
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 20


 654              		.cfi_offset 5, -12
 655              		.cfi_offset 7, -8
 656              		.cfi_offset 14, -4
 657 0002 84B0     		sub	sp, sp, #16
 658              		.cfi_def_cfa_offset 32
 659 0004 00AF     		add	r7, sp, #0
 660              		.cfi_def_cfa_register 7
 661 0006 7860     		str	r0, [r7, #4]
 404:bma2x2.c      **** 	/*  Variable used to return value of
 405:bma2x2.c      **** 	communication routine*/
 406:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 662              		.loc 1 406 0
 663 0008 0F23     		movs	r3, #15
 664 000a FB18     		adds	r3, r7, r3
 665 000c FF22     		movs	r2, #255
 666 000e 1A70     		strb	r2, [r3]
 407:bma2x2.c      **** 	u8	data = BMA2x2_INIT_VALUE;
 667              		.loc 1 407 0
 668 0010 0E23     		movs	r3, #14
 669 0012 FB18     		adds	r3, r7, r3
 670 0014 0022     		movs	r2, #0
 671 0016 1A70     		strb	r2, [r3]
 408:bma2x2.c      **** 
 409:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 672              		.loc 1 409 0
 673 0018 114B     		ldr	r3, .L38
 674 001a 1B68     		ldr	r3, [r3]
 675 001c 002B     		cmp	r3, #0
 676 001e 02D1     		bne	.L35
 410:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
 411:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 677              		.loc 1 411 0
 678 0020 7F23     		movs	r3, #127
 679 0022 5B42     		rsbs	r3, r3, #0
 680 0024 18E0     		b	.L37
 681              	.L35:
 412:bma2x2.c      **** 		} else {
 413:bma2x2.c      **** 			/* Read the sensor X data*/
 414:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 682              		.loc 1 414 0
 683 0026 0E4B     		ldr	r3, .L38
 684 0028 1B68     		ldr	r3, [r3]
 685 002a DD68     		ldr	r5, [r3, #12]
 686 002c 0C4B     		ldr	r3, .L38
 687 002e 1B68     		ldr	r3, [r3]
 688 0030 1879     		ldrb	r0, [r3, #4]
 689 0032 0F23     		movs	r3, #15
 690 0034 FC18     		adds	r4, r7, r3
 691 0036 0E23     		movs	r3, #14
 692 0038 FA18     		adds	r2, r7, r3
 693 003a 0123     		movs	r3, #1
 694 003c 0321     		movs	r1, #3
 695 003e A847     		blx	r5
 696 0040 0300     		movs	r3, r0
 697 0042 2370     		strb	r3, [r4]
 415:bma2x2.c      **** 			(p_bma2x2->dev_addr,
 416:bma2x2.c      **** 			BMA2x2_X_AXIS_MSB_ADDR, &data,
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 21


 417:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
 418:bma2x2.c      **** 			*accel_x_s8 = BMA2x2_GET_BITSLICE(data,
 698              		.loc 1 418 0
 699 0044 0E23     		movs	r3, #14
 700 0046 FB18     		adds	r3, r7, r3
 701 0048 1B78     		ldrb	r3, [r3]
 702 004a 5AB2     		sxtb	r2, r3
 703 004c 7B68     		ldr	r3, [r7, #4]
 704 004e 1A70     		strb	r2, [r3]
 419:bma2x2.c      **** 			BMA2x2_ACCEL_X_MSB);
 420:bma2x2.c      **** 		}
 421:bma2x2.c      **** 	return com_rslt;
 705              		.loc 1 421 0
 706 0050 0F23     		movs	r3, #15
 707 0052 FB18     		adds	r3, r7, r3
 708 0054 1B78     		ldrb	r3, [r3]
 709 0056 5BB2     		sxtb	r3, r3
 710              	.L37:
 422:bma2x2.c      **** }
 711              		.loc 1 422 0 discriminator 1
 712 0058 1800     		movs	r0, r3
 713 005a BD46     		mov	sp, r7
 714 005c 04B0     		add	sp, sp, #16
 715              		@ sp needed
 716 005e B0BD     		pop	{r4, r5, r7, pc}
 717              	.L39:
 718              		.align	2
 719              	.L38:
 720 0060 00000000 		.word	p_bma2x2
 721              		.cfi_endproc
 722              	.LFE5:
 723              		.size	bma2x2_read_accel_eight_resolution_x, .-bma2x2_read_accel_eight_resolution_x
 724              		.section	.text.bma2x2_read_accel_y,"ax",%progbits
 725              		.align	2
 726              		.global	bma2x2_read_accel_y
 727              		.code	16
 728              		.thumb_func
 729              		.type	bma2x2_read_accel_y, %function
 730              	bma2x2_read_accel_y:
 731              	.LFB6:
 423:bma2x2.c      **** /*!
 424:bma2x2.c      ****  * @brief
 425:bma2x2.c      ****  *	This API reads acceleration data Y values
 426:bma2x2.c      ****  *	from location 04h and 05h
 427:bma2x2.c      ****  *
 428:bma2x2.c      ****  *  @param   accel_y_s16 : pointer holding the data of accel Y
 429:bma2x2.c      ****  *		       value       |   resolution
 430:bma2x2.c      ****  *       ----------------- | --------------
 431:bma2x2.c      ****  *              0          | BMA2x2_12_RESOLUTION
 432:bma2x2.c      ****  *              1          | BMA2x2_10_RESOLUTION
 433:bma2x2.c      ****  *              2          | BMA2x2_14_RESOLUTION
 434:bma2x2.c      ****  *
 435:bma2x2.c      ****  *
 436:bma2x2.c      ****  *	@return results of bus communication function
 437:bma2x2.c      ****  *	@retval 0 -> Success
 438:bma2x2.c      ****  *	@retval -1 -> Error
 439:bma2x2.c      ****  *
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 22


 440:bma2x2.c      ****  *
 441:bma2x2.c      **** */
 442:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_read_accel_y(s16 *accel_y_s16)
 443:bma2x2.c      **** {
 732              		.loc 1 443 0
 733              		.cfi_startproc
 734              		@ args = 0, pretend = 0, frame = 16
 735              		@ frame_needed = 1, uses_anonymous_args = 0
 736 0000 B0B5     		push	{r4, r5, r7, lr}
 737              		.cfi_def_cfa_offset 16
 738              		.cfi_offset 4, -16
 739              		.cfi_offset 5, -12
 740              		.cfi_offset 7, -8
 741              		.cfi_offset 14, -4
 742 0002 84B0     		sub	sp, sp, #16
 743              		.cfi_def_cfa_offset 32
 744 0004 00AF     		add	r7, sp, #0
 745              		.cfi_def_cfa_register 7
 746 0006 7860     		str	r0, [r7, #4]
 444:bma2x2.c      **** 	/*  Variable used to return value of
 445:bma2x2.c      **** 	communication routine*/
 446:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 747              		.loc 1 446 0
 748 0008 0F23     		movs	r3, #15
 749 000a FB18     		adds	r3, r7, r3
 750 000c FF22     		movs	r2, #255
 751 000e 1A70     		strb	r2, [r3]
 447:bma2x2.c      **** 	/* Array holding the accel y value
 448:bma2x2.c      **** 	data_u8[0] - y->LSB
 449:bma2x2.c      **** 	data_u8[1] - y->MSB
 450:bma2x2.c      **** 	*/
 451:bma2x2.c      **** 	u8 data_u8[BMA2x2_ACCEL_DATA_SIZE] = {BMA2x2_INIT_VALUE,
 752              		.loc 1 451 0
 753 0010 0C23     		movs	r3, #12
 754 0012 FB18     		adds	r3, r7, r3
 755 0014 0022     		movs	r2, #0
 756 0016 1A70     		strb	r2, [r3]
 757 0018 0C23     		movs	r3, #12
 758 001a FB18     		adds	r3, r7, r3
 759 001c 0022     		movs	r2, #0
 760 001e 5A70     		strb	r2, [r3, #1]
 452:bma2x2.c      **** 	BMA2x2_INIT_VALUE};
 453:bma2x2.c      **** 
 454:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 761              		.loc 1 454 0
 762 0020 474B     		ldr	r3, .L49
 763 0022 1B68     		ldr	r3, [r3]
 764 0024 002B     		cmp	r3, #0
 765 0026 02D1     		bne	.L41
 455:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
 456:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 766              		.loc 1 456 0
 767 0028 7F23     		movs	r3, #127
 768 002a 5B42     		rsbs	r3, r3, #0
 769 002c 84E0     		b	.L48
 770              	.L41:
 457:bma2x2.c      **** 		} else {
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 23


 458:bma2x2.c      **** 		switch (V_BMA2x2RESOLUTION_U8) {
 771              		.loc 1 458 0
 772 002e 454B     		ldr	r3, .L49+4
 773 0030 1B78     		ldrb	r3, [r3]
 774 0032 012B     		cmp	r3, #1
 775 0034 2CD0     		beq	.L44
 776 0036 022B     		cmp	r3, #2
 777 0038 52D0     		beq	.L45
 778 003a 002B     		cmp	r3, #0
 779 003c 00D0     		beq	.L46
 459:bma2x2.c      **** 		/* This case used for the resolution bit 12*/
 460:bma2x2.c      **** 		case BMA2x2_12_RESOLUTION:
 461:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 462:bma2x2.c      **** 			(p_bma2x2->dev_addr,
 463:bma2x2.c      **** 			BMA2x2_ACCEL_Y12_LSB_REG, data_u8,
 464:bma2x2.c      **** 			BMA2x2_LSB_MSB_READ_LENGTH);
 465:bma2x2.c      **** 			*accel_y_s16 = (s16)((((s32)((s8)
 466:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 467:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS) |
 468:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_ACCEL_LSB] &
 469:bma2x2.c      **** 			BMA2x2_12_BIT_SHIFT));
 470:bma2x2.c      **** 			*accel_y_s16 = *accel_y_s16 >>
 471:bma2x2.c      **** 			BMA2x2_SHIFT_FOUR_BITS;
 472:bma2x2.c      **** 		break;
 473:bma2x2.c      **** 		/* This case used for the resolution bit 10*/
 474:bma2x2.c      **** 		case BMA2x2_10_RESOLUTION:
 475:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 476:bma2x2.c      **** 			(p_bma2x2->dev_addr,
 477:bma2x2.c      **** 			BMA2x2_ACCEL_Y10_LSB_REG, data_u8,
 478:bma2x2.c      **** 			BMA2x2_LSB_MSB_READ_LENGTH);
 479:bma2x2.c      **** 			*accel_y_s16 = (s16)((((s32)((s8)
 480:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 481:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS) |
 482:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_ACCEL_LSB] &
 483:bma2x2.c      **** 			BMA2x2_10_BIT_SHIFT));
 484:bma2x2.c      **** 			*accel_y_s16 = *accel_y_s16 >>
 485:bma2x2.c      **** 			BMA2x2_SHIFT_SIX_BITS;
 486:bma2x2.c      **** 		break;
 487:bma2x2.c      **** 		/* This case used for the resolution bit 14*/
 488:bma2x2.c      **** 		case BMA2x2_14_RESOLUTION:
 489:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 490:bma2x2.c      **** 			(p_bma2x2->dev_addr,
 491:bma2x2.c      **** 			BMA2x2_ACCEL_Y14_LSB_REG, data_u8,
 492:bma2x2.c      **** 			BMA2x2_LSB_MSB_READ_LENGTH);
 493:bma2x2.c      **** 			*accel_y_s16 = (s16)((((s32)((s8)
 494:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 495:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS) |
 496:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_ACCEL_LSB] &
 497:bma2x2.c      **** 			BMA2x2_14_BIT_SHIFT));
 498:bma2x2.c      **** 			*accel_y_s16 = *accel_y_s16 >>
 499:bma2x2.c      **** 			BMA2x2_SHIFT_TWO_BITS;
 500:bma2x2.c      **** 		break;
 501:bma2x2.c      **** 		default:
 502:bma2x2.c      **** 		break;
 780              		.loc 1 502 0
 781 003e 77E0     		b	.L47
 782              	.L46:
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 24


 461:bma2x2.c      **** 			(p_bma2x2->dev_addr,
 783              		.loc 1 461 0
 784 0040 3F4B     		ldr	r3, .L49
 785 0042 1B68     		ldr	r3, [r3]
 786 0044 DD68     		ldr	r5, [r3, #12]
 787 0046 3E4B     		ldr	r3, .L49
 788 0048 1B68     		ldr	r3, [r3]
 789 004a 1879     		ldrb	r0, [r3, #4]
 790 004c 0F23     		movs	r3, #15
 791 004e FC18     		adds	r4, r7, r3
 792 0050 0C23     		movs	r3, #12
 793 0052 FA18     		adds	r2, r7, r3
 794 0054 0223     		movs	r3, #2
 795 0056 0421     		movs	r1, #4
 796 0058 A847     		blx	r5
 797 005a 0300     		movs	r3, r0
 798 005c 2370     		strb	r3, [r4]
 466:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS) |
 799              		.loc 1 466 0
 800 005e 0C23     		movs	r3, #12
 801 0060 FB18     		adds	r3, r7, r3
 802 0062 5B78     		ldrb	r3, [r3, #1]
 465:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 803              		.loc 1 465 0
 804 0064 5BB2     		sxtb	r3, r3
 467:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_ACCEL_LSB] &
 805              		.loc 1 467 0
 806 0066 1B02     		lsls	r3, r3, #8
 465:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 807              		.loc 1 465 0
 808 0068 1AB2     		sxth	r2, r3
 468:bma2x2.c      **** 			BMA2x2_12_BIT_SHIFT));
 809              		.loc 1 468 0
 810 006a 0C23     		movs	r3, #12
 811 006c FB18     		adds	r3, r7, r3
 812 006e 1B78     		ldrb	r3, [r3]
 465:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 813              		.loc 1 465 0
 814 0070 1BB2     		sxth	r3, r3
 815 0072 F021     		movs	r1, #240
 816 0074 0B40     		ands	r3, r1
 817 0076 1BB2     		sxth	r3, r3
 818 0078 1343     		orrs	r3, r2
 819 007a 1AB2     		sxth	r2, r3
 820 007c 7B68     		ldr	r3, [r7, #4]
 821 007e 1A80     		strh	r2, [r3]
 470:bma2x2.c      **** 			BMA2x2_SHIFT_FOUR_BITS;
 822              		.loc 1 470 0
 823 0080 7B68     		ldr	r3, [r7, #4]
 824 0082 0022     		movs	r2, #0
 825 0084 9B5E     		ldrsh	r3, [r3, r2]
 826 0086 1B11     		asrs	r3, r3, #4
 827 0088 1AB2     		sxth	r2, r3
 828 008a 7B68     		ldr	r3, [r7, #4]
 829 008c 1A80     		strh	r2, [r3]
 472:bma2x2.c      **** 		/* This case used for the resolution bit 10*/
 830              		.loc 1 472 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 25


 831 008e 4FE0     		b	.L47
 832              	.L44:
 475:bma2x2.c      **** 			(p_bma2x2->dev_addr,
 833              		.loc 1 475 0
 834 0090 2B4B     		ldr	r3, .L49
 835 0092 1B68     		ldr	r3, [r3]
 836 0094 DD68     		ldr	r5, [r3, #12]
 837 0096 2A4B     		ldr	r3, .L49
 838 0098 1B68     		ldr	r3, [r3]
 839 009a 1879     		ldrb	r0, [r3, #4]
 840 009c 0F23     		movs	r3, #15
 841 009e FC18     		adds	r4, r7, r3
 842 00a0 0C23     		movs	r3, #12
 843 00a2 FA18     		adds	r2, r7, r3
 844 00a4 0223     		movs	r3, #2
 845 00a6 0421     		movs	r1, #4
 846 00a8 A847     		blx	r5
 847 00aa 0300     		movs	r3, r0
 848 00ac 2370     		strb	r3, [r4]
 480:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS) |
 849              		.loc 1 480 0
 850 00ae 0C23     		movs	r3, #12
 851 00b0 FB18     		adds	r3, r7, r3
 852 00b2 5B78     		ldrb	r3, [r3, #1]
 479:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 853              		.loc 1 479 0
 854 00b4 5BB2     		sxtb	r3, r3
 481:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_ACCEL_LSB] &
 855              		.loc 1 481 0
 856 00b6 1B02     		lsls	r3, r3, #8
 479:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 857              		.loc 1 479 0
 858 00b8 1AB2     		sxth	r2, r3
 482:bma2x2.c      **** 			BMA2x2_10_BIT_SHIFT));
 859              		.loc 1 482 0
 860 00ba 0C23     		movs	r3, #12
 861 00bc FB18     		adds	r3, r7, r3
 862 00be 1B78     		ldrb	r3, [r3]
 479:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 863              		.loc 1 479 0
 864 00c0 1BB2     		sxth	r3, r3
 865 00c2 C021     		movs	r1, #192
 866 00c4 0B40     		ands	r3, r1
 867 00c6 1BB2     		sxth	r3, r3
 868 00c8 1343     		orrs	r3, r2
 869 00ca 1AB2     		sxth	r2, r3
 870 00cc 7B68     		ldr	r3, [r7, #4]
 871 00ce 1A80     		strh	r2, [r3]
 484:bma2x2.c      **** 			BMA2x2_SHIFT_SIX_BITS;
 872              		.loc 1 484 0
 873 00d0 7B68     		ldr	r3, [r7, #4]
 874 00d2 0022     		movs	r2, #0
 875 00d4 9B5E     		ldrsh	r3, [r3, r2]
 876 00d6 9B11     		asrs	r3, r3, #6
 877 00d8 1AB2     		sxth	r2, r3
 878 00da 7B68     		ldr	r3, [r7, #4]
 879 00dc 1A80     		strh	r2, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 26


 486:bma2x2.c      **** 		/* This case used for the resolution bit 14*/
 880              		.loc 1 486 0
 881 00de 27E0     		b	.L47
 882              	.L45:
 489:bma2x2.c      **** 			(p_bma2x2->dev_addr,
 883              		.loc 1 489 0
 884 00e0 174B     		ldr	r3, .L49
 885 00e2 1B68     		ldr	r3, [r3]
 886 00e4 DD68     		ldr	r5, [r3, #12]
 887 00e6 164B     		ldr	r3, .L49
 888 00e8 1B68     		ldr	r3, [r3]
 889 00ea 1879     		ldrb	r0, [r3, #4]
 890 00ec 0F23     		movs	r3, #15
 891 00ee FC18     		adds	r4, r7, r3
 892 00f0 0C23     		movs	r3, #12
 893 00f2 FA18     		adds	r2, r7, r3
 894 00f4 0223     		movs	r3, #2
 895 00f6 0421     		movs	r1, #4
 896 00f8 A847     		blx	r5
 897 00fa 0300     		movs	r3, r0
 898 00fc 2370     		strb	r3, [r4]
 494:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS) |
 899              		.loc 1 494 0
 900 00fe 0C23     		movs	r3, #12
 901 0100 FB18     		adds	r3, r7, r3
 902 0102 5B78     		ldrb	r3, [r3, #1]
 493:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 903              		.loc 1 493 0
 904 0104 5BB2     		sxtb	r3, r3
 495:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_ACCEL_LSB] &
 905              		.loc 1 495 0
 906 0106 1B02     		lsls	r3, r3, #8
 493:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 907              		.loc 1 493 0
 908 0108 1AB2     		sxth	r2, r3
 496:bma2x2.c      **** 			BMA2x2_14_BIT_SHIFT));
 909              		.loc 1 496 0
 910 010a 0C23     		movs	r3, #12
 911 010c FB18     		adds	r3, r7, r3
 912 010e 1B78     		ldrb	r3, [r3]
 493:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 913              		.loc 1 493 0
 914 0110 1BB2     		sxth	r3, r3
 915 0112 FC21     		movs	r1, #252
 916 0114 0B40     		ands	r3, r1
 917 0116 1BB2     		sxth	r3, r3
 918 0118 1343     		orrs	r3, r2
 919 011a 1AB2     		sxth	r2, r3
 920 011c 7B68     		ldr	r3, [r7, #4]
 921 011e 1A80     		strh	r2, [r3]
 498:bma2x2.c      **** 			BMA2x2_SHIFT_TWO_BITS;
 922              		.loc 1 498 0
 923 0120 7B68     		ldr	r3, [r7, #4]
 924 0122 0022     		movs	r2, #0
 925 0124 9B5E     		ldrsh	r3, [r3, r2]
 926 0126 9B10     		asrs	r3, r3, #2
 927 0128 1AB2     		sxth	r2, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 27


 928 012a 7B68     		ldr	r3, [r7, #4]
 929 012c 1A80     		strh	r2, [r3]
 500:bma2x2.c      **** 		default:
 930              		.loc 1 500 0
 931 012e C046     		nop
 932              	.L47:
 503:bma2x2.c      **** 		}
 504:bma2x2.c      **** 	}
 505:bma2x2.c      **** 	return com_rslt;
 933              		.loc 1 505 0
 934 0130 0F23     		movs	r3, #15
 935 0132 FB18     		adds	r3, r7, r3
 936 0134 1B78     		ldrb	r3, [r3]
 937 0136 5BB2     		sxtb	r3, r3
 938              	.L48:
 506:bma2x2.c      **** }
 939              		.loc 1 506 0 discriminator 1
 940 0138 1800     		movs	r0, r3
 941 013a BD46     		mov	sp, r7
 942 013c 04B0     		add	sp, sp, #16
 943              		@ sp needed
 944 013e B0BD     		pop	{r4, r5, r7, pc}
 945              	.L50:
 946              		.align	2
 947              	.L49:
 948 0140 00000000 		.word	p_bma2x2
 949 0144 00000000 		.word	V_BMA2x2RESOLUTION_U8
 950              		.cfi_endproc
 951              	.LFE6:
 952              		.size	bma2x2_read_accel_y, .-bma2x2_read_accel_y
 953              		.section	.text.bma2x2_read_accel_eight_resolution_y,"ax",%progbits
 954              		.align	2
 955              		.global	bma2x2_read_accel_eight_resolution_y
 956              		.code	16
 957              		.thumb_func
 958              		.type	bma2x2_read_accel_eight_resolution_y, %function
 959              	bma2x2_read_accel_eight_resolution_y:
 960              	.LFB7:
 507:bma2x2.c      **** /*!
 508:bma2x2.c      ****  * @brief This API reads acceleration data Y values of
 509:bma2x2.c      ****  * 8bit  resolution  from location 05h
 510:bma2x2.c      ****  *
 511:bma2x2.c      ****  *
 512:bma2x2.c      ****  *
 513:bma2x2.c      ****  *
 514:bma2x2.c      ****  *  @param accel_y_s8   The data of y
 515:bma2x2.c      ****  *
 516:bma2x2.c      ****  *
 517:bma2x2.c      ****  *
 518:bma2x2.c      ****  *	@return results of bus communication function
 519:bma2x2.c      ****  *	@retval 0 -> Success
 520:bma2x2.c      ****  *	@retval -1 -> Error
 521:bma2x2.c      ****  *
 522:bma2x2.c      ****  *
 523:bma2x2.c      **** */
 524:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_read_accel_eight_resolution_y(
 525:bma2x2.c      **** s8 *accel_y_s8)
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 28


 526:bma2x2.c      **** {
 961              		.loc 1 526 0
 962              		.cfi_startproc
 963              		@ args = 0, pretend = 0, frame = 16
 964              		@ frame_needed = 1, uses_anonymous_args = 0
 965 0000 B0B5     		push	{r4, r5, r7, lr}
 966              		.cfi_def_cfa_offset 16
 967              		.cfi_offset 4, -16
 968              		.cfi_offset 5, -12
 969              		.cfi_offset 7, -8
 970              		.cfi_offset 14, -4
 971 0002 84B0     		sub	sp, sp, #16
 972              		.cfi_def_cfa_offset 32
 973 0004 00AF     		add	r7, sp, #0
 974              		.cfi_def_cfa_register 7
 975 0006 7860     		str	r0, [r7, #4]
 527:bma2x2.c      **** 		/*  Variable used to return value of
 528:bma2x2.c      **** 	communication routine*/
 529:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 976              		.loc 1 529 0
 977 0008 0F23     		movs	r3, #15
 978 000a FB18     		adds	r3, r7, r3
 979 000c FF22     		movs	r2, #255
 980 000e 1A70     		strb	r2, [r3]
 530:bma2x2.c      **** 	u8	data = BMA2x2_INIT_VALUE;
 981              		.loc 1 530 0
 982 0010 0E23     		movs	r3, #14
 983 0012 FB18     		adds	r3, r7, r3
 984 0014 0022     		movs	r2, #0
 985 0016 1A70     		strb	r2, [r3]
 531:bma2x2.c      **** 
 532:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 986              		.loc 1 532 0
 987 0018 114B     		ldr	r3, .L55
 988 001a 1B68     		ldr	r3, [r3]
 989 001c 002B     		cmp	r3, #0
 990 001e 02D1     		bne	.L52
 533:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
 534:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 991              		.loc 1 534 0
 992 0020 7F23     		movs	r3, #127
 993 0022 5B42     		rsbs	r3, r3, #0
 994 0024 18E0     		b	.L54
 995              	.L52:
 535:bma2x2.c      **** 		} else {
 536:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 996              		.loc 1 536 0
 997 0026 0E4B     		ldr	r3, .L55
 998 0028 1B68     		ldr	r3, [r3]
 999 002a DD68     		ldr	r5, [r3, #12]
 1000 002c 0C4B     		ldr	r3, .L55
 1001 002e 1B68     		ldr	r3, [r3]
 1002 0030 1879     		ldrb	r0, [r3, #4]
 1003 0032 0F23     		movs	r3, #15
 1004 0034 FC18     		adds	r4, r7, r3
 1005 0036 0E23     		movs	r3, #14
 1006 0038 FA18     		adds	r2, r7, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 29


 1007 003a 0123     		movs	r3, #1
 1008 003c 0521     		movs	r1, #5
 1009 003e A847     		blx	r5
 1010 0040 0300     		movs	r3, r0
 1011 0042 2370     		strb	r3, [r4]
 537:bma2x2.c      **** 			(p_bma2x2->dev_addr,
 538:bma2x2.c      **** 			BMA2x2_Y_AXIS_MSB_ADDR, &data,
 539:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
 540:bma2x2.c      **** 			*accel_y_s8 = BMA2x2_GET_BITSLICE(data,
 1012              		.loc 1 540 0
 1013 0044 0E23     		movs	r3, #14
 1014 0046 FB18     		adds	r3, r7, r3
 1015 0048 1B78     		ldrb	r3, [r3]
 1016 004a 5AB2     		sxtb	r2, r3
 1017 004c 7B68     		ldr	r3, [r7, #4]
 1018 004e 1A70     		strb	r2, [r3]
 541:bma2x2.c      **** 			BMA2x2_ACCEL_Y_MSB);
 542:bma2x2.c      **** 		}
 543:bma2x2.c      **** 	return com_rslt;
 1019              		.loc 1 543 0
 1020 0050 0F23     		movs	r3, #15
 1021 0052 FB18     		adds	r3, r7, r3
 1022 0054 1B78     		ldrb	r3, [r3]
 1023 0056 5BB2     		sxtb	r3, r3
 1024              	.L54:
 544:bma2x2.c      **** }
 1025              		.loc 1 544 0 discriminator 1
 1026 0058 1800     		movs	r0, r3
 1027 005a BD46     		mov	sp, r7
 1028 005c 04B0     		add	sp, sp, #16
 1029              		@ sp needed
 1030 005e B0BD     		pop	{r4, r5, r7, pc}
 1031              	.L56:
 1032              		.align	2
 1033              	.L55:
 1034 0060 00000000 		.word	p_bma2x2
 1035              		.cfi_endproc
 1036              	.LFE7:
 1037              		.size	bma2x2_read_accel_eight_resolution_y, .-bma2x2_read_accel_eight_resolution_y
 1038              		.section	.text.bma2x2_read_accel_z,"ax",%progbits
 1039              		.align	2
 1040              		.global	bma2x2_read_accel_z
 1041              		.code	16
 1042              		.thumb_func
 1043              		.type	bma2x2_read_accel_z, %function
 1044              	bma2x2_read_accel_z:
 1045              	.LFB8:
 545:bma2x2.c      **** /*!
 546:bma2x2.c      ****  * @brief This API reads acceleration data Z values
 547:bma2x2.c      ****  *                          from location 06h and 07h
 548:bma2x2.c      ****  *
 549:bma2x2.c      ****  *
 550:bma2x2.c      ****  *  @param   accel_z_s16 : pointer holding the data of accel Z
 551:bma2x2.c      ****  *		       value       |   resolution
 552:bma2x2.c      ****  *       ----------------- | --------------
 553:bma2x2.c      ****  *              0          | BMA2x2_12_RESOLUTION
 554:bma2x2.c      ****  *              1          | BMA2x2_10_RESOLUTION
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 30


 555:bma2x2.c      ****  *              2          | BMA2x2_14_RESOLUTION
 556:bma2x2.c      ****  *
 557:bma2x2.c      ****  *
 558:bma2x2.c      ****  *	@return results of bus communication function
 559:bma2x2.c      ****  *	@retval 0 -> Success
 560:bma2x2.c      ****  *	@retval -1 -> Error
 561:bma2x2.c      ****  *
 562:bma2x2.c      ****  *
 563:bma2x2.c      **** */
 564:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_read_accel_z(s16 *accel_z_s16)
 565:bma2x2.c      **** {
 1046              		.loc 1 565 0
 1047              		.cfi_startproc
 1048              		@ args = 0, pretend = 0, frame = 16
 1049              		@ frame_needed = 1, uses_anonymous_args = 0
 1050 0000 B0B5     		push	{r4, r5, r7, lr}
 1051              		.cfi_def_cfa_offset 16
 1052              		.cfi_offset 4, -16
 1053              		.cfi_offset 5, -12
 1054              		.cfi_offset 7, -8
 1055              		.cfi_offset 14, -4
 1056 0002 84B0     		sub	sp, sp, #16
 1057              		.cfi_def_cfa_offset 32
 1058 0004 00AF     		add	r7, sp, #0
 1059              		.cfi_def_cfa_register 7
 1060 0006 7860     		str	r0, [r7, #4]
 566:bma2x2.c      **** 	/*  Variable used to return value of
 567:bma2x2.c      **** 	communication routine*/
 568:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 1061              		.loc 1 568 0
 1062 0008 0F23     		movs	r3, #15
 1063 000a FB18     		adds	r3, r7, r3
 1064 000c FF22     		movs	r2, #255
 1065 000e 1A70     		strb	r2, [r3]
 569:bma2x2.c      **** 	/* Array holding the accel z value
 570:bma2x2.c      **** 	data_u8[0] - z->LSB
 571:bma2x2.c      **** 	data_u8[1] - z->MSB
 572:bma2x2.c      **** 	*/
 573:bma2x2.c      **** 	u8 data_u8[BMA2x2_ACCEL_DATA_SIZE] = {BMA2x2_INIT_VALUE,
 1066              		.loc 1 573 0
 1067 0010 0C23     		movs	r3, #12
 1068 0012 FB18     		adds	r3, r7, r3
 1069 0014 0022     		movs	r2, #0
 1070 0016 1A70     		strb	r2, [r3]
 1071 0018 0C23     		movs	r3, #12
 1072 001a FB18     		adds	r3, r7, r3
 1073 001c 0022     		movs	r2, #0
 1074 001e 5A70     		strb	r2, [r3, #1]
 574:bma2x2.c      **** 	BMA2x2_INIT_VALUE};
 575:bma2x2.c      **** 
 576:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 1075              		.loc 1 576 0
 1076 0020 474B     		ldr	r3, .L66
 1077 0022 1B68     		ldr	r3, [r3]
 1078 0024 002B     		cmp	r3, #0
 1079 0026 02D1     		bne	.L58
 577:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 31


 578:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 1080              		.loc 1 578 0
 1081 0028 7F23     		movs	r3, #127
 1082 002a 5B42     		rsbs	r3, r3, #0
 1083 002c 84E0     		b	.L65
 1084              	.L58:
 579:bma2x2.c      **** 		} else {
 580:bma2x2.c      **** 		switch (V_BMA2x2RESOLUTION_U8) {
 1085              		.loc 1 580 0
 1086 002e 454B     		ldr	r3, .L66+4
 1087 0030 1B78     		ldrb	r3, [r3]
 1088 0032 012B     		cmp	r3, #1
 1089 0034 2CD0     		beq	.L61
 1090 0036 022B     		cmp	r3, #2
 1091 0038 52D0     		beq	.L62
 1092 003a 002B     		cmp	r3, #0
 1093 003c 00D0     		beq	.L63
 581:bma2x2.c      **** 		case BMA2x2_12_RESOLUTION:
 582:bma2x2.c      **** 			/* This case used for the resolution bit 12*/
 583:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 584:bma2x2.c      **** 			(p_bma2x2->dev_addr,
 585:bma2x2.c      **** 			BMA2x2_ACCEL_Z12_LSB_REG, data_u8,
 586:bma2x2.c      **** 			BMA2x2_LSB_MSB_READ_LENGTH);
 587:bma2x2.c      **** 			*accel_z_s16 = (s16)((((s32)((s8)
 588:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 589:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS) |
 590:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_ACCEL_LSB]
 591:bma2x2.c      **** 			& BMA2x2_12_BIT_SHIFT));
 592:bma2x2.c      **** 			*accel_z_s16 = *accel_z_s16 >>
 593:bma2x2.c      **** 			BMA2x2_SHIFT_FOUR_BITS;
 594:bma2x2.c      **** 		break;
 595:bma2x2.c      **** 		/* This case used for the resolution bit 10*/
 596:bma2x2.c      **** 		case BMA2x2_10_RESOLUTION:
 597:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 598:bma2x2.c      **** 			(p_bma2x2->dev_addr,
 599:bma2x2.c      **** 			BMA2x2_ACCEL_Z10_LSB_REG, data_u8,
 600:bma2x2.c      **** 			BMA2x2_LSB_MSB_READ_LENGTH);
 601:bma2x2.c      **** 			*accel_z_s16 = (s16)((((s32)((s8)
 602:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 603:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS) |
 604:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_ACCEL_LSB]
 605:bma2x2.c      **** 			& BMA2x2_10_BIT_SHIFT));
 606:bma2x2.c      **** 			*accel_z_s16 = *accel_z_s16 >>
 607:bma2x2.c      **** 			BMA2x2_SHIFT_SIX_BITS;
 608:bma2x2.c      **** 		break;
 609:bma2x2.c      **** 		/* This case used for the resolution bit 14*/
 610:bma2x2.c      **** 		case BMA2x2_14_RESOLUTION:
 611:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 612:bma2x2.c      **** 			(p_bma2x2->dev_addr,
 613:bma2x2.c      **** 			BMA2x2_ACCEL_Z14_LSB_REG, data_u8,
 614:bma2x2.c      **** 			BMA2x2_LSB_MSB_READ_LENGTH);
 615:bma2x2.c      **** 			*accel_z_s16 = (s16)((((s32)((s8)
 616:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 617:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS) |
 618:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_ACCEL_LSB]
 619:bma2x2.c      **** 			& BMA2x2_14_BIT_SHIFT));
 620:bma2x2.c      **** 			*accel_z_s16 = *accel_z_s16 >>
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 32


 621:bma2x2.c      **** 			BMA2x2_SHIFT_TWO_BITS;
 622:bma2x2.c      **** 		break;
 623:bma2x2.c      **** 		default:
 624:bma2x2.c      **** 		break;
 1094              		.loc 1 624 0
 1095 003e 77E0     		b	.L64
 1096              	.L63:
 583:bma2x2.c      **** 			(p_bma2x2->dev_addr,
 1097              		.loc 1 583 0
 1098 0040 3F4B     		ldr	r3, .L66
 1099 0042 1B68     		ldr	r3, [r3]
 1100 0044 DD68     		ldr	r5, [r3, #12]
 1101 0046 3E4B     		ldr	r3, .L66
 1102 0048 1B68     		ldr	r3, [r3]
 1103 004a 1879     		ldrb	r0, [r3, #4]
 1104 004c 0F23     		movs	r3, #15
 1105 004e FC18     		adds	r4, r7, r3
 1106 0050 0C23     		movs	r3, #12
 1107 0052 FA18     		adds	r2, r7, r3
 1108 0054 0223     		movs	r3, #2
 1109 0056 0621     		movs	r1, #6
 1110 0058 A847     		blx	r5
 1111 005a 0300     		movs	r3, r0
 1112 005c 2370     		strb	r3, [r4]
 588:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS) |
 1113              		.loc 1 588 0
 1114 005e 0C23     		movs	r3, #12
 1115 0060 FB18     		adds	r3, r7, r3
 1116 0062 5B78     		ldrb	r3, [r3, #1]
 587:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 1117              		.loc 1 587 0
 1118 0064 5BB2     		sxtb	r3, r3
 589:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_ACCEL_LSB]
 1119              		.loc 1 589 0
 1120 0066 1B02     		lsls	r3, r3, #8
 587:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 1121              		.loc 1 587 0
 1122 0068 1AB2     		sxth	r2, r3
 590:bma2x2.c      **** 			& BMA2x2_12_BIT_SHIFT));
 1123              		.loc 1 590 0
 1124 006a 0C23     		movs	r3, #12
 1125 006c FB18     		adds	r3, r7, r3
 1126 006e 1B78     		ldrb	r3, [r3]
 587:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 1127              		.loc 1 587 0
 1128 0070 1BB2     		sxth	r3, r3
 1129 0072 F021     		movs	r1, #240
 1130 0074 0B40     		ands	r3, r1
 1131 0076 1BB2     		sxth	r3, r3
 1132 0078 1343     		orrs	r3, r2
 1133 007a 1AB2     		sxth	r2, r3
 1134 007c 7B68     		ldr	r3, [r7, #4]
 1135 007e 1A80     		strh	r2, [r3]
 592:bma2x2.c      **** 			BMA2x2_SHIFT_FOUR_BITS;
 1136              		.loc 1 592 0
 1137 0080 7B68     		ldr	r3, [r7, #4]
 1138 0082 0022     		movs	r2, #0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 33


 1139 0084 9B5E     		ldrsh	r3, [r3, r2]
 1140 0086 1B11     		asrs	r3, r3, #4
 1141 0088 1AB2     		sxth	r2, r3
 1142 008a 7B68     		ldr	r3, [r7, #4]
 1143 008c 1A80     		strh	r2, [r3]
 594:bma2x2.c      **** 		/* This case used for the resolution bit 10*/
 1144              		.loc 1 594 0
 1145 008e 4FE0     		b	.L64
 1146              	.L61:
 597:bma2x2.c      **** 			(p_bma2x2->dev_addr,
 1147              		.loc 1 597 0
 1148 0090 2B4B     		ldr	r3, .L66
 1149 0092 1B68     		ldr	r3, [r3]
 1150 0094 DD68     		ldr	r5, [r3, #12]
 1151 0096 2A4B     		ldr	r3, .L66
 1152 0098 1B68     		ldr	r3, [r3]
 1153 009a 1879     		ldrb	r0, [r3, #4]
 1154 009c 0F23     		movs	r3, #15
 1155 009e FC18     		adds	r4, r7, r3
 1156 00a0 0C23     		movs	r3, #12
 1157 00a2 FA18     		adds	r2, r7, r3
 1158 00a4 0223     		movs	r3, #2
 1159 00a6 0621     		movs	r1, #6
 1160 00a8 A847     		blx	r5
 1161 00aa 0300     		movs	r3, r0
 1162 00ac 2370     		strb	r3, [r4]
 602:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS) |
 1163              		.loc 1 602 0
 1164 00ae 0C23     		movs	r3, #12
 1165 00b0 FB18     		adds	r3, r7, r3
 1166 00b2 5B78     		ldrb	r3, [r3, #1]
 601:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 1167              		.loc 1 601 0
 1168 00b4 5BB2     		sxtb	r3, r3
 603:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_ACCEL_LSB]
 1169              		.loc 1 603 0
 1170 00b6 1B02     		lsls	r3, r3, #8
 601:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 1171              		.loc 1 601 0
 1172 00b8 1AB2     		sxth	r2, r3
 604:bma2x2.c      **** 			& BMA2x2_10_BIT_SHIFT));
 1173              		.loc 1 604 0
 1174 00ba 0C23     		movs	r3, #12
 1175 00bc FB18     		adds	r3, r7, r3
 1176 00be 1B78     		ldrb	r3, [r3]
 601:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 1177              		.loc 1 601 0
 1178 00c0 1BB2     		sxth	r3, r3
 1179 00c2 C021     		movs	r1, #192
 1180 00c4 0B40     		ands	r3, r1
 1181 00c6 1BB2     		sxth	r3, r3
 1182 00c8 1343     		orrs	r3, r2
 1183 00ca 1AB2     		sxth	r2, r3
 1184 00cc 7B68     		ldr	r3, [r7, #4]
 1185 00ce 1A80     		strh	r2, [r3]
 606:bma2x2.c      **** 			BMA2x2_SHIFT_SIX_BITS;
 1186              		.loc 1 606 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 34


 1187 00d0 7B68     		ldr	r3, [r7, #4]
 1188 00d2 0022     		movs	r2, #0
 1189 00d4 9B5E     		ldrsh	r3, [r3, r2]
 1190 00d6 9B11     		asrs	r3, r3, #6
 1191 00d8 1AB2     		sxth	r2, r3
 1192 00da 7B68     		ldr	r3, [r7, #4]
 1193 00dc 1A80     		strh	r2, [r3]
 608:bma2x2.c      **** 		/* This case used for the resolution bit 14*/
 1194              		.loc 1 608 0
 1195 00de 27E0     		b	.L64
 1196              	.L62:
 611:bma2x2.c      **** 			(p_bma2x2->dev_addr,
 1197              		.loc 1 611 0
 1198 00e0 174B     		ldr	r3, .L66
 1199 00e2 1B68     		ldr	r3, [r3]
 1200 00e4 DD68     		ldr	r5, [r3, #12]
 1201 00e6 164B     		ldr	r3, .L66
 1202 00e8 1B68     		ldr	r3, [r3]
 1203 00ea 1879     		ldrb	r0, [r3, #4]
 1204 00ec 0F23     		movs	r3, #15
 1205 00ee FC18     		adds	r4, r7, r3
 1206 00f0 0C23     		movs	r3, #12
 1207 00f2 FA18     		adds	r2, r7, r3
 1208 00f4 0223     		movs	r3, #2
 1209 00f6 0621     		movs	r1, #6
 1210 00f8 A847     		blx	r5
 1211 00fa 0300     		movs	r3, r0
 1212 00fc 2370     		strb	r3, [r4]
 616:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS) |
 1213              		.loc 1 616 0
 1214 00fe 0C23     		movs	r3, #12
 1215 0100 FB18     		adds	r3, r7, r3
 1216 0102 5B78     		ldrb	r3, [r3, #1]
 615:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 1217              		.loc 1 615 0
 1218 0104 5BB2     		sxtb	r3, r3
 617:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_ACCEL_LSB]
 1219              		.loc 1 617 0
 1220 0106 1B02     		lsls	r3, r3, #8
 615:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 1221              		.loc 1 615 0
 1222 0108 1AB2     		sxth	r2, r3
 618:bma2x2.c      **** 			& BMA2x2_14_BIT_SHIFT));
 1223              		.loc 1 618 0
 1224 010a 0C23     		movs	r3, #12
 1225 010c FB18     		adds	r3, r7, r3
 1226 010e 1B78     		ldrb	r3, [r3]
 615:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_ACCEL_MSB]))
 1227              		.loc 1 615 0
 1228 0110 1BB2     		sxth	r3, r3
 1229 0112 FC21     		movs	r1, #252
 1230 0114 0B40     		ands	r3, r1
 1231 0116 1BB2     		sxth	r3, r3
 1232 0118 1343     		orrs	r3, r2
 1233 011a 1AB2     		sxth	r2, r3
 1234 011c 7B68     		ldr	r3, [r7, #4]
 1235 011e 1A80     		strh	r2, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 35


 620:bma2x2.c      **** 			BMA2x2_SHIFT_TWO_BITS;
 1236              		.loc 1 620 0
 1237 0120 7B68     		ldr	r3, [r7, #4]
 1238 0122 0022     		movs	r2, #0
 1239 0124 9B5E     		ldrsh	r3, [r3, r2]
 1240 0126 9B10     		asrs	r3, r3, #2
 1241 0128 1AB2     		sxth	r2, r3
 1242 012a 7B68     		ldr	r3, [r7, #4]
 1243 012c 1A80     		strh	r2, [r3]
 622:bma2x2.c      **** 		default:
 1244              		.loc 1 622 0
 1245 012e C046     		nop
 1246              	.L64:
 625:bma2x2.c      **** 		}
 626:bma2x2.c      **** 	}
 627:bma2x2.c      **** 	return com_rslt;
 1247              		.loc 1 627 0
 1248 0130 0F23     		movs	r3, #15
 1249 0132 FB18     		adds	r3, r7, r3
 1250 0134 1B78     		ldrb	r3, [r3]
 1251 0136 5BB2     		sxtb	r3, r3
 1252              	.L65:
 628:bma2x2.c      **** }
 1253              		.loc 1 628 0 discriminator 1
 1254 0138 1800     		movs	r0, r3
 1255 013a BD46     		mov	sp, r7
 1256 013c 04B0     		add	sp, sp, #16
 1257              		@ sp needed
 1258 013e B0BD     		pop	{r4, r5, r7, pc}
 1259              	.L67:
 1260              		.align	2
 1261              	.L66:
 1262 0140 00000000 		.word	p_bma2x2
 1263 0144 00000000 		.word	V_BMA2x2RESOLUTION_U8
 1264              		.cfi_endproc
 1265              	.LFE8:
 1266              		.size	bma2x2_read_accel_z, .-bma2x2_read_accel_z
 1267              		.section	.text.bma2x2_read_accel_eight_resolution_z,"ax",%progbits
 1268              		.align	2
 1269              		.global	bma2x2_read_accel_eight_resolution_z
 1270              		.code	16
 1271              		.thumb_func
 1272              		.type	bma2x2_read_accel_eight_resolution_z, %function
 1273              	bma2x2_read_accel_eight_resolution_z:
 1274              	.LFB9:
 629:bma2x2.c      **** /*!
 630:bma2x2.c      ****  * @brief
 631:bma2x2.c      ****  *	This API reads acceleration data Z values of
 632:bma2x2.c      ****  *	8bit  resolution  from location 07h
 633:bma2x2.c      ****  *
 634:bma2x2.c      ****  *
 635:bma2x2.c      ****  *
 636:bma2x2.c      ****  *
 637:bma2x2.c      ****  *  \@aram  accel_z_s8 : the data of z
 638:bma2x2.c      ****  *
 639:bma2x2.c      ****  *
 640:bma2x2.c      ****  *	@return results of bus communication function
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 36


 641:bma2x2.c      ****  *	@retval 0 -> Success
 642:bma2x2.c      ****  *	@retval -1 -> Error
 643:bma2x2.c      ****  *
 644:bma2x2.c      ****  *
 645:bma2x2.c      **** */
 646:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_read_accel_eight_resolution_z(
 647:bma2x2.c      **** s8 *accel_z_s8)
 648:bma2x2.c      **** {
 1275              		.loc 1 648 0
 1276              		.cfi_startproc
 1277              		@ args = 0, pretend = 0, frame = 16
 1278              		@ frame_needed = 1, uses_anonymous_args = 0
 1279 0000 B0B5     		push	{r4, r5, r7, lr}
 1280              		.cfi_def_cfa_offset 16
 1281              		.cfi_offset 4, -16
 1282              		.cfi_offset 5, -12
 1283              		.cfi_offset 7, -8
 1284              		.cfi_offset 14, -4
 1285 0002 84B0     		sub	sp, sp, #16
 1286              		.cfi_def_cfa_offset 32
 1287 0004 00AF     		add	r7, sp, #0
 1288              		.cfi_def_cfa_register 7
 1289 0006 7860     		str	r0, [r7, #4]
 649:bma2x2.c      **** 		/*  Variable used to return value of
 650:bma2x2.c      **** 	communication routine*/
 651:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 1290              		.loc 1 651 0
 1291 0008 0F23     		movs	r3, #15
 1292 000a FB18     		adds	r3, r7, r3
 1293 000c FF22     		movs	r2, #255
 1294 000e 1A70     		strb	r2, [r3]
 652:bma2x2.c      **** 	u8	data = BMA2x2_INIT_VALUE;
 1295              		.loc 1 652 0
 1296 0010 0E23     		movs	r3, #14
 1297 0012 FB18     		adds	r3, r7, r3
 1298 0014 0022     		movs	r2, #0
 1299 0016 1A70     		strb	r2, [r3]
 653:bma2x2.c      **** 
 654:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 1300              		.loc 1 654 0
 1301 0018 114B     		ldr	r3, .L72
 1302 001a 1B68     		ldr	r3, [r3]
 1303 001c 002B     		cmp	r3, #0
 1304 001e 02D1     		bne	.L69
 655:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
 656:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 1305              		.loc 1 656 0
 1306 0020 7F23     		movs	r3, #127
 1307 0022 5B42     		rsbs	r3, r3, #0
 1308 0024 18E0     		b	.L71
 1309              	.L69:
 657:bma2x2.c      **** 		} else {
 658:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 1310              		.loc 1 658 0
 1311 0026 0E4B     		ldr	r3, .L72
 1312 0028 1B68     		ldr	r3, [r3]
 1313 002a DD68     		ldr	r5, [r3, #12]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 37


 1314 002c 0C4B     		ldr	r3, .L72
 1315 002e 1B68     		ldr	r3, [r3]
 1316 0030 1879     		ldrb	r0, [r3, #4]
 1317 0032 0F23     		movs	r3, #15
 1318 0034 FC18     		adds	r4, r7, r3
 1319 0036 0E23     		movs	r3, #14
 1320 0038 FA18     		adds	r2, r7, r3
 1321 003a 0123     		movs	r3, #1
 1322 003c 0721     		movs	r1, #7
 1323 003e A847     		blx	r5
 1324 0040 0300     		movs	r3, r0
 1325 0042 2370     		strb	r3, [r4]
 659:bma2x2.c      **** 			(p_bma2x2->dev_addr,
 660:bma2x2.c      **** 			BMA2x2_Z_AXIS_MSB_ADDR, &data,
 661:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
 662:bma2x2.c      **** 			*accel_z_s8 = BMA2x2_GET_BITSLICE(data,
 1326              		.loc 1 662 0
 1327 0044 0E23     		movs	r3, #14
 1328 0046 FB18     		adds	r3, r7, r3
 1329 0048 1B78     		ldrb	r3, [r3]
 1330 004a 5AB2     		sxtb	r2, r3
 1331 004c 7B68     		ldr	r3, [r7, #4]
 1332 004e 1A70     		strb	r2, [r3]
 663:bma2x2.c      **** 			BMA2x2_ACCEL_Z_MSB);
 664:bma2x2.c      **** 		}
 665:bma2x2.c      **** 	return com_rslt;
 1333              		.loc 1 665 0
 1334 0050 0F23     		movs	r3, #15
 1335 0052 FB18     		adds	r3, r7, r3
 1336 0054 1B78     		ldrb	r3, [r3]
 1337 0056 5BB2     		sxtb	r3, r3
 1338              	.L71:
 666:bma2x2.c      **** }
 1339              		.loc 1 666 0 discriminator 1
 1340 0058 1800     		movs	r0, r3
 1341 005a BD46     		mov	sp, r7
 1342 005c 04B0     		add	sp, sp, #16
 1343              		@ sp needed
 1344 005e B0BD     		pop	{r4, r5, r7, pc}
 1345              	.L73:
 1346              		.align	2
 1347              	.L72:
 1348 0060 00000000 		.word	p_bma2x2
 1349              		.cfi_endproc
 1350              	.LFE9:
 1351              		.size	bma2x2_read_accel_eight_resolution_z, .-bma2x2_read_accel_eight_resolution_z
 1352              		.section	.text.bma2x2_read_accel_xyz,"ax",%progbits
 1353              		.align	2
 1354              		.global	bma2x2_read_accel_xyz
 1355              		.code	16
 1356              		.thumb_func
 1357              		.type	bma2x2_read_accel_xyz, %function
 1358              	bma2x2_read_accel_xyz:
 1359              	.LFB10:
 667:bma2x2.c      **** /*!
 668:bma2x2.c      ****  *	@brief This API reads acceleration data X,Y,Z values
 669:bma2x2.c      ****  *	from location 02h to 07h
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 38


 670:bma2x2.c      ****  *
 671:bma2x2.c      ****  *  @param accel : pointer holding the data of accel
 672:bma2x2.c      ****  *		       value       |   resolution
 673:bma2x2.c      ****  *       ----------------- | --------------
 674:bma2x2.c      ****  *              0          | BMA2x2_12_RESOLUTION
 675:bma2x2.c      ****  *              1          | BMA2x2_10_RESOLUTION
 676:bma2x2.c      ****  *              2          | BMA2x2_14_RESOLUTION
 677:bma2x2.c      ****  *
 678:bma2x2.c      ****  *	@return results of bus communication function
 679:bma2x2.c      ****  *	@retval 0 -> Success
 680:bma2x2.c      ****  *	@retval -1 -> Error
 681:bma2x2.c      ****  *
 682:bma2x2.c      ****  *
 683:bma2x2.c      **** */
 684:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_read_accel_xyz(
 685:bma2x2.c      **** struct bma2x2_accel_data *accel)
 686:bma2x2.c      **** {
 1360              		.loc 1 686 0
 1361              		.cfi_startproc
 1362              		@ args = 0, pretend = 0, frame = 16
 1363              		@ frame_needed = 1, uses_anonymous_args = 0
 1364 0000 B0B5     		push	{r4, r5, r7, lr}
 1365              		.cfi_def_cfa_offset 16
 1366              		.cfi_offset 4, -16
 1367              		.cfi_offset 5, -12
 1368              		.cfi_offset 7, -8
 1369              		.cfi_offset 14, -4
 1370 0002 84B0     		sub	sp, sp, #16
 1371              		.cfi_def_cfa_offset 32
 1372 0004 00AF     		add	r7, sp, #0
 1373              		.cfi_def_cfa_register 7
 1374 0006 7860     		str	r0, [r7, #4]
 687:bma2x2.c      **** 	/*  Variable used to return value of
 688:bma2x2.c      **** 	communication routine*/
 689:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 1375              		.loc 1 689 0
 1376 0008 0F23     		movs	r3, #15
 1377 000a FB18     		adds	r3, r7, r3
 1378 000c FF22     		movs	r2, #255
 1379 000e 1A70     		strb	r2, [r3]
 690:bma2x2.c      **** 	/* Array holding the accel xyz value
 691:bma2x2.c      **** 	data_u8[0] - x->LSB
 692:bma2x2.c      **** 	data_u8[1] - x->MSB
 693:bma2x2.c      **** 	data_u8[2] - y->MSB
 694:bma2x2.c      **** 	data_u8[3] - y->MSB
 695:bma2x2.c      **** 	data_u8[4] - z->MSB
 696:bma2x2.c      **** 	data_u8[5] - z->MSB
 697:bma2x2.c      **** 	*/
 698:bma2x2.c      **** 	u8 data_u8[BMA2x2_ACCEL_XYZ_DATA_SIZE] = {
 1380              		.loc 1 698 0
 1381 0010 0823     		movs	r3, #8
 1382 0012 FB18     		adds	r3, r7, r3
 1383 0014 1800     		movs	r0, r3
 1384 0016 0623     		movs	r3, #6
 1385 0018 1A00     		movs	r2, r3
 1386 001a 0021     		movs	r1, #0
 1387 001c FFF7FEFF 		bl	memset
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 39


 699:bma2x2.c      **** 	BMA2x2_INIT_VALUE, BMA2x2_INIT_VALUE,
 700:bma2x2.c      **** 	BMA2x2_INIT_VALUE, BMA2x2_INIT_VALUE,
 701:bma2x2.c      **** 	BMA2x2_INIT_VALUE, BMA2x2_INIT_VALUE};
 702:bma2x2.c      **** 
 703:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 1388              		.loc 1 703 0
 1389 0020 904B     		ldr	r3, .L83
 1390 0022 1B68     		ldr	r3, [r3]
 1391 0024 002B     		cmp	r3, #0
 1392 0026 02D1     		bne	.L75
 704:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
 705:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 1393              		.loc 1 705 0
 1394 0028 7F23     		movs	r3, #127
 1395 002a 5B42     		rsbs	r3, r3, #0
 1396 002c 15E1     		b	.L82
 1397              	.L75:
 706:bma2x2.c      **** 		} else {
 707:bma2x2.c      **** 		switch (V_BMA2x2RESOLUTION_U8) {
 1398              		.loc 1 707 0
 1399 002e 8E4B     		ldr	r3, .L83+4
 1400 0030 1B78     		ldrb	r3, [r3]
 1401 0032 012B     		cmp	r3, #1
 1402 0034 5DD0     		beq	.L78
 1403 0036 022B     		cmp	r3, #2
 1404 0038 00D1     		bne	.LCB1238
 1405 003a B2E0     		b	.L79	@long jump
 1406              	.LCB1238:
 1407 003c 002B     		cmp	r3, #0
 1408 003e 00D0     		beq	.L80
 708:bma2x2.c      **** 		/* This case used for the resolution bit 12*/
 709:bma2x2.c      **** 		case BMA2x2_12_RESOLUTION:
 710:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 711:bma2x2.c      **** 			(p_bma2x2->dev_addr, BMA2x2_ACCEL_X12_LSB_REG,
 712:bma2x2.c      **** 			data_u8, BMA2x2_SHIFT_SIX_BITS);
 713:bma2x2.c      **** 			/* read the x data_u8*/
 714:bma2x2.c      **** 			accel->x = (s16)((((s32)((s8)
 715:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_X_MSB]))
 716:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS) |
 717:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_XYZ_X_LSB] &
 718:bma2x2.c      **** 			BMA2x2_12_BIT_SHIFT));
 719:bma2x2.c      **** 			accel->x = accel->x >> BMA2x2_SHIFT_FOUR_BITS;
 720:bma2x2.c      **** 
 721:bma2x2.c      **** 			/* read the y data_u8*/
 722:bma2x2.c      **** 			accel->y = (s16)((((s32)((s8)
 723:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Y_MSB]))
 724:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS) |
 725:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_XYZ_Y_LSB] &
 726:bma2x2.c      **** 			BMA2x2_12_BIT_SHIFT));
 727:bma2x2.c      **** 			accel->y = accel->y >> BMA2x2_SHIFT_FOUR_BITS;
 728:bma2x2.c      **** 
 729:bma2x2.c      **** 			/* read the z data_u8*/
 730:bma2x2.c      **** 			accel->z = (s16)((((s32)((s8)
 731:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Z_MSB]))
 732:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS) |
 733:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_XYZ_Z_LSB] &
 734:bma2x2.c      **** 			BMA2x2_12_BIT_SHIFT));
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 40


 735:bma2x2.c      **** 			accel->z = accel->z >> BMA2x2_SHIFT_FOUR_BITS;
 736:bma2x2.c      **** 
 737:bma2x2.c      **** 		break;
 738:bma2x2.c      **** 		case BMA2x2_10_RESOLUTION:
 739:bma2x2.c      **** 		/* This case used for the resolution bit 10*/
 740:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 741:bma2x2.c      **** 			(p_bma2x2->dev_addr, BMA2x2_ACCEL_X10_LSB_REG,
 742:bma2x2.c      **** 			data_u8, BMA2x2_SHIFT_SIX_BITS);
 743:bma2x2.c      **** 			/* read the x data_u8*/
 744:bma2x2.c      **** 			accel->x = (s16)((((s32)((s8)
 745:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_X_MSB]))
 746:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS) |
 747:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_XYZ_X_LSB] &
 748:bma2x2.c      **** 			BMA2x2_10_BIT_SHIFT));
 749:bma2x2.c      **** 			accel->x = accel->x >> BMA2x2_SHIFT_SIX_BITS;
 750:bma2x2.c      **** 
 751:bma2x2.c      **** 			/* read the y data_u8*/
 752:bma2x2.c      **** 			accel->y = (s16)((((s32)((s8)
 753:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Y_MSB]))
 754:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS) |
 755:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_XYZ_Y_LSB] &
 756:bma2x2.c      **** 			BMA2x2_10_BIT_SHIFT));
 757:bma2x2.c      **** 			accel->y = accel->y >> BMA2x2_SHIFT_SIX_BITS;
 758:bma2x2.c      **** 
 759:bma2x2.c      **** 			/* read the z data_u8*/
 760:bma2x2.c      **** 			accel->z = (s16)((((s32)((s8)
 761:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Z_MSB]))
 762:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS) |
 763:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_XYZ_Z_LSB]
 764:bma2x2.c      **** 			& BMA2x2_10_BIT_SHIFT));
 765:bma2x2.c      **** 			accel->z = accel->z >> BMA2x2_SHIFT_SIX_BITS;
 766:bma2x2.c      **** 		break;
 767:bma2x2.c      **** 		/* This case used for the resolution bit 14*/
 768:bma2x2.c      **** 		case BMA2x2_14_RESOLUTION:
 769:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 770:bma2x2.c      **** 			(p_bma2x2->dev_addr, BMA2x2_ACCEL_X14_LSB_REG,
 771:bma2x2.c      **** 			data_u8, BMA2x2_SHIFT_SIX_BITS);
 772:bma2x2.c      **** 
 773:bma2x2.c      **** 			/* read the x data_u8*/
 774:bma2x2.c      **** 			accel->x = (s16)((((s32)((s8)
 775:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_X_MSB]))<<
 776:bma2x2.c      **** 			BMA2x2_SHIFT_EIGHT_BITS) |
 777:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_XYZ_X_LSB]
 778:bma2x2.c      **** 			& BMA2x2_14_BIT_SHIFT));
 779:bma2x2.c      **** 			accel->x = accel->x >> BMA2x2_SHIFT_TWO_BITS;
 780:bma2x2.c      **** 
 781:bma2x2.c      **** 			/* read the y data_u8*/
 782:bma2x2.c      **** 			accel->y = (s16)((((s32)((s8)
 783:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Y_MSB]))<<
 784:bma2x2.c      **** 			BMA2x2_SHIFT_EIGHT_BITS) |
 785:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_XYZ_Y_LSB]
 786:bma2x2.c      **** 			& BMA2x2_14_BIT_SHIFT));
 787:bma2x2.c      **** 			accel->y = accel->y >> BMA2x2_SHIFT_TWO_BITS;
 788:bma2x2.c      **** 
 789:bma2x2.c      **** 			/* read the z data_u8*/
 790:bma2x2.c      **** 			accel->z = (s16)((((s32)((s8)
 791:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Z_MSB]))<<
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 41


 792:bma2x2.c      **** 			BMA2x2_SHIFT_EIGHT_BITS) |
 793:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_XYZ_Z_LSB]
 794:bma2x2.c      **** 			& BMA2x2_14_BIT_SHIFT));
 795:bma2x2.c      **** 			accel->z = accel->z >> BMA2x2_SHIFT_TWO_BITS;
 796:bma2x2.c      **** 		break;
 797:bma2x2.c      **** 		default:
 798:bma2x2.c      **** 		break;
 1409              		.loc 1 798 0
 1410 0040 07E1     		b	.L81
 1411              	.L80:
 710:bma2x2.c      **** 			(p_bma2x2->dev_addr, BMA2x2_ACCEL_X12_LSB_REG,
 1412              		.loc 1 710 0
 1413 0042 884B     		ldr	r3, .L83
 1414 0044 1B68     		ldr	r3, [r3]
 1415 0046 DD68     		ldr	r5, [r3, #12]
 1416 0048 864B     		ldr	r3, .L83
 1417 004a 1B68     		ldr	r3, [r3]
 1418 004c 1879     		ldrb	r0, [r3, #4]
 1419 004e 0F23     		movs	r3, #15
 1420 0050 FC18     		adds	r4, r7, r3
 1421 0052 0823     		movs	r3, #8
 1422 0054 FA18     		adds	r2, r7, r3
 1423 0056 0623     		movs	r3, #6
 1424 0058 0221     		movs	r1, #2
 1425 005a A847     		blx	r5
 1426 005c 0300     		movs	r3, r0
 1427 005e 2370     		strb	r3, [r4]
 715:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS) |
 1428              		.loc 1 715 0
 1429 0060 0823     		movs	r3, #8
 1430 0062 FB18     		adds	r3, r7, r3
 1431 0064 5B78     		ldrb	r3, [r3, #1]
 714:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_X_MSB]))
 1432              		.loc 1 714 0
 1433 0066 5BB2     		sxtb	r3, r3
 716:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_XYZ_X_LSB] &
 1434              		.loc 1 716 0
 1435 0068 1B02     		lsls	r3, r3, #8
 714:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_X_MSB]))
 1436              		.loc 1 714 0
 1437 006a 1AB2     		sxth	r2, r3
 717:bma2x2.c      **** 			BMA2x2_12_BIT_SHIFT));
 1438              		.loc 1 717 0
 1439 006c 0823     		movs	r3, #8
 1440 006e FB18     		adds	r3, r7, r3
 1441 0070 1B78     		ldrb	r3, [r3]
 714:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_X_MSB]))
 1442              		.loc 1 714 0
 1443 0072 1BB2     		sxth	r3, r3
 1444 0074 F021     		movs	r1, #240
 1445 0076 0B40     		ands	r3, r1
 1446 0078 1BB2     		sxth	r3, r3
 1447 007a 1343     		orrs	r3, r2
 1448 007c 1AB2     		sxth	r2, r3
 1449 007e 7B68     		ldr	r3, [r7, #4]
 1450 0080 1A80     		strh	r2, [r3]
 719:bma2x2.c      **** 
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 42


 1451              		.loc 1 719 0
 1452 0082 7B68     		ldr	r3, [r7, #4]
 1453 0084 0022     		movs	r2, #0
 1454 0086 9B5E     		ldrsh	r3, [r3, r2]
 1455 0088 1B11     		asrs	r3, r3, #4
 1456 008a 1AB2     		sxth	r2, r3
 1457 008c 7B68     		ldr	r3, [r7, #4]
 1458 008e 1A80     		strh	r2, [r3]
 723:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS) |
 1459              		.loc 1 723 0
 1460 0090 0823     		movs	r3, #8
 1461 0092 FB18     		adds	r3, r7, r3
 1462 0094 DB78     		ldrb	r3, [r3, #3]
 722:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Y_MSB]))
 1463              		.loc 1 722 0
 1464 0096 5BB2     		sxtb	r3, r3
 724:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_XYZ_Y_LSB] &
 1465              		.loc 1 724 0
 1466 0098 1B02     		lsls	r3, r3, #8
 722:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Y_MSB]))
 1467              		.loc 1 722 0
 1468 009a 1AB2     		sxth	r2, r3
 725:bma2x2.c      **** 			BMA2x2_12_BIT_SHIFT));
 1469              		.loc 1 725 0
 1470 009c 0823     		movs	r3, #8
 1471 009e FB18     		adds	r3, r7, r3
 1472 00a0 9B78     		ldrb	r3, [r3, #2]
 722:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Y_MSB]))
 1473              		.loc 1 722 0
 1474 00a2 1BB2     		sxth	r3, r3
 1475 00a4 F021     		movs	r1, #240
 1476 00a6 0B40     		ands	r3, r1
 1477 00a8 1BB2     		sxth	r3, r3
 1478 00aa 1343     		orrs	r3, r2
 1479 00ac 1AB2     		sxth	r2, r3
 1480 00ae 7B68     		ldr	r3, [r7, #4]
 1481 00b0 5A80     		strh	r2, [r3, #2]
 727:bma2x2.c      **** 
 1482              		.loc 1 727 0
 1483 00b2 7B68     		ldr	r3, [r7, #4]
 1484 00b4 0222     		movs	r2, #2
 1485 00b6 9B5E     		ldrsh	r3, [r3, r2]
 1486 00b8 1B11     		asrs	r3, r3, #4
 1487 00ba 1AB2     		sxth	r2, r3
 1488 00bc 7B68     		ldr	r3, [r7, #4]
 1489 00be 5A80     		strh	r2, [r3, #2]
 731:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS) |
 1490              		.loc 1 731 0
 1491 00c0 0823     		movs	r3, #8
 1492 00c2 FB18     		adds	r3, r7, r3
 1493 00c4 5B79     		ldrb	r3, [r3, #5]
 730:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Z_MSB]))
 1494              		.loc 1 730 0
 1495 00c6 5BB2     		sxtb	r3, r3
 732:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_XYZ_Z_LSB] &
 1496              		.loc 1 732 0
 1497 00c8 1B02     		lsls	r3, r3, #8
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 43


 730:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Z_MSB]))
 1498              		.loc 1 730 0
 1499 00ca 1AB2     		sxth	r2, r3
 733:bma2x2.c      **** 			BMA2x2_12_BIT_SHIFT));
 1500              		.loc 1 733 0
 1501 00cc 0823     		movs	r3, #8
 1502 00ce FB18     		adds	r3, r7, r3
 1503 00d0 1B79     		ldrb	r3, [r3, #4]
 730:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Z_MSB]))
 1504              		.loc 1 730 0
 1505 00d2 1BB2     		sxth	r3, r3
 1506 00d4 F021     		movs	r1, #240
 1507 00d6 0B40     		ands	r3, r1
 1508 00d8 1BB2     		sxth	r3, r3
 1509 00da 1343     		orrs	r3, r2
 1510 00dc 1AB2     		sxth	r2, r3
 1511 00de 7B68     		ldr	r3, [r7, #4]
 1512 00e0 9A80     		strh	r2, [r3, #4]
 735:bma2x2.c      **** 
 1513              		.loc 1 735 0
 1514 00e2 7B68     		ldr	r3, [r7, #4]
 1515 00e4 0422     		movs	r2, #4
 1516 00e6 9B5E     		ldrsh	r3, [r3, r2]
 1517 00e8 1B11     		asrs	r3, r3, #4
 1518 00ea 1AB2     		sxth	r2, r3
 1519 00ec 7B68     		ldr	r3, [r7, #4]
 1520 00ee 9A80     		strh	r2, [r3, #4]
 737:bma2x2.c      **** 		case BMA2x2_10_RESOLUTION:
 1521              		.loc 1 737 0
 1522 00f0 AFE0     		b	.L81
 1523              	.L78:
 740:bma2x2.c      **** 			(p_bma2x2->dev_addr, BMA2x2_ACCEL_X10_LSB_REG,
 1524              		.loc 1 740 0
 1525 00f2 5C4B     		ldr	r3, .L83
 1526 00f4 1B68     		ldr	r3, [r3]
 1527 00f6 DD68     		ldr	r5, [r3, #12]
 1528 00f8 5A4B     		ldr	r3, .L83
 1529 00fa 1B68     		ldr	r3, [r3]
 1530 00fc 1879     		ldrb	r0, [r3, #4]
 1531 00fe 0F23     		movs	r3, #15
 1532 0100 FC18     		adds	r4, r7, r3
 1533 0102 0823     		movs	r3, #8
 1534 0104 FA18     		adds	r2, r7, r3
 1535 0106 0623     		movs	r3, #6
 1536 0108 0221     		movs	r1, #2
 1537 010a A847     		blx	r5
 1538 010c 0300     		movs	r3, r0
 1539 010e 2370     		strb	r3, [r4]
 745:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS) |
 1540              		.loc 1 745 0
 1541 0110 0823     		movs	r3, #8
 1542 0112 FB18     		adds	r3, r7, r3
 1543 0114 5B78     		ldrb	r3, [r3, #1]
 744:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_X_MSB]))
 1544              		.loc 1 744 0
 1545 0116 5BB2     		sxtb	r3, r3
 746:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_XYZ_X_LSB] &
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 44


 1546              		.loc 1 746 0
 1547 0118 1B02     		lsls	r3, r3, #8
 744:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_X_MSB]))
 1548              		.loc 1 744 0
 1549 011a 1AB2     		sxth	r2, r3
 747:bma2x2.c      **** 			BMA2x2_10_BIT_SHIFT));
 1550              		.loc 1 747 0
 1551 011c 0823     		movs	r3, #8
 1552 011e FB18     		adds	r3, r7, r3
 1553 0120 1B78     		ldrb	r3, [r3]
 744:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_X_MSB]))
 1554              		.loc 1 744 0
 1555 0122 1BB2     		sxth	r3, r3
 1556 0124 C021     		movs	r1, #192
 1557 0126 0B40     		ands	r3, r1
 1558 0128 1BB2     		sxth	r3, r3
 1559 012a 1343     		orrs	r3, r2
 1560 012c 1AB2     		sxth	r2, r3
 1561 012e 7B68     		ldr	r3, [r7, #4]
 1562 0130 1A80     		strh	r2, [r3]
 749:bma2x2.c      **** 
 1563              		.loc 1 749 0
 1564 0132 7B68     		ldr	r3, [r7, #4]
 1565 0134 0022     		movs	r2, #0
 1566 0136 9B5E     		ldrsh	r3, [r3, r2]
 1567 0138 9B11     		asrs	r3, r3, #6
 1568 013a 1AB2     		sxth	r2, r3
 1569 013c 7B68     		ldr	r3, [r7, #4]
 1570 013e 1A80     		strh	r2, [r3]
 753:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS) |
 1571              		.loc 1 753 0
 1572 0140 0823     		movs	r3, #8
 1573 0142 FB18     		adds	r3, r7, r3
 1574 0144 DB78     		ldrb	r3, [r3, #3]
 752:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Y_MSB]))
 1575              		.loc 1 752 0
 1576 0146 5BB2     		sxtb	r3, r3
 754:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_XYZ_Y_LSB] &
 1577              		.loc 1 754 0
 1578 0148 1B02     		lsls	r3, r3, #8
 752:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Y_MSB]))
 1579              		.loc 1 752 0
 1580 014a 1AB2     		sxth	r2, r3
 755:bma2x2.c      **** 			BMA2x2_10_BIT_SHIFT));
 1581              		.loc 1 755 0
 1582 014c 0823     		movs	r3, #8
 1583 014e FB18     		adds	r3, r7, r3
 1584 0150 9B78     		ldrb	r3, [r3, #2]
 752:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Y_MSB]))
 1585              		.loc 1 752 0
 1586 0152 1BB2     		sxth	r3, r3
 1587 0154 C021     		movs	r1, #192
 1588 0156 0B40     		ands	r3, r1
 1589 0158 1BB2     		sxth	r3, r3
 1590 015a 1343     		orrs	r3, r2
 1591 015c 1AB2     		sxth	r2, r3
 1592 015e 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 45


 1593 0160 5A80     		strh	r2, [r3, #2]
 757:bma2x2.c      **** 
 1594              		.loc 1 757 0
 1595 0162 7B68     		ldr	r3, [r7, #4]
 1596 0164 0222     		movs	r2, #2
 1597 0166 9B5E     		ldrsh	r3, [r3, r2]
 1598 0168 9B11     		asrs	r3, r3, #6
 1599 016a 1AB2     		sxth	r2, r3
 1600 016c 7B68     		ldr	r3, [r7, #4]
 1601 016e 5A80     		strh	r2, [r3, #2]
 761:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS) |
 1602              		.loc 1 761 0
 1603 0170 0823     		movs	r3, #8
 1604 0172 FB18     		adds	r3, r7, r3
 1605 0174 5B79     		ldrb	r3, [r3, #5]
 760:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Z_MSB]))
 1606              		.loc 1 760 0
 1607 0176 5BB2     		sxtb	r3, r3
 762:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_XYZ_Z_LSB]
 1608              		.loc 1 762 0
 1609 0178 1B02     		lsls	r3, r3, #8
 760:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Z_MSB]))
 1610              		.loc 1 760 0
 1611 017a 1AB2     		sxth	r2, r3
 763:bma2x2.c      **** 			& BMA2x2_10_BIT_SHIFT));
 1612              		.loc 1 763 0
 1613 017c 0823     		movs	r3, #8
 1614 017e FB18     		adds	r3, r7, r3
 1615 0180 1B79     		ldrb	r3, [r3, #4]
 760:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Z_MSB]))
 1616              		.loc 1 760 0
 1617 0182 1BB2     		sxth	r3, r3
 1618 0184 C021     		movs	r1, #192
 1619 0186 0B40     		ands	r3, r1
 1620 0188 1BB2     		sxth	r3, r3
 1621 018a 1343     		orrs	r3, r2
 1622 018c 1AB2     		sxth	r2, r3
 1623 018e 7B68     		ldr	r3, [r7, #4]
 1624 0190 9A80     		strh	r2, [r3, #4]
 765:bma2x2.c      **** 		break;
 1625              		.loc 1 765 0
 1626 0192 7B68     		ldr	r3, [r7, #4]
 1627 0194 0422     		movs	r2, #4
 1628 0196 9B5E     		ldrsh	r3, [r3, r2]
 1629 0198 9B11     		asrs	r3, r3, #6
 1630 019a 1AB2     		sxth	r2, r3
 1631 019c 7B68     		ldr	r3, [r7, #4]
 1632 019e 9A80     		strh	r2, [r3, #4]
 766:bma2x2.c      **** 		/* This case used for the resolution bit 14*/
 1633              		.loc 1 766 0
 1634 01a0 57E0     		b	.L81
 1635              	.L79:
 769:bma2x2.c      **** 			(p_bma2x2->dev_addr, BMA2x2_ACCEL_X14_LSB_REG,
 1636              		.loc 1 769 0
 1637 01a2 304B     		ldr	r3, .L83
 1638 01a4 1B68     		ldr	r3, [r3]
 1639 01a6 DD68     		ldr	r5, [r3, #12]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 46


 1640 01a8 2E4B     		ldr	r3, .L83
 1641 01aa 1B68     		ldr	r3, [r3]
 1642 01ac 1879     		ldrb	r0, [r3, #4]
 1643 01ae 0F23     		movs	r3, #15
 1644 01b0 FC18     		adds	r4, r7, r3
 1645 01b2 0823     		movs	r3, #8
 1646 01b4 FA18     		adds	r2, r7, r3
 1647 01b6 0623     		movs	r3, #6
 1648 01b8 0221     		movs	r1, #2
 1649 01ba A847     		blx	r5
 1650 01bc 0300     		movs	r3, r0
 1651 01be 2370     		strb	r3, [r4]
 775:bma2x2.c      **** 			BMA2x2_SHIFT_EIGHT_BITS) |
 1652              		.loc 1 775 0
 1653 01c0 0823     		movs	r3, #8
 1654 01c2 FB18     		adds	r3, r7, r3
 1655 01c4 5B78     		ldrb	r3, [r3, #1]
 774:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_X_MSB]))<<
 1656              		.loc 1 774 0
 1657 01c6 5BB2     		sxtb	r3, r3
 775:bma2x2.c      **** 			BMA2x2_SHIFT_EIGHT_BITS) |
 1658              		.loc 1 775 0
 1659 01c8 1B02     		lsls	r3, r3, #8
 774:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_X_MSB]))<<
 1660              		.loc 1 774 0
 1661 01ca 1AB2     		sxth	r2, r3
 777:bma2x2.c      **** 			& BMA2x2_14_BIT_SHIFT));
 1662              		.loc 1 777 0
 1663 01cc 0823     		movs	r3, #8
 1664 01ce FB18     		adds	r3, r7, r3
 1665 01d0 1B78     		ldrb	r3, [r3]
 774:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_X_MSB]))<<
 1666              		.loc 1 774 0
 1667 01d2 1BB2     		sxth	r3, r3
 1668 01d4 FC21     		movs	r1, #252
 1669 01d6 0B40     		ands	r3, r1
 1670 01d8 1BB2     		sxth	r3, r3
 1671 01da 1343     		orrs	r3, r2
 1672 01dc 1AB2     		sxth	r2, r3
 1673 01de 7B68     		ldr	r3, [r7, #4]
 1674 01e0 1A80     		strh	r2, [r3]
 779:bma2x2.c      **** 
 1675              		.loc 1 779 0
 1676 01e2 7B68     		ldr	r3, [r7, #4]
 1677 01e4 0022     		movs	r2, #0
 1678 01e6 9B5E     		ldrsh	r3, [r3, r2]
 1679 01e8 9B10     		asrs	r3, r3, #2
 1680 01ea 1AB2     		sxth	r2, r3
 1681 01ec 7B68     		ldr	r3, [r7, #4]
 1682 01ee 1A80     		strh	r2, [r3]
 783:bma2x2.c      **** 			BMA2x2_SHIFT_EIGHT_BITS) |
 1683              		.loc 1 783 0
 1684 01f0 0823     		movs	r3, #8
 1685 01f2 FB18     		adds	r3, r7, r3
 1686 01f4 DB78     		ldrb	r3, [r3, #3]
 782:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Y_MSB]))<<
 1687              		.loc 1 782 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 47


 1688 01f6 5BB2     		sxtb	r3, r3
 783:bma2x2.c      **** 			BMA2x2_SHIFT_EIGHT_BITS) |
 1689              		.loc 1 783 0
 1690 01f8 1B02     		lsls	r3, r3, #8
 782:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Y_MSB]))<<
 1691              		.loc 1 782 0
 1692 01fa 1AB2     		sxth	r2, r3
 785:bma2x2.c      **** 			& BMA2x2_14_BIT_SHIFT));
 1693              		.loc 1 785 0
 1694 01fc 0823     		movs	r3, #8
 1695 01fe FB18     		adds	r3, r7, r3
 1696 0200 9B78     		ldrb	r3, [r3, #2]
 782:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Y_MSB]))<<
 1697              		.loc 1 782 0
 1698 0202 1BB2     		sxth	r3, r3
 1699 0204 FC21     		movs	r1, #252
 1700 0206 0B40     		ands	r3, r1
 1701 0208 1BB2     		sxth	r3, r3
 1702 020a 1343     		orrs	r3, r2
 1703 020c 1AB2     		sxth	r2, r3
 1704 020e 7B68     		ldr	r3, [r7, #4]
 1705 0210 5A80     		strh	r2, [r3, #2]
 787:bma2x2.c      **** 
 1706              		.loc 1 787 0
 1707 0212 7B68     		ldr	r3, [r7, #4]
 1708 0214 0222     		movs	r2, #2
 1709 0216 9B5E     		ldrsh	r3, [r3, r2]
 1710 0218 9B10     		asrs	r3, r3, #2
 1711 021a 1AB2     		sxth	r2, r3
 1712 021c 7B68     		ldr	r3, [r7, #4]
 1713 021e 5A80     		strh	r2, [r3, #2]
 791:bma2x2.c      **** 			BMA2x2_SHIFT_EIGHT_BITS) |
 1714              		.loc 1 791 0
 1715 0220 0823     		movs	r3, #8
 1716 0222 FB18     		adds	r3, r7, r3
 1717 0224 5B79     		ldrb	r3, [r3, #5]
 790:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Z_MSB]))<<
 1718              		.loc 1 790 0
 1719 0226 5BB2     		sxtb	r3, r3
 791:bma2x2.c      **** 			BMA2x2_SHIFT_EIGHT_BITS) |
 1720              		.loc 1 791 0
 1721 0228 1B02     		lsls	r3, r3, #8
 790:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Z_MSB]))<<
 1722              		.loc 1 790 0
 1723 022a 1AB2     		sxth	r2, r3
 793:bma2x2.c      **** 			& BMA2x2_14_BIT_SHIFT));
 1724              		.loc 1 793 0
 1725 022c 0823     		movs	r3, #8
 1726 022e FB18     		adds	r3, r7, r3
 1727 0230 1B79     		ldrb	r3, [r3, #4]
 790:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Z_MSB]))<<
 1728              		.loc 1 790 0
 1729 0232 1BB2     		sxth	r3, r3
 1730 0234 FC21     		movs	r1, #252
 1731 0236 0B40     		ands	r3, r1
 1732 0238 1BB2     		sxth	r3, r3
 1733 023a 1343     		orrs	r3, r2
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 48


 1734 023c 1AB2     		sxth	r2, r3
 1735 023e 7B68     		ldr	r3, [r7, #4]
 1736 0240 9A80     		strh	r2, [r3, #4]
 795:bma2x2.c      **** 		break;
 1737              		.loc 1 795 0
 1738 0242 7B68     		ldr	r3, [r7, #4]
 1739 0244 0422     		movs	r2, #4
 1740 0246 9B5E     		ldrsh	r3, [r3, r2]
 1741 0248 9B10     		asrs	r3, r3, #2
 1742 024a 1AB2     		sxth	r2, r3
 1743 024c 7B68     		ldr	r3, [r7, #4]
 1744 024e 9A80     		strh	r2, [r3, #4]
 796:bma2x2.c      **** 		default:
 1745              		.loc 1 796 0
 1746 0250 C046     		nop
 1747              	.L81:
 799:bma2x2.c      **** 		}
 800:bma2x2.c      **** 	}
 801:bma2x2.c      **** 	return com_rslt;
 1748              		.loc 1 801 0
 1749 0252 0F23     		movs	r3, #15
 1750 0254 FB18     		adds	r3, r7, r3
 1751 0256 1B78     		ldrb	r3, [r3]
 1752 0258 5BB2     		sxtb	r3, r3
 1753              	.L82:
 802:bma2x2.c      **** }
 1754              		.loc 1 802 0 discriminator 1
 1755 025a 1800     		movs	r0, r3
 1756 025c BD46     		mov	sp, r7
 1757 025e 04B0     		add	sp, sp, #16
 1758              		@ sp needed
 1759 0260 B0BD     		pop	{r4, r5, r7, pc}
 1760              	.L84:
 1761 0262 C046     		.align	2
 1762              	.L83:
 1763 0264 00000000 		.word	p_bma2x2
 1764 0268 00000000 		.word	V_BMA2x2RESOLUTION_U8
 1765              		.cfi_endproc
 1766              	.LFE10:
 1767              		.size	bma2x2_read_accel_xyz, .-bma2x2_read_accel_xyz
 1768              		.section	.text.bma2x2_read_accel_eight_resolution_xyz,"ax",%progbits
 1769              		.align	2
 1770              		.global	bma2x2_read_accel_eight_resolution_xyz
 1771              		.code	16
 1772              		.thumb_func
 1773              		.type	bma2x2_read_accel_eight_resolution_xyz, %function
 1774              	bma2x2_read_accel_eight_resolution_xyz:
 1775              	.LFB11:
 803:bma2x2.c      **** /*!
 804:bma2x2.c      ****  * @brief This API reads acceleration of 8 bit resolution
 805:bma2x2.c      ****  * data of X,Y,Z values
 806:bma2x2.c      ****  * from location 03h , 05h and 07h
 807:bma2x2.c      ****  *
 808:bma2x2.c      ****  *
 809:bma2x2.c      ****  *
 810:bma2x2.c      ****  *
 811:bma2x2.c      ****  *  @param accel : pointer holding the data of accel
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 49


 812:bma2x2.c      ****  *
 813:bma2x2.c      ****  *
 814:bma2x2.c      ****  *
 815:bma2x2.c      ****  *	@return results of bus communication function
 816:bma2x2.c      ****  *	@retval 0 -> Success
 817:bma2x2.c      ****  *	@retval -1 -> Error
 818:bma2x2.c      ****  *
 819:bma2x2.c      ****  *
 820:bma2x2.c      **** */
 821:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_read_accel_eight_resolution_xyz(
 822:bma2x2.c      **** struct bma2x2_accel_eight_resolution *accel)
 823:bma2x2.c      **** {
 1776              		.loc 1 823 0
 1777              		.cfi_startproc
 1778              		@ args = 0, pretend = 0, frame = 16
 1779              		@ frame_needed = 1, uses_anonymous_args = 0
 1780 0000 B0B5     		push	{r4, r5, r7, lr}
 1781              		.cfi_def_cfa_offset 16
 1782              		.cfi_offset 4, -16
 1783              		.cfi_offset 5, -12
 1784              		.cfi_offset 7, -8
 1785              		.cfi_offset 14, -4
 1786 0002 84B0     		sub	sp, sp, #16
 1787              		.cfi_def_cfa_offset 32
 1788 0004 00AF     		add	r7, sp, #0
 1789              		.cfi_def_cfa_register 7
 1790 0006 7860     		str	r0, [r7, #4]
 824:bma2x2.c      **** 	/*  Variable used to return value of
 825:bma2x2.c      **** 	communication routine*/
 826:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 1791              		.loc 1 826 0
 1792 0008 0F23     		movs	r3, #15
 1793 000a FB18     		adds	r3, r7, r3
 1794 000c FF22     		movs	r2, #255
 1795 000e 1A70     		strb	r2, [r3]
 827:bma2x2.c      **** 	u8	data_u8 = BMA2x2_INIT_VALUE;
 1796              		.loc 1 827 0
 1797 0010 0E23     		movs	r3, #14
 1798 0012 FB18     		adds	r3, r7, r3
 1799 0014 0022     		movs	r2, #0
 1800 0016 1A70     		strb	r2, [r3]
 828:bma2x2.c      **** 
 829:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 1801              		.loc 1 829 0
 1802 0018 264B     		ldr	r3, .L89
 1803 001a 1B68     		ldr	r3, [r3]
 1804 001c 002B     		cmp	r3, #0
 1805 001e 02D1     		bne	.L86
 830:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
 831:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 1806              		.loc 1 831 0
 1807 0020 7F23     		movs	r3, #127
 1808 0022 5B42     		rsbs	r3, r3, #0
 1809 0024 42E0     		b	.L88
 1810              	.L86:
 832:bma2x2.c      **** 		} else {
 833:bma2x2.c      **** 		com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 50


 1811              		.loc 1 833 0
 1812 0026 234B     		ldr	r3, .L89
 1813 0028 1B68     		ldr	r3, [r3]
 1814 002a DD68     		ldr	r5, [r3, #12]
 1815 002c 214B     		ldr	r3, .L89
 1816 002e 1B68     		ldr	r3, [r3]
 1817 0030 1879     		ldrb	r0, [r3, #4]
 1818 0032 0F23     		movs	r3, #15
 1819 0034 FC18     		adds	r4, r7, r3
 1820 0036 0E23     		movs	r3, #14
 1821 0038 FA18     		adds	r2, r7, r3
 1822 003a 0123     		movs	r3, #1
 1823 003c 0321     		movs	r1, #3
 1824 003e A847     		blx	r5
 1825 0040 0300     		movs	r3, r0
 1826 0042 2370     		strb	r3, [r4]
 834:bma2x2.c      **** 		(p_bma2x2->dev_addr,
 835:bma2x2.c      **** 		BMA2x2_X_AXIS_MSB_ADDR, &data_u8,
 836:bma2x2.c      **** 		BMA2x2_GEN_READ_WRITE_LENGTH);
 837:bma2x2.c      **** 		accel->x = BMA2x2_GET_BITSLICE(data_u8,
 1827              		.loc 1 837 0
 1828 0044 0E23     		movs	r3, #14
 1829 0046 FB18     		adds	r3, r7, r3
 1830 0048 1B78     		ldrb	r3, [r3]
 1831 004a 5AB2     		sxtb	r2, r3
 1832 004c 7B68     		ldr	r3, [r7, #4]
 1833 004e 1A70     		strb	r2, [r3]
 838:bma2x2.c      **** 		BMA2x2_ACCEL_X_MSB);
 839:bma2x2.c      **** 
 840:bma2x2.c      **** 		com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 1834              		.loc 1 840 0
 1835 0050 184B     		ldr	r3, .L89
 1836 0052 1B68     		ldr	r3, [r3]
 1837 0054 DD68     		ldr	r5, [r3, #12]
 1838 0056 174B     		ldr	r3, .L89
 1839 0058 1B68     		ldr	r3, [r3]
 1840 005a 1879     		ldrb	r0, [r3, #4]
 1841 005c 0F23     		movs	r3, #15
 1842 005e FC18     		adds	r4, r7, r3
 1843 0060 0E23     		movs	r3, #14
 1844 0062 FA18     		adds	r2, r7, r3
 1845 0064 0123     		movs	r3, #1
 1846 0066 0521     		movs	r1, #5
 1847 0068 A847     		blx	r5
 1848 006a 0300     		movs	r3, r0
 1849 006c 2370     		strb	r3, [r4]
 841:bma2x2.c      **** 		(p_bma2x2->dev_addr,
 842:bma2x2.c      **** 		BMA2x2_Y_AXIS_MSB_ADDR, &data_u8,
 843:bma2x2.c      **** 		BMA2x2_GEN_READ_WRITE_LENGTH);
 844:bma2x2.c      **** 		accel->y = BMA2x2_GET_BITSLICE(data_u8,
 1850              		.loc 1 844 0
 1851 006e 0E23     		movs	r3, #14
 1852 0070 FB18     		adds	r3, r7, r3
 1853 0072 1B78     		ldrb	r3, [r3]
 1854 0074 5AB2     		sxtb	r2, r3
 1855 0076 7B68     		ldr	r3, [r7, #4]
 1856 0078 5A70     		strb	r2, [r3, #1]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 51


 845:bma2x2.c      **** 		BMA2x2_ACCEL_Y_MSB);
 846:bma2x2.c      **** 
 847:bma2x2.c      **** 		com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 1857              		.loc 1 847 0
 1858 007a 0E4B     		ldr	r3, .L89
 1859 007c 1B68     		ldr	r3, [r3]
 1860 007e DD68     		ldr	r5, [r3, #12]
 1861 0080 0C4B     		ldr	r3, .L89
 1862 0082 1B68     		ldr	r3, [r3]
 1863 0084 1879     		ldrb	r0, [r3, #4]
 1864 0086 0F23     		movs	r3, #15
 1865 0088 FC18     		adds	r4, r7, r3
 1866 008a 0E23     		movs	r3, #14
 1867 008c FA18     		adds	r2, r7, r3
 1868 008e 0123     		movs	r3, #1
 1869 0090 0721     		movs	r1, #7
 1870 0092 A847     		blx	r5
 1871 0094 0300     		movs	r3, r0
 1872 0096 2370     		strb	r3, [r4]
 848:bma2x2.c      **** 		(p_bma2x2->dev_addr,
 849:bma2x2.c      **** 		BMA2x2_Z_AXIS_MSB_ADDR, &data_u8,
 850:bma2x2.c      **** 		BMA2x2_GEN_READ_WRITE_LENGTH);
 851:bma2x2.c      **** 		accel->z = BMA2x2_GET_BITSLICE(data_u8,
 1873              		.loc 1 851 0
 1874 0098 0E23     		movs	r3, #14
 1875 009a FB18     		adds	r3, r7, r3
 1876 009c 1B78     		ldrb	r3, [r3]
 1877 009e 5AB2     		sxtb	r2, r3
 1878 00a0 7B68     		ldr	r3, [r7, #4]
 1879 00a2 9A70     		strb	r2, [r3, #2]
 852:bma2x2.c      **** 		BMA2x2_ACCEL_Z_MSB);
 853:bma2x2.c      **** 		}
 854:bma2x2.c      **** 	return com_rslt;
 1880              		.loc 1 854 0
 1881 00a4 0F23     		movs	r3, #15
 1882 00a6 FB18     		adds	r3, r7, r3
 1883 00a8 1B78     		ldrb	r3, [r3]
 1884 00aa 5BB2     		sxtb	r3, r3
 1885              	.L88:
 855:bma2x2.c      **** }
 1886              		.loc 1 855 0 discriminator 1
 1887 00ac 1800     		movs	r0, r3
 1888 00ae BD46     		mov	sp, r7
 1889 00b0 04B0     		add	sp, sp, #16
 1890              		@ sp needed
 1891 00b2 B0BD     		pop	{r4, r5, r7, pc}
 1892              	.L90:
 1893              		.align	2
 1894              	.L89:
 1895 00b4 00000000 		.word	p_bma2x2
 1896              		.cfi_endproc
 1897              	.LFE11:
 1898              		.size	bma2x2_read_accel_eight_resolution_xyz, .-bma2x2_read_accel_eight_resolution_xyz
 1899              		.section	.text.bma2x2_get_intr_tap_stat,"ax",%progbits
 1900              		.align	2
 1901              		.global	bma2x2_get_intr_tap_stat
 1902              		.code	16
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 52


 1903              		.thumb_func
 1904              		.type	bma2x2_get_intr_tap_stat, %function
 1905              	bma2x2_get_intr_tap_stat:
 1906              	.LFB12:
 856:bma2x2.c      **** /*!
 857:bma2x2.c      ****  *	@brief This API read tap-sign, tap-first-xyz
 858:bma2x2.c      ****  *	slope-sign, slope-first-xyz status register byte
 859:bma2x2.c      ****  *	from location 0Bh
 860:bma2x2.c      ****  *
 861:bma2x2.c      ****  *   @param stat_tap_u8 : The status of tap and slope
 862:bma2x2.c      ****  *
 863:bma2x2.c      ****  *
 864:bma2x2.c      ****  *
 865:bma2x2.c      ****  *	@return results of bus communication function
 866:bma2x2.c      ****  *	@retval 0 -> Success
 867:bma2x2.c      ****  *	@retval -1 -> Error
 868:bma2x2.c      ****  *
 869:bma2x2.c      ****  *
 870:bma2x2.c      **** */
 871:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_intr_tap_stat(
 872:bma2x2.c      **** u8 *stat_tap_u8)
 873:bma2x2.c      **** {
 1907              		.loc 1 873 0
 1908              		.cfi_startproc
 1909              		@ args = 0, pretend = 0, frame = 16
 1910              		@ frame_needed = 1, uses_anonymous_args = 0
 1911 0000 B0B5     		push	{r4, r5, r7, lr}
 1912              		.cfi_def_cfa_offset 16
 1913              		.cfi_offset 4, -16
 1914              		.cfi_offset 5, -12
 1915              		.cfi_offset 7, -8
 1916              		.cfi_offset 14, -4
 1917 0002 84B0     		sub	sp, sp, #16
 1918              		.cfi_def_cfa_offset 32
 1919 0004 00AF     		add	r7, sp, #0
 1920              		.cfi_def_cfa_register 7
 1921 0006 7860     		str	r0, [r7, #4]
 874:bma2x2.c      **** 	/*  Variable used to return value of
 875:bma2x2.c      **** 	communication routine*/
 876:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 1922              		.loc 1 876 0
 1923 0008 0F23     		movs	r3, #15
 1924 000a FB18     		adds	r3, r7, r3
 1925 000c FF22     		movs	r2, #255
 1926 000e 1A70     		strb	r2, [r3]
 877:bma2x2.c      **** 
 878:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 1927              		.loc 1 878 0
 1928 0010 0E4B     		ldr	r3, .L94
 1929 0012 1B68     		ldr	r3, [r3]
 1930 0014 002B     		cmp	r3, #0
 1931 0016 02D1     		bne	.L92
 879:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
 880:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 1932              		.loc 1 880 0
 1933 0018 7F23     		movs	r3, #127
 1934 001a 5B42     		rsbs	r3, r3, #0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 53


 1935 001c 11E0     		b	.L93
 1936              	.L92:
 881:bma2x2.c      **** 		} else {
 882:bma2x2.c      **** 			/* Read the interrupt status register 0x0B*/
 883:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 1937              		.loc 1 883 0
 1938 001e 0B4B     		ldr	r3, .L94
 1939 0020 1B68     		ldr	r3, [r3]
 1940 0022 DD68     		ldr	r5, [r3, #12]
 1941 0024 094B     		ldr	r3, .L94
 1942 0026 1B68     		ldr	r3, [r3]
 1943 0028 1879     		ldrb	r0, [r3, #4]
 1944 002a 0F23     		movs	r3, #15
 1945 002c FC18     		adds	r4, r7, r3
 1946 002e 7A68     		ldr	r2, [r7, #4]
 1947 0030 0123     		movs	r3, #1
 1948 0032 0B21     		movs	r1, #11
 1949 0034 A847     		blx	r5
 1950 0036 0300     		movs	r3, r0
 1951 0038 2370     		strb	r3, [r4]
 884:bma2x2.c      **** 			(p_bma2x2->dev_addr, BMA2x2_STAT_TAP_SLOPE_ADDR,
 885:bma2x2.c      **** 			stat_tap_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
 886:bma2x2.c      **** 		}
 887:bma2x2.c      **** 	return com_rslt;
 1952              		.loc 1 887 0
 1953 003a 0F23     		movs	r3, #15
 1954 003c FB18     		adds	r3, r7, r3
 1955 003e 1B78     		ldrb	r3, [r3]
 1956 0040 5BB2     		sxtb	r3, r3
 1957              	.L93:
 888:bma2x2.c      **** }
 1958              		.loc 1 888 0
 1959 0042 1800     		movs	r0, r3
 1960 0044 BD46     		mov	sp, r7
 1961 0046 04B0     		add	sp, sp, #16
 1962              		@ sp needed
 1963 0048 B0BD     		pop	{r4, r5, r7, pc}
 1964              	.L95:
 1965 004a C046     		.align	2
 1966              	.L94:
 1967 004c 00000000 		.word	p_bma2x2
 1968              		.cfi_endproc
 1969              	.LFE12:
 1970              		.size	bma2x2_get_intr_tap_stat, .-bma2x2_get_intr_tap_stat
 1971              		.section	.text.bma2x2_get_intr_orient_stat,"ax",%progbits
 1972              		.align	2
 1973              		.global	bma2x2_get_intr_orient_stat
 1974              		.code	16
 1975              		.thumb_func
 1976              		.type	bma2x2_get_intr_orient_stat, %function
 1977              	bma2x2_get_intr_orient_stat:
 1978              	.LFB13:
 889:bma2x2.c      **** /*!
 890:bma2x2.c      ****  *	@brief This API read orient, high-sign and high-first-xyz
 891:bma2x2.c      ****  *	status register byte from location 0Ch
 892:bma2x2.c      ****  *
 893:bma2x2.c      ****  *
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 54


 894:bma2x2.c      ****  *  @param stat_orient_u8 : The status of orient and high
 895:bma2x2.c      ****  *
 896:bma2x2.c      ****  *
 897:bma2x2.c      ****  *
 898:bma2x2.c      ****  *	@return results of bus communication function
 899:bma2x2.c      ****  *	@retval 0 -> Success
 900:bma2x2.c      ****  *	@retval -1 -> Error
 901:bma2x2.c      ****  *
 902:bma2x2.c      ****  *
 903:bma2x2.c      ****  */
 904:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_intr_orient_stat(
 905:bma2x2.c      **** u8 *stat_orient_u8)
 906:bma2x2.c      **** {
 1979              		.loc 1 906 0
 1980              		.cfi_startproc
 1981              		@ args = 0, pretend = 0, frame = 16
 1982              		@ frame_needed = 1, uses_anonymous_args = 0
 1983 0000 B0B5     		push	{r4, r5, r7, lr}
 1984              		.cfi_def_cfa_offset 16
 1985              		.cfi_offset 4, -16
 1986              		.cfi_offset 5, -12
 1987              		.cfi_offset 7, -8
 1988              		.cfi_offset 14, -4
 1989 0002 84B0     		sub	sp, sp, #16
 1990              		.cfi_def_cfa_offset 32
 1991 0004 00AF     		add	r7, sp, #0
 1992              		.cfi_def_cfa_register 7
 1993 0006 7860     		str	r0, [r7, #4]
 907:bma2x2.c      **** 	/*  Variable used to return value of
 908:bma2x2.c      **** 	communication routine*/
 909:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 1994              		.loc 1 909 0
 1995 0008 0F23     		movs	r3, #15
 1996 000a FB18     		adds	r3, r7, r3
 1997 000c FF22     		movs	r2, #255
 1998 000e 1A70     		strb	r2, [r3]
 910:bma2x2.c      **** 
 911:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 1999              		.loc 1 911 0
 2000 0010 0E4B     		ldr	r3, .L99
 2001 0012 1B68     		ldr	r3, [r3]
 2002 0014 002B     		cmp	r3, #0
 2003 0016 02D1     		bne	.L97
 912:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
 913:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 2004              		.loc 1 913 0
 2005 0018 7F23     		movs	r3, #127
 2006 001a 5B42     		rsbs	r3, r3, #0
 2007 001c 11E0     		b	.L98
 2008              	.L97:
 914:bma2x2.c      **** 		} else {
 915:bma2x2.c      **** 			/* Read the interrupt status register 0x0C*/
 916:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 2009              		.loc 1 916 0
 2010 001e 0B4B     		ldr	r3, .L99
 2011 0020 1B68     		ldr	r3, [r3]
 2012 0022 DD68     		ldr	r5, [r3, #12]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 55


 2013 0024 094B     		ldr	r3, .L99
 2014 0026 1B68     		ldr	r3, [r3]
 2015 0028 1879     		ldrb	r0, [r3, #4]
 2016 002a 0F23     		movs	r3, #15
 2017 002c FC18     		adds	r4, r7, r3
 2018 002e 7A68     		ldr	r2, [r7, #4]
 2019 0030 0123     		movs	r3, #1
 2020 0032 0C21     		movs	r1, #12
 2021 0034 A847     		blx	r5
 2022 0036 0300     		movs	r3, r0
 2023 0038 2370     		strb	r3, [r4]
 917:bma2x2.c      **** 			(p_bma2x2->dev_addr, BMA2x2_STAT_ORIENT_HIGH_ADDR,
 918:bma2x2.c      **** 			stat_orient_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
 919:bma2x2.c      **** 		}
 920:bma2x2.c      **** 	return com_rslt;
 2024              		.loc 1 920 0
 2025 003a 0F23     		movs	r3, #15
 2026 003c FB18     		adds	r3, r7, r3
 2027 003e 1B78     		ldrb	r3, [r3]
 2028 0040 5BB2     		sxtb	r3, r3
 2029              	.L98:
 921:bma2x2.c      **** }
 2030              		.loc 1 921 0
 2031 0042 1800     		movs	r0, r3
 2032 0044 BD46     		mov	sp, r7
 2033 0046 04B0     		add	sp, sp, #16
 2034              		@ sp needed
 2035 0048 B0BD     		pop	{r4, r5, r7, pc}
 2036              	.L100:
 2037 004a C046     		.align	2
 2038              	.L99:
 2039 004c 00000000 		.word	p_bma2x2
 2040              		.cfi_endproc
 2041              	.LFE13:
 2042              		.size	bma2x2_get_intr_orient_stat, .-bma2x2_get_intr_orient_stat
 2043              		.section	.text.bma2x2_get_fifo_stat,"ax",%progbits
 2044              		.align	2
 2045              		.global	bma2x2_get_fifo_stat
 2046              		.code	16
 2047              		.thumb_func
 2048              		.type	bma2x2_get_fifo_stat, %function
 2049              	bma2x2_get_fifo_stat:
 2050              	.LFB14:
 922:bma2x2.c      **** /*!
 923:bma2x2.c      ****  *	@brief This API reads fifo overrun and fifo frame counter
 924:bma2x2.c      ****  *	status register byte  from location 0Eh
 925:bma2x2.c      ****  *
 926:bma2x2.c      ****  *  @param stat_fifo_u8 : The status of fifo overrun and frame counter
 927:bma2x2.c      ****  *
 928:bma2x2.c      ****  *
 929:bma2x2.c      ****  *
 930:bma2x2.c      ****  *	@return results of bus communication function
 931:bma2x2.c      ****  *	@retval 0 -> Success
 932:bma2x2.c      ****  *	@retval -1 -> Error
 933:bma2x2.c      ****  *
 934:bma2x2.c      ****  *
 935:bma2x2.c      ****  */
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 56


 936:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_fifo_stat(
 937:bma2x2.c      **** u8 *stat_fifo_u8)
 938:bma2x2.c      **** {
 2051              		.loc 1 938 0
 2052              		.cfi_startproc
 2053              		@ args = 0, pretend = 0, frame = 16
 2054              		@ frame_needed = 1, uses_anonymous_args = 0
 2055 0000 B0B5     		push	{r4, r5, r7, lr}
 2056              		.cfi_def_cfa_offset 16
 2057              		.cfi_offset 4, -16
 2058              		.cfi_offset 5, -12
 2059              		.cfi_offset 7, -8
 2060              		.cfi_offset 14, -4
 2061 0002 84B0     		sub	sp, sp, #16
 2062              		.cfi_def_cfa_offset 32
 2063 0004 00AF     		add	r7, sp, #0
 2064              		.cfi_def_cfa_register 7
 2065 0006 7860     		str	r0, [r7, #4]
 939:bma2x2.c      **** 	/*  Variable used to return value of
 940:bma2x2.c      **** 	communication routine*/
 941:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 2066              		.loc 1 941 0
 2067 0008 0F23     		movs	r3, #15
 2068 000a FB18     		adds	r3, r7, r3
 2069 000c FF22     		movs	r2, #255
 2070 000e 1A70     		strb	r2, [r3]
 942:bma2x2.c      **** 
 943:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 2071              		.loc 1 943 0
 2072 0010 0E4B     		ldr	r3, .L104
 2073 0012 1B68     		ldr	r3, [r3]
 2074 0014 002B     		cmp	r3, #0
 2075 0016 02D1     		bne	.L102
 944:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
 945:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 2076              		.loc 1 945 0
 2077 0018 7F23     		movs	r3, #127
 2078 001a 5B42     		rsbs	r3, r3, #0
 2079 001c 11E0     		b	.L103
 2080              	.L102:
 946:bma2x2.c      **** 		} else {
 947:bma2x2.c      **** 			/* Read the interrupt status register 0x0E*/
 948:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC(
 2081              		.loc 1 948 0
 2082 001e 0B4B     		ldr	r3, .L104
 2083 0020 1B68     		ldr	r3, [r3]
 2084 0022 DD68     		ldr	r5, [r3, #12]
 2085 0024 094B     		ldr	r3, .L104
 2086 0026 1B68     		ldr	r3, [r3]
 2087 0028 1879     		ldrb	r0, [r3, #4]
 2088 002a 0F23     		movs	r3, #15
 2089 002c FC18     		adds	r4, r7, r3
 2090 002e 7A68     		ldr	r2, [r7, #4]
 2091 0030 0123     		movs	r3, #1
 2092 0032 0E21     		movs	r1, #14
 2093 0034 A847     		blx	r5
 2094 0036 0300     		movs	r3, r0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 57


 2095 0038 2370     		strb	r3, [r4]
 949:bma2x2.c      **** 			p_bma2x2->dev_addr,
 950:bma2x2.c      **** 			BMA2x2_STAT_FIFO_ADDR,
 951:bma2x2.c      **** 			stat_fifo_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
 952:bma2x2.c      **** 		}
 953:bma2x2.c      **** 	return com_rslt;
 2096              		.loc 1 953 0
 2097 003a 0F23     		movs	r3, #15
 2098 003c FB18     		adds	r3, r7, r3
 2099 003e 1B78     		ldrb	r3, [r3]
 2100 0040 5BB2     		sxtb	r3, r3
 2101              	.L103:
 954:bma2x2.c      **** }
 2102              		.loc 1 954 0
 2103 0042 1800     		movs	r0, r3
 2104 0044 BD46     		mov	sp, r7
 2105 0046 04B0     		add	sp, sp, #16
 2106              		@ sp needed
 2107 0048 B0BD     		pop	{r4, r5, r7, pc}
 2108              	.L105:
 2109 004a C046     		.align	2
 2110              	.L104:
 2111 004c 00000000 		.word	p_bma2x2
 2112              		.cfi_endproc
 2113              	.LFE14:
 2114              		.size	bma2x2_get_fifo_stat, .-bma2x2_get_fifo_stat
 2115              		.section	.text.bma2x2_get_fifo_frame_count,"ax",%progbits
 2116              		.align	2
 2117              		.global	bma2x2_get_fifo_frame_count
 2118              		.code	16
 2119              		.thumb_func
 2120              		.type	bma2x2_get_fifo_frame_count, %function
 2121              	bma2x2_get_fifo_frame_count:
 2122              	.LFB15:
 955:bma2x2.c      **** /*!
 956:bma2x2.c      ****  *	@brief This API read fifo frame count
 957:bma2x2.c      ****  *	from location 0Eh bit position 0 to 6
 958:bma2x2.c      ****  *
 959:bma2x2.c      ****  *
 960:bma2x2.c      ****  * @param frame_count_u8 : The status of fifo frame count
 961:bma2x2.c      ****  *
 962:bma2x2.c      ****  *
 963:bma2x2.c      ****  *
 964:bma2x2.c      ****  *	@return results of bus communication function
 965:bma2x2.c      ****  *	@retval 0 -> Success
 966:bma2x2.c      ****  *	@retval -1 -> Error
 967:bma2x2.c      ****  *
 968:bma2x2.c      ****  *
 969:bma2x2.c      ****  */
 970:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_fifo_frame_count(
 971:bma2x2.c      **** u8 *frame_count_u8)
 972:bma2x2.c      **** {
 2123              		.loc 1 972 0
 2124              		.cfi_startproc
 2125              		@ args = 0, pretend = 0, frame = 16
 2126              		@ frame_needed = 1, uses_anonymous_args = 0
 2127 0000 B0B5     		push	{r4, r5, r7, lr}
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 58


 2128              		.cfi_def_cfa_offset 16
 2129              		.cfi_offset 4, -16
 2130              		.cfi_offset 5, -12
 2131              		.cfi_offset 7, -8
 2132              		.cfi_offset 14, -4
 2133 0002 84B0     		sub	sp, sp, #16
 2134              		.cfi_def_cfa_offset 32
 2135 0004 00AF     		add	r7, sp, #0
 2136              		.cfi_def_cfa_register 7
 2137 0006 7860     		str	r0, [r7, #4]
 973:bma2x2.c      **** 	/*  Variable used to return value of
 974:bma2x2.c      **** 	communication routine*/
 975:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 2138              		.loc 1 975 0
 2139 0008 0F23     		movs	r3, #15
 2140 000a FB18     		adds	r3, r7, r3
 2141 000c FF22     		movs	r2, #255
 2142 000e 1A70     		strb	r2, [r3]
 976:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 2143              		.loc 1 976 0
 2144 0010 0E23     		movs	r3, #14
 2145 0012 FB18     		adds	r3, r7, r3
 2146 0014 0022     		movs	r2, #0
 2147 0016 1A70     		strb	r2, [r3]
 977:bma2x2.c      **** 
 978:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 2148              		.loc 1 978 0
 2149 0018 124B     		ldr	r3, .L110
 2150 001a 1B68     		ldr	r3, [r3]
 2151 001c 002B     		cmp	r3, #0
 2152 001e 02D1     		bne	.L107
 979:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
 980:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 2153              		.loc 1 980 0
 2154 0020 7F23     		movs	r3, #127
 2155 0022 5B42     		rsbs	r3, r3, #0
 2156 0024 1AE0     		b	.L109
 2157              	.L107:
 981:bma2x2.c      **** 		} else {
 982:bma2x2.c      **** 			/* Read the FIFO frame count*/
 983:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC(
 2158              		.loc 1 983 0
 2159 0026 0F4B     		ldr	r3, .L110
 2160 0028 1B68     		ldr	r3, [r3]
 2161 002a DD68     		ldr	r5, [r3, #12]
 2162 002c 0D4B     		ldr	r3, .L110
 2163 002e 1B68     		ldr	r3, [r3]
 2164 0030 1879     		ldrb	r0, [r3, #4]
 2165 0032 0F23     		movs	r3, #15
 2166 0034 FC18     		adds	r4, r7, r3
 2167 0036 0E23     		movs	r3, #14
 2168 0038 FA18     		adds	r2, r7, r3
 2169 003a 0123     		movs	r3, #1
 2170 003c 0E21     		movs	r1, #14
 2171 003e A847     		blx	r5
 2172 0040 0300     		movs	r3, r0
 2173 0042 2370     		strb	r3, [r4]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 59


 984:bma2x2.c      **** 			p_bma2x2->dev_addr,
 985:bma2x2.c      **** 			BMA2x2_FIFO_FRAME_COUNT_STAT_REG,
 986:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
 987:bma2x2.c      **** 			*frame_count_u8 = BMA2x2_GET_BITSLICE(data_u8,
 2174              		.loc 1 987 0
 2175 0044 0E23     		movs	r3, #14
 2176 0046 FB18     		adds	r3, r7, r3
 2177 0048 1B78     		ldrb	r3, [r3]
 2178 004a 7F22     		movs	r2, #127
 2179 004c 1340     		ands	r3, r2
 2180 004e DAB2     		uxtb	r2, r3
 2181 0050 7B68     		ldr	r3, [r7, #4]
 2182 0052 1A70     		strb	r2, [r3]
 988:bma2x2.c      **** 			BMA2x2_FIFO_FRAME_COUNT_STAT);
 989:bma2x2.c      **** 		}
 990:bma2x2.c      **** 	return com_rslt;
 2183              		.loc 1 990 0
 2184 0054 0F23     		movs	r3, #15
 2185 0056 FB18     		adds	r3, r7, r3
 2186 0058 1B78     		ldrb	r3, [r3]
 2187 005a 5BB2     		sxtb	r3, r3
 2188              	.L109:
 991:bma2x2.c      **** }
 2189              		.loc 1 991 0 discriminator 1
 2190 005c 1800     		movs	r0, r3
 2191 005e BD46     		mov	sp, r7
 2192 0060 04B0     		add	sp, sp, #16
 2193              		@ sp needed
 2194 0062 B0BD     		pop	{r4, r5, r7, pc}
 2195              	.L111:
 2196              		.align	2
 2197              	.L110:
 2198 0064 00000000 		.word	p_bma2x2
 2199              		.cfi_endproc
 2200              	.LFE15:
 2201              		.size	bma2x2_get_fifo_frame_count, .-bma2x2_get_fifo_frame_count
 2202              		.section	.text.bma2x2_get_fifo_overrun,"ax",%progbits
 2203              		.align	2
 2204              		.global	bma2x2_get_fifo_overrun
 2205              		.code	16
 2206              		.thumb_func
 2207              		.type	bma2x2_get_fifo_overrun, %function
 2208              	bma2x2_get_fifo_overrun:
 2209              	.LFB16:
 992:bma2x2.c      **** /*!
 993:bma2x2.c      ****  *	@brief This API read fifo overrun
 994:bma2x2.c      ****  *	from location 0Eh bit position 7
 995:bma2x2.c      ****  *
 996:bma2x2.c      ****  *
 997:bma2x2.c      ****  * @param fifo_overrun_u8 : The status of fifo overrun
 998:bma2x2.c      ****  *
 999:bma2x2.c      ****  *
1000:bma2x2.c      ****  *
1001:bma2x2.c      ****  *	@return results of bus communication function
1002:bma2x2.c      ****  *	@retval 0 -> Success
1003:bma2x2.c      ****  *	@retval -1 -> Error
1004:bma2x2.c      ****  *
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 60


1005:bma2x2.c      ****  *
1006:bma2x2.c      ****  */
1007:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_fifo_overrun(
1008:bma2x2.c      **** u8 *fifo_overrun_u8)
1009:bma2x2.c      **** {
 2210              		.loc 1 1009 0
 2211              		.cfi_startproc
 2212              		@ args = 0, pretend = 0, frame = 16
 2213              		@ frame_needed = 1, uses_anonymous_args = 0
 2214 0000 B0B5     		push	{r4, r5, r7, lr}
 2215              		.cfi_def_cfa_offset 16
 2216              		.cfi_offset 4, -16
 2217              		.cfi_offset 5, -12
 2218              		.cfi_offset 7, -8
 2219              		.cfi_offset 14, -4
 2220 0002 84B0     		sub	sp, sp, #16
 2221              		.cfi_def_cfa_offset 32
 2222 0004 00AF     		add	r7, sp, #0
 2223              		.cfi_def_cfa_register 7
 2224 0006 7860     		str	r0, [r7, #4]
1010:bma2x2.c      **** 		/*  Variable used to return value of
1011:bma2x2.c      **** 	communication routine*/
1012:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 2225              		.loc 1 1012 0
 2226 0008 0F23     		movs	r3, #15
 2227 000a FB18     		adds	r3, r7, r3
 2228 000c FF22     		movs	r2, #255
 2229 000e 1A70     		strb	r2, [r3]
1013:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 2230              		.loc 1 1013 0
 2231 0010 0E23     		movs	r3, #14
 2232 0012 FB18     		adds	r3, r7, r3
 2233 0014 0022     		movs	r2, #0
 2234 0016 1A70     		strb	r2, [r3]
1014:bma2x2.c      **** 
1015:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 2235              		.loc 1 1015 0
 2236 0018 124B     		ldr	r3, .L116
 2237 001a 1B68     		ldr	r3, [r3]
 2238 001c 002B     		cmp	r3, #0
 2239 001e 02D1     		bne	.L113
1016:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
1017:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 2240              		.loc 1 1017 0
 2241 0020 7F23     		movs	r3, #127
 2242 0022 5B42     		rsbs	r3, r3, #0
 2243 0024 19E0     		b	.L115
 2244              	.L113:
1018:bma2x2.c      **** 		} else {
1019:bma2x2.c      **** 			/* Read the status of fifo over run*/
1020:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC(
 2245              		.loc 1 1020 0
 2246 0026 0F4B     		ldr	r3, .L116
 2247 0028 1B68     		ldr	r3, [r3]
 2248 002a DD68     		ldr	r5, [r3, #12]
 2249 002c 0D4B     		ldr	r3, .L116
 2250 002e 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 61


 2251 0030 1879     		ldrb	r0, [r3, #4]
 2252 0032 0F23     		movs	r3, #15
 2253 0034 FC18     		adds	r4, r7, r3
 2254 0036 0E23     		movs	r3, #14
 2255 0038 FA18     		adds	r2, r7, r3
 2256 003a 0123     		movs	r3, #1
 2257 003c 0E21     		movs	r1, #14
 2258 003e A847     		blx	r5
 2259 0040 0300     		movs	r3, r0
 2260 0042 2370     		strb	r3, [r4]
1021:bma2x2.c      **** 			p_bma2x2->dev_addr,
1022:bma2x2.c      **** 			BMA2x2_FIFO_OVERRUN_STAT_REG,
1023:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
1024:bma2x2.c      **** 			*fifo_overrun_u8 = BMA2x2_GET_BITSLICE(data_u8,
 2261              		.loc 1 1024 0
 2262 0044 0E23     		movs	r3, #14
 2263 0046 FB18     		adds	r3, r7, r3
 2264 0048 1B78     		ldrb	r3, [r3]
 2265 004a DB09     		lsrs	r3, r3, #7
 2266 004c DAB2     		uxtb	r2, r3
 2267 004e 7B68     		ldr	r3, [r7, #4]
 2268 0050 1A70     		strb	r2, [r3]
1025:bma2x2.c      **** 			BMA2x2_FIFO_OVERRUN_STAT);
1026:bma2x2.c      **** 		}
1027:bma2x2.c      **** 	return com_rslt;
 2269              		.loc 1 1027 0
 2270 0052 0F23     		movs	r3, #15
 2271 0054 FB18     		adds	r3, r7, r3
 2272 0056 1B78     		ldrb	r3, [r3]
 2273 0058 5BB2     		sxtb	r3, r3
 2274              	.L115:
1028:bma2x2.c      **** }
 2275              		.loc 1 1028 0 discriminator 1
 2276 005a 1800     		movs	r0, r3
 2277 005c BD46     		mov	sp, r7
 2278 005e 04B0     		add	sp, sp, #16
 2279              		@ sp needed
 2280 0060 B0BD     		pop	{r4, r5, r7, pc}
 2281              	.L117:
 2282 0062 C046     		.align	2
 2283              	.L116:
 2284 0064 00000000 		.word	p_bma2x2
 2285              		.cfi_endproc
 2286              	.LFE16:
 2287              		.size	bma2x2_get_fifo_overrun, .-bma2x2_get_fifo_overrun
 2288              		.section	.text.bma2x2_get_intr_stat,"ax",%progbits
 2289              		.align	2
 2290              		.global	bma2x2_get_intr_stat
 2291              		.code	16
 2292              		.thumb_func
 2293              		.type	bma2x2_get_intr_stat, %function
 2294              	bma2x2_get_intr_stat:
 2295              	.LFB17:
1029:bma2x2.c      **** /*!
1030:bma2x2.c      ****  *	@brief This API read interrupt status of flat, orient, single tap,
1031:bma2x2.c      ****  *	double tap, slow no motion, slope, highg and lowg from location 09h
1032:bma2x2.c      ****  *
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 62


1033:bma2x2.c      ****  *
1034:bma2x2.c      ****  *
1035:bma2x2.c      ****  *	@param  intr_stat_u8 : The value of interrupt status
1036:bma2x2.c      ****  *
1037:bma2x2.c      ****  *
1038:bma2x2.c      ****  *
1039:bma2x2.c      ****  *	@return results of bus communication function
1040:bma2x2.c      ****  *	@retval 0 -> Success
1041:bma2x2.c      ****  *	@retval -1 -> Error
1042:bma2x2.c      ****  *
1043:bma2x2.c      ****  *
1044:bma2x2.c      **** */
1045:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_intr_stat(
1046:bma2x2.c      **** u8 *intr_stat_u8)
1047:bma2x2.c      **** {
 2296              		.loc 1 1047 0
 2297              		.cfi_startproc
 2298              		@ args = 0, pretend = 0, frame = 16
 2299              		@ frame_needed = 1, uses_anonymous_args = 0
 2300 0000 B0B5     		push	{r4, r5, r7, lr}
 2301              		.cfi_def_cfa_offset 16
 2302              		.cfi_offset 4, -16
 2303              		.cfi_offset 5, -12
 2304              		.cfi_offset 7, -8
 2305              		.cfi_offset 14, -4
 2306 0002 84B0     		sub	sp, sp, #16
 2307              		.cfi_def_cfa_offset 32
 2308 0004 00AF     		add	r7, sp, #0
 2309              		.cfi_def_cfa_register 7
 2310 0006 7860     		str	r0, [r7, #4]
1048:bma2x2.c      **** 	/*  Variable used to return value of
1049:bma2x2.c      **** 	communication routine*/
1050:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 2311              		.loc 1 1050 0
 2312 0008 0F23     		movs	r3, #15
 2313 000a FB18     		adds	r3, r7, r3
 2314 000c FF22     		movs	r2, #255
 2315 000e 1A70     		strb	r2, [r3]
1051:bma2x2.c      **** 
1052:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 2316              		.loc 1 1052 0
 2317 0010 0E4B     		ldr	r3, .L121
 2318 0012 1B68     		ldr	r3, [r3]
 2319 0014 002B     		cmp	r3, #0
 2320 0016 02D1     		bne	.L119
1053:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
1054:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 2321              		.loc 1 1054 0
 2322 0018 7F23     		movs	r3, #127
 2323 001a 5B42     		rsbs	r3, r3, #0
 2324 001c 11E0     		b	.L120
 2325              	.L119:
1055:bma2x2.c      **** 		} else {
1056:bma2x2.c      **** 			/* Read the interrupt status register 0x09*/
1057:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC(
 2326              		.loc 1 1057 0
 2327 001e 0B4B     		ldr	r3, .L121
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 63


 2328 0020 1B68     		ldr	r3, [r3]
 2329 0022 DD68     		ldr	r5, [r3, #12]
 2330 0024 094B     		ldr	r3, .L121
 2331 0026 1B68     		ldr	r3, [r3]
 2332 0028 1879     		ldrb	r0, [r3, #4]
 2333 002a 0F23     		movs	r3, #15
 2334 002c FC18     		adds	r4, r7, r3
 2335 002e 7A68     		ldr	r2, [r7, #4]
 2336 0030 0423     		movs	r3, #4
 2337 0032 0921     		movs	r1, #9
 2338 0034 A847     		blx	r5
 2339 0036 0300     		movs	r3, r0
 2340 0038 2370     		strb	r3, [r4]
1058:bma2x2.c      **** 			p_bma2x2->dev_addr,
1059:bma2x2.c      **** 			BMA2x2_STAT1_ADDR, intr_stat_u8,
1060:bma2x2.c      **** 			BMA2x2_SHIFT_FOUR_BITS);
1061:bma2x2.c      **** 		}
1062:bma2x2.c      **** 	return com_rslt;
 2341              		.loc 1 1062 0
 2342 003a 0F23     		movs	r3, #15
 2343 003c FB18     		adds	r3, r7, r3
 2344 003e 1B78     		ldrb	r3, [r3]
 2345 0040 5BB2     		sxtb	r3, r3
 2346              	.L120:
1063:bma2x2.c      **** }
 2347              		.loc 1 1063 0
 2348 0042 1800     		movs	r0, r3
 2349 0044 BD46     		mov	sp, r7
 2350 0046 04B0     		add	sp, sp, #16
 2351              		@ sp needed
 2352 0048 B0BD     		pop	{r4, r5, r7, pc}
 2353              	.L122:
 2354 004a C046     		.align	2
 2355              	.L121:
 2356 004c 00000000 		.word	p_bma2x2
 2357              		.cfi_endproc
 2358              	.LFE17:
 2359              		.size	bma2x2_get_intr_stat, .-bma2x2_get_intr_stat
 2360              		.section	.text.bma2x2_get_range,"ax",%progbits
 2361              		.align	2
 2362              		.global	bma2x2_get_range
 2363              		.code	16
 2364              		.thumb_func
 2365              		.type	bma2x2_get_range, %function
 2366              	bma2x2_get_range:
 2367              	.LFB18:
1064:bma2x2.c      **** /*!
1065:bma2x2.c      ****  * @brief This API is used to get the ranges(g values) of the sensor
1066:bma2x2.c      ****  *	in the register 0x0F bit from 0 to 3
1067:bma2x2.c      ****  *
1068:bma2x2.c      ****  *
1069:bma2x2.c      ****  *	@param range_u8 : The value of range
1070:bma2x2.c      ****  *		  range_u8       |   result
1071:bma2x2.c      ****  *       ----------------- | --------------
1072:bma2x2.c      ****  *              0x03       | BMA2x2_RANGE_2G
1073:bma2x2.c      ****  *              0x05       | BMA2x2_RANGE_4G
1074:bma2x2.c      ****  *              0x08       | BMA2x2_RANGE_8G
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 64


1075:bma2x2.c      ****  *              0x0C       | BMA2x2_RANGE_16G
1076:bma2x2.c      ****  *
1077:bma2x2.c      ****  *
1078:bma2x2.c      ****  *
1079:bma2x2.c      ****  *	@return results of bus communication function
1080:bma2x2.c      ****  *	@retval 0 -> Success
1081:bma2x2.c      ****  *	@retval -1 -> Error
1082:bma2x2.c      ****  *
1083:bma2x2.c      ****  *
1084:bma2x2.c      ****  */
1085:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_range(u8 *range_u8)
1086:bma2x2.c      **** {
 2368              		.loc 1 1086 0
 2369              		.cfi_startproc
 2370              		@ args = 0, pretend = 0, frame = 16
 2371              		@ frame_needed = 1, uses_anonymous_args = 0
 2372 0000 B0B5     		push	{r4, r5, r7, lr}
 2373              		.cfi_def_cfa_offset 16
 2374              		.cfi_offset 4, -16
 2375              		.cfi_offset 5, -12
 2376              		.cfi_offset 7, -8
 2377              		.cfi_offset 14, -4
 2378 0002 84B0     		sub	sp, sp, #16
 2379              		.cfi_def_cfa_offset 32
 2380 0004 00AF     		add	r7, sp, #0
 2381              		.cfi_def_cfa_register 7
 2382 0006 7860     		str	r0, [r7, #4]
1087:bma2x2.c      **** 	/*  Variable used to return value of
1088:bma2x2.c      **** 	communication routine*/
1089:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 2383              		.loc 1 1089 0
 2384 0008 0F23     		movs	r3, #15
 2385 000a FB18     		adds	r3, r7, r3
 2386 000c FF22     		movs	r2, #255
 2387 000e 1A70     		strb	r2, [r3]
1090:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 2388              		.loc 1 1090 0
 2389 0010 0E23     		movs	r3, #14
 2390 0012 FB18     		adds	r3, r7, r3
 2391 0014 0022     		movs	r2, #0
 2392 0016 1A70     		strb	r2, [r3]
1091:bma2x2.c      **** 
1092:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 2393              		.loc 1 1092 0
 2394 0018 154B     		ldr	r3, .L127
 2395 001a 1B68     		ldr	r3, [r3]
 2396 001c 002B     		cmp	r3, #0
 2397 001e 02D1     		bne	.L124
1093:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
1094:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 2398              		.loc 1 1094 0
 2399 0020 7F23     		movs	r3, #127
 2400 0022 5B42     		rsbs	r3, r3, #0
 2401 0024 20E0     		b	.L126
 2402              	.L124:
1095:bma2x2.c      **** 		} else {
1096:bma2x2.c      **** 		/* Read the range register 0x0F*/
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 65


1097:bma2x2.c      **** 		com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC(p_bma2x2->dev_addr,
 2403              		.loc 1 1097 0
 2404 0026 124B     		ldr	r3, .L127
 2405 0028 1B68     		ldr	r3, [r3]
 2406 002a DD68     		ldr	r5, [r3, #12]
 2407 002c 104B     		ldr	r3, .L127
 2408 002e 1B68     		ldr	r3, [r3]
 2409 0030 1879     		ldrb	r0, [r3, #4]
 2410 0032 0F23     		movs	r3, #15
 2411 0034 FC18     		adds	r4, r7, r3
 2412 0036 0E23     		movs	r3, #14
 2413 0038 FA18     		adds	r2, r7, r3
 2414 003a 0123     		movs	r3, #1
 2415 003c 0F21     		movs	r1, #15
 2416 003e A847     		blx	r5
 2417 0040 0300     		movs	r3, r0
 2418 0042 2370     		strb	r3, [r4]
1098:bma2x2.c      **** 		BMA2x2_RANGE_SELECT_REG, &data_u8,
1099:bma2x2.c      **** 		BMA2x2_GEN_READ_WRITE_LENGTH);
1100:bma2x2.c      **** 		data_u8 = BMA2x2_GET_BITSLICE(data_u8, BMA2x2_RANGE_SELECT);
 2419              		.loc 1 1100 0
 2420 0044 0E23     		movs	r3, #14
 2421 0046 FB18     		adds	r3, r7, r3
 2422 0048 1B78     		ldrb	r3, [r3]
 2423 004a 0F22     		movs	r2, #15
 2424 004c 1340     		ands	r3, r2
 2425 004e DAB2     		uxtb	r2, r3
 2426 0050 0E23     		movs	r3, #14
 2427 0052 FB18     		adds	r3, r7, r3
 2428 0054 1A70     		strb	r2, [r3]
1101:bma2x2.c      **** 		*range_u8 = data_u8;
 2429              		.loc 1 1101 0
 2430 0056 0E23     		movs	r3, #14
 2431 0058 FB18     		adds	r3, r7, r3
 2432 005a 1A78     		ldrb	r2, [r3]
 2433 005c 7B68     		ldr	r3, [r7, #4]
 2434 005e 1A70     		strb	r2, [r3]
1102:bma2x2.c      **** 	}
1103:bma2x2.c      **** 	return com_rslt;
 2435              		.loc 1 1103 0
 2436 0060 0F23     		movs	r3, #15
 2437 0062 FB18     		adds	r3, r7, r3
 2438 0064 1B78     		ldrb	r3, [r3]
 2439 0066 5BB2     		sxtb	r3, r3
 2440              	.L126:
1104:bma2x2.c      **** }
 2441              		.loc 1 1104 0 discriminator 1
 2442 0068 1800     		movs	r0, r3
 2443 006a BD46     		mov	sp, r7
 2444 006c 04B0     		add	sp, sp, #16
 2445              		@ sp needed
 2446 006e B0BD     		pop	{r4, r5, r7, pc}
 2447              	.L128:
 2448              		.align	2
 2449              	.L127:
 2450 0070 00000000 		.word	p_bma2x2
 2451              		.cfi_endproc
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 66


 2452              	.LFE18:
 2453              		.size	bma2x2_get_range, .-bma2x2_get_range
 2454              		.section	.text.bma2x2_set_range,"ax",%progbits
 2455              		.align	2
 2456              		.global	bma2x2_set_range
 2457              		.code	16
 2458              		.thumb_func
 2459              		.type	bma2x2_set_range, %function
 2460              	bma2x2_set_range:
 2461              	.LFB19:
1105:bma2x2.c      **** /*!
1106:bma2x2.c      ****  * @brief This API is used to set the ranges(g values) of the sensor
1107:bma2x2.c      ****  *	in the register 0x0F bit from 0 to 3
1108:bma2x2.c      ****  *
1109:bma2x2.c      ****  *
1110:bma2x2.c      ****  *	@param range_u8 : The value of range
1111:bma2x2.c      ****  *		  range_u8 |   result
1112:bma2x2.c      ****  *       ----------------- | --------------
1113:bma2x2.c      ****  *              0x03       | BMA2x2_RANGE_2G
1114:bma2x2.c      ****  *              0x05       | BMA2x2_RANGE_4G
1115:bma2x2.c      ****  *              0x08       | BMA2x2_RANGE_8G
1116:bma2x2.c      ****  *              0x0C       | BMA2x2_RANGE_16G
1117:bma2x2.c      ****  *
1118:bma2x2.c      ****  *
1119:bma2x2.c      ****  *
1120:bma2x2.c      ****  *	@return results of bus communication function
1121:bma2x2.c      ****  *	@retval 0 -> Success
1122:bma2x2.c      ****  *	@retval -1 -> Error
1123:bma2x2.c      ****  *
1124:bma2x2.c      ****  *
1125:bma2x2.c      ****  */
1126:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_range(u8 range_u8)
1127:bma2x2.c      **** {
 2462              		.loc 1 1127 0
 2463              		.cfi_startproc
 2464              		@ args = 0, pretend = 0, frame = 16
 2465              		@ frame_needed = 1, uses_anonymous_args = 0
 2466 0000 B0B5     		push	{r4, r5, r7, lr}
 2467              		.cfi_def_cfa_offset 16
 2468              		.cfi_offset 4, -16
 2469              		.cfi_offset 5, -12
 2470              		.cfi_offset 7, -8
 2471              		.cfi_offset 14, -4
 2472 0002 84B0     		sub	sp, sp, #16
 2473              		.cfi_def_cfa_offset 32
 2474 0004 00AF     		add	r7, sp, #0
 2475              		.cfi_def_cfa_register 7
 2476 0006 0200     		movs	r2, r0
 2477 0008 FB1D     		adds	r3, r7, #7
 2478 000a 1A70     		strb	r2, [r3]
1128:bma2x2.c      **** 	/*  Variable used to return value of
1129:bma2x2.c      **** 	communication routine*/
1130:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 2479              		.loc 1 1130 0
 2480 000c 0F23     		movs	r3, #15
 2481 000e FB18     		adds	r3, r7, r3
 2482 0010 FF22     		movs	r2, #255
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 67


 2483 0012 1A70     		strb	r2, [r3]
1131:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 2484              		.loc 1 1131 0
 2485 0014 0E23     		movs	r3, #14
 2486 0016 FB18     		adds	r3, r7, r3
 2487 0018 0022     		movs	r2, #0
 2488 001a 1A70     		strb	r2, [r3]
1132:bma2x2.c      **** 
1133:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 2489              		.loc 1 1133 0
 2490 001c 464B     		ldr	r3, .L143
 2491 001e 1B68     		ldr	r3, [r3]
 2492 0020 002B     		cmp	r3, #0
 2493 0022 02D1     		bne	.L130
1134:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
1135:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 2494              		.loc 1 1135 0
 2495 0024 7F23     		movs	r3, #127
 2496 0026 5B42     		rsbs	r3, r3, #0
 2497 0028 81E0     		b	.L142
 2498              	.L130:
1136:bma2x2.c      **** 		} else {
1137:bma2x2.c      **** 		if ((range_u8 == BMA2x2_RANGE_2G) ||
 2499              		.loc 1 1137 0
 2500 002a FB1D     		adds	r3, r7, #7
 2501 002c 1B78     		ldrb	r3, [r3]
 2502 002e 032B     		cmp	r3, #3
 2503 0030 0BD0     		beq	.L132
 2504              		.loc 1 1137 0 is_stmt 0 discriminator 1
 2505 0032 FB1D     		adds	r3, r7, #7
 2506 0034 1B78     		ldrb	r3, [r3]
 2507 0036 052B     		cmp	r3, #5
 2508 0038 07D0     		beq	.L132
1138:bma2x2.c      **** 		(range_u8 == BMA2x2_RANGE_4G) ||
 2509              		.loc 1 1138 0 is_stmt 1
 2510 003a FB1D     		adds	r3, r7, #7
 2511 003c 1B78     		ldrb	r3, [r3]
 2512 003e 082B     		cmp	r3, #8
 2513 0040 03D0     		beq	.L132
1139:bma2x2.c      **** 		(range_u8 == BMA2x2_RANGE_8G) ||
 2514              		.loc 1 1139 0
 2515 0042 FB1D     		adds	r3, r7, #7
 2516 0044 1B78     		ldrb	r3, [r3]
 2517 0046 0C2B     		cmp	r3, #12
 2518 0048 69D1     		bne	.L133
 2519              	.L132:
1140:bma2x2.c      **** 		(range_u8 == BMA2x2_RANGE_16G)) {
1141:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 2520              		.loc 1 1141 0
 2521 004a 3B4B     		ldr	r3, .L143
 2522 004c 1B68     		ldr	r3, [r3]
 2523 004e DD68     		ldr	r5, [r3, #12]
 2524 0050 394B     		ldr	r3, .L143
 2525 0052 1B68     		ldr	r3, [r3]
 2526 0054 1879     		ldrb	r0, [r3, #4]
 2527 0056 0F23     		movs	r3, #15
 2528 0058 FC18     		adds	r4, r7, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 68


 2529 005a 0E23     		movs	r3, #14
 2530 005c FA18     		adds	r2, r7, r3
 2531 005e 0123     		movs	r3, #1
 2532 0060 0F21     		movs	r1, #15
 2533 0062 A847     		blx	r5
 2534 0064 0300     		movs	r3, r0
 2535 0066 2370     		strb	r3, [r4]
1142:bma2x2.c      **** 			(p_bma2x2->dev_addr,
1143:bma2x2.c      **** 			BMA2x2_RANGE_SELECT_REG, &data_u8,
1144:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
1145:bma2x2.c      **** 			switch (range_u8) {
 2536              		.loc 1 1145 0
 2537 0068 FB1D     		adds	r3, r7, #7
 2538 006a 1B78     		ldrb	r3, [r3]
 2539 006c 052B     		cmp	r3, #5
 2540 006e 17D0     		beq	.L135
 2541 0070 02DC     		bgt	.L136
 2542 0072 032B     		cmp	r3, #3
 2543 0074 05D0     		beq	.L137
1146:bma2x2.c      **** 			case BMA2x2_RANGE_2G:
1147:bma2x2.c      **** 				data_u8  = BMA2x2_SET_BITSLICE(data_u8,
1148:bma2x2.c      **** 				BMA2x2_RANGE_SELECT,
1149:bma2x2.c      **** 				BMA2x2_RANGE_2G);
1150:bma2x2.c      **** 			break;
1151:bma2x2.c      **** 			case BMA2x2_RANGE_4G:
1152:bma2x2.c      **** 				data_u8  = BMA2x2_SET_BITSLICE(data_u8,
1153:bma2x2.c      **** 				BMA2x2_RANGE_SELECT,
1154:bma2x2.c      **** 				BMA2x2_RANGE_4G);
1155:bma2x2.c      **** 			break;
1156:bma2x2.c      **** 			case BMA2x2_RANGE_8G:
1157:bma2x2.c      **** 				data_u8  = BMA2x2_SET_BITSLICE(data_u8,
1158:bma2x2.c      **** 				BMA2x2_RANGE_SELECT,
1159:bma2x2.c      **** 				BMA2x2_RANGE_8G);
1160:bma2x2.c      **** 			break;
1161:bma2x2.c      **** 			case BMA2x2_RANGE_16G:
1162:bma2x2.c      **** 				data_u8  = BMA2x2_SET_BITSLICE(data_u8,
1163:bma2x2.c      **** 				BMA2x2_RANGE_SELECT,
1164:bma2x2.c      **** 				BMA2x2_RANGE_16G);
1165:bma2x2.c      **** 			break;
1166:bma2x2.c      **** 			default:
1167:bma2x2.c      **** 			break;
 2544              		.loc 1 1167 0
 2545 0076 40E0     		b	.L140
 2546              	.L136:
1145:bma2x2.c      **** 			case BMA2x2_RANGE_2G:
 2547              		.loc 1 1145 0
 2548 0078 082B     		cmp	r3, #8
 2549 007a 20D0     		beq	.L138
 2550 007c 0C2B     		cmp	r3, #12
 2551 007e 2DD0     		beq	.L139
 2552              		.loc 1 1167 0
 2553 0080 3BE0     		b	.L140
 2554              	.L137:
1147:bma2x2.c      **** 				BMA2x2_RANGE_SELECT,
 2555              		.loc 1 1147 0
 2556 0082 0E23     		movs	r3, #14
 2557 0084 FB18     		adds	r3, r7, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 69


 2558 0086 1B78     		ldrb	r3, [r3]
 2559 0088 5BB2     		sxtb	r3, r3
 2560 008a 0F22     		movs	r2, #15
 2561 008c 9343     		bics	r3, r2
 2562 008e 5BB2     		sxtb	r3, r3
 2563 0090 0322     		movs	r2, #3
 2564 0092 1343     		orrs	r3, r2
 2565 0094 5BB2     		sxtb	r3, r3
 2566 0096 DAB2     		uxtb	r2, r3
 2567 0098 0E23     		movs	r3, #14
 2568 009a FB18     		adds	r3, r7, r3
 2569 009c 1A70     		strb	r2, [r3]
1150:bma2x2.c      **** 			case BMA2x2_RANGE_4G:
 2570              		.loc 1 1150 0
 2571 009e 2CE0     		b	.L140
 2572              	.L135:
1152:bma2x2.c      **** 				BMA2x2_RANGE_SELECT,
 2573              		.loc 1 1152 0
 2574 00a0 0E23     		movs	r3, #14
 2575 00a2 FB18     		adds	r3, r7, r3
 2576 00a4 1B78     		ldrb	r3, [r3]
 2577 00a6 5BB2     		sxtb	r3, r3
 2578 00a8 0F22     		movs	r2, #15
 2579 00aa 9343     		bics	r3, r2
 2580 00ac 5BB2     		sxtb	r3, r3
 2581 00ae 0522     		movs	r2, #5
 2582 00b0 1343     		orrs	r3, r2
 2583 00b2 5BB2     		sxtb	r3, r3
 2584 00b4 DAB2     		uxtb	r2, r3
 2585 00b6 0E23     		movs	r3, #14
 2586 00b8 FB18     		adds	r3, r7, r3
 2587 00ba 1A70     		strb	r2, [r3]
1155:bma2x2.c      **** 			case BMA2x2_RANGE_8G:
 2588              		.loc 1 1155 0
 2589 00bc 1DE0     		b	.L140
 2590              	.L138:
1157:bma2x2.c      **** 				BMA2x2_RANGE_SELECT,
 2591              		.loc 1 1157 0
 2592 00be 0E23     		movs	r3, #14
 2593 00c0 FB18     		adds	r3, r7, r3
 2594 00c2 1B78     		ldrb	r3, [r3]
 2595 00c4 5BB2     		sxtb	r3, r3
 2596 00c6 0F22     		movs	r2, #15
 2597 00c8 9343     		bics	r3, r2
 2598 00ca 5BB2     		sxtb	r3, r3
 2599 00cc 0822     		movs	r2, #8
 2600 00ce 1343     		orrs	r3, r2
 2601 00d0 5BB2     		sxtb	r3, r3
 2602 00d2 DAB2     		uxtb	r2, r3
 2603 00d4 0E23     		movs	r3, #14
 2604 00d6 FB18     		adds	r3, r7, r3
 2605 00d8 1A70     		strb	r2, [r3]
1160:bma2x2.c      **** 			case BMA2x2_RANGE_16G:
 2606              		.loc 1 1160 0
 2607 00da 0EE0     		b	.L140
 2608              	.L139:
1162:bma2x2.c      **** 				BMA2x2_RANGE_SELECT,
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 70


 2609              		.loc 1 1162 0
 2610 00dc 0E23     		movs	r3, #14
 2611 00de FB18     		adds	r3, r7, r3
 2612 00e0 1B78     		ldrb	r3, [r3]
 2613 00e2 5BB2     		sxtb	r3, r3
 2614 00e4 0F22     		movs	r2, #15
 2615 00e6 9343     		bics	r3, r2
 2616 00e8 5BB2     		sxtb	r3, r3
 2617 00ea 0C22     		movs	r2, #12
 2618 00ec 1343     		orrs	r3, r2
 2619 00ee 5BB2     		sxtb	r3, r3
 2620 00f0 DAB2     		uxtb	r2, r3
 2621 00f2 0E23     		movs	r3, #14
 2622 00f4 FB18     		adds	r3, r7, r3
 2623 00f6 1A70     		strb	r2, [r3]
1165:bma2x2.c      **** 			default:
 2624              		.loc 1 1165 0
 2625 00f8 C046     		nop
 2626              	.L140:
1168:bma2x2.c      **** 			}
1169:bma2x2.c      **** 			/* Write the range register 0x0F*/
1170:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(BMA2x2_RANGE_SELECT_REG,
 2627              		.loc 1 1170 0
 2628 00fa 0E23     		movs	r3, #14
 2629 00fc FB18     		adds	r3, r7, r3
 2630 00fe 0122     		movs	r2, #1
 2631 0100 1900     		movs	r1, r3
 2632 0102 0F20     		movs	r0, #15
 2633 0104 FFF7FEFF 		bl	bma2x2_write_reg
 2634 0108 0300     		movs	r3, r0
 2635 010a DAB2     		uxtb	r2, r3
 2636 010c 0F23     		movs	r3, #15
 2637 010e FB18     		adds	r3, r7, r3
 2638 0110 1B78     		ldrb	r3, [r3]
 2639 0112 D318     		adds	r3, r2, r3
 2640 0114 DAB2     		uxtb	r2, r3
 2641 0116 0F23     		movs	r3, #15
 2642 0118 FB18     		adds	r3, r7, r3
 2643 011a 1A70     		strb	r2, [r3]
1171:bma2x2.c      **** 				&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
 2644              		.loc 1 1171 0
 2645 011c 03E0     		b	.L141
 2646              	.L133:
1172:bma2x2.c      **** 		} else {
1173:bma2x2.c      **** 		com_rslt = E_OUT_OF_RANGE;
 2647              		.loc 1 1173 0
 2648 011e 0F23     		movs	r3, #15
 2649 0120 FB18     		adds	r3, r7, r3
 2650 0122 FE22     		movs	r2, #254
 2651 0124 1A70     		strb	r2, [r3]
 2652              	.L141:
1174:bma2x2.c      **** 		}
1175:bma2x2.c      **** 	}
1176:bma2x2.c      **** 	return com_rslt;
 2653              		.loc 1 1176 0
 2654 0126 0F23     		movs	r3, #15
 2655 0128 FB18     		adds	r3, r7, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 71


 2656 012a 1B78     		ldrb	r3, [r3]
 2657 012c 5BB2     		sxtb	r3, r3
 2658              	.L142:
1177:bma2x2.c      **** }
 2659              		.loc 1 1177 0 discriminator 1
 2660 012e 1800     		movs	r0, r3
 2661 0130 BD46     		mov	sp, r7
 2662 0132 04B0     		add	sp, sp, #16
 2663              		@ sp needed
 2664 0134 B0BD     		pop	{r4, r5, r7, pc}
 2665              	.L144:
 2666 0136 C046     		.align	2
 2667              	.L143:
 2668 0138 00000000 		.word	p_bma2x2
 2669              		.cfi_endproc
 2670              	.LFE19:
 2671              		.size	bma2x2_set_range, .-bma2x2_set_range
 2672              		.section	.text.bma2x2_get_bw,"ax",%progbits
 2673              		.align	2
 2674              		.global	bma2x2_get_bw
 2675              		.code	16
 2676              		.thumb_func
 2677              		.type	bma2x2_get_bw, %function
 2678              	bma2x2_get_bw:
 2679              	.LFB20:
1178:bma2x2.c      **** /*!
1179:bma2x2.c      ****  *  @brief This API is used to get the bandwidth of the sensor in the register
1180:bma2x2.c      ****  *  0x10 bit from 0 to 4
1181:bma2x2.c      ****  *
1182:bma2x2.c      ****  *
1183:bma2x2.c      ****  *  @param bw_u8 : The value of bandwidth
1184:bma2x2.c      ****  *          bw_u8          |   result
1185:bma2x2.c      ****  *       ----------------- | --------------
1186:bma2x2.c      ****  *              0x08       | BMA2x2_BW_7_81HZ
1187:bma2x2.c      ****  *              0x09       | BMA2x2_BW_15_63HZ
1188:bma2x2.c      ****  *              0x0A       | BMA2x2_BW_31_25HZ
1189:bma2x2.c      ****  *              0x0B       | BMA2x2_BW_62_50HZ
1190:bma2x2.c      ****  *              0x0C       | BMA2x2_BW_125HZ
1191:bma2x2.c      ****  *              0x0D       | BMA2x2_BW_250HZ
1192:bma2x2.c      ****  *              0x0E       | BMA2x2_BW_500HZ
1193:bma2x2.c      ****  *              0x0F       | BMA2x2_BW_1000HZ
1194:bma2x2.c      ****  *
1195:bma2x2.c      ****  *
1196:bma2x2.c      ****  *
1197:bma2x2.c      ****  *  @return results of bus communication function
1198:bma2x2.c      ****  *  @retval 0 -> Success
1199:bma2x2.c      ****  *  @retval -1 -> Error
1200:bma2x2.c      ****  *
1201:bma2x2.c      ****  *
1202:bma2x2.c      **** */
1203:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_bw(u8 *bw_u8)
1204:bma2x2.c      **** {
 2680              		.loc 1 1204 0
 2681              		.cfi_startproc
 2682              		@ args = 0, pretend = 0, frame = 16
 2683              		@ frame_needed = 1, uses_anonymous_args = 0
 2684 0000 B0B5     		push	{r4, r5, r7, lr}
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 72


 2685              		.cfi_def_cfa_offset 16
 2686              		.cfi_offset 4, -16
 2687              		.cfi_offset 5, -12
 2688              		.cfi_offset 7, -8
 2689              		.cfi_offset 14, -4
 2690 0002 84B0     		sub	sp, sp, #16
 2691              		.cfi_def_cfa_offset 32
 2692 0004 00AF     		add	r7, sp, #0
 2693              		.cfi_def_cfa_register 7
 2694 0006 7860     		str	r0, [r7, #4]
1205:bma2x2.c      **** 	/*  Variable used to return value of
1206:bma2x2.c      **** 	communication routine*/
1207:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 2695              		.loc 1 1207 0
 2696 0008 0F23     		movs	r3, #15
 2697 000a FB18     		adds	r3, r7, r3
 2698 000c FF22     		movs	r2, #255
 2699 000e 1A70     		strb	r2, [r3]
1208:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 2700              		.loc 1 1208 0
 2701 0010 0E23     		movs	r3, #14
 2702 0012 FB18     		adds	r3, r7, r3
 2703 0014 0022     		movs	r2, #0
 2704 0016 1A70     		strb	r2, [r3]
1209:bma2x2.c      **** 
1210:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 2705              		.loc 1 1210 0
 2706 0018 154B     		ldr	r3, .L149
 2707 001a 1B68     		ldr	r3, [r3]
 2708 001c 002B     		cmp	r3, #0
 2709 001e 02D1     		bne	.L146
1211:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
1212:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 2710              		.loc 1 1212 0
 2711 0020 7F23     		movs	r3, #127
 2712 0022 5B42     		rsbs	r3, r3, #0
 2713 0024 20E0     		b	.L148
 2714              	.L146:
1213:bma2x2.c      **** 		} else {
1214:bma2x2.c      **** 			/* Read the bandwidth register 0x10*/
1215:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 2715              		.loc 1 1215 0
 2716 0026 124B     		ldr	r3, .L149
 2717 0028 1B68     		ldr	r3, [r3]
 2718 002a DD68     		ldr	r5, [r3, #12]
 2719 002c 104B     		ldr	r3, .L149
 2720 002e 1B68     		ldr	r3, [r3]
 2721 0030 1879     		ldrb	r0, [r3, #4]
 2722 0032 0F23     		movs	r3, #15
 2723 0034 FC18     		adds	r4, r7, r3
 2724 0036 0E23     		movs	r3, #14
 2725 0038 FA18     		adds	r2, r7, r3
 2726 003a 0123     		movs	r3, #1
 2727 003c 1021     		movs	r1, #16
 2728 003e A847     		blx	r5
 2729 0040 0300     		movs	r3, r0
 2730 0042 2370     		strb	r3, [r4]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 73


1216:bma2x2.c      **** 			(p_bma2x2->dev_addr,
1217:bma2x2.c      **** 			BMA2x2_BW_REG, &data_u8,
1218:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
1219:bma2x2.c      **** 			data_u8 = BMA2x2_GET_BITSLICE(data_u8, BMA2x2_BW);
 2731              		.loc 1 1219 0
 2732 0044 0E23     		movs	r3, #14
 2733 0046 FB18     		adds	r3, r7, r3
 2734 0048 1B78     		ldrb	r3, [r3]
 2735 004a 1F22     		movs	r2, #31
 2736 004c 1340     		ands	r3, r2
 2737 004e DAB2     		uxtb	r2, r3
 2738 0050 0E23     		movs	r3, #14
 2739 0052 FB18     		adds	r3, r7, r3
 2740 0054 1A70     		strb	r2, [r3]
1220:bma2x2.c      **** 			*bw_u8 = data_u8;
 2741              		.loc 1 1220 0
 2742 0056 0E23     		movs	r3, #14
 2743 0058 FB18     		adds	r3, r7, r3
 2744 005a 1A78     		ldrb	r2, [r3]
 2745 005c 7B68     		ldr	r3, [r7, #4]
 2746 005e 1A70     		strb	r2, [r3]
1221:bma2x2.c      **** 		}
1222:bma2x2.c      **** 	return com_rslt;
 2747              		.loc 1 1222 0
 2748 0060 0F23     		movs	r3, #15
 2749 0062 FB18     		adds	r3, r7, r3
 2750 0064 1B78     		ldrb	r3, [r3]
 2751 0066 5BB2     		sxtb	r3, r3
 2752              	.L148:
1223:bma2x2.c      **** }
 2753              		.loc 1 1223 0 discriminator 1
 2754 0068 1800     		movs	r0, r3
 2755 006a BD46     		mov	sp, r7
 2756 006c 04B0     		add	sp, sp, #16
 2757              		@ sp needed
 2758 006e B0BD     		pop	{r4, r5, r7, pc}
 2759              	.L150:
 2760              		.align	2
 2761              	.L149:
 2762 0070 00000000 		.word	p_bma2x2
 2763              		.cfi_endproc
 2764              	.LFE20:
 2765              		.size	bma2x2_get_bw, .-bma2x2_get_bw
 2766              		.section	.text.bma2x2_set_bw,"ax",%progbits
 2767              		.align	2
 2768              		.global	bma2x2_set_bw
 2769              		.code	16
 2770              		.thumb_func
 2771              		.type	bma2x2_set_bw, %function
 2772              	bma2x2_set_bw:
 2773              	.LFB21:
1224:bma2x2.c      **** /*!
1225:bma2x2.c      ****  *	@brief This API is used to set the bandwidth of the sensor
1226:bma2x2.c      ****  *      in the register
1227:bma2x2.c      ****  *	0x10 bit from 0 to 4
1228:bma2x2.c      ****  *
1229:bma2x2.c      ****  *
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 74


1230:bma2x2.c      ****  *  @param bw_u8 : The value of bandwidth
1231:bma2x2.c      ****  *		  bw_u8          |   result
1232:bma2x2.c      ****  *       ----------------- | --------------
1233:bma2x2.c      ****  *              0x08       | BMA2x2_BW_7_81HZ
1234:bma2x2.c      ****  *              0x09       | BMA2x2_BW_15_63HZ
1235:bma2x2.c      ****  *              0x0A       | BMA2x2_BW_31_25HZ
1236:bma2x2.c      ****  *              0x0B       | BMA2x2_BW_62_50HZ
1237:bma2x2.c      ****  *              0x0C       | BMA2x2_BW_125HZ
1238:bma2x2.c      ****  *              0x0D       | BMA2x2_BW_250HZ
1239:bma2x2.c      ****  *              0x0E       | BMA2x2_BW_500HZ
1240:bma2x2.c      ****  *              0x0F       | BMA2x2_BW_1000HZ
1241:bma2x2.c      ****  *
1242:bma2x2.c      ****  *
1243:bma2x2.c      ****  *
1244:bma2x2.c      ****  *	@return results of bus communication function
1245:bma2x2.c      ****  *	@retval 0 -> Success
1246:bma2x2.c      ****  *	@retval -1 -> Error
1247:bma2x2.c      ****  *
1248:bma2x2.c      ****  *
1249:bma2x2.c      **** */
1250:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_bw(u8 bw_u8)
1251:bma2x2.c      **** {
 2774              		.loc 1 1251 0
 2775              		.cfi_startproc
 2776              		@ args = 0, pretend = 0, frame = 16
 2777              		@ frame_needed = 1, uses_anonymous_args = 0
 2778 0000 B0B5     		push	{r4, r5, r7, lr}
 2779              		.cfi_def_cfa_offset 16
 2780              		.cfi_offset 4, -16
 2781              		.cfi_offset 5, -12
 2782              		.cfi_offset 7, -8
 2783              		.cfi_offset 14, -4
 2784 0002 84B0     		sub	sp, sp, #16
 2785              		.cfi_def_cfa_offset 32
 2786 0004 00AF     		add	r7, sp, #0
 2787              		.cfi_def_cfa_register 7
 2788 0006 0200     		movs	r2, r0
 2789 0008 FB1D     		adds	r3, r7, #7
 2790 000a 1A70     		strb	r2, [r3]
1252:bma2x2.c      **** /*  Variable used to return value of
1253:bma2x2.c      **** communication routine*/
1254:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 2791              		.loc 1 1254 0
 2792 000c 0F23     		movs	r3, #15
 2793 000e FB18     		adds	r3, r7, r3
 2794 0010 FF22     		movs	r2, #255
 2795 0012 1A70     		strb	r2, [r3]
1255:bma2x2.c      **** u8 data_u8 = BMA2x2_INIT_VALUE;
 2796              		.loc 1 1255 0
 2797 0014 0D23     		movs	r3, #13
 2798 0016 FB18     		adds	r3, r7, r3
 2799 0018 0022     		movs	r2, #0
 2800 001a 1A70     		strb	r2, [r3]
1256:bma2x2.c      **** u8 data_bw_u8 = BMA2x2_INIT_VALUE;
 2801              		.loc 1 1256 0
 2802 001c 0E23     		movs	r3, #14
 2803 001e FB18     		adds	r3, r7, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 75


 2804 0020 0022     		movs	r2, #0
 2805 0022 1A70     		strb	r2, [r3]
1257:bma2x2.c      **** if (p_bma2x2 == BMA2x2_NULL) {
 2806              		.loc 1 1257 0
 2807 0024 7C4B     		ldr	r3, .L182
 2808 0026 1B68     		ldr	r3, [r3]
 2809 0028 002B     		cmp	r3, #0
 2810 002a 04D1     		bne	.L152
1258:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
1259:bma2x2.c      **** 		com_rslt = E_BMA2x2_NULL_PTR;
 2811              		.loc 1 1259 0
 2812 002c 0F23     		movs	r3, #15
 2813 002e FB18     		adds	r3, r7, r3
 2814 0030 8122     		movs	r2, #129
 2815 0032 1A70     		strb	r2, [r3]
 2816 0034 E8E0     		b	.L153
 2817              	.L152:
1260:bma2x2.c      **** 	} else {
1261:bma2x2.c      **** 	/* Check the chip id 0xFB, it support upto 500Hz*/
1262:bma2x2.c      **** 	if (p_bma2x2->chip_id == BANDWIDTH_DEFINE) {
 2818              		.loc 1 1262 0
 2819 0036 784B     		ldr	r3, .L182
 2820 0038 1B68     		ldr	r3, [r3]
 2821 003a 5B78     		ldrb	r3, [r3, #1]
 2822 003c FB2B     		cmp	r3, #251
 2823 003e 6FD1     		bne	.L154
1263:bma2x2.c      **** 		if (bw_u8 > BMA2x2_ACCEL_BW_MIN_RANGE &&
 2824              		.loc 1 1263 0
 2825 0040 FB1D     		adds	r3, r7, #7
 2826 0042 1B78     		ldrb	r3, [r3]
 2827 0044 072B     		cmp	r3, #7
 2828 0046 66D9     		bls	.L155
 2829              		.loc 1 1263 0 is_stmt 0 discriminator 1
 2830 0048 FB1D     		adds	r3, r7, #7
 2831 004a 1B78     		ldrb	r3, [r3]
 2832 004c 0E2B     		cmp	r3, #14
 2833 004e 62D8     		bhi	.L155
1264:bma2x2.c      **** 		bw_u8 < BMA2x2_ACCEL_BW_1000HZ_RANGE) {
1265:bma2x2.c      **** 			switch (bw_u8) {
 2834              		.loc 1 1265 0 is_stmt 1
 2835 0050 FB1D     		adds	r3, r7, #7
 2836 0052 1B78     		ldrb	r3, [r3]
 2837 0054 083B     		subs	r3, r3, #8
 2838 0056 062B     		cmp	r3, #6
 2839 0058 27D8     		bhi	.L180
 2840 005a 9A00     		lsls	r2, r3, #2
 2841 005c 6F4B     		ldr	r3, .L182+4
 2842 005e D318     		adds	r3, r2, r3
 2843 0060 1B68     		ldr	r3, [r3]
 2844 0062 9F46     		mov	pc, r3
 2845              		.section	.rodata
 2846              		.align	2
 2847              	.L158:
 2848 0000 64000000 		.word	.L157
 2849 0004 6E000000 		.word	.L159
 2850 0008 78000000 		.word	.L160
 2851 000c 82000000 		.word	.L161
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 76


 2852 0010 8C000000 		.word	.L162
 2853 0014 96000000 		.word	.L163
 2854 0018 A0000000 		.word	.L164
 2855              		.section	.text.bma2x2_set_bw
 2856              	.L157:
1266:bma2x2.c      **** 			case BMA2x2_BW_7_81HZ:
1267:bma2x2.c      **** 				data_bw_u8 = BMA2x2_BW_7_81HZ;
 2857              		.loc 1 1267 0
 2858 0064 0E23     		movs	r3, #14
 2859 0066 FB18     		adds	r3, r7, r3
 2860 0068 0822     		movs	r2, #8
 2861 006a 1A70     		strb	r2, [r3]
1268:bma2x2.c      **** 
1269:bma2x2.c      **** 				/*  7.81 Hz      64000 uS   */
1270:bma2x2.c      **** 			break;
 2862              		.loc 1 1270 0
 2863 006c 1EE0     		b	.L165
 2864              	.L159:
1271:bma2x2.c      **** 			case BMA2x2_BW_15_63HZ:
1272:bma2x2.c      **** 				data_bw_u8 = BMA2x2_BW_15_63HZ;
 2865              		.loc 1 1272 0
 2866 006e 0E23     		movs	r3, #14
 2867 0070 FB18     		adds	r3, r7, r3
 2868 0072 0922     		movs	r2, #9
 2869 0074 1A70     		strb	r2, [r3]
1273:bma2x2.c      **** 
1274:bma2x2.c      **** 			/*  15.63 Hz     32000 uS   */
1275:bma2x2.c      **** 			break;
 2870              		.loc 1 1275 0
 2871 0076 19E0     		b	.L165
 2872              	.L160:
1276:bma2x2.c      **** 			case BMA2x2_BW_31_25HZ:
1277:bma2x2.c      **** 				data_bw_u8 = BMA2x2_BW_31_25HZ;
 2873              		.loc 1 1277 0
 2874 0078 0E23     		movs	r3, #14
 2875 007a FB18     		adds	r3, r7, r3
 2876 007c 0A22     		movs	r2, #10
 2877 007e 1A70     		strb	r2, [r3]
1278:bma2x2.c      **** 
1279:bma2x2.c      **** 			/*  31.25 Hz     16000 uS   */
1280:bma2x2.c      **** 			break;
 2878              		.loc 1 1280 0
 2879 0080 14E0     		b	.L165
 2880              	.L161:
1281:bma2x2.c      **** 			case BMA2x2_BW_62_50HZ:
1282:bma2x2.c      **** 				data_bw_u8 = BMA2x2_BW_62_50HZ;
 2881              		.loc 1 1282 0
 2882 0082 0E23     		movs	r3, #14
 2883 0084 FB18     		adds	r3, r7, r3
 2884 0086 0B22     		movs	r2, #11
 2885 0088 1A70     		strb	r2, [r3]
1283:bma2x2.c      **** 
1284:bma2x2.c      **** 			/*  62.50 Hz     8000 uS   */
1285:bma2x2.c      **** 			break;
 2886              		.loc 1 1285 0
 2887 008a 0FE0     		b	.L165
 2888              	.L162:
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 77


1286:bma2x2.c      **** 			case BMA2x2_BW_125HZ:
1287:bma2x2.c      **** 				data_bw_u8 = BMA2x2_BW_125HZ;
 2889              		.loc 1 1287 0
 2890 008c 0E23     		movs	r3, #14
 2891 008e FB18     		adds	r3, r7, r3
 2892 0090 0C22     		movs	r2, #12
 2893 0092 1A70     		strb	r2, [r3]
1288:bma2x2.c      **** 
1289:bma2x2.c      **** 			/*  125 Hz       4000 uS   */
1290:bma2x2.c      **** 			break;
 2894              		.loc 1 1290 0
 2895 0094 0AE0     		b	.L165
 2896              	.L163:
1291:bma2x2.c      **** 			case BMA2x2_BW_250HZ:
1292:bma2x2.c      **** 				data_bw_u8 = BMA2x2_BW_250HZ;
 2897              		.loc 1 1292 0
 2898 0096 0E23     		movs	r3, #14
 2899 0098 FB18     		adds	r3, r7, r3
 2900 009a 0D22     		movs	r2, #13
 2901 009c 1A70     		strb	r2, [r3]
1293:bma2x2.c      **** 
1294:bma2x2.c      **** 			/*  250 Hz       2000 uS   */
1295:bma2x2.c      **** 			break;
 2902              		.loc 1 1295 0
 2903 009e 05E0     		b	.L165
 2904              	.L164:
1296:bma2x2.c      **** 			case BMA2x2_BW_500HZ:
1297:bma2x2.c      **** 				data_bw_u8 = BMA2x2_BW_500HZ;
 2905              		.loc 1 1297 0
 2906 00a0 0E23     		movs	r3, #14
 2907 00a2 FB18     		adds	r3, r7, r3
 2908 00a4 0E22     		movs	r2, #14
 2909 00a6 1A70     		strb	r2, [r3]
1298:bma2x2.c      **** 
1299:bma2x2.c      **** 			/*  500 Hz       1000 uS   */
1300:bma2x2.c      **** 			break;
 2910              		.loc 1 1300 0
 2911 00a8 00E0     		b	.L165
 2912              	.L180:
1301:bma2x2.c      **** 			default:
1302:bma2x2.c      **** 			break;
 2913              		.loc 1 1302 0
 2914 00aa C046     		nop
 2915              	.L165:
1303:bma2x2.c      **** 			}
1304:bma2x2.c      **** 			/* Write the bandwidth register */
1305:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 2916              		.loc 1 1305 0
 2917 00ac 5A4B     		ldr	r3, .L182
 2918 00ae 1B68     		ldr	r3, [r3]
 2919 00b0 DD68     		ldr	r5, [r3, #12]
 2920 00b2 594B     		ldr	r3, .L182
 2921 00b4 1B68     		ldr	r3, [r3]
 2922 00b6 1879     		ldrb	r0, [r3, #4]
 2923 00b8 0F23     		movs	r3, #15
 2924 00ba FC18     		adds	r4, r7, r3
 2925 00bc 0D23     		movs	r3, #13
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 78


 2926 00be FA18     		adds	r2, r7, r3
 2927 00c0 0123     		movs	r3, #1
 2928 00c2 1021     		movs	r1, #16
 2929 00c4 A847     		blx	r5
 2930 00c6 0300     		movs	r3, r0
 2931 00c8 2370     		strb	r3, [r4]
1306:bma2x2.c      **** 			(p_bma2x2->dev_addr,
1307:bma2x2.c      **** 			BMA2x2_BW_REG, &data_u8,
1308:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
1309:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE(data_u8,
 2932              		.loc 1 1309 0
 2933 00ca 0D23     		movs	r3, #13
 2934 00cc FB18     		adds	r3, r7, r3
 2935 00ce 1B78     		ldrb	r3, [r3]
 2936 00d0 5BB2     		sxtb	r3, r3
 2937 00d2 1F22     		movs	r2, #31
 2938 00d4 9343     		bics	r3, r2
 2939 00d6 5AB2     		sxtb	r2, r3
 2940 00d8 0E23     		movs	r3, #14
 2941 00da FB18     		adds	r3, r7, r3
 2942 00dc 1B78     		ldrb	r3, [r3]
 2943 00de 5BB2     		sxtb	r3, r3
 2944 00e0 1F21     		movs	r1, #31
 2945 00e2 0B40     		ands	r3, r1
 2946 00e4 5BB2     		sxtb	r3, r3
 2947 00e6 1343     		orrs	r3, r2
 2948 00e8 5BB2     		sxtb	r3, r3
 2949 00ea DAB2     		uxtb	r2, r3
 2950 00ec 0D23     		movs	r3, #13
 2951 00ee FB18     		adds	r3, r7, r3
 2952 00f0 1A70     		strb	r2, [r3]
1310:bma2x2.c      **** 			BMA2x2_BW, data_bw_u8);
1311:bma2x2.c      **** 			com_rslt += bma2x2_write_reg
 2953              		.loc 1 1311 0
 2954 00f2 0D23     		movs	r3, #13
 2955 00f4 FB18     		adds	r3, r7, r3
 2956 00f6 0122     		movs	r2, #1
 2957 00f8 1900     		movs	r1, r3
 2958 00fa 1020     		movs	r0, #16
 2959 00fc FFF7FEFF 		bl	bma2x2_write_reg
 2960 0100 0300     		movs	r3, r0
 2961 0102 DAB2     		uxtb	r2, r3
 2962 0104 0F23     		movs	r3, #15
 2963 0106 FB18     		adds	r3, r7, r3
 2964 0108 1B78     		ldrb	r3, [r3]
 2965 010a D318     		adds	r3, r2, r3
 2966 010c DAB2     		uxtb	r2, r3
 2967 010e 0F23     		movs	r3, #15
 2968 0110 FB18     		adds	r3, r7, r3
 2969 0112 1A70     		strb	r2, [r3]
1312:bma2x2.c      **** 			(BMA2x2_BW_REG, &data_u8,
1313:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
 2970              		.loc 1 1313 0
 2971 0114 78E0     		b	.L153
 2972              	.L155:
1314:bma2x2.c      **** 			} else {
1315:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 79


 2973              		.loc 1 1315 0
 2974 0116 0F23     		movs	r3, #15
 2975 0118 FB18     		adds	r3, r7, r3
 2976 011a FE22     		movs	r2, #254
 2977 011c 1A70     		strb	r2, [r3]
 2978 011e 73E0     		b	.L153
 2979              	.L154:
1316:bma2x2.c      **** 			}
1317:bma2x2.c      **** 		} else {
1318:bma2x2.c      **** 		if (bw_u8 > BMA2x2_ACCEL_BW_MIN_RANGE &&
 2980              		.loc 1 1318 0
 2981 0120 FB1D     		adds	r3, r7, #7
 2982 0122 1B78     		ldrb	r3, [r3]
 2983 0124 072B     		cmp	r3, #7
 2984 0126 6BD9     		bls	.L167
 2985              		.loc 1 1318 0 is_stmt 0 discriminator 1
 2986 0128 FB1D     		adds	r3, r7, #7
 2987 012a 1B78     		ldrb	r3, [r3]
 2988 012c 0F2B     		cmp	r3, #15
 2989 012e 67D8     		bhi	.L167
1319:bma2x2.c      **** 		bw_u8 < BMA2x2_ACCEL_BW_MAX_RANGE) {
1320:bma2x2.c      **** 			switch (bw_u8) {
 2990              		.loc 1 1320 0 is_stmt 1
 2991 0130 FB1D     		adds	r3, r7, #7
 2992 0132 1B78     		ldrb	r3, [r3]
 2993 0134 083B     		subs	r3, r3, #8
 2994 0136 072B     		cmp	r3, #7
 2995 0138 2CD8     		bhi	.L181
 2996 013a 9A00     		lsls	r2, r3, #2
 2997 013c 384B     		ldr	r3, .L182+8
 2998 013e D318     		adds	r3, r2, r3
 2999 0140 1B68     		ldr	r3, [r3]
 3000 0142 9F46     		mov	pc, r3
 3001              		.section	.rodata
 3002              		.align	2
 3003              	.L170:
 3004 001c 44010000 		.word	.L169
 3005 0020 4E010000 		.word	.L171
 3006 0024 58010000 		.word	.L172
 3007 0028 62010000 		.word	.L173
 3008 002c 6C010000 		.word	.L174
 3009 0030 76010000 		.word	.L175
 3010 0034 80010000 		.word	.L176
 3011 0038 8A010000 		.word	.L177
 3012              		.section	.text.bma2x2_set_bw
 3013              	.L169:
1321:bma2x2.c      **** 			case BMA2x2_BW_7_81HZ:
1322:bma2x2.c      **** 				data_bw_u8 = BMA2x2_BW_7_81HZ;
 3014              		.loc 1 1322 0
 3015 0144 0E23     		movs	r3, #14
 3016 0146 FB18     		adds	r3, r7, r3
 3017 0148 0822     		movs	r2, #8
 3018 014a 1A70     		strb	r2, [r3]
1323:bma2x2.c      **** 
1324:bma2x2.c      **** 			/*  7.81 Hz      64000 uS   */
1325:bma2x2.c      **** 			break;
 3019              		.loc 1 1325 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 80


 3020 014c 23E0     		b	.L178
 3021              	.L171:
1326:bma2x2.c      **** 			case BMA2x2_BW_15_63HZ:
1327:bma2x2.c      **** 				data_bw_u8 = BMA2x2_BW_15_63HZ;
 3022              		.loc 1 1327 0
 3023 014e 0E23     		movs	r3, #14
 3024 0150 FB18     		adds	r3, r7, r3
 3025 0152 0922     		movs	r2, #9
 3026 0154 1A70     		strb	r2, [r3]
1328:bma2x2.c      **** 
1329:bma2x2.c      **** 			/*  15.63 Hz     32000 uS   */
1330:bma2x2.c      **** 			break;
 3027              		.loc 1 1330 0
 3028 0156 1EE0     		b	.L178
 3029              	.L172:
1331:bma2x2.c      **** 			case BMA2x2_BW_31_25HZ:
1332:bma2x2.c      **** 				data_bw_u8 = BMA2x2_BW_31_25HZ;
 3030              		.loc 1 1332 0
 3031 0158 0E23     		movs	r3, #14
 3032 015a FB18     		adds	r3, r7, r3
 3033 015c 0A22     		movs	r2, #10
 3034 015e 1A70     		strb	r2, [r3]
1333:bma2x2.c      **** 
1334:bma2x2.c      **** 			/*  31.25 Hz     16000 uS   */
1335:bma2x2.c      **** 			break;
 3035              		.loc 1 1335 0
 3036 0160 19E0     		b	.L178
 3037              	.L173:
1336:bma2x2.c      **** 			case BMA2x2_BW_62_50HZ:
1337:bma2x2.c      **** 				data_bw_u8 = BMA2x2_BW_62_50HZ;
 3038              		.loc 1 1337 0
 3039 0162 0E23     		movs	r3, #14
 3040 0164 FB18     		adds	r3, r7, r3
 3041 0166 0B22     		movs	r2, #11
 3042 0168 1A70     		strb	r2, [r3]
1338:bma2x2.c      **** 
1339:bma2x2.c      **** 			/*  62.50 Hz     8000 uS   */
1340:bma2x2.c      **** 			break;
 3043              		.loc 1 1340 0
 3044 016a 14E0     		b	.L178
 3045              	.L174:
1341:bma2x2.c      **** 			case BMA2x2_BW_125HZ:
1342:bma2x2.c      **** 				data_bw_u8 = BMA2x2_BW_125HZ;
 3046              		.loc 1 1342 0
 3047 016c 0E23     		movs	r3, #14
 3048 016e FB18     		adds	r3, r7, r3
 3049 0170 0C22     		movs	r2, #12
 3050 0172 1A70     		strb	r2, [r3]
1343:bma2x2.c      **** 
1344:bma2x2.c      **** 			/*  125 Hz       4000 uS   */
1345:bma2x2.c      **** 			break;
 3051              		.loc 1 1345 0
 3052 0174 0FE0     		b	.L178
 3053              	.L175:
1346:bma2x2.c      **** 			case BMA2x2_BW_250HZ:
1347:bma2x2.c      **** 				data_bw_u8 = BMA2x2_BW_250HZ;
 3054              		.loc 1 1347 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 81


 3055 0176 0E23     		movs	r3, #14
 3056 0178 FB18     		adds	r3, r7, r3
 3057 017a 0D22     		movs	r2, #13
 3058 017c 1A70     		strb	r2, [r3]
1348:bma2x2.c      **** 
1349:bma2x2.c      **** 			/*  250 Hz       2000 uS   */
1350:bma2x2.c      **** 			break;
 3059              		.loc 1 1350 0
 3060 017e 0AE0     		b	.L178
 3061              	.L176:
1351:bma2x2.c      **** 			case BMA2x2_BW_500HZ:
1352:bma2x2.c      **** 				data_bw_u8 = BMA2x2_BW_500HZ;
 3062              		.loc 1 1352 0
 3063 0180 0E23     		movs	r3, #14
 3064 0182 FB18     		adds	r3, r7, r3
 3065 0184 0E22     		movs	r2, #14
 3066 0186 1A70     		strb	r2, [r3]
1353:bma2x2.c      **** 
1354:bma2x2.c      **** 			/*!  500 Hz       1000 uS   */
1355:bma2x2.c      **** 			break;
 3067              		.loc 1 1355 0
 3068 0188 05E0     		b	.L178
 3069              	.L177:
1356:bma2x2.c      **** 			case BMA2x2_BW_1000HZ:
1357:bma2x2.c      **** 				data_bw_u8 = BMA2x2_BW_1000HZ;
 3070              		.loc 1 1357 0
 3071 018a 0E23     		movs	r3, #14
 3072 018c FB18     		adds	r3, r7, r3
 3073 018e 0F22     		movs	r2, #15
 3074 0190 1A70     		strb	r2, [r3]
1358:bma2x2.c      **** 
1359:bma2x2.c      **** 			/*  1000 Hz      500 uS   */
1360:bma2x2.c      **** 			break;
 3075              		.loc 1 1360 0
 3076 0192 00E0     		b	.L178
 3077              	.L181:
1361:bma2x2.c      **** 			default:
1362:bma2x2.c      **** 			break;
 3078              		.loc 1 1362 0
 3079 0194 C046     		nop
 3080              	.L178:
1363:bma2x2.c      **** 			}
1364:bma2x2.c      **** 			/* Write the bandwidth register */
1365:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 3081              		.loc 1 1365 0
 3082 0196 204B     		ldr	r3, .L182
 3083 0198 1B68     		ldr	r3, [r3]
 3084 019a DD68     		ldr	r5, [r3, #12]
 3085 019c 1E4B     		ldr	r3, .L182
 3086 019e 1B68     		ldr	r3, [r3]
 3087 01a0 1879     		ldrb	r0, [r3, #4]
 3088 01a2 0F23     		movs	r3, #15
 3089 01a4 FC18     		adds	r4, r7, r3
 3090 01a6 0D23     		movs	r3, #13
 3091 01a8 FA18     		adds	r2, r7, r3
 3092 01aa 0123     		movs	r3, #1
 3093 01ac 1021     		movs	r1, #16
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 82


 3094 01ae A847     		blx	r5
 3095 01b0 0300     		movs	r3, r0
 3096 01b2 2370     		strb	r3, [r4]
1366:bma2x2.c      **** 			(p_bma2x2->dev_addr,
1367:bma2x2.c      **** 			BMA2x2_BW_REG, &data_u8,
1368:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
1369:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 3097              		.loc 1 1369 0
 3098 01b4 0D23     		movs	r3, #13
 3099 01b6 FB18     		adds	r3, r7, r3
 3100 01b8 1B78     		ldrb	r3, [r3]
 3101 01ba 5BB2     		sxtb	r3, r3
 3102 01bc 1F22     		movs	r2, #31
 3103 01be 9343     		bics	r3, r2
 3104 01c0 5AB2     		sxtb	r2, r3
 3105 01c2 0E23     		movs	r3, #14
 3106 01c4 FB18     		adds	r3, r7, r3
 3107 01c6 1B78     		ldrb	r3, [r3]
 3108 01c8 5BB2     		sxtb	r3, r3
 3109 01ca 1F21     		movs	r1, #31
 3110 01cc 0B40     		ands	r3, r1
 3111 01ce 5BB2     		sxtb	r3, r3
 3112 01d0 1343     		orrs	r3, r2
 3113 01d2 5BB2     		sxtb	r3, r3
 3114 01d4 DAB2     		uxtb	r2, r3
 3115 01d6 0D23     		movs	r3, #13
 3116 01d8 FB18     		adds	r3, r7, r3
 3117 01da 1A70     		strb	r2, [r3]
1370:bma2x2.c      **** 			(data_u8, BMA2x2_BW, data_bw_u8);
1371:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 3118              		.loc 1 1371 0
 3119 01dc 0D23     		movs	r3, #13
 3120 01de FB18     		adds	r3, r7, r3
 3121 01e0 0122     		movs	r2, #1
 3122 01e2 1900     		movs	r1, r3
 3123 01e4 1020     		movs	r0, #16
 3124 01e6 FFF7FEFF 		bl	bma2x2_write_reg
 3125 01ea 0300     		movs	r3, r0
 3126 01ec DAB2     		uxtb	r2, r3
 3127 01ee 0F23     		movs	r3, #15
 3128 01f0 FB18     		adds	r3, r7, r3
 3129 01f2 1B78     		ldrb	r3, [r3]
 3130 01f4 D318     		adds	r3, r2, r3
 3131 01f6 DAB2     		uxtb	r2, r3
 3132 01f8 0F23     		movs	r3, #15
 3133 01fa FB18     		adds	r3, r7, r3
 3134 01fc 1A70     		strb	r2, [r3]
1372:bma2x2.c      **** 			BMA2x2_BW_REG, &data_u8,
1373:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
 3135              		.loc 1 1373 0
 3136 01fe 03E0     		b	.L153
 3137              	.L167:
1374:bma2x2.c      **** 			} else {
1375:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 3138              		.loc 1 1375 0
 3139 0200 0F23     		movs	r3, #15
 3140 0202 FB18     		adds	r3, r7, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 83


 3141 0204 FE22     		movs	r2, #254
 3142 0206 1A70     		strb	r2, [r3]
 3143              	.L153:
1376:bma2x2.c      **** 			}
1377:bma2x2.c      **** 		}
1378:bma2x2.c      **** 	}
1379:bma2x2.c      **** 	return com_rslt;
 3144              		.loc 1 1379 0
 3145 0208 0F23     		movs	r3, #15
 3146 020a FB18     		adds	r3, r7, r3
 3147 020c 1B78     		ldrb	r3, [r3]
 3148 020e 5BB2     		sxtb	r3, r3
1380:bma2x2.c      **** }
 3149              		.loc 1 1380 0
 3150 0210 1800     		movs	r0, r3
 3151 0212 BD46     		mov	sp, r7
 3152 0214 04B0     		add	sp, sp, #16
 3153              		@ sp needed
 3154 0216 B0BD     		pop	{r4, r5, r7, pc}
 3155              	.L183:
 3156              		.align	2
 3157              	.L182:
 3158 0218 00000000 		.word	p_bma2x2
 3159 021c 00000000 		.word	.L158
 3160 0220 1C000000 		.word	.L170
 3161              		.cfi_endproc
 3162              	.LFE21:
 3163              		.size	bma2x2_set_bw, .-bma2x2_set_bw
 3164              		.section	.text.bma2x2_get_power_mode,"ax",%progbits
 3165              		.align	2
 3166              		.global	bma2x2_get_power_mode
 3167              		.code	16
 3168              		.thumb_func
 3169              		.type	bma2x2_get_power_mode, %function
 3170              	bma2x2_get_power_mode:
 3171              	.LFB22:
1381:bma2x2.c      **** /*!
1382:bma2x2.c      ****  *	@brief This API is used to get the operating
1383:bma2x2.c      ****  *	modes of the sensor in the register 0x11 and 0x12
1384:bma2x2.c      ****  *	@note Register 0x11 - bit from 5 to 7
1385:bma2x2.c      ****  *	@note Register 0x12 - bit from 5 and 6
1386:bma2x2.c      ****  *
1387:bma2x2.c      ****  *
1388:bma2x2.c      ****  *  @param power_mode_u8 : The value of power mode
1389:bma2x2.c      ****  *	power_mode_u8           |value  |   0x11  |   0x12
1390:bma2x2.c      ****  *  ------------------------- |-------| --------|--------
1391:bma2x2.c      ****  *  BMA2x2_MODE_NORMAL        |  0    |  0x00   |  0x00
1392:bma2x2.c      ****  *  BMA2x2_MODE_LOWPOWER1     |  1    |  0x02   |  0x00
1393:bma2x2.c      ****  *  BMA2x2_MODE_SUSPEND       |  2    |  0x06   |  0x00
1394:bma2x2.c      ****  *  BMA2x2_MODE_DEEP_SUSPEND  |  3    |  0x01   |  0x00
1395:bma2x2.c      ****  *  BMA2x2_MODE_LOWPOWER2     |  4    |  0x02   |  0x01
1396:bma2x2.c      ****  *  BMA2x2_MODE_STANDBY       |  5    |  0x04   |  0x00
1397:bma2x2.c      ****  *
1398:bma2x2.c      ****  *
1399:bma2x2.c      ****  *
1400:bma2x2.c      ****  *	@return results of bus communication function
1401:bma2x2.c      ****  *	@retval 0 -> Success
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 84


1402:bma2x2.c      ****  *	@retval -1 -> Error
1403:bma2x2.c      ****  *
1404:bma2x2.c      ****  *
1405:bma2x2.c      ****  */
1406:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_power_mode(
1407:bma2x2.c      **** u8 *power_mode_u8)
1408:bma2x2.c      **** {
 3172              		.loc 1 1408 0
 3173              		.cfi_startproc
 3174              		@ args = 0, pretend = 0, frame = 16
 3175              		@ frame_needed = 1, uses_anonymous_args = 0
 3176 0000 B0B5     		push	{r4, r5, r7, lr}
 3177              		.cfi_def_cfa_offset 16
 3178              		.cfi_offset 4, -16
 3179              		.cfi_offset 5, -12
 3180              		.cfi_offset 7, -8
 3181              		.cfi_offset 14, -4
 3182 0002 84B0     		sub	sp, sp, #16
 3183              		.cfi_def_cfa_offset 32
 3184 0004 00AF     		add	r7, sp, #0
 3185              		.cfi_def_cfa_register 7
 3186 0006 7860     		str	r0, [r7, #4]
1409:bma2x2.c      **** 	/*  Variable used to return value of
1410:bma2x2.c      **** 	communication routine*/
1411:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 3187              		.loc 1 1411 0
 3188 0008 0F23     		movs	r3, #15
 3189 000a FB18     		adds	r3, r7, r3
 3190 000c FF22     		movs	r2, #255
 3191 000e 1A70     		strb	r2, [r3]
1412:bma2x2.c      **** u8 data_u8 = BMA2x2_INIT_VALUE;
 3192              		.loc 1 1412 0
 3193 0010 0E23     		movs	r3, #14
 3194 0012 FB18     		adds	r3, r7, r3
 3195 0014 0022     		movs	r2, #0
 3196 0016 1A70     		strb	r2, [r3]
1413:bma2x2.c      **** u8 data2_u8 = BMA2x2_INIT_VALUE;
 3197              		.loc 1 1413 0
 3198 0018 0D23     		movs	r3, #13
 3199 001a FB18     		adds	r3, r7, r3
 3200 001c 0022     		movs	r2, #0
 3201 001e 1A70     		strb	r2, [r3]
1414:bma2x2.c      **** if (p_bma2x2 == BMA2x2_NULL) {
 3202              		.loc 1 1414 0
 3203 0020 524B     		ldr	r3, .L195
 3204 0022 1B68     		ldr	r3, [r3]
 3205 0024 002B     		cmp	r3, #0
 3206 0026 04D1     		bne	.L185
1415:bma2x2.c      **** 	/* Check the struct p_bma2x2 is empty */
1416:bma2x2.c      **** 		com_rslt = E_BMA2x2_NULL_PTR;
 3207              		.loc 1 1416 0
 3208 0028 0F23     		movs	r3, #15
 3209 002a FB18     		adds	r3, r7, r3
 3210 002c 8122     		movs	r2, #129
 3211 002e 1A70     		strb	r2, [r3]
 3212 0030 8FE0     		b	.L186
 3213              	.L185:
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 85


1417:bma2x2.c      **** 	} else {
1418:bma2x2.c      **** 		com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 3214              		.loc 1 1418 0
 3215 0032 4E4B     		ldr	r3, .L195
 3216 0034 1B68     		ldr	r3, [r3]
 3217 0036 DD68     		ldr	r5, [r3, #12]
 3218 0038 4C4B     		ldr	r3, .L195
 3219 003a 1B68     		ldr	r3, [r3]
 3220 003c 1879     		ldrb	r0, [r3, #4]
 3221 003e 0F23     		movs	r3, #15
 3222 0040 FC18     		adds	r4, r7, r3
 3223 0042 0E23     		movs	r3, #14
 3224 0044 FA18     		adds	r2, r7, r3
 3225 0046 0123     		movs	r3, #1
 3226 0048 1121     		movs	r1, #17
 3227 004a A847     		blx	r5
 3228 004c 0300     		movs	r3, r0
 3229 004e 2370     		strb	r3, [r4]
1419:bma2x2.c      **** 		(p_bma2x2->dev_addr, BMA2x2_MODE_CTRL_REG,
1420:bma2x2.c      **** 		&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
1421:bma2x2.c      **** 		com_rslt += p_bma2x2->BMA2x2_BUS_READ_FUNC
 3230              		.loc 1 1421 0
 3231 0050 464B     		ldr	r3, .L195
 3232 0052 1B68     		ldr	r3, [r3]
 3233 0054 DC68     		ldr	r4, [r3, #12]
 3234 0056 454B     		ldr	r3, .L195
 3235 0058 1B68     		ldr	r3, [r3]
 3236 005a 1879     		ldrb	r0, [r3, #4]
 3237 005c 0D23     		movs	r3, #13
 3238 005e FA18     		adds	r2, r7, r3
 3239 0060 0123     		movs	r3, #1
 3240 0062 1221     		movs	r1, #18
 3241 0064 A047     		blx	r4
 3242 0066 0300     		movs	r3, r0
 3243 0068 DAB2     		uxtb	r2, r3
 3244 006a 0F23     		movs	r3, #15
 3245 006c FB18     		adds	r3, r7, r3
 3246 006e 1B78     		ldrb	r3, [r3]
 3247 0070 D318     		adds	r3, r2, r3
 3248 0072 DAB2     		uxtb	r2, r3
 3249 0074 0F23     		movs	r3, #15
 3250 0076 FB18     		adds	r3, r7, r3
 3251 0078 1A70     		strb	r2, [r3]
1422:bma2x2.c      **** 		(p_bma2x2->dev_addr, BMA2x2_LOW_NOISE_CTRL_ADDR,
1423:bma2x2.c      **** 		&data2_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
1424:bma2x2.c      **** 
1425:bma2x2.c      **** 		data_u8  = (data_u8 &
1426:bma2x2.c      **** 		BMA2x2_POWER_MODE_HEX_E_ZERO_MASK) >>
 3252              		.loc 1 1426 0
 3253 007a 0E23     		movs	r3, #14
 3254 007c FB18     		adds	r3, r7, r3
 3255 007e 1B78     		ldrb	r3, [r3]
 3256 0080 5B09     		lsrs	r3, r3, #5
 3257 0082 DAB2     		uxtb	r2, r3
1425:bma2x2.c      **** 		BMA2x2_POWER_MODE_HEX_E_ZERO_MASK) >>
 3258              		.loc 1 1425 0
 3259 0084 0E23     		movs	r3, #14
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 86


 3260 0086 FB18     		adds	r3, r7, r3
 3261 0088 1A70     		strb	r2, [r3]
1427:bma2x2.c      **** 		BMA2x2_SHIFT_FIVE_BITS;
1428:bma2x2.c      **** 		data2_u8  = (data2_u8 &
1429:bma2x2.c      **** 		BMA2x2_POWER_MODE_HEX_4_ZERO_MASK) >>
 3262              		.loc 1 1429 0
 3263 008a 0D23     		movs	r3, #13
 3264 008c FB18     		adds	r3, r7, r3
 3265 008e 1B78     		ldrb	r3, [r3]
 3266 0090 9B11     		asrs	r3, r3, #6
1428:bma2x2.c      **** 		BMA2x2_POWER_MODE_HEX_4_ZERO_MASK) >>
 3267              		.loc 1 1428 0
 3268 0092 DBB2     		uxtb	r3, r3
 3269 0094 0122     		movs	r2, #1
 3270 0096 1340     		ands	r3, r2
 3271 0098 DAB2     		uxtb	r2, r3
 3272 009a 0D23     		movs	r3, #13
 3273 009c FB18     		adds	r3, r7, r3
 3274 009e 1A70     		strb	r2, [r3]
1430:bma2x2.c      **** 		BMA2x2_SHIFT_SIX_BITS;
1431:bma2x2.c      **** 
1432:bma2x2.c      **** 	if ((data_u8 ==
 3275              		.loc 1 1432 0
 3276 00a0 0E23     		movs	r3, #14
 3277 00a2 FB18     		adds	r3, r7, r3
 3278 00a4 1B78     		ldrb	r3, [r3]
 3279 00a6 002B     		cmp	r3, #0
 3280 00a8 08D1     		bne	.L187
1433:bma2x2.c      **** 	BMA2x2_POWER_MODE_HEX_ZERO_ZERO_MASK) &&
1434:bma2x2.c      **** 	(data2_u8 ==
 3281              		.loc 1 1434 0
 3282 00aa 0D23     		movs	r3, #13
 3283 00ac FB18     		adds	r3, r7, r3
 3284 00ae 1B78     		ldrb	r3, [r3]
1433:bma2x2.c      **** 	BMA2x2_POWER_MODE_HEX_ZERO_ZERO_MASK) &&
 3285              		.loc 1 1433 0
 3286 00b0 002B     		cmp	r3, #0
 3287 00b2 03D1     		bne	.L187
1435:bma2x2.c      **** 	BMA2x2_POWER_MODE_HEX_ZERO_ZERO_MASK)) {
1436:bma2x2.c      **** 		*power_mode_u8  = BMA2x2_MODE_NORMAL;
 3288              		.loc 1 1436 0
 3289 00b4 7B68     		ldr	r3, [r7, #4]
 3290 00b6 0022     		movs	r2, #0
 3291 00b8 1A70     		strb	r2, [r3]
 3292 00ba 4AE0     		b	.L186
 3293              	.L187:
1437:bma2x2.c      **** 		} else {
1438:bma2x2.c      **** 		if ((data_u8 ==
 3294              		.loc 1 1438 0
 3295 00bc 0E23     		movs	r3, #14
 3296 00be FB18     		adds	r3, r7, r3
 3297 00c0 1B78     		ldrb	r3, [r3]
 3298 00c2 022B     		cmp	r3, #2
 3299 00c4 08D1     		bne	.L188
1439:bma2x2.c      **** 		BMA2x2_POWER_MODE_HEX_ZERO_TWO_MASK) &&
1440:bma2x2.c      **** 		(data2_u8 ==
 3300              		.loc 1 1440 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 87


 3301 00c6 0D23     		movs	r3, #13
 3302 00c8 FB18     		adds	r3, r7, r3
 3303 00ca 1B78     		ldrb	r3, [r3]
1439:bma2x2.c      **** 		BMA2x2_POWER_MODE_HEX_ZERO_TWO_MASK) &&
 3304              		.loc 1 1439 0
 3305 00cc 002B     		cmp	r3, #0
 3306 00ce 03D1     		bne	.L188
1441:bma2x2.c      **** 		BMA2x2_POWER_MODE_HEX_ZERO_ZERO_MASK)) {
1442:bma2x2.c      **** 			*power_mode_u8  =
 3307              		.loc 1 1442 0
 3308 00d0 7B68     		ldr	r3, [r7, #4]
 3309 00d2 0122     		movs	r2, #1
 3310 00d4 1A70     		strb	r2, [r3]
 3311 00d6 3CE0     		b	.L186
 3312              	.L188:
1443:bma2x2.c      **** 			BMA2x2_MODE_LOWPOWER1;
1444:bma2x2.c      **** 			} else {
1445:bma2x2.c      **** 			if ((data_u8 ==
 3313              		.loc 1 1445 0
 3314 00d8 0E23     		movs	r3, #14
 3315 00da FB18     		adds	r3, r7, r3
 3316 00dc 1B78     		ldrb	r3, [r3]
 3317 00de 042B     		cmp	r3, #4
 3318 00e0 04D0     		beq	.L189
1446:bma2x2.c      **** 			BMA2x2_POWER_MODE_HEX_ZERO_FOUR_MASK
1447:bma2x2.c      **** 			|| data_u8 ==
 3319              		.loc 1 1447 0
 3320 00e2 0E23     		movs	r3, #14
 3321 00e4 FB18     		adds	r3, r7, r3
 3322 00e6 1B78     		ldrb	r3, [r3]
 3323 00e8 062B     		cmp	r3, #6
 3324 00ea 08D1     		bne	.L190
 3325              	.L189:
1448:bma2x2.c      **** 			BMA2x2_POWER_MODE_HEX_ZERO_SIX_MASK) &&
1449:bma2x2.c      **** 			(data2_u8 ==
 3326              		.loc 1 1449 0
 3327 00ec 0D23     		movs	r3, #13
 3328 00ee FB18     		adds	r3, r7, r3
 3329 00f0 1B78     		ldrb	r3, [r3]
1448:bma2x2.c      **** 			BMA2x2_POWER_MODE_HEX_ZERO_SIX_MASK) &&
 3330              		.loc 1 1448 0
 3331 00f2 002B     		cmp	r3, #0
 3332 00f4 03D1     		bne	.L190
1450:bma2x2.c      **** 			BMA2x2_POWER_MODE_HEX_ZERO_ZERO_MASK)) {
1451:bma2x2.c      **** 				*power_mode_u8  =
 3333              		.loc 1 1451 0
 3334 00f6 7B68     		ldr	r3, [r7, #4]
 3335 00f8 0222     		movs	r2, #2
 3336 00fa 1A70     		strb	r2, [r3]
 3337 00fc 29E0     		b	.L186
 3338              	.L190:
1452:bma2x2.c      **** 				BMA2x2_MODE_SUSPEND;
1453:bma2x2.c      **** 				} else {
1454:bma2x2.c      **** 				if (((data_u8 &
 3339              		.loc 1 1454 0
 3340 00fe 0E23     		movs	r3, #14
 3341 0100 FB18     		adds	r3, r7, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 88


 3342 0102 1B78     		ldrb	r3, [r3]
 3343 0104 1A00     		movs	r2, r3
 3344 0106 0123     		movs	r3, #1
 3345 0108 1340     		ands	r3, r2
 3346 010a 03D0     		beq	.L191
1455:bma2x2.c      **** 				BMA2x2_POWER_MODE_HEX_ZERO_ONE_MASK)
1456:bma2x2.c      **** 				== BMA2x2_POWER_MODE_HEX_ZERO_ONE_MASK)) {
1457:bma2x2.c      **** 					*power_mode_u8  =
 3347              		.loc 1 1457 0
 3348 010c 7B68     		ldr	r3, [r7, #4]
 3349 010e 0322     		movs	r2, #3
 3350 0110 1A70     		strb	r2, [r3]
 3351 0112 1EE0     		b	.L186
 3352              	.L191:
1458:bma2x2.c      **** 					BMA2x2_MODE_DEEP_SUSPEND;
1459:bma2x2.c      **** 					} else {
1460:bma2x2.c      **** 					if ((data_u8 ==
 3353              		.loc 1 1460 0
 3354 0114 0E23     		movs	r3, #14
 3355 0116 FB18     		adds	r3, r7, r3
 3356 0118 1B78     		ldrb	r3, [r3]
 3357 011a 022B     		cmp	r3, #2
 3358 011c 08D1     		bne	.L192
1461:bma2x2.c      **** 					BMA2x2_POWER_MODE_HEX_ZERO_TWO_MASK)
1462:bma2x2.c      **** 					&& (data2_u8 ==
 3359              		.loc 1 1462 0
 3360 011e 0D23     		movs	r3, #13
 3361 0120 FB18     		adds	r3, r7, r3
 3362 0122 1B78     		ldrb	r3, [r3]
 3363 0124 012B     		cmp	r3, #1
 3364 0126 03D1     		bne	.L192
1463:bma2x2.c      **** 					BMA2x2_POWER_MODE_HEX_ZERO_ONE_MASK)) {
1464:bma2x2.c      **** 						*power_mode_u8  =
 3365              		.loc 1 1464 0
 3366 0128 7B68     		ldr	r3, [r7, #4]
 3367 012a 0422     		movs	r2, #4
 3368 012c 1A70     		strb	r2, [r3]
 3369 012e 10E0     		b	.L186
 3370              	.L192:
1465:bma2x2.c      **** 						BMA2x2_MODE_LOWPOWER2;
1466:bma2x2.c      **** 					} else {
1467:bma2x2.c      **** 					if ((data_u8 ==
 3371              		.loc 1 1467 0
 3372 0130 0E23     		movs	r3, #14
 3373 0132 FB18     		adds	r3, r7, r3
 3374 0134 1B78     		ldrb	r3, [r3]
 3375 0136 042B     		cmp	r3, #4
 3376 0138 08D1     		bne	.L193
1468:bma2x2.c      **** 					BMA2x2_POWER_MODE_HEX_ZERO_FOUR_MASK) &&
1469:bma2x2.c      **** 					(data2_u8 ==
 3377              		.loc 1 1469 0
 3378 013a 0D23     		movs	r3, #13
 3379 013c FB18     		adds	r3, r7, r3
 3380 013e 1B78     		ldrb	r3, [r3]
1468:bma2x2.c      **** 					BMA2x2_POWER_MODE_HEX_ZERO_FOUR_MASK) &&
 3381              		.loc 1 1468 0
 3382 0140 012B     		cmp	r3, #1
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 89


 3383 0142 03D1     		bne	.L193
1470:bma2x2.c      **** 					BMA2x2_POWER_MODE_HEX_ZERO_ONE_MASK))
1471:bma2x2.c      **** 						*power_mode_u8  =
 3384              		.loc 1 1471 0
 3385 0144 7B68     		ldr	r3, [r7, #4]
 3386 0146 0522     		movs	r2, #5
 3387 0148 1A70     		strb	r2, [r3]
 3388 014a 02E0     		b	.L186
 3389              	.L193:
1472:bma2x2.c      **** 							BMA2x2_MODE_STANDBY;
1473:bma2x2.c      **** 					else
1474:bma2x2.c      **** 						*power_mode_u8 =
 3390              		.loc 1 1474 0
 3391 014c 7B68     		ldr	r3, [r7, #4]
 3392 014e 0322     		movs	r2, #3
 3393 0150 1A70     		strb	r2, [r3]
 3394              	.L186:
1475:bma2x2.c      **** 						BMA2x2_MODE_DEEP_SUSPEND;
1476:bma2x2.c      **** 						}
1477:bma2x2.c      **** 					}
1478:bma2x2.c      **** 				}
1479:bma2x2.c      **** 			}
1480:bma2x2.c      **** 		}
1481:bma2x2.c      **** 	}
1482:bma2x2.c      **** 	p_bma2x2->power_mode_u8 = *power_mode_u8;
 3395              		.loc 1 1482 0
 3396 0152 064B     		ldr	r3, .L195
 3397 0154 1B68     		ldr	r3, [r3]
 3398 0156 7A68     		ldr	r2, [r7, #4]
 3399 0158 1278     		ldrb	r2, [r2]
 3400 015a 1A70     		strb	r2, [r3]
1483:bma2x2.c      **** return com_rslt;
 3401              		.loc 1 1483 0
 3402 015c 0F23     		movs	r3, #15
 3403 015e FB18     		adds	r3, r7, r3
 3404 0160 1B78     		ldrb	r3, [r3]
 3405 0162 5BB2     		sxtb	r3, r3
1484:bma2x2.c      **** }
 3406              		.loc 1 1484 0
 3407 0164 1800     		movs	r0, r3
 3408 0166 BD46     		mov	sp, r7
 3409 0168 04B0     		add	sp, sp, #16
 3410              		@ sp needed
 3411 016a B0BD     		pop	{r4, r5, r7, pc}
 3412              	.L196:
 3413              		.align	2
 3414              	.L195:
 3415 016c 00000000 		.word	p_bma2x2
 3416              		.cfi_endproc
 3417              	.LFE22:
 3418              		.size	bma2x2_get_power_mode, .-bma2x2_get_power_mode
 3419              		.section	.text.bma2x2_set_power_mode,"ax",%progbits
 3420              		.align	2
 3421              		.global	bma2x2_set_power_mode
 3422              		.code	16
 3423              		.thumb_func
 3424              		.type	bma2x2_set_power_mode, %function
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 90


 3425              	bma2x2_set_power_mode:
 3426              	.LFB23:
1485:bma2x2.c      **** /*!
1486:bma2x2.c      ****  *	@brief This API is used to set the operating
1487:bma2x2.c      ****  *	modes of the sensor in the register 0x11 and 0x12
1488:bma2x2.c      ****  *	@note Register 0x11 - bit from 5 to 7
1489:bma2x2.c      ****  *	@note Register 0x12 - bit from 5 and 6
1490:bma2x2.c      ****  *
1491:bma2x2.c      ****  *
1492:bma2x2.c      ****  *  @param power_mode_u8 : The value of power mode
1493:bma2x2.c      ****  *	power_mode_u8         |value  |   0x11  |   0x12
1494:bma2x2.c      ****  *  ------------------------- |-------| --------|--------
1495:bma2x2.c      ****  *  BMA2x2_MODE_NORMAL        |  0    |  0x00   |  0x00
1496:bma2x2.c      ****  *  BMA2x2_MODE_LOWPOWER1     |  1    |  0x02   |  0x00
1497:bma2x2.c      ****  *  BMA2x2_MODE_SUSPEND       |  2    |  0x06   |  0x00
1498:bma2x2.c      ****  *  BMA2x2_MODE_DEEP_SUSPEND  |  3    |  0x01   |  0x00
1499:bma2x2.c      ****  *  BMA2x2_MODE_LOWPOWER2     |  4    |  0x02   |  0x01
1500:bma2x2.c      ****  *  BMA2x2_MODE_STANDBY       |  5    |  0x04   |  0x00
1501:bma2x2.c      ****  *
1502:bma2x2.c      ****  *
1503:bma2x2.c      ****  *
1504:bma2x2.c      ****  *	@return results of bus communication function
1505:bma2x2.c      ****  *	@retval 0 -> Success
1506:bma2x2.c      ****  *	@retval -1 -> Error
1507:bma2x2.c      ****  *
1508:bma2x2.c      ****  *
1509:bma2x2.c      ****  */
1510:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_power_mode(u8 power_mode_u8)
1511:bma2x2.c      **** {
 3427              		.loc 1 1511 0
 3428              		.cfi_startproc
 3429              		@ args = 0, pretend = 0, frame = 16
 3430              		@ frame_needed = 1, uses_anonymous_args = 0
 3431 0000 B0B5     		push	{r4, r5, r7, lr}
 3432              		.cfi_def_cfa_offset 16
 3433              		.cfi_offset 4, -16
 3434              		.cfi_offset 5, -12
 3435              		.cfi_offset 7, -8
 3436              		.cfi_offset 14, -4
 3437 0002 84B0     		sub	sp, sp, #16
 3438              		.cfi_def_cfa_offset 32
 3439 0004 00AF     		add	r7, sp, #0
 3440              		.cfi_def_cfa_register 7
 3441 0006 0200     		movs	r2, r0
 3442 0008 FB1D     		adds	r3, r7, #7
 3443 000a 1A70     		strb	r2, [r3]
1512:bma2x2.c      **** 		/*  Variable used to return value of
1513:bma2x2.c      **** 	communication routine*/
1514:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 3444              		.loc 1 1514 0
 3445 000c 0F23     		movs	r3, #15
 3446 000e FB18     		adds	r3, r7, r3
 3447 0010 FF22     		movs	r2, #255
 3448 0012 1A70     		strb	r2, [r3]
1515:bma2x2.c      **** 	u8 mode_ctr_eleven_reg = BMA2x2_INIT_VALUE;
 3449              		.loc 1 1515 0
 3450 0014 0E23     		movs	r3, #14
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 91


 3451 0016 FB18     		adds	r3, r7, r3
 3452 0018 0022     		movs	r2, #0
 3453 001a 1A70     		strb	r2, [r3]
1516:bma2x2.c      **** 	u8 mode_ctr_twel_reg = BMA2x2_INIT_VALUE;
 3454              		.loc 1 1516 0
 3455 001c 0D23     		movs	r3, #13
 3456 001e FB18     		adds	r3, r7, r3
 3457 0020 0022     		movs	r2, #0
 3458 0022 1A70     		strb	r2, [r3]
1517:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 3459              		.loc 1 1517 0
 3460 0024 0C23     		movs	r3, #12
 3461 0026 FB18     		adds	r3, r7, r3
 3462 0028 0022     		movs	r2, #0
 3463 002a 1A70     		strb	r2, [r3]
1518:bma2x2.c      **** 	u8 data2_u8 = BMA2x2_INIT_VALUE;
 3464              		.loc 1 1518 0
 3465 002c 0B23     		movs	r3, #11
 3466 002e FB18     		adds	r3, r7, r3
 3467 0030 0022     		movs	r2, #0
 3468 0032 1A70     		strb	r2, [r3]
1519:bma2x2.c      **** 	u8 pre_fifo_config_data = BMA2x2_INIT_VALUE;
 3469              		.loc 1 1519 0
 3470 0034 0A23     		movs	r3, #10
 3471 0036 FB18     		adds	r3, r7, r3
 3472 0038 0022     		movs	r2, #0
 3473 003a 1A70     		strb	r2, [r3]
1520:bma2x2.c      **** 
1521:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 3474              		.loc 1 1521 0
 3475 003c 834B     		ldr	r3, .L203
 3476 003e 1B68     		ldr	r3, [r3]
 3477 0040 002B     		cmp	r3, #0
 3478 0042 04D1     		bne	.L198
1522:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
1523:bma2x2.c      **** 		com_rslt = E_BMA2x2_NULL_PTR;
 3479              		.loc 1 1523 0
 3480 0044 0F23     		movs	r3, #15
 3481 0046 FB18     		adds	r3, r7, r3
 3482 0048 8122     		movs	r2, #129
 3483 004a 1A70     		strb	r2, [r3]
 3484 004c F5E0     		b	.L199
 3485              	.L198:
1524:bma2x2.c      **** 	} else {
1525:bma2x2.c      **** 		com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC(p_bma2x2->dev_addr,
 3486              		.loc 1 1525 0
 3487 004e 7F4B     		ldr	r3, .L203
 3488 0050 1B68     		ldr	r3, [r3]
 3489 0052 DD68     		ldr	r5, [r3, #12]
 3490 0054 7D4B     		ldr	r3, .L203
 3491 0056 1B68     		ldr	r3, [r3]
 3492 0058 1879     		ldrb	r0, [r3, #4]
 3493 005a 0F23     		movs	r3, #15
 3494 005c FC18     		adds	r4, r7, r3
 3495 005e 0C23     		movs	r3, #12
 3496 0060 FA18     		adds	r2, r7, r3
 3497 0062 0123     		movs	r3, #1
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 92


 3498 0064 1121     		movs	r1, #17
 3499 0066 A847     		blx	r5
 3500 0068 0300     		movs	r3, r0
 3501 006a 2370     		strb	r3, [r4]
1526:bma2x2.c      **** 			BMA2x2_MODE_CTRL_REG, &data_u8, 1);
1527:bma2x2.c      **** 		com_rslt += p_bma2x2->BMA2x2_BUS_READ_FUNC(p_bma2x2->dev_addr,
 3502              		.loc 1 1527 0
 3503 006c 774B     		ldr	r3, .L203
 3504 006e 1B68     		ldr	r3, [r3]
 3505 0070 DC68     		ldr	r4, [r3, #12]
 3506 0072 764B     		ldr	r3, .L203
 3507 0074 1B68     		ldr	r3, [r3]
 3508 0076 1879     		ldrb	r0, [r3, #4]
 3509 0078 0B23     		movs	r3, #11
 3510 007a FA18     		adds	r2, r7, r3
 3511 007c 0123     		movs	r3, #1
 3512 007e 1221     		movs	r1, #18
 3513 0080 A047     		blx	r4
 3514 0082 0300     		movs	r3, r0
 3515 0084 DAB2     		uxtb	r2, r3
 3516 0086 0F23     		movs	r3, #15
 3517 0088 FB18     		adds	r3, r7, r3
 3518 008a 1B78     		ldrb	r3, [r3]
 3519 008c D318     		adds	r3, r2, r3
 3520 008e DAB2     		uxtb	r2, r3
 3521 0090 0F23     		movs	r3, #15
 3522 0092 FB18     		adds	r3, r7, r3
 3523 0094 1A70     		strb	r2, [r3]
1528:bma2x2.c      **** 			BMA2x2_LOW_POWER_MODE_REG, &data2_u8, 1);
1529:bma2x2.c      **** 
1530:bma2x2.c      **** 		/* write the previous FIFO mode and data select*/
1531:bma2x2.c      **** 		pre_fifo_config_data = p_bma2x2->fifo_config;
 3524              		.loc 1 1531 0
 3525 0096 6D4B     		ldr	r3, .L203
 3526 0098 1B68     		ldr	r3, [r3]
 3527 009a 5A79     		ldrb	r2, [r3, #5]
 3528 009c 0A23     		movs	r3, #10
 3529 009e FB18     		adds	r3, r7, r3
 3530 00a0 1A70     		strb	r2, [r3]
1532:bma2x2.c      **** 		pre_fifo_config_data |= 0x0C;
 3531              		.loc 1 1532 0
 3532 00a2 0A23     		movs	r3, #10
 3533 00a4 FB18     		adds	r3, r7, r3
 3534 00a6 1B78     		ldrb	r3, [r3]
 3535 00a8 0C22     		movs	r2, #12
 3536 00aa 1343     		orrs	r3, r2
 3537 00ac DAB2     		uxtb	r2, r3
 3538 00ae 0A23     		movs	r3, #10
 3539 00b0 FB18     		adds	r3, r7, r3
 3540 00b2 1A70     		strb	r2, [r3]
1533:bma2x2.c      **** 
1534:bma2x2.c      **** 		com_rslt += bma2x2_set_mode_value(power_mode_u8);
 3541              		.loc 1 1534 0
 3542 00b4 FB1D     		adds	r3, r7, #7
 3543 00b6 1B78     		ldrb	r3, [r3]
 3544 00b8 1800     		movs	r0, r3
 3545 00ba FFF7FEFF 		bl	bma2x2_set_mode_value
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 93


 3546 00be 0300     		movs	r3, r0
 3547 00c0 DAB2     		uxtb	r2, r3
 3548 00c2 0F23     		movs	r3, #15
 3549 00c4 FB18     		adds	r3, r7, r3
 3550 00c6 1B78     		ldrb	r3, [r3]
 3551 00c8 D318     		adds	r3, r2, r3
 3552 00ca DAB2     		uxtb	r2, r3
 3553 00cc 0F23     		movs	r3, #15
 3554 00ce FB18     		adds	r3, r7, r3
 3555 00d0 1A70     		strb	r2, [r3]
1535:bma2x2.c      **** 		mode_ctr_eleven_reg = p_bma2x2->ctrl_mode_reg;
 3556              		.loc 1 1535 0
 3557 00d2 5E4B     		ldr	r3, .L203
 3558 00d4 1A68     		ldr	r2, [r3]
 3559 00d6 0E23     		movs	r3, #14
 3560 00d8 FB18     		adds	r3, r7, r3
 3561 00da 9278     		ldrb	r2, [r2, #2]
 3562 00dc 1A70     		strb	r2, [r3]
1536:bma2x2.c      **** 		mode_ctr_twel_reg =  p_bma2x2->low_mode_reg;
 3563              		.loc 1 1536 0
 3564 00de 5B4B     		ldr	r3, .L203
 3565 00e0 1A68     		ldr	r2, [r3]
 3566 00e2 0D23     		movs	r3, #13
 3567 00e4 FB18     		adds	r3, r7, r3
 3568 00e6 D278     		ldrb	r2, [r2, #3]
 3569 00e8 1A70     		strb	r2, [r3]
1537:bma2x2.c      **** 
1538:bma2x2.c      **** 		/* write the power mode to the register 0x12*/
1539:bma2x2.c      **** 		data2_u8  = BMA2x2_SET_BITSLICE(data2_u8, BMA2x2_LOW_POWER_MODE,
 3570              		.loc 1 1539 0
 3571 00ea 0B23     		movs	r3, #11
 3572 00ec FB18     		adds	r3, r7, r3
 3573 00ee 1B78     		ldrb	r3, [r3]
 3574 00f0 5BB2     		sxtb	r3, r3
 3575 00f2 4022     		movs	r2, #64
 3576 00f4 9343     		bics	r3, r2
 3577 00f6 5AB2     		sxtb	r2, r3
 3578 00f8 0D23     		movs	r3, #13
 3579 00fa FB18     		adds	r3, r7, r3
 3580 00fc 1B78     		ldrb	r3, [r3]
 3581 00fe 9B01     		lsls	r3, r3, #6
 3582 0100 5BB2     		sxtb	r3, r3
 3583 0102 4021     		movs	r1, #64
 3584 0104 0B40     		ands	r3, r1
 3585 0106 5BB2     		sxtb	r3, r3
 3586 0108 1343     		orrs	r3, r2
 3587 010a 5BB2     		sxtb	r3, r3
 3588 010c DAB2     		uxtb	r2, r3
 3589 010e 0B23     		movs	r3, #11
 3590 0110 FB18     		adds	r3, r7, r3
 3591 0112 1A70     		strb	r2, [r3]
1540:bma2x2.c      **** 					mode_ctr_twel_reg);
1541:bma2x2.c      **** 		com_rslt += bma2x2_write_reg(BMA2x2_LOW_POWER_MODE_REG,
 3592              		.loc 1 1541 0
 3593 0114 0B23     		movs	r3, #11
 3594 0116 FB18     		adds	r3, r7, r3
 3595 0118 0122     		movs	r2, #1
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 94


 3596 011a 1900     		movs	r1, r3
 3597 011c 1220     		movs	r0, #18
 3598 011e FFF7FEFF 		bl	bma2x2_write_reg
 3599 0122 0300     		movs	r3, r0
 3600 0124 DAB2     		uxtb	r2, r3
 3601 0126 0F23     		movs	r3, #15
 3602 0128 FB18     		adds	r3, r7, r3
 3603 012a 1B78     		ldrb	r3, [r3]
 3604 012c D318     		adds	r3, r2, r3
 3605 012e DAB2     		uxtb	r2, r3
 3606 0130 0F23     		movs	r3, #15
 3607 0132 FB18     		adds	r3, r7, r3
 3608 0134 1A70     		strb	r2, [r3]
1542:bma2x2.c      **** 					&data2_u8, 1);
1543:bma2x2.c      **** 
1544:bma2x2.c      **** 		/*A minimum delay of atleast 450us is required for
1545:bma2x2.c      **** 		the low power modes, as per the data sheet.*/
1546:bma2x2.c      **** 		p_bma2x2->delay_msec(BMA2x2_INTERFACE_IDLE_TIME_DELAY);
 3609              		.loc 1 1546 0
 3610 0136 454B     		ldr	r3, .L203
 3611 0138 1B68     		ldr	r3, [r3]
 3612 013a 5B69     		ldr	r3, [r3, #20]
 3613 013c 0120     		movs	r0, #1
 3614 013e 9847     		blx	r3
1547:bma2x2.c      **** 
1548:bma2x2.c      **** 		if (((p_bma2x2->power_mode_u8 == BMA2x2_MODE_LOWPOWER1) ||
 3615              		.loc 1 1548 0
 3616 0140 424B     		ldr	r3, .L203
 3617 0142 1B68     		ldr	r3, [r3]
 3618 0144 1B78     		ldrb	r3, [r3]
 3619 0146 012B     		cmp	r3, #1
 3620 0148 04D0     		beq	.L200
1549:bma2x2.c      **** 			(p_bma2x2->power_mode_u8 == BMA2x2_MODE_LOWPOWER2)) &&
 3621              		.loc 1 1549 0 discriminator 1
 3622 014a 404B     		ldr	r3, .L203
 3623 014c 1B68     		ldr	r3, [r3]
 3624 014e 1B78     		ldrb	r3, [r3]
1548:bma2x2.c      **** 			(p_bma2x2->power_mode_u8 == BMA2x2_MODE_LOWPOWER2)) &&
 3625              		.loc 1 1548 0 discriminator 1
 3626 0150 042B     		cmp	r3, #4
 3627 0152 34D1     		bne	.L201
 3628              	.L200:
 3629              		.loc 1 1549 0
 3630 0154 FB1D     		adds	r3, r7, #7
 3631 0156 1B78     		ldrb	r3, [r3]
 3632 0158 002B     		cmp	r3, #0
 3633 015a 30D1     		bne	.L201
1550:bma2x2.c      **** 				(power_mode_u8 == BMA2x2_MODE_NORMAL)) {
1551:bma2x2.c      **** 				/* Enter the power mode to suspend*/
1552:bma2x2.c      **** 				data_u8  = BMA2x2_SET_BITSLICE(data_u8,
 3634              		.loc 1 1552 0
 3635 015c 0C23     		movs	r3, #12
 3636 015e FB18     		adds	r3, r7, r3
 3637 0160 1B78     		ldrb	r3, [r3]
 3638 0162 5BB2     		sxtb	r3, r3
 3639 0164 1F22     		movs	r2, #31
 3640 0166 1340     		ands	r3, r2
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 95


 3641 0168 5BB2     		sxtb	r3, r3
 3642 016a 8022     		movs	r2, #128
 3643 016c 5242     		rsbs	r2, r2, #0
 3644 016e 1343     		orrs	r3, r2
 3645 0170 5BB2     		sxtb	r3, r3
 3646 0172 DAB2     		uxtb	r2, r3
 3647 0174 0C23     		movs	r3, #12
 3648 0176 FB18     		adds	r3, r7, r3
 3649 0178 1A70     		strb	r2, [r3]
1553:bma2x2.c      **** 				BMA2x2_MODE_CTRL, BMA2x2_SHIFT_FOUR_BITS);
1554:bma2x2.c      **** 				/* write the power mode to suspend*/
1555:bma2x2.c      **** 				com_rslt += bma2x2_write_reg(
 3650              		.loc 1 1555 0
 3651 017a 0C23     		movs	r3, #12
 3652 017c FB18     		adds	r3, r7, r3
 3653 017e 0122     		movs	r2, #1
 3654 0180 1900     		movs	r1, r3
 3655 0182 1120     		movs	r0, #17
 3656 0184 FFF7FEFF 		bl	bma2x2_write_reg
 3657 0188 0300     		movs	r3, r0
 3658 018a DAB2     		uxtb	r2, r3
 3659 018c 0F23     		movs	r3, #15
 3660 018e FB18     		adds	r3, r7, r3
 3661 0190 1B78     		ldrb	r3, [r3]
 3662 0192 D318     		adds	r3, r2, r3
 3663 0194 DAB2     		uxtb	r2, r3
 3664 0196 0F23     		movs	r3, #15
 3665 0198 FB18     		adds	r3, r7, r3
 3666 019a 1A70     		strb	r2, [r3]
1556:bma2x2.c      **** 				BMA2x2_MODE_CTRL_REG, &data_u8,
1557:bma2x2.c      **** 				BMA2x2_GEN_READ_WRITE_LENGTH);
1558:bma2x2.c      **** 				/*re-write FIFO_CONFIG_0 register*/
1559:bma2x2.c      **** 				com_rslt += bma2x2_write_reg(
 3667              		.loc 1 1559 0
 3668 019c 0A23     		movs	r3, #10
 3669 019e FB18     		adds	r3, r7, r3
 3670 01a0 0122     		movs	r2, #1
 3671 01a2 1900     		movs	r1, r3
 3672 01a4 3E20     		movs	r0, #62
 3673 01a6 FFF7FEFF 		bl	bma2x2_write_reg
 3674 01aa 0300     		movs	r3, r0
 3675 01ac DAB2     		uxtb	r2, r3
 3676 01ae 0F23     		movs	r3, #15
 3677 01b0 FB18     		adds	r3, r7, r3
 3678 01b2 1B78     		ldrb	r3, [r3]
 3679 01b4 D318     		adds	r3, r2, r3
 3680 01b6 DAB2     		uxtb	r2, r3
 3681 01b8 0F23     		movs	r3, #15
 3682 01ba FB18     		adds	r3, r7, r3
 3683 01bc 1A70     		strb	r2, [r3]
 3684              	.L201:
1560:bma2x2.c      **** 				BMA2x2_FIFO_MODE_REG, &pre_fifo_config_data, 1);
1561:bma2x2.c      **** 			}
1562:bma2x2.c      **** 
1563:bma2x2.c      **** 		/* write the power mode to 0x11 register*/
1564:bma2x2.c      **** 		data_u8  = BMA2x2_SET_BITSLICE(data_u8, BMA2x2_MODE_CTRL,
 3685              		.loc 1 1564 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 96


 3686 01be 0C23     		movs	r3, #12
 3687 01c0 FB18     		adds	r3, r7, r3
 3688 01c2 1B78     		ldrb	r3, [r3]
 3689 01c4 5BB2     		sxtb	r3, r3
 3690 01c6 1F22     		movs	r2, #31
 3691 01c8 1340     		ands	r3, r2
 3692 01ca 5AB2     		sxtb	r2, r3
 3693 01cc 0E23     		movs	r3, #14
 3694 01ce FB18     		adds	r3, r7, r3
 3695 01d0 1B78     		ldrb	r3, [r3]
 3696 01d2 5B01     		lsls	r3, r3, #5
 3697 01d4 5BB2     		sxtb	r3, r3
 3698 01d6 1343     		orrs	r3, r2
 3699 01d8 5BB2     		sxtb	r3, r3
 3700 01da DAB2     		uxtb	r2, r3
 3701 01dc 0C23     		movs	r3, #12
 3702 01de FB18     		adds	r3, r7, r3
 3703 01e0 1A70     		strb	r2, [r3]
1565:bma2x2.c      **** 			mode_ctr_eleven_reg);
1566:bma2x2.c      **** 		com_rslt += bma2x2_write_reg(BMA2x2_MODE_CTRL_REG, &data_u8, 1);
 3704              		.loc 1 1566 0
 3705 01e2 0C23     		movs	r3, #12
 3706 01e4 FB18     		adds	r3, r7, r3
 3707 01e6 0122     		movs	r2, #1
 3708 01e8 1900     		movs	r1, r3
 3709 01ea 1120     		movs	r0, #17
 3710 01ec FFF7FEFF 		bl	bma2x2_write_reg
 3711 01f0 0300     		movs	r3, r0
 3712 01f2 DAB2     		uxtb	r2, r3
 3713 01f4 0F23     		movs	r3, #15
 3714 01f6 FB18     		adds	r3, r7, r3
 3715 01f8 1B78     		ldrb	r3, [r3]
 3716 01fa D318     		adds	r3, r2, r3
 3717 01fc DAB2     		uxtb	r2, r3
 3718 01fe 0F23     		movs	r3, #15
 3719 0200 FB18     		adds	r3, r7, r3
 3720 0202 1A70     		strb	r2, [r3]
1567:bma2x2.c      **** 		/*A minimum delay of atleast 450us is required for
1568:bma2x2.c      **** 		the low power modes, as per the data sheet.*/
1569:bma2x2.c      **** 		p_bma2x2->delay_msec(BMA2x2_INTERFACE_IDLE_TIME_DELAY);
 3721              		.loc 1 1569 0
 3722 0204 114B     		ldr	r3, .L203
 3723 0206 1B68     		ldr	r3, [r3]
 3724 0208 5B69     		ldr	r3, [r3, #20]
 3725 020a 0120     		movs	r0, #1
 3726 020c 9847     		blx	r3
1570:bma2x2.c      **** 
1571:bma2x2.c      **** 		com_rslt += bma2x2_write_reg(BMA2x2_FIFO_MODE_REG,
 3727              		.loc 1 1571 0
 3728 020e 0A23     		movs	r3, #10
 3729 0210 FB18     		adds	r3, r7, r3
 3730 0212 0122     		movs	r2, #1
 3731 0214 1900     		movs	r1, r3
 3732 0216 3E20     		movs	r0, #62
 3733 0218 FFF7FEFF 		bl	bma2x2_write_reg
 3734 021c 0300     		movs	r3, r0
 3735 021e DAB2     		uxtb	r2, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 97


 3736 0220 0F23     		movs	r3, #15
 3737 0222 FB18     		adds	r3, r7, r3
 3738 0224 1B78     		ldrb	r3, [r3]
 3739 0226 D318     		adds	r3, r2, r3
 3740 0228 DAB2     		uxtb	r2, r3
 3741 022a 0F23     		movs	r3, #15
 3742 022c FB18     		adds	r3, r7, r3
 3743 022e 1A70     		strb	r2, [r3]
1572:bma2x2.c      **** 		&pre_fifo_config_data, 1);
1573:bma2x2.c      **** 
1574:bma2x2.c      **** 		/*Assigning the power mode to the global variable*/
1575:bma2x2.c      **** 		p_bma2x2->power_mode_u8 = power_mode_u8;
 3744              		.loc 1 1575 0
 3745 0230 064B     		ldr	r3, .L203
 3746 0232 1B68     		ldr	r3, [r3]
 3747 0234 FA1D     		adds	r2, r7, #7
 3748 0236 1278     		ldrb	r2, [r2]
 3749 0238 1A70     		strb	r2, [r3]
 3750              	.L199:
1576:bma2x2.c      **** 	}
1577:bma2x2.c      **** 	return com_rslt;
 3751              		.loc 1 1577 0
 3752 023a 0F23     		movs	r3, #15
 3753 023c FB18     		adds	r3, r7, r3
 3754 023e 1B78     		ldrb	r3, [r3]
 3755 0240 5BB2     		sxtb	r3, r3
1578:bma2x2.c      **** }
 3756              		.loc 1 1578 0
 3757 0242 1800     		movs	r0, r3
 3758 0244 BD46     		mov	sp, r7
 3759 0246 04B0     		add	sp, sp, #16
 3760              		@ sp needed
 3761 0248 B0BD     		pop	{r4, r5, r7, pc}
 3762              	.L204:
 3763 024a C046     		.align	2
 3764              	.L203:
 3765 024c 00000000 		.word	p_bma2x2
 3766              		.cfi_endproc
 3767              	.LFE23:
 3768              		.size	bma2x2_set_power_mode, .-bma2x2_set_power_mode
 3769              		.section	.text.bma2x2_set_mode_value,"ax",%progbits
 3770              		.align	2
 3771              		.global	bma2x2_set_mode_value
 3772              		.code	16
 3773              		.thumb_func
 3774              		.type	bma2x2_set_mode_value, %function
 3775              	bma2x2_set_mode_value:
 3776              	.LFB24:
1579:bma2x2.c      **** /*!
1580:bma2x2.c      ****  *	@brief This API is used to assign the power mode values
1581:bma2x2.c      ****  *	modes of the sensor in the register 0x11 and 0x12
1582:bma2x2.c      ****  *	@note Register 0x11 - bit from 5 to 7
1583:bma2x2.c      ****  *	@note Register 0x12 - bit from 5 and 6
1584:bma2x2.c      ****  *
1585:bma2x2.c      ****  *
1586:bma2x2.c      ****  *  @param power_mode_u8 : The value of power mode
1587:bma2x2.c      ****  *	power_mode_u8           |value  |   0x11  |   0x12
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 98


1588:bma2x2.c      ****  *  ------------------------- |-------| --------|--------
1589:bma2x2.c      ****  *  BMA2x2_MODE_NORMAL        |  0    |  0x00   |  0x00
1590:bma2x2.c      ****  *  BMA2x2_MODE_LOWPOWER1     |  1    |  0x02   |  0x00
1591:bma2x2.c      ****  *  BMA2x2_MODE_SUSPEND       |  2    |  0x06   |  0x00
1592:bma2x2.c      ****  *  BMA2x2_MODE_DEEP_SUSPEND  |  3    |  0x01   |  0x00
1593:bma2x2.c      ****  *  BMA2x2_MODE_LOWPOWER2     |  4    |  0x02   |  0x01
1594:bma2x2.c      ****  *  BMA2x2_MODE_STANDBY       |  5    |  0x04   |  0x00
1595:bma2x2.c      ****  *
1596:bma2x2.c      ****  *
1597:bma2x2.c      ****  *
1598:bma2x2.c      ****  *	@return results of bus communication function
1599:bma2x2.c      ****  *	@retval 0 -> Success
1600:bma2x2.c      ****  *	@retval -1 -> Error
1601:bma2x2.c      ****  *
1602:bma2x2.c      ****  *
1603:bma2x2.c      ****  */
1604:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_mode_value(u8 power_mode_u8)
1605:bma2x2.c      **** {
 3777              		.loc 1 1605 0
 3778              		.cfi_startproc
 3779              		@ args = 0, pretend = 0, frame = 16
 3780              		@ frame_needed = 1, uses_anonymous_args = 0
 3781 0000 80B5     		push	{r7, lr}
 3782              		.cfi_def_cfa_offset 8
 3783              		.cfi_offset 7, -8
 3784              		.cfi_offset 14, -4
 3785 0002 84B0     		sub	sp, sp, #16
 3786              		.cfi_def_cfa_offset 24
 3787 0004 00AF     		add	r7, sp, #0
 3788              		.cfi_def_cfa_register 7
 3789 0006 0200     		movs	r2, r0
 3790 0008 FB1D     		adds	r3, r7, #7
 3791 000a 1A70     		strb	r2, [r3]
1606:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = SUCCESS;
 3792              		.loc 1 1606 0
 3793 000c 0F23     		movs	r3, #15
 3794 000e FB18     		adds	r3, r7, r3
 3795 0010 0022     		movs	r2, #0
 3796 0012 1A70     		strb	r2, [r3]
1607:bma2x2.c      **** 
1608:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 3797              		.loc 1 1608 0
 3798 0014 2A4B     		ldr	r3, .L218
 3799 0016 1B68     		ldr	r3, [r3]
 3800 0018 002B     		cmp	r3, #0
 3801 001a 04D1     		bne	.L206
1609:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
1610:bma2x2.c      **** 		com_rslt = E_BMA2x2_NULL_PTR;
 3802              		.loc 1 1610 0
 3803 001c 0F23     		movs	r3, #15
 3804 001e FB18     		adds	r3, r7, r3
 3805 0020 8122     		movs	r2, #129
 3806 0022 1A70     		strb	r2, [r3]
 3807 0024 43E0     		b	.L207
 3808              	.L206:
1611:bma2x2.c      **** 	} else {
1612:bma2x2.c      **** 	if (power_mode_u8 < BMA2x2_POWER_MODE_RANGE) {
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 99


 3809              		.loc 1 1612 0
 3810 0026 FB1D     		adds	r3, r7, #7
 3811 0028 1B78     		ldrb	r3, [r3]
 3812 002a 052B     		cmp	r3, #5
 3813 002c 3BD8     		bhi	.L208
1613:bma2x2.c      **** 		switch (power_mode_u8)	{
 3814              		.loc 1 1613 0
 3815 002e FB1D     		adds	r3, r7, #7
 3816 0030 1B78     		ldrb	r3, [r3]
 3817 0032 052B     		cmp	r3, #5
 3818 0034 3BD8     		bhi	.L207
 3819 0036 9A00     		lsls	r2, r3, #2
 3820 0038 224B     		ldr	r3, .L218+4
 3821 003a D318     		adds	r3, r2, r3
 3822 003c 1B68     		ldr	r3, [r3]
 3823 003e 9F46     		mov	pc, r3
 3824              		.section	.rodata
 3825              		.align	2
 3826              	.L211:
 3827 003c 40000000 		.word	.L210
 3828 0040 52000000 		.word	.L212
 3829 0044 76000000 		.word	.L213
 3830 0048 9A000000 		.word	.L214
 3831 004c 64000000 		.word	.L215
 3832 0050 88000000 		.word	.L216
 3833              		.section	.text.bma2x2_set_mode_value
 3834              	.L210:
1614:bma2x2.c      **** 		case BMA2x2_MODE_NORMAL:
1615:bma2x2.c      **** 			p_bma2x2->ctrl_mode_reg =
 3835              		.loc 1 1615 0
 3836 0040 1F4B     		ldr	r3, .L218
 3837 0042 1B68     		ldr	r3, [r3]
 3838 0044 0022     		movs	r2, #0
 3839 0046 9A70     		strb	r2, [r3, #2]
1616:bma2x2.c      **** 			BMA2x2_POWER_MODE_HEX_ZERO_ZERO_MASK;
1617:bma2x2.c      **** 			p_bma2x2->low_mode_reg =
 3840              		.loc 1 1617 0
 3841 0048 1D4B     		ldr	r3, .L218
 3842 004a 1B68     		ldr	r3, [r3]
 3843 004c 0022     		movs	r2, #0
 3844 004e DA70     		strb	r2, [r3, #3]
1618:bma2x2.c      **** 			BMA2x2_POWER_MODE_HEX_ZERO_ZERO_MASK;
1619:bma2x2.c      **** 		break;
 3845              		.loc 1 1619 0
 3846 0050 2DE0     		b	.L207
 3847              	.L212:
1620:bma2x2.c      **** 		case BMA2x2_MODE_LOWPOWER1:
1621:bma2x2.c      **** 			p_bma2x2->ctrl_mode_reg =
 3848              		.loc 1 1621 0
 3849 0052 1B4B     		ldr	r3, .L218
 3850 0054 1B68     		ldr	r3, [r3]
 3851 0056 0222     		movs	r2, #2
 3852 0058 9A70     		strb	r2, [r3, #2]
1622:bma2x2.c      **** 			BMA2x2_POWER_MODE_HEX_ZERO_TWO_MASK;
1623:bma2x2.c      **** 			p_bma2x2->low_mode_reg =
 3853              		.loc 1 1623 0
 3854 005a 194B     		ldr	r3, .L218
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 100


 3855 005c 1B68     		ldr	r3, [r3]
 3856 005e 0022     		movs	r2, #0
 3857 0060 DA70     		strb	r2, [r3, #3]
1624:bma2x2.c      **** 			BMA2x2_POWER_MODE_HEX_ZERO_ZERO_MASK;
1625:bma2x2.c      **** 		break;
 3858              		.loc 1 1625 0
 3859 0062 24E0     		b	.L207
 3860              	.L215:
1626:bma2x2.c      **** 		case BMA2x2_MODE_LOWPOWER2:
1627:bma2x2.c      **** 			p_bma2x2->ctrl_mode_reg =
 3861              		.loc 1 1627 0
 3862 0064 164B     		ldr	r3, .L218
 3863 0066 1B68     		ldr	r3, [r3]
 3864 0068 0222     		movs	r2, #2
 3865 006a 9A70     		strb	r2, [r3, #2]
1628:bma2x2.c      **** 			BMA2x2_POWER_MODE_HEX_ZERO_TWO_MASK;
1629:bma2x2.c      **** 			p_bma2x2->low_mode_reg =
 3866              		.loc 1 1629 0
 3867 006c 144B     		ldr	r3, .L218
 3868 006e 1B68     		ldr	r3, [r3]
 3869 0070 0122     		movs	r2, #1
 3870 0072 DA70     		strb	r2, [r3, #3]
1630:bma2x2.c      **** 			BMA2x2_POWER_MODE_HEX_ZERO_ONE_MASK;
1631:bma2x2.c      **** 		break;
 3871              		.loc 1 1631 0
 3872 0074 1BE0     		b	.L207
 3873              	.L213:
1632:bma2x2.c      **** 		case BMA2x2_MODE_SUSPEND:
1633:bma2x2.c      **** 			p_bma2x2->ctrl_mode_reg =
 3874              		.loc 1 1633 0
 3875 0076 124B     		ldr	r3, .L218
 3876 0078 1B68     		ldr	r3, [r3]
 3877 007a 0422     		movs	r2, #4
 3878 007c 9A70     		strb	r2, [r3, #2]
1634:bma2x2.c      **** 			BMA2x2_POWER_MODE_HEX_ZERO_FOUR_MASK;
1635:bma2x2.c      **** 			p_bma2x2->low_mode_reg =
 3879              		.loc 1 1635 0
 3880 007e 104B     		ldr	r3, .L218
 3881 0080 1B68     		ldr	r3, [r3]
 3882 0082 0022     		movs	r2, #0
 3883 0084 DA70     		strb	r2, [r3, #3]
1636:bma2x2.c      **** 			BMA2x2_POWER_MODE_HEX_ZERO_ZERO_MASK;
1637:bma2x2.c      **** 		break;
 3884              		.loc 1 1637 0
 3885 0086 12E0     		b	.L207
 3886              	.L216:
1638:bma2x2.c      **** 		case BMA2x2_MODE_STANDBY:
1639:bma2x2.c      **** 			p_bma2x2->ctrl_mode_reg =
 3887              		.loc 1 1639 0
 3888 0088 0D4B     		ldr	r3, .L218
 3889 008a 1B68     		ldr	r3, [r3]
 3890 008c 0422     		movs	r2, #4
 3891 008e 9A70     		strb	r2, [r3, #2]
1640:bma2x2.c      **** 			BMA2x2_POWER_MODE_HEX_ZERO_FOUR_MASK;
1641:bma2x2.c      **** 			p_bma2x2->low_mode_reg =
 3892              		.loc 1 1641 0
 3893 0090 0B4B     		ldr	r3, .L218
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 101


 3894 0092 1B68     		ldr	r3, [r3]
 3895 0094 0122     		movs	r2, #1
 3896 0096 DA70     		strb	r2, [r3, #3]
1642:bma2x2.c      **** 			BMA2x2_POWER_MODE_HEX_ZERO_ONE_MASK;
1643:bma2x2.c      **** 		break;
 3897              		.loc 1 1643 0
 3898 0098 09E0     		b	.L207
 3899              	.L214:
1644:bma2x2.c      **** 		case BMA2x2_MODE_DEEP_SUSPEND:
1645:bma2x2.c      **** 			p_bma2x2->ctrl_mode_reg =
 3900              		.loc 1 1645 0
 3901 009a 094B     		ldr	r3, .L218
 3902 009c 1B68     		ldr	r3, [r3]
 3903 009e 0122     		movs	r2, #1
 3904 00a0 9A70     		strb	r2, [r3, #2]
1646:bma2x2.c      **** 			BMA2x2_POWER_MODE_HEX_ZERO_ONE_MASK;
1647:bma2x2.c      **** 		break;
 3905              		.loc 1 1647 0
 3906 00a2 C046     		nop
 3907 00a4 03E0     		b	.L207
 3908              	.L208:
1648:bma2x2.c      **** 		}
1649:bma2x2.c      **** 		} else {
1650:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 3909              		.loc 1 1650 0
 3910 00a6 0F23     		movs	r3, #15
 3911 00a8 FB18     		adds	r3, r7, r3
 3912 00aa FE22     		movs	r2, #254
 3913 00ac 1A70     		strb	r2, [r3]
 3914              	.L207:
1651:bma2x2.c      **** 		}
1652:bma2x2.c      **** 	}
1653:bma2x2.c      **** 	return com_rslt;
 3915              		.loc 1 1653 0
 3916 00ae 0F23     		movs	r3, #15
 3917 00b0 FB18     		adds	r3, r7, r3
 3918 00b2 1B78     		ldrb	r3, [r3]
 3919 00b4 5BB2     		sxtb	r3, r3
1654:bma2x2.c      **** }
 3920              		.loc 1 1654 0
 3921 00b6 1800     		movs	r0, r3
 3922 00b8 BD46     		mov	sp, r7
 3923 00ba 04B0     		add	sp, sp, #16
 3924              		@ sp needed
 3925 00bc 80BD     		pop	{r7, pc}
 3926              	.L219:
 3927 00be C046     		.align	2
 3928              	.L218:
 3929 00c0 00000000 		.word	p_bma2x2
 3930 00c4 3C000000 		.word	.L211
 3931              		.cfi_endproc
 3932              	.LFE24:
 3933              		.size	bma2x2_set_mode_value, .-bma2x2_set_mode_value
 3934              		.section	.text.bma2x2_get_sleep_durn,"ax",%progbits
 3935              		.align	2
 3936              		.global	bma2x2_get_sleep_durn
 3937              		.code	16
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 102


 3938              		.thumb_func
 3939              		.type	bma2x2_get_sleep_durn, %function
 3940              	bma2x2_get_sleep_durn:
 3941              	.LFB25:
1655:bma2x2.c      **** /*!
1656:bma2x2.c      ****  *	@brief This API is used to get
1657:bma2x2.c      ****  *	the sleep duration of the sensor in the register 0x11
1658:bma2x2.c      ****  *	Register 0x11 - bit from 0 to 3
1659:bma2x2.c      ****  *
1660:bma2x2.c      ****  *
1661:bma2x2.c      ****  *  @param  sleep_durn_u8 : The value of sleep duration time
1662:bma2x2.c      ****  *         sleep_durn_u8 |   result
1663:bma2x2.c      ****  *       ----------------- | ----------------------
1664:bma2x2.c      ****  *              0x05       | BMA2x2_SLEEP_DURN_0_5MS
1665:bma2x2.c      ****  *              0x06       | BMA2x2_SLEEP_DURN_1MS
1666:bma2x2.c      ****  *              0x07       | BMA2x2_SLEEP_DURN_2MS
1667:bma2x2.c      ****  *              0x08       | BMA2x2_SLEEP_DURN_4MS
1668:bma2x2.c      ****  *              0x09       | BMA2x2_SLEEP_DURN_6MS
1669:bma2x2.c      ****  *              0x0A       | BMA2x2_SLEEP_DURN_10MS
1670:bma2x2.c      ****  *              0x0B       | BMA2x2_SLEEP_DURN_25MS
1671:bma2x2.c      ****  *              0x0C       | BMA2x2_SLEEP_DURN_50MS
1672:bma2x2.c      ****  *              0x0D       | BMA2x2_SLEEP_DURN_100MS
1673:bma2x2.c      ****  *              0x0E       | BMA2x2_SLEEP_DURN_500MS
1674:bma2x2.c      ****  *              0x0F       | BMA2x2_SLEEP_DURN_1S
1675:bma2x2.c      ****  *
1676:bma2x2.c      ****  *
1677:bma2x2.c      ****  *
1678:bma2x2.c      ****  *	@return results of bus communication function
1679:bma2x2.c      ****  *	@retval 0 -> Success
1680:bma2x2.c      ****  *	@retval -1 -> Error
1681:bma2x2.c      ****  *
1682:bma2x2.c      ****  *
1683:bma2x2.c      ****  */
1684:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_sleep_durn(u8 *sleep_durn_u8)
1685:bma2x2.c      **** {
 3942              		.loc 1 1685 0
 3943              		.cfi_startproc
 3944              		@ args = 0, pretend = 0, frame = 16
 3945              		@ frame_needed = 1, uses_anonymous_args = 0
 3946 0000 B0B5     		push	{r4, r5, r7, lr}
 3947              		.cfi_def_cfa_offset 16
 3948              		.cfi_offset 4, -16
 3949              		.cfi_offset 5, -12
 3950              		.cfi_offset 7, -8
 3951              		.cfi_offset 14, -4
 3952 0002 84B0     		sub	sp, sp, #16
 3953              		.cfi_def_cfa_offset 32
 3954 0004 00AF     		add	r7, sp, #0
 3955              		.cfi_def_cfa_register 7
 3956 0006 7860     		str	r0, [r7, #4]
1686:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 3957              		.loc 1 1686 0
 3958 0008 0E23     		movs	r3, #14
 3959 000a FB18     		adds	r3, r7, r3
 3960 000c 0022     		movs	r2, #0
 3961 000e 1A70     		strb	r2, [r3]
1687:bma2x2.c      **** 	/*  Variable used to return value of
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 103


1688:bma2x2.c      **** 	communication routine*/
1689:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 3962              		.loc 1 1689 0
 3963 0010 0F23     		movs	r3, #15
 3964 0012 FB18     		adds	r3, r7, r3
 3965 0014 FF22     		movs	r2, #255
 3966 0016 1A70     		strb	r2, [r3]
1690:bma2x2.c      **** 
1691:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 3967              		.loc 1 1691 0
 3968 0018 134B     		ldr	r3, .L224
 3969 001a 1B68     		ldr	r3, [r3]
 3970 001c 002B     		cmp	r3, #0
 3971 001e 02D1     		bne	.L221
1692:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
1693:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 3972              		.loc 1 1693 0
 3973 0020 7F23     		movs	r3, #127
 3974 0022 5B42     		rsbs	r3, r3, #0
 3975 0024 1CE0     		b	.L223
 3976              	.L221:
1694:bma2x2.c      **** 		} else {
1695:bma2x2.c      **** 			/* read the sleep duration */
1696:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 3977              		.loc 1 1696 0
 3978 0026 104B     		ldr	r3, .L224
 3979 0028 1B68     		ldr	r3, [r3]
 3980 002a DD68     		ldr	r5, [r3, #12]
 3981 002c 0E4B     		ldr	r3, .L224
 3982 002e 1B68     		ldr	r3, [r3]
 3983 0030 1879     		ldrb	r0, [r3, #4]
 3984 0032 0F23     		movs	r3, #15
 3985 0034 FC18     		adds	r4, r7, r3
 3986 0036 0E23     		movs	r3, #14
 3987 0038 FA18     		adds	r2, r7, r3
 3988 003a 0123     		movs	r3, #1
 3989 003c 1121     		movs	r1, #17
 3990 003e A847     		blx	r5
 3991 0040 0300     		movs	r3, r0
 3992 0042 2370     		strb	r3, [r4]
1697:bma2x2.c      **** 			(p_bma2x2->dev_addr, BMA2x2_SLEEP_DURN_REG,
1698:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
1699:bma2x2.c      **** 			*sleep_durn_u8 = BMA2x2_GET_BITSLICE
 3993              		.loc 1 1699 0
 3994 0044 0E23     		movs	r3, #14
 3995 0046 FB18     		adds	r3, r7, r3
 3996 0048 1B78     		ldrb	r3, [r3]
 3997 004a 5B10     		asrs	r3, r3, #1
 3998 004c DBB2     		uxtb	r3, r3
 3999 004e 0F22     		movs	r2, #15
 4000 0050 1340     		ands	r3, r2
 4001 0052 DAB2     		uxtb	r2, r3
 4002 0054 7B68     		ldr	r3, [r7, #4]
 4003 0056 1A70     		strb	r2, [r3]
1700:bma2x2.c      **** 			(data_u8, BMA2x2_SLEEP_DURN);
1701:bma2x2.c      **** 		}
1702:bma2x2.c      **** 	return com_rslt;
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 104


 4004              		.loc 1 1702 0
 4005 0058 0F23     		movs	r3, #15
 4006 005a FB18     		adds	r3, r7, r3
 4007 005c 1B78     		ldrb	r3, [r3]
 4008 005e 5BB2     		sxtb	r3, r3
 4009              	.L223:
1703:bma2x2.c      **** }
 4010              		.loc 1 1703 0 discriminator 1
 4011 0060 1800     		movs	r0, r3
 4012 0062 BD46     		mov	sp, r7
 4013 0064 04B0     		add	sp, sp, #16
 4014              		@ sp needed
 4015 0066 B0BD     		pop	{r4, r5, r7, pc}
 4016              	.L225:
 4017              		.align	2
 4018              	.L224:
 4019 0068 00000000 		.word	p_bma2x2
 4020              		.cfi_endproc
 4021              	.LFE25:
 4022              		.size	bma2x2_get_sleep_durn, .-bma2x2_get_sleep_durn
 4023              		.section	.text.bma2x2_set_sleep_durn,"ax",%progbits
 4024              		.align	2
 4025              		.global	bma2x2_set_sleep_durn
 4026              		.code	16
 4027              		.thumb_func
 4028              		.type	bma2x2_set_sleep_durn, %function
 4029              	bma2x2_set_sleep_durn:
 4030              	.LFB26:
1704:bma2x2.c      **** /*!
1705:bma2x2.c      ****  *	@brief This API is used to set
1706:bma2x2.c      ****  *	the sleep duration of the sensor in the register 0x11
1707:bma2x2.c      ****  *	Register 0x11 - bit from 0 to 3
1708:bma2x2.c      ****  *
1709:bma2x2.c      ****  *
1710:bma2x2.c      ****  *
1711:bma2x2.c      ****  *
1712:bma2x2.c      ****  *  @param  sleep_durn_u8 : The value of sleep duration time
1713:bma2x2.c      ****  *        sleep_durn_u8  |   result
1714:bma2x2.c      ****  *       ----------------- | ----------------------
1715:bma2x2.c      ****  *              0x05       | BMA2x2_SLEEP_DURN_0_5MS
1716:bma2x2.c      ****  *              0x06       | BMA2x2_SLEEP_DURN_1MS
1717:bma2x2.c      ****  *              0x07       | BMA2x2_SLEEP_DURN_2MS
1718:bma2x2.c      ****  *              0x08       | BMA2x2_SLEEP_DURN_4MS
1719:bma2x2.c      ****  *              0x09       | BMA2x2_SLEEP_DURN_6MS
1720:bma2x2.c      ****  *              0x0A       | BMA2x2_SLEEP_DURN_10MS
1721:bma2x2.c      ****  *              0x0B       | BMA2x2_SLEEP_DURN_25MS
1722:bma2x2.c      ****  *              0x0C       | BMA2x2_SLEEP_DURN_50MS
1723:bma2x2.c      ****  *              0x0D       | BMA2x2_SLEEP_DURN_100MS
1724:bma2x2.c      ****  *              0x0E       | BMA2x2_SLEEP_DURN_500MS
1725:bma2x2.c      ****  *              0x0F       | BMA2x2_SLEEP_DURN_1S
1726:bma2x2.c      ****  *
1727:bma2x2.c      ****  *
1728:bma2x2.c      ****  *
1729:bma2x2.c      ****  *	@return results of bus communication function
1730:bma2x2.c      ****  *	@retval 0 -> Success
1731:bma2x2.c      ****  *	@retval -1 -> Error
1732:bma2x2.c      ****  *
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 105


1733:bma2x2.c      ****  *
1734:bma2x2.c      ****  */
1735:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_sleep_durn(u8 sleep_durn_u8)
1736:bma2x2.c      **** {
 4031              		.loc 1 1736 0
 4032              		.cfi_startproc
 4033              		@ args = 0, pretend = 0, frame = 16
 4034              		@ frame_needed = 1, uses_anonymous_args = 0
 4035 0000 B0B5     		push	{r4, r5, r7, lr}
 4036              		.cfi_def_cfa_offset 16
 4037              		.cfi_offset 4, -16
 4038              		.cfi_offset 5, -12
 4039              		.cfi_offset 7, -8
 4040              		.cfi_offset 14, -4
 4041 0002 84B0     		sub	sp, sp, #16
 4042              		.cfi_def_cfa_offset 32
 4043 0004 00AF     		add	r7, sp, #0
 4044              		.cfi_def_cfa_register 7
 4045 0006 0200     		movs	r2, r0
 4046 0008 FB1D     		adds	r3, r7, #7
 4047 000a 1A70     		strb	r2, [r3]
1737:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 4048              		.loc 1 1737 0
 4049 000c 0D23     		movs	r3, #13
 4050 000e FB18     		adds	r3, r7, r3
 4051 0010 0022     		movs	r2, #0
 4052 0012 1A70     		strb	r2, [r3]
1738:bma2x2.c      **** 	/*  Variable used to return value of
1739:bma2x2.c      **** 	communication routine*/
1740:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 4053              		.loc 1 1740 0
 4054 0014 0F23     		movs	r3, #15
 4055 0016 FB18     		adds	r3, r7, r3
 4056 0018 FF22     		movs	r2, #255
 4057 001a 1A70     		strb	r2, [r3]
1741:bma2x2.c      **** 	u8 data_sleep_durn_u8 = BMA2x2_INIT_VALUE;
 4058              		.loc 1 1741 0
 4059 001c 0E23     		movs	r3, #14
 4060 001e FB18     		adds	r3, r7, r3
 4061 0020 0022     		movs	r2, #0
 4062 0022 1A70     		strb	r2, [r3]
1742:bma2x2.c      **** 
1743:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 4063              		.loc 1 1743 0
 4064 0024 4A4B     		ldr	r3, .L247
 4065 0026 1B68     		ldr	r3, [r3]
 4066 0028 002B     		cmp	r3, #0
 4067 002a 02D1     		bne	.L227
1744:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
1745:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 4068              		.loc 1 1745 0
 4069 002c 7F23     		movs	r3, #127
 4070 002e 5B42     		rsbs	r3, r3, #0
 4071 0030 89E0     		b	.L245
 4072              	.L227:
1746:bma2x2.c      **** 		} else {
1747:bma2x2.c      **** 		if (sleep_durn_u8 > BMA2x2_SLEEP_DURN_MIN_RANGE &&
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 106


 4073              		.loc 1 1747 0
 4074 0032 FB1D     		adds	r3, r7, #7
 4075 0034 1B78     		ldrb	r3, [r3]
 4076 0036 042B     		cmp	r3, #4
 4077 0038 00D8     		bhi	.LCB3667
 4078 003a 7CE0     		b	.L229	@long jump
 4079              	.LCB3667:
 4080              		.loc 1 1747 0 is_stmt 0 discriminator 1
 4081 003c FB1D     		adds	r3, r7, #7
 4082 003e 1B78     		ldrb	r3, [r3]
 4083 0040 0F2B     		cmp	r3, #15
 4084 0042 00D9     		bls	.LCB3671
 4085 0044 77E0     		b	.L229	@long jump
 4086              	.LCB3671:
1748:bma2x2.c      **** 		sleep_durn_u8 < BMA2x2_SLEEP_DURN_MAX_RANGE) {
1749:bma2x2.c      **** 			switch (sleep_durn_u8) {
 4087              		.loc 1 1749 0 is_stmt 1
 4088 0046 FB1D     		adds	r3, r7, #7
 4089 0048 1B78     		ldrb	r3, [r3]
 4090 004a 053B     		subs	r3, r3, #5
 4091 004c 0A2B     		cmp	r3, #10
 4092 004e 3BD8     		bhi	.L246
 4093 0050 9A00     		lsls	r2, r3, #2
 4094 0052 404B     		ldr	r3, .L247+4
 4095 0054 D318     		adds	r3, r2, r3
 4096 0056 1B68     		ldr	r3, [r3]
 4097 0058 9F46     		mov	pc, r3
 4098              		.section	.rodata
 4099              		.align	2
 4100              	.L232:
 4101 0054 5A000000 		.word	.L231
 4102 0058 64000000 		.word	.L233
 4103 005c 6E000000 		.word	.L234
 4104 0060 78000000 		.word	.L235
 4105 0064 82000000 		.word	.L236
 4106 0068 8C000000 		.word	.L237
 4107 006c 96000000 		.word	.L238
 4108 0070 A0000000 		.word	.L239
 4109 0074 AA000000 		.word	.L240
 4110 0078 B4000000 		.word	.L241
 4111 007c BE000000 		.word	.L242
 4112              		.section	.text.bma2x2_set_sleep_durn
 4113              	.L231:
1750:bma2x2.c      **** 			case BMA2x2_SLEEP_DURN_0_5MS:
1751:bma2x2.c      **** 				data_sleep_durn_u8 = BMA2x2_SLEEP_DURN_0_5MS;
 4114              		.loc 1 1751 0
 4115 005a 0E23     		movs	r3, #14
 4116 005c FB18     		adds	r3, r7, r3
 4117 005e 0522     		movs	r2, #5
 4118 0060 1A70     		strb	r2, [r3]
1752:bma2x2.c      **** 
1753:bma2x2.c      **** 				/*  0.5 MS   */
1754:bma2x2.c      **** 			break;
 4119              		.loc 1 1754 0
 4120 0062 32E0     		b	.L243
 4121              	.L233:
1755:bma2x2.c      **** 			case BMA2x2_SLEEP_DURN_1MS:
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 107


1756:bma2x2.c      **** 				data_sleep_durn_u8 = BMA2x2_SLEEP_DURN_1MS;
 4122              		.loc 1 1756 0
 4123 0064 0E23     		movs	r3, #14
 4124 0066 FB18     		adds	r3, r7, r3
 4125 0068 0622     		movs	r2, #6
 4126 006a 1A70     		strb	r2, [r3]
1757:bma2x2.c      **** 
1758:bma2x2.c      **** 				/*  1 MS  */
1759:bma2x2.c      **** 			break;
 4127              		.loc 1 1759 0
 4128 006c 2DE0     		b	.L243
 4129              	.L234:
1760:bma2x2.c      **** 			case BMA2x2_SLEEP_DURN_2MS:
1761:bma2x2.c      **** 				data_sleep_durn_u8 = BMA2x2_SLEEP_DURN_2MS;
 4130              		.loc 1 1761 0
 4131 006e 0E23     		movs	r3, #14
 4132 0070 FB18     		adds	r3, r7, r3
 4133 0072 0722     		movs	r2, #7
 4134 0074 1A70     		strb	r2, [r3]
1762:bma2x2.c      **** 
1763:bma2x2.c      **** 				/*  2 MS  */
1764:bma2x2.c      **** 			break;
 4135              		.loc 1 1764 0
 4136 0076 28E0     		b	.L243
 4137              	.L235:
1765:bma2x2.c      **** 			case BMA2x2_SLEEP_DURN_4MS:
1766:bma2x2.c      **** 				data_sleep_durn_u8 = BMA2x2_SLEEP_DURN_4MS;
 4138              		.loc 1 1766 0
 4139 0078 0E23     		movs	r3, #14
 4140 007a FB18     		adds	r3, r7, r3
 4141 007c 0822     		movs	r2, #8
 4142 007e 1A70     		strb	r2, [r3]
1767:bma2x2.c      **** 
1768:bma2x2.c      **** 				/*  4 MS   */
1769:bma2x2.c      **** 			break;
 4143              		.loc 1 1769 0
 4144 0080 23E0     		b	.L243
 4145              	.L236:
1770:bma2x2.c      **** 			case BMA2x2_SLEEP_DURN_6MS:
1771:bma2x2.c      **** 				data_sleep_durn_u8 = BMA2x2_SLEEP_DURN_6MS;
 4146              		.loc 1 1771 0
 4147 0082 0E23     		movs	r3, #14
 4148 0084 FB18     		adds	r3, r7, r3
 4149 0086 0922     		movs	r2, #9
 4150 0088 1A70     		strb	r2, [r3]
1772:bma2x2.c      **** 
1773:bma2x2.c      **** 				/*  6 MS  */
1774:bma2x2.c      **** 			break;
 4151              		.loc 1 1774 0
 4152 008a 1EE0     		b	.L243
 4153              	.L237:
1775:bma2x2.c      **** 			case BMA2x2_SLEEP_DURN_10MS:
1776:bma2x2.c      **** 				data_sleep_durn_u8 = BMA2x2_SLEEP_DURN_10MS;
 4154              		.loc 1 1776 0
 4155 008c 0E23     		movs	r3, #14
 4156 008e FB18     		adds	r3, r7, r3
 4157 0090 0A22     		movs	r2, #10
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 108


 4158 0092 1A70     		strb	r2, [r3]
1777:bma2x2.c      **** 
1778:bma2x2.c      **** 				/*  10 MS  */
1779:bma2x2.c      **** 			break;
 4159              		.loc 1 1779 0
 4160 0094 19E0     		b	.L243
 4161              	.L238:
1780:bma2x2.c      **** 			case BMA2x2_SLEEP_DURN_25MS:
1781:bma2x2.c      **** 				data_sleep_durn_u8 = BMA2x2_SLEEP_DURN_25MS;
 4162              		.loc 1 1781 0
 4163 0096 0E23     		movs	r3, #14
 4164 0098 FB18     		adds	r3, r7, r3
 4165 009a 0B22     		movs	r2, #11
 4166 009c 1A70     		strb	r2, [r3]
1782:bma2x2.c      **** 
1783:bma2x2.c      **** 				/*  25 MS  */
1784:bma2x2.c      **** 			break;
 4167              		.loc 1 1784 0
 4168 009e 14E0     		b	.L243
 4169              	.L239:
1785:bma2x2.c      **** 			case BMA2x2_SLEEP_DURN_50MS:
1786:bma2x2.c      **** 				data_sleep_durn_u8 = BMA2x2_SLEEP_DURN_50MS;
 4170              		.loc 1 1786 0
 4171 00a0 0E23     		movs	r3, #14
 4172 00a2 FB18     		adds	r3, r7, r3
 4173 00a4 0C22     		movs	r2, #12
 4174 00a6 1A70     		strb	r2, [r3]
1787:bma2x2.c      **** 
1788:bma2x2.c      **** 				/*  50 MS   */
1789:bma2x2.c      **** 			break;
 4175              		.loc 1 1789 0
 4176 00a8 0FE0     		b	.L243
 4177              	.L240:
1790:bma2x2.c      **** 			case BMA2x2_SLEEP_DURN_100MS:
1791:bma2x2.c      **** 				data_sleep_durn_u8 = BMA2x2_SLEEP_DURN_100MS;
 4178              		.loc 1 1791 0
 4179 00aa 0E23     		movs	r3, #14
 4180 00ac FB18     		adds	r3, r7, r3
 4181 00ae 0D22     		movs	r2, #13
 4182 00b0 1A70     		strb	r2, [r3]
1792:bma2x2.c      **** 
1793:bma2x2.c      **** 				/*  100 MS  */
1794:bma2x2.c      **** 			break;
 4183              		.loc 1 1794 0
 4184 00b2 0AE0     		b	.L243
 4185              	.L241:
1795:bma2x2.c      **** 			case BMA2x2_SLEEP_DURN_500MS:
1796:bma2x2.c      **** 				data_sleep_durn_u8 = BMA2x2_SLEEP_DURN_500MS;
 4186              		.loc 1 1796 0
 4187 00b4 0E23     		movs	r3, #14
 4188 00b6 FB18     		adds	r3, r7, r3
 4189 00b8 0E22     		movs	r2, #14
 4190 00ba 1A70     		strb	r2, [r3]
1797:bma2x2.c      **** 
1798:bma2x2.c      **** 				/*  500 MS   */
1799:bma2x2.c      **** 			break;
 4191              		.loc 1 1799 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 109


 4192 00bc 05E0     		b	.L243
 4193              	.L242:
1800:bma2x2.c      **** 			case BMA2x2_SLEEP_DURN_1S:
1801:bma2x2.c      **** 				data_sleep_durn_u8 = BMA2x2_SLEEP_DURN_1S;
 4194              		.loc 1 1801 0
 4195 00be 0E23     		movs	r3, #14
 4196 00c0 FB18     		adds	r3, r7, r3
 4197 00c2 0F22     		movs	r2, #15
 4198 00c4 1A70     		strb	r2, [r3]
1802:bma2x2.c      **** 
1803:bma2x2.c      **** 				/*!  1 SECS   */
1804:bma2x2.c      **** 			break;
 4199              		.loc 1 1804 0
 4200 00c6 00E0     		b	.L243
 4201              	.L246:
1805:bma2x2.c      **** 			default:
1806:bma2x2.c      **** 			break;
 4202              		.loc 1 1806 0
 4203 00c8 C046     		nop
 4204              	.L243:
1807:bma2x2.c      **** 			}
1808:bma2x2.c      **** 			/* write the sleep duration */
1809:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 4205              		.loc 1 1809 0
 4206 00ca 214B     		ldr	r3, .L247
 4207 00cc 1B68     		ldr	r3, [r3]
 4208 00ce DD68     		ldr	r5, [r3, #12]
 4209 00d0 1F4B     		ldr	r3, .L247
 4210 00d2 1B68     		ldr	r3, [r3]
 4211 00d4 1879     		ldrb	r0, [r3, #4]
 4212 00d6 0F23     		movs	r3, #15
 4213 00d8 FC18     		adds	r4, r7, r3
 4214 00da 0D23     		movs	r3, #13
 4215 00dc FA18     		adds	r2, r7, r3
 4216 00de 0123     		movs	r3, #1
 4217 00e0 1121     		movs	r1, #17
 4218 00e2 A847     		blx	r5
 4219 00e4 0300     		movs	r3, r0
 4220 00e6 2370     		strb	r3, [r4]
1810:bma2x2.c      **** 			(p_bma2x2->dev_addr, BMA2x2_SLEEP_DURN_REG,
1811:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
1812:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 4221              		.loc 1 1812 0
 4222 00e8 0D23     		movs	r3, #13
 4223 00ea FB18     		adds	r3, r7, r3
 4224 00ec 1B78     		ldrb	r3, [r3]
 4225 00ee 5BB2     		sxtb	r3, r3
 4226 00f0 1E22     		movs	r2, #30
 4227 00f2 9343     		bics	r3, r2
 4228 00f4 5AB2     		sxtb	r2, r3
 4229 00f6 0E23     		movs	r3, #14
 4230 00f8 FB18     		adds	r3, r7, r3
 4231 00fa 1B78     		ldrb	r3, [r3]
 4232 00fc 5B00     		lsls	r3, r3, #1
 4233 00fe 5BB2     		sxtb	r3, r3
 4234 0100 1E21     		movs	r1, #30
 4235 0102 0B40     		ands	r3, r1
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 110


 4236 0104 5BB2     		sxtb	r3, r3
 4237 0106 1343     		orrs	r3, r2
 4238 0108 5BB2     		sxtb	r3, r3
 4239 010a DAB2     		uxtb	r2, r3
 4240 010c 0D23     		movs	r3, #13
 4241 010e FB18     		adds	r3, r7, r3
 4242 0110 1A70     		strb	r2, [r3]
1813:bma2x2.c      **** 			(data_u8, BMA2x2_SLEEP_DURN, data_sleep_durn_u8);
1814:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(BMA2x2_SLEEP_DURN_REG,
 4243              		.loc 1 1814 0
 4244 0112 0D23     		movs	r3, #13
 4245 0114 FB18     		adds	r3, r7, r3
 4246 0116 0122     		movs	r2, #1
 4247 0118 1900     		movs	r1, r3
 4248 011a 1120     		movs	r0, #17
 4249 011c FFF7FEFF 		bl	bma2x2_write_reg
 4250 0120 0300     		movs	r3, r0
 4251 0122 DAB2     		uxtb	r2, r3
 4252 0124 0F23     		movs	r3, #15
 4253 0126 FB18     		adds	r3, r7, r3
 4254 0128 1B78     		ldrb	r3, [r3]
 4255 012a D318     		adds	r3, r2, r3
 4256 012c DAB2     		uxtb	r2, r3
 4257 012e 0F23     		movs	r3, #15
 4258 0130 FB18     		adds	r3, r7, r3
 4259 0132 1A70     		strb	r2, [r3]
1815:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
 4260              		.loc 1 1815 0
 4261 0134 03E0     		b	.L244
 4262              	.L229:
1816:bma2x2.c      **** 		} else {
1817:bma2x2.c      **** 		com_rslt = E_OUT_OF_RANGE;
 4263              		.loc 1 1817 0
 4264 0136 0F23     		movs	r3, #15
 4265 0138 FB18     		adds	r3, r7, r3
 4266 013a FE22     		movs	r2, #254
 4267 013c 1A70     		strb	r2, [r3]
 4268              	.L244:
1818:bma2x2.c      **** 		}
1819:bma2x2.c      **** 	}
1820:bma2x2.c      **** 	return com_rslt;
 4269              		.loc 1 1820 0
 4270 013e 0F23     		movs	r3, #15
 4271 0140 FB18     		adds	r3, r7, r3
 4272 0142 1B78     		ldrb	r3, [r3]
 4273 0144 5BB2     		sxtb	r3, r3
 4274              	.L245:
1821:bma2x2.c      **** }
 4275              		.loc 1 1821 0 discriminator 1
 4276 0146 1800     		movs	r0, r3
 4277 0148 BD46     		mov	sp, r7
 4278 014a 04B0     		add	sp, sp, #16
 4279              		@ sp needed
 4280 014c B0BD     		pop	{r4, r5, r7, pc}
 4281              	.L248:
 4282 014e C046     		.align	2
 4283              	.L247:
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 111


 4284 0150 00000000 		.word	p_bma2x2
 4285 0154 54000000 		.word	.L232
 4286              		.cfi_endproc
 4287              	.LFE26:
 4288              		.size	bma2x2_set_sleep_durn, .-bma2x2_set_sleep_durn
 4289              		.section	.text.bma2x2_get_sleep_timer_mode,"ax",%progbits
 4290              		.align	2
 4291              		.global	bma2x2_get_sleep_timer_mode
 4292              		.code	16
 4293              		.thumb_func
 4294              		.type	bma2x2_get_sleep_timer_mode, %function
 4295              	bma2x2_get_sleep_timer_mode:
 4296              	.LFB27:
1822:bma2x2.c      **** /*!
1823:bma2x2.c      ****  * @brief This API is used to get the sleep timer mode
1824:bma2x2.c      ****  *	in the register 0x12 bit 5
1825:bma2x2.c      ****  *
1826:bma2x2.c      ****  *
1827:bma2x2.c      ****  *
1828:bma2x2.c      ****  *
1829:bma2x2.c      ****  *  @param  sleep_timer_u8 : The value of sleep timer mode
1830:bma2x2.c      ****  *        sleep_timer_u8 |   result
1831:bma2x2.c      ****  *       ----------------- | ----------------------
1832:bma2x2.c      ****  *              0          | enable EventDrivenSampling(EDT)
1833:bma2x2.c      ****  *              1          | enable Equidistant sampling mode(EST)
1834:bma2x2.c      ****  *
1835:bma2x2.c      ****  *
1836:bma2x2.c      ****  *	@return results of bus communication function
1837:bma2x2.c      ****  *	@retval 0 -> Success
1838:bma2x2.c      ****  *	@retval -1 -> Error
1839:bma2x2.c      ****  *
1840:bma2x2.c      ****  *
1841:bma2x2.c      ****  */
1842:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_sleep_timer_mode(
1843:bma2x2.c      **** u8 *sleep_timer_u8)
1844:bma2x2.c      **** {
 4297              		.loc 1 1844 0
 4298              		.cfi_startproc
 4299              		@ args = 0, pretend = 0, frame = 16
 4300              		@ frame_needed = 1, uses_anonymous_args = 0
 4301 0000 B0B5     		push	{r4, r5, r7, lr}
 4302              		.cfi_def_cfa_offset 16
 4303              		.cfi_offset 4, -16
 4304              		.cfi_offset 5, -12
 4305              		.cfi_offset 7, -8
 4306              		.cfi_offset 14, -4
 4307 0002 84B0     		sub	sp, sp, #16
 4308              		.cfi_def_cfa_offset 32
 4309 0004 00AF     		add	r7, sp, #0
 4310              		.cfi_def_cfa_register 7
 4311 0006 7860     		str	r0, [r7, #4]
1845:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 4312              		.loc 1 1845 0
 4313 0008 0E23     		movs	r3, #14
 4314 000a FB18     		adds	r3, r7, r3
 4315 000c 0022     		movs	r2, #0
 4316 000e 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 112


1846:bma2x2.c      **** 	/*  Variable used to return value of
1847:bma2x2.c      **** 	communication routine*/
1848:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 4317              		.loc 1 1848 0
 4318 0010 0F23     		movs	r3, #15
 4319 0012 FB18     		adds	r3, r7, r3
 4320 0014 FF22     		movs	r2, #255
 4321 0016 1A70     		strb	r2, [r3]
1849:bma2x2.c      **** 
1850:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 4322              		.loc 1 1850 0
 4323 0018 134B     		ldr	r3, .L253
 4324 001a 1B68     		ldr	r3, [r3]
 4325 001c 002B     		cmp	r3, #0
 4326 001e 02D1     		bne	.L250
1851:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
1852:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 4327              		.loc 1 1852 0
 4328 0020 7F23     		movs	r3, #127
 4329 0022 5B42     		rsbs	r3, r3, #0
 4330 0024 1CE0     		b	.L252
 4331              	.L250:
1853:bma2x2.c      **** 		} else {
1854:bma2x2.c      **** 			/*Read the SLEEP TIMER MODE*/
1855:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 4332              		.loc 1 1855 0
 4333 0026 104B     		ldr	r3, .L253
 4334 0028 1B68     		ldr	r3, [r3]
 4335 002a DD68     		ldr	r5, [r3, #12]
 4336 002c 0E4B     		ldr	r3, .L253
 4337 002e 1B68     		ldr	r3, [r3]
 4338 0030 1879     		ldrb	r0, [r3, #4]
 4339 0032 0F23     		movs	r3, #15
 4340 0034 FC18     		adds	r4, r7, r3
 4341 0036 0E23     		movs	r3, #14
 4342 0038 FA18     		adds	r2, r7, r3
 4343 003a 0123     		movs	r3, #1
 4344 003c 1221     		movs	r1, #18
 4345 003e A847     		blx	r5
 4346 0040 0300     		movs	r3, r0
 4347 0042 2370     		strb	r3, [r4]
1856:bma2x2.c      **** 			(p_bma2x2->dev_addr, BMA2x2_SLEEP_TIMER_REG,
1857:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
1858:bma2x2.c      **** 			*sleep_timer_u8 = BMA2x2_GET_BITSLICE
 4348              		.loc 1 1858 0
 4349 0044 0E23     		movs	r3, #14
 4350 0046 FB18     		adds	r3, r7, r3
 4351 0048 1B78     		ldrb	r3, [r3]
 4352 004a 5B11     		asrs	r3, r3, #5
 4353 004c DBB2     		uxtb	r3, r3
 4354 004e 0122     		movs	r2, #1
 4355 0050 1340     		ands	r3, r2
 4356 0052 DAB2     		uxtb	r2, r3
 4357 0054 7B68     		ldr	r3, [r7, #4]
 4358 0056 1A70     		strb	r2, [r3]
1859:bma2x2.c      **** 			(data_u8, BMA2x2_SLEEP_TIMER);
1860:bma2x2.c      **** 		}
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 113


1861:bma2x2.c      **** 	return com_rslt;
 4359              		.loc 1 1861 0
 4360 0058 0F23     		movs	r3, #15
 4361 005a FB18     		adds	r3, r7, r3
 4362 005c 1B78     		ldrb	r3, [r3]
 4363 005e 5BB2     		sxtb	r3, r3
 4364              	.L252:
1862:bma2x2.c      **** }
 4365              		.loc 1 1862 0 discriminator 1
 4366 0060 1800     		movs	r0, r3
 4367 0062 BD46     		mov	sp, r7
 4368 0064 04B0     		add	sp, sp, #16
 4369              		@ sp needed
 4370 0066 B0BD     		pop	{r4, r5, r7, pc}
 4371              	.L254:
 4372              		.align	2
 4373              	.L253:
 4374 0068 00000000 		.word	p_bma2x2
 4375              		.cfi_endproc
 4376              	.LFE27:
 4377              		.size	bma2x2_get_sleep_timer_mode, .-bma2x2_get_sleep_timer_mode
 4378              		.section	.text.bma2x2_set_sleep_timer_mode,"ax",%progbits
 4379              		.align	2
 4380              		.global	bma2x2_set_sleep_timer_mode
 4381              		.code	16
 4382              		.thumb_func
 4383              		.type	bma2x2_set_sleep_timer_mode, %function
 4384              	bma2x2_set_sleep_timer_mode:
 4385              	.LFB28:
1863:bma2x2.c      **** /*!
1864:bma2x2.c      ****  * @brief This API is used to set the sleep timer mode
1865:bma2x2.c      ****  *	in the register 0x12 bit 5
1866:bma2x2.c      ****  *
1867:bma2x2.c      ****  *
1868:bma2x2.c      ****  *
1869:bma2x2.c      ****  *
1870:bma2x2.c      ****  *  @param  sleep_timer_u8 : The value of sleep timer mode
1871:bma2x2.c      ****  *        sleep_timer_u8 |   result
1872:bma2x2.c      ****  *       ----------------- | ----------------------
1873:bma2x2.c      ****  *              0          | enable EventDrivenSampling(EDT)
1874:bma2x2.c      ****  *              1          | enable Equidistant sampling mode(EST)
1875:bma2x2.c      ****  *
1876:bma2x2.c      ****  *
1877:bma2x2.c      ****  *	@return results of bus communication function
1878:bma2x2.c      ****  *	@retval 0 -> Success
1879:bma2x2.c      ****  *	@retval -1 -> Error
1880:bma2x2.c      ****  *
1881:bma2x2.c      ****  *
1882:bma2x2.c      ****  */
1883:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_sleep_timer_mode(u8 sleep_timer_u8)
1884:bma2x2.c      **** {
 4386              		.loc 1 1884 0
 4387              		.cfi_startproc
 4388              		@ args = 0, pretend = 0, frame = 16
 4389              		@ frame_needed = 1, uses_anonymous_args = 0
 4390 0000 B0B5     		push	{r4, r5, r7, lr}
 4391              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 114


 4392              		.cfi_offset 4, -16
 4393              		.cfi_offset 5, -12
 4394              		.cfi_offset 7, -8
 4395              		.cfi_offset 14, -4
 4396 0002 84B0     		sub	sp, sp, #16
 4397              		.cfi_def_cfa_offset 32
 4398 0004 00AF     		add	r7, sp, #0
 4399              		.cfi_def_cfa_register 7
 4400 0006 0200     		movs	r2, r0
 4401 0008 FB1D     		adds	r3, r7, #7
 4402 000a 1A70     		strb	r2, [r3]
1885:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 4403              		.loc 1 1885 0
 4404 000c 0E23     		movs	r3, #14
 4405 000e FB18     		adds	r3, r7, r3
 4406 0010 0022     		movs	r2, #0
 4407 0012 1A70     		strb	r2, [r3]
1886:bma2x2.c      **** 	/*  Variable used to return value of
1887:bma2x2.c      **** 	communication routine*/
1888:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 4408              		.loc 1 1888 0
 4409 0014 0F23     		movs	r3, #15
 4410 0016 FB18     		adds	r3, r7, r3
 4411 0018 FF22     		movs	r2, #255
 4412 001a 1A70     		strb	r2, [r3]
1889:bma2x2.c      **** 
1890:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 4413              		.loc 1 1890 0
 4414 001c 254B     		ldr	r3, .L261
 4415 001e 1B68     		ldr	r3, [r3]
 4416 0020 002B     		cmp	r3, #0
 4417 0022 02D1     		bne	.L256
1891:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
1892:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 4418              		.loc 1 1892 0
 4419 0024 7F23     		movs	r3, #127
 4420 0026 5B42     		rsbs	r3, r3, #0
 4421 0028 40E0     		b	.L260
 4422              	.L256:
1893:bma2x2.c      **** 		} else {
1894:bma2x2.c      **** 		if (sleep_timer_u8 < BMA2x2_SLEEP_TIMER_MODE_RANGE) {
 4423              		.loc 1 1894 0
 4424 002a FB1D     		adds	r3, r7, #7
 4425 002c 1B78     		ldrb	r3, [r3]
 4426 002e 012B     		cmp	r3, #1
 4427 0030 34D8     		bhi	.L258
1895:bma2x2.c      **** 			/* write the SLEEP TIMER MODE*/
1896:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 4428              		.loc 1 1896 0
 4429 0032 204B     		ldr	r3, .L261
 4430 0034 1B68     		ldr	r3, [r3]
 4431 0036 DD68     		ldr	r5, [r3, #12]
 4432 0038 1E4B     		ldr	r3, .L261
 4433 003a 1B68     		ldr	r3, [r3]
 4434 003c 1879     		ldrb	r0, [r3, #4]
 4435 003e 0F23     		movs	r3, #15
 4436 0040 FC18     		adds	r4, r7, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 115


 4437 0042 0E23     		movs	r3, #14
 4438 0044 FA18     		adds	r2, r7, r3
 4439 0046 0123     		movs	r3, #1
 4440 0048 1221     		movs	r1, #18
 4441 004a A847     		blx	r5
 4442 004c 0300     		movs	r3, r0
 4443 004e 2370     		strb	r3, [r4]
1897:bma2x2.c      **** 			(p_bma2x2->dev_addr, BMA2x2_SLEEP_TIMER_REG,
1898:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
1899:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 4444              		.loc 1 1899 0
 4445 0050 0E23     		movs	r3, #14
 4446 0052 FB18     		adds	r3, r7, r3
 4447 0054 1B78     		ldrb	r3, [r3]
 4448 0056 5BB2     		sxtb	r3, r3
 4449 0058 2022     		movs	r2, #32
 4450 005a 9343     		bics	r3, r2
 4451 005c 5AB2     		sxtb	r2, r3
 4452 005e FB1D     		adds	r3, r7, #7
 4453 0060 1B78     		ldrb	r3, [r3]
 4454 0062 5B01     		lsls	r3, r3, #5
 4455 0064 5BB2     		sxtb	r3, r3
 4456 0066 2021     		movs	r1, #32
 4457 0068 0B40     		ands	r3, r1
 4458 006a 5BB2     		sxtb	r3, r3
 4459 006c 1343     		orrs	r3, r2
 4460 006e 5BB2     		sxtb	r3, r3
 4461 0070 DAB2     		uxtb	r2, r3
 4462 0072 0E23     		movs	r3, #14
 4463 0074 FB18     		adds	r3, r7, r3
 4464 0076 1A70     		strb	r2, [r3]
1900:bma2x2.c      **** 			(data_u8, BMA2x2_SLEEP_TIMER, sleep_timer_u8);
1901:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(BMA2x2_SLEEP_TIMER_REG,
 4465              		.loc 1 1901 0
 4466 0078 0E23     		movs	r3, #14
 4467 007a FB18     		adds	r3, r7, r3
 4468 007c 0122     		movs	r2, #1
 4469 007e 1900     		movs	r1, r3
 4470 0080 1220     		movs	r0, #18
 4471 0082 FFF7FEFF 		bl	bma2x2_write_reg
 4472 0086 0300     		movs	r3, r0
 4473 0088 DAB2     		uxtb	r2, r3
 4474 008a 0F23     		movs	r3, #15
 4475 008c FB18     		adds	r3, r7, r3
 4476 008e 1B78     		ldrb	r3, [r3]
 4477 0090 D318     		adds	r3, r2, r3
 4478 0092 DAB2     		uxtb	r2, r3
 4479 0094 0F23     		movs	r3, #15
 4480 0096 FB18     		adds	r3, r7, r3
 4481 0098 1A70     		strb	r2, [r3]
 4482 009a 03E0     		b	.L259
 4483              	.L258:
1902:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
1903:bma2x2.c      **** 		} else {
1904:bma2x2.c      **** 		com_rslt = E_OUT_OF_RANGE;
 4484              		.loc 1 1904 0
 4485 009c 0F23     		movs	r3, #15
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 116


 4486 009e FB18     		adds	r3, r7, r3
 4487 00a0 FE22     		movs	r2, #254
 4488 00a2 1A70     		strb	r2, [r3]
 4489              	.L259:
1905:bma2x2.c      **** 		}
1906:bma2x2.c      **** 	}
1907:bma2x2.c      **** 	return com_rslt;
 4490              		.loc 1 1907 0
 4491 00a4 0F23     		movs	r3, #15
 4492 00a6 FB18     		adds	r3, r7, r3
 4493 00a8 1B78     		ldrb	r3, [r3]
 4494 00aa 5BB2     		sxtb	r3, r3
 4495              	.L260:
1908:bma2x2.c      **** }
 4496              		.loc 1 1908 0 discriminator 1
 4497 00ac 1800     		movs	r0, r3
 4498 00ae BD46     		mov	sp, r7
 4499 00b0 04B0     		add	sp, sp, #16
 4500              		@ sp needed
 4501 00b2 B0BD     		pop	{r4, r5, r7, pc}
 4502              	.L262:
 4503              		.align	2
 4504              	.L261:
 4505 00b4 00000000 		.word	p_bma2x2
 4506              		.cfi_endproc
 4507              	.LFE28:
 4508              		.size	bma2x2_set_sleep_timer_mode, .-bma2x2_set_sleep_timer_mode
 4509              		.section	.text.bma2x2_get_high_bw,"ax",%progbits
 4510              		.align	2
 4511              		.global	bma2x2_get_high_bw
 4512              		.code	16
 4513              		.thumb_func
 4514              		.type	bma2x2_get_high_bw, %function
 4515              	bma2x2_get_high_bw:
 4516              	.LFB29:
1909:bma2x2.c      **** /*!
1910:bma2x2.c      ****  * @brief This API is used to get high bandwidth
1911:bma2x2.c      ****  *		in the register 0x13 bit 7
1912:bma2x2.c      ****  *
1913:bma2x2.c      ****  *  @param  high_bw_u8 : The value of high bandwidth
1914:bma2x2.c      ****  *         high_bw_u8    |   result
1915:bma2x2.c      ****  *       ----------------- | ----------------------
1916:bma2x2.c      ****  *              0          | Unfiltered High Bandwidth
1917:bma2x2.c      ****  *              1          | Filtered Low Bandwidth
1918:bma2x2.c      ****  *
1919:bma2x2.c      ****  *
1920:bma2x2.c      ****  *	@return results of bus communication function
1921:bma2x2.c      ****  *	@retval 0 -> Success
1922:bma2x2.c      ****  *	@retval -1 -> Error
1923:bma2x2.c      ****  *
1924:bma2x2.c      ****  *
1925:bma2x2.c      ****  */
1926:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_high_bw(u8 *high_bw_u8)
1927:bma2x2.c      **** {
 4517              		.loc 1 1927 0
 4518              		.cfi_startproc
 4519              		@ args = 0, pretend = 0, frame = 16
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 117


 4520              		@ frame_needed = 1, uses_anonymous_args = 0
 4521 0000 B0B5     		push	{r4, r5, r7, lr}
 4522              		.cfi_def_cfa_offset 16
 4523              		.cfi_offset 4, -16
 4524              		.cfi_offset 5, -12
 4525              		.cfi_offset 7, -8
 4526              		.cfi_offset 14, -4
 4527 0002 84B0     		sub	sp, sp, #16
 4528              		.cfi_def_cfa_offset 32
 4529 0004 00AF     		add	r7, sp, #0
 4530              		.cfi_def_cfa_register 7
 4531 0006 7860     		str	r0, [r7, #4]
1928:bma2x2.c      **** 	/*  Variable used to return value of
1929:bma2x2.c      **** 	communication routine*/
1930:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 4532              		.loc 1 1930 0
 4533 0008 0F23     		movs	r3, #15
 4534 000a FB18     		adds	r3, r7, r3
 4535 000c FF22     		movs	r2, #255
 4536 000e 1A70     		strb	r2, [r3]
1931:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 4537              		.loc 1 1931 0
 4538 0010 0E23     		movs	r3, #14
 4539 0012 FB18     		adds	r3, r7, r3
 4540 0014 0022     		movs	r2, #0
 4541 0016 1A70     		strb	r2, [r3]
1932:bma2x2.c      **** 
1933:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 4542              		.loc 1 1933 0
 4543 0018 124B     		ldr	r3, .L267
 4544 001a 1B68     		ldr	r3, [r3]
 4545 001c 002B     		cmp	r3, #0
 4546 001e 02D1     		bne	.L264
1934:bma2x2.c      **** 		return  E_BMA2x2_NULL_PTR;
 4547              		.loc 1 1934 0
 4548 0020 7F23     		movs	r3, #127
 4549 0022 5B42     		rsbs	r3, r3, #0
 4550 0024 19E0     		b	.L266
 4551              	.L264:
1935:bma2x2.c      **** 		} else {
1936:bma2x2.c      **** 			/* Read the high bandwidth*/
1937:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 4552              		.loc 1 1937 0
 4553 0026 0F4B     		ldr	r3, .L267
 4554 0028 1B68     		ldr	r3, [r3]
 4555 002a DD68     		ldr	r5, [r3, #12]
 4556 002c 0D4B     		ldr	r3, .L267
 4557 002e 1B68     		ldr	r3, [r3]
 4558 0030 1879     		ldrb	r0, [r3, #4]
 4559 0032 0F23     		movs	r3, #15
 4560 0034 FC18     		adds	r4, r7, r3
 4561 0036 0E23     		movs	r3, #14
 4562 0038 FA18     		adds	r2, r7, r3
 4563 003a 0123     		movs	r3, #1
 4564 003c 1321     		movs	r1, #19
 4565 003e A847     		blx	r5
 4566 0040 0300     		movs	r3, r0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 118


 4567 0042 2370     		strb	r3, [r4]
1938:bma2x2.c      **** 			(p_bma2x2->dev_addr, BMA2x2_ENABLE_DATA_HIGH_BW_REG,
1939:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
1940:bma2x2.c      **** 			*high_bw_u8 = BMA2x2_GET_BITSLICE
 4568              		.loc 1 1940 0
 4569 0044 0E23     		movs	r3, #14
 4570 0046 FB18     		adds	r3, r7, r3
 4571 0048 1B78     		ldrb	r3, [r3]
 4572 004a DB09     		lsrs	r3, r3, #7
 4573 004c DAB2     		uxtb	r2, r3
 4574 004e 7B68     		ldr	r3, [r7, #4]
 4575 0050 1A70     		strb	r2, [r3]
1941:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_DATA_HIGH_BW);
1942:bma2x2.c      **** 		}
1943:bma2x2.c      **** 	return com_rslt;
 4576              		.loc 1 1943 0
 4577 0052 0F23     		movs	r3, #15
 4578 0054 FB18     		adds	r3, r7, r3
 4579 0056 1B78     		ldrb	r3, [r3]
 4580 0058 5BB2     		sxtb	r3, r3
 4581              	.L266:
1944:bma2x2.c      **** }
 4582              		.loc 1 1944 0 discriminator 1
 4583 005a 1800     		movs	r0, r3
 4584 005c BD46     		mov	sp, r7
 4585 005e 04B0     		add	sp, sp, #16
 4586              		@ sp needed
 4587 0060 B0BD     		pop	{r4, r5, r7, pc}
 4588              	.L268:
 4589 0062 C046     		.align	2
 4590              	.L267:
 4591 0064 00000000 		.word	p_bma2x2
 4592              		.cfi_endproc
 4593              	.LFE29:
 4594              		.size	bma2x2_get_high_bw, .-bma2x2_get_high_bw
 4595              		.section	.text.bma2x2_set_high_bw,"ax",%progbits
 4596              		.align	2
 4597              		.global	bma2x2_set_high_bw
 4598              		.code	16
 4599              		.thumb_func
 4600              		.type	bma2x2_set_high_bw, %function
 4601              	bma2x2_set_high_bw:
 4602              	.LFB30:
1945:bma2x2.c      **** /*!
1946:bma2x2.c      ****  * @brief This API is used to write high bandwidth
1947:bma2x2.c      ****  *		in the register 0x13 bit 7
1948:bma2x2.c      ****  *
1949:bma2x2.c      ****  *  @param  high_bw_u8 : The value of high bandwidth
1950:bma2x2.c      ****  *         high_bw_u8    |   result
1951:bma2x2.c      ****  *       ----------------- | ----------------------
1952:bma2x2.c      ****  *              0          | Unfiltered High Bandwidth
1953:bma2x2.c      ****  *              1          | Filtered Low Bandwidth
1954:bma2x2.c      ****  *
1955:bma2x2.c      ****  *
1956:bma2x2.c      ****  *	@return results of bus communication function
1957:bma2x2.c      ****  *	@retval 0 -> Success
1958:bma2x2.c      ****  *	@retval -1 -> Error
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 119


1959:bma2x2.c      ****  *
1960:bma2x2.c      ****  *
1961:bma2x2.c      ****  */
1962:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_high_bw(u8 high_bw_u8)
1963:bma2x2.c      **** {
 4603              		.loc 1 1963 0
 4604              		.cfi_startproc
 4605              		@ args = 0, pretend = 0, frame = 16
 4606              		@ frame_needed = 1, uses_anonymous_args = 0
 4607 0000 B0B5     		push	{r4, r5, r7, lr}
 4608              		.cfi_def_cfa_offset 16
 4609              		.cfi_offset 4, -16
 4610              		.cfi_offset 5, -12
 4611              		.cfi_offset 7, -8
 4612              		.cfi_offset 14, -4
 4613 0002 84B0     		sub	sp, sp, #16
 4614              		.cfi_def_cfa_offset 32
 4615 0004 00AF     		add	r7, sp, #0
 4616              		.cfi_def_cfa_register 7
 4617 0006 0200     		movs	r2, r0
 4618 0008 FB1D     		adds	r3, r7, #7
 4619 000a 1A70     		strb	r2, [r3]
1964:bma2x2.c      **** 	/*  Variable used to return value of
1965:bma2x2.c      **** 	communication routine*/
1966:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 4620              		.loc 1 1966 0
 4621 000c 0F23     		movs	r3, #15
 4622 000e FB18     		adds	r3, r7, r3
 4623 0010 FF22     		movs	r2, #255
 4624 0012 1A70     		strb	r2, [r3]
1967:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 4625              		.loc 1 1967 0
 4626 0014 0E23     		movs	r3, #14
 4627 0016 FB18     		adds	r3, r7, r3
 4628 0018 0022     		movs	r2, #0
 4629 001a 1A70     		strb	r2, [r3]
1968:bma2x2.c      **** 
1969:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 4630              		.loc 1 1969 0
 4631 001c 1F4B     		ldr	r3, .L273
 4632 001e 1B68     		ldr	r3, [r3]
 4633 0020 002B     		cmp	r3, #0
 4634 0022 02D1     		bne	.L270
1970:bma2x2.c      **** 		return  E_BMA2x2_NULL_PTR;
 4635              		.loc 1 1970 0
 4636 0024 7F23     		movs	r3, #127
 4637 0026 5B42     		rsbs	r3, r3, #0
 4638 0028 34E0     		b	.L272
 4639              	.L270:
1971:bma2x2.c      **** 		}  else {
1972:bma2x2.c      **** 			/* Write the high bandwidth*/
1973:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 4640              		.loc 1 1973 0
 4641 002a 1C4B     		ldr	r3, .L273
 4642 002c 1B68     		ldr	r3, [r3]
 4643 002e DD68     		ldr	r5, [r3, #12]
 4644 0030 1A4B     		ldr	r3, .L273
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 120


 4645 0032 1B68     		ldr	r3, [r3]
 4646 0034 1879     		ldrb	r0, [r3, #4]
 4647 0036 0F23     		movs	r3, #15
 4648 0038 FC18     		adds	r4, r7, r3
 4649 003a 0E23     		movs	r3, #14
 4650 003c FA18     		adds	r2, r7, r3
 4651 003e 0123     		movs	r3, #1
 4652 0040 1321     		movs	r1, #19
 4653 0042 A847     		blx	r5
 4654 0044 0300     		movs	r3, r0
 4655 0046 2370     		strb	r3, [r4]
1974:bma2x2.c      **** 			(p_bma2x2->dev_addr, BMA2x2_ENABLE_DATA_HIGH_BW_REG,
1975:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
1976:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE(data_u8,
 4656              		.loc 1 1976 0
 4657 0048 0E23     		movs	r3, #14
 4658 004a FB18     		adds	r3, r7, r3
 4659 004c 1B78     		ldrb	r3, [r3]
 4660 004e 5BB2     		sxtb	r3, r3
 4661 0050 7F22     		movs	r2, #127
 4662 0052 1340     		ands	r3, r2
 4663 0054 5AB2     		sxtb	r2, r3
 4664 0056 FB1D     		adds	r3, r7, #7
 4665 0058 1B78     		ldrb	r3, [r3]
 4666 005a DB01     		lsls	r3, r3, #7
 4667 005c 5BB2     		sxtb	r3, r3
 4668 005e 1343     		orrs	r3, r2
 4669 0060 5BB2     		sxtb	r3, r3
 4670 0062 DAB2     		uxtb	r2, r3
 4671 0064 0E23     		movs	r3, #14
 4672 0066 FB18     		adds	r3, r7, r3
 4673 0068 1A70     		strb	r2, [r3]
1977:bma2x2.c      **** 			BMA2x2_ENABLE_DATA_HIGH_BW, high_bw_u8);
1978:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 4674              		.loc 1 1978 0
 4675 006a 0E23     		movs	r3, #14
 4676 006c FB18     		adds	r3, r7, r3
 4677 006e 0122     		movs	r2, #1
 4678 0070 1900     		movs	r1, r3
 4679 0072 1320     		movs	r0, #19
 4680 0074 FFF7FEFF 		bl	bma2x2_write_reg
 4681 0078 0300     		movs	r3, r0
 4682 007a DAB2     		uxtb	r2, r3
 4683 007c 0F23     		movs	r3, #15
 4684 007e FB18     		adds	r3, r7, r3
 4685 0080 1B78     		ldrb	r3, [r3]
 4686 0082 D318     		adds	r3, r2, r3
 4687 0084 DAB2     		uxtb	r2, r3
 4688 0086 0F23     		movs	r3, #15
 4689 0088 FB18     		adds	r3, r7, r3
 4690 008a 1A70     		strb	r2, [r3]
1979:bma2x2.c      **** 			BMA2x2_ENABLE_DATA_HIGH_BW_REG,
1980:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
1981:bma2x2.c      **** 		}
1982:bma2x2.c      **** 	return com_rslt;
 4691              		.loc 1 1982 0
 4692 008c 0F23     		movs	r3, #15
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 121


 4693 008e FB18     		adds	r3, r7, r3
 4694 0090 1B78     		ldrb	r3, [r3]
 4695 0092 5BB2     		sxtb	r3, r3
 4696              	.L272:
1983:bma2x2.c      **** }
 4697              		.loc 1 1983 0 discriminator 1
 4698 0094 1800     		movs	r0, r3
 4699 0096 BD46     		mov	sp, r7
 4700 0098 04B0     		add	sp, sp, #16
 4701              		@ sp needed
 4702 009a B0BD     		pop	{r4, r5, r7, pc}
 4703              	.L274:
 4704              		.align	2
 4705              	.L273:
 4706 009c 00000000 		.word	p_bma2x2
 4707              		.cfi_endproc
 4708              	.LFE30:
 4709              		.size	bma2x2_set_high_bw, .-bma2x2_set_high_bw
 4710              		.section	.text.bma2x2_get_shadow_dis,"ax",%progbits
 4711              		.align	2
 4712              		.global	bma2x2_get_shadow_dis
 4713              		.code	16
 4714              		.thumb_func
 4715              		.type	bma2x2_get_shadow_dis, %function
 4716              	bma2x2_get_shadow_dis:
 4717              	.LFB31:
1984:bma2x2.c      **** /*!
1985:bma2x2.c      ****  *	@brief This API is used to get shadow dis
1986:bma2x2.c      ****  *	in the register 0x13 bit 6
1987:bma2x2.c      ****  *
1988:bma2x2.c      ****  *  @param  shadow_dis_u8 : The value of shadow dis
1989:bma2x2.c      ****  *        shadow_dis_u8  |   result
1990:bma2x2.c      ****  *       ----------------- | ------------------
1991:bma2x2.c      ****  *              0          | MSB is Locked
1992:bma2x2.c      ****  *              1          | No MSB Locking
1993:bma2x2.c      ****  *
1994:bma2x2.c      ****  *
1995:bma2x2.c      ****  *
1996:bma2x2.c      ****  *	@return results of bus communication function
1997:bma2x2.c      ****  *	@retval 0 -> Success
1998:bma2x2.c      ****  *	@retval -1 -> Error
1999:bma2x2.c      ****  *
2000:bma2x2.c      ****  *
2001:bma2x2.c      ****  */
2002:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_shadow_dis(u8 *shadow_dis_u8)
2003:bma2x2.c      **** {
 4718              		.loc 1 2003 0
 4719              		.cfi_startproc
 4720              		@ args = 0, pretend = 0, frame = 16
 4721              		@ frame_needed = 1, uses_anonymous_args = 0
 4722 0000 B0B5     		push	{r4, r5, r7, lr}
 4723              		.cfi_def_cfa_offset 16
 4724              		.cfi_offset 4, -16
 4725              		.cfi_offset 5, -12
 4726              		.cfi_offset 7, -8
 4727              		.cfi_offset 14, -4
 4728 0002 84B0     		sub	sp, sp, #16
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 122


 4729              		.cfi_def_cfa_offset 32
 4730 0004 00AF     		add	r7, sp, #0
 4731              		.cfi_def_cfa_register 7
 4732 0006 7860     		str	r0, [r7, #4]
2004:bma2x2.c      **** 	/*  Variable used to return value of
2005:bma2x2.c      **** 	communication routine*/
2006:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 4733              		.loc 1 2006 0
 4734 0008 0F23     		movs	r3, #15
 4735 000a FB18     		adds	r3, r7, r3
 4736 000c FF22     		movs	r2, #255
 4737 000e 1A70     		strb	r2, [r3]
2007:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 4738              		.loc 1 2007 0
 4739 0010 0E23     		movs	r3, #14
 4740 0012 FB18     		adds	r3, r7, r3
 4741 0014 0022     		movs	r2, #0
 4742 0016 1A70     		strb	r2, [r3]
2008:bma2x2.c      **** 
2009:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 4743              		.loc 1 2009 0
 4744 0018 134B     		ldr	r3, .L279
 4745 001a 1B68     		ldr	r3, [r3]
 4746 001c 002B     		cmp	r3, #0
 4747 001e 02D1     		bne	.L276
2010:bma2x2.c      **** 		return  E_BMA2x2_NULL_PTR;
 4748              		.loc 1 2010 0
 4749 0020 7F23     		movs	r3, #127
 4750 0022 5B42     		rsbs	r3, r3, #0
 4751 0024 1CE0     		b	.L278
 4752              	.L276:
2011:bma2x2.c      **** 		} else {
2012:bma2x2.c      **** 			/*Read the shadow dis*/
2013:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 4753              		.loc 1 2013 0
 4754 0026 104B     		ldr	r3, .L279
 4755 0028 1B68     		ldr	r3, [r3]
 4756 002a DD68     		ldr	r5, [r3, #12]
 4757 002c 0E4B     		ldr	r3, .L279
 4758 002e 1B68     		ldr	r3, [r3]
 4759 0030 1879     		ldrb	r0, [r3, #4]
 4760 0032 0F23     		movs	r3, #15
 4761 0034 FC18     		adds	r4, r7, r3
 4762 0036 0E23     		movs	r3, #14
 4763 0038 FA18     		adds	r2, r7, r3
 4764 003a 0123     		movs	r3, #1
 4765 003c 1321     		movs	r1, #19
 4766 003e A847     		blx	r5
 4767 0040 0300     		movs	r3, r0
 4768 0042 2370     		strb	r3, [r4]
2014:bma2x2.c      **** 			(p_bma2x2->dev_addr,
2015:bma2x2.c      **** 			BMA2x2_DIS_SHADOW_PROC_REG,
2016:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2017:bma2x2.c      **** 			*shadow_dis_u8 = BMA2x2_GET_BITSLICE
 4769              		.loc 1 2017 0
 4770 0044 0E23     		movs	r3, #14
 4771 0046 FB18     		adds	r3, r7, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 123


 4772 0048 1B78     		ldrb	r3, [r3]
 4773 004a 9B11     		asrs	r3, r3, #6
 4774 004c DBB2     		uxtb	r3, r3
 4775 004e 0122     		movs	r2, #1
 4776 0050 1340     		ands	r3, r2
 4777 0052 DAB2     		uxtb	r2, r3
 4778 0054 7B68     		ldr	r3, [r7, #4]
 4779 0056 1A70     		strb	r2, [r3]
2018:bma2x2.c      **** 			(data_u8, BMA2x2_DIS_SHADOW_PROC);
2019:bma2x2.c      **** 		}
2020:bma2x2.c      **** 	return com_rslt;
 4780              		.loc 1 2020 0
 4781 0058 0F23     		movs	r3, #15
 4782 005a FB18     		adds	r3, r7, r3
 4783 005c 1B78     		ldrb	r3, [r3]
 4784 005e 5BB2     		sxtb	r3, r3
 4785              	.L278:
2021:bma2x2.c      **** }
 4786              		.loc 1 2021 0 discriminator 1
 4787 0060 1800     		movs	r0, r3
 4788 0062 BD46     		mov	sp, r7
 4789 0064 04B0     		add	sp, sp, #16
 4790              		@ sp needed
 4791 0066 B0BD     		pop	{r4, r5, r7, pc}
 4792              	.L280:
 4793              		.align	2
 4794              	.L279:
 4795 0068 00000000 		.word	p_bma2x2
 4796              		.cfi_endproc
 4797              	.LFE31:
 4798              		.size	bma2x2_get_shadow_dis, .-bma2x2_get_shadow_dis
 4799              		.section	.text.bma2x2_set_shadow_dis,"ax",%progbits
 4800              		.align	2
 4801              		.global	bma2x2_set_shadow_dis
 4802              		.code	16
 4803              		.thumb_func
 4804              		.type	bma2x2_set_shadow_dis, %function
 4805              	bma2x2_set_shadow_dis:
 4806              	.LFB32:
2022:bma2x2.c      **** /*!
2023:bma2x2.c      ****  *	@brief This API is used to set shadow dis
2024:bma2x2.c      ****  *	in the register 0x13 bit 6
2025:bma2x2.c      ****  *
2026:bma2x2.c      ****  *  @param  shadow_dis_u8 : The value of shadow dis
2027:bma2x2.c      ****  *        shadow_dis_u8  |   result
2028:bma2x2.c      ****  *       ----------------- | ------------------
2029:bma2x2.c      ****  *              0          | MSB is Locked
2030:bma2x2.c      ****  *              1          | No MSB Locking
2031:bma2x2.c      ****  *
2032:bma2x2.c      ****  *
2033:bma2x2.c      ****  *
2034:bma2x2.c      ****  *	@return results of bus communication function
2035:bma2x2.c      ****  *	@retval 0 -> Success
2036:bma2x2.c      ****  *	@retval -1 -> Error
2037:bma2x2.c      ****  *
2038:bma2x2.c      ****  *
2039:bma2x2.c      ****  */
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 124


2040:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_shadow_dis(u8 shadow_dis_u8)
2041:bma2x2.c      **** {
 4807              		.loc 1 2041 0
 4808              		.cfi_startproc
 4809              		@ args = 0, pretend = 0, frame = 16
 4810              		@ frame_needed = 1, uses_anonymous_args = 0
 4811 0000 B0B5     		push	{r4, r5, r7, lr}
 4812              		.cfi_def_cfa_offset 16
 4813              		.cfi_offset 4, -16
 4814              		.cfi_offset 5, -12
 4815              		.cfi_offset 7, -8
 4816              		.cfi_offset 14, -4
 4817 0002 84B0     		sub	sp, sp, #16
 4818              		.cfi_def_cfa_offset 32
 4819 0004 00AF     		add	r7, sp, #0
 4820              		.cfi_def_cfa_register 7
 4821 0006 0200     		movs	r2, r0
 4822 0008 FB1D     		adds	r3, r7, #7
 4823 000a 1A70     		strb	r2, [r3]
2042:bma2x2.c      **** 	/*  Variable used to return value of
2043:bma2x2.c      **** 	communication routine*/
2044:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 4824              		.loc 1 2044 0
 4825 000c 0F23     		movs	r3, #15
 4826 000e FB18     		adds	r3, r7, r3
 4827 0010 FF22     		movs	r2, #255
 4828 0012 1A70     		strb	r2, [r3]
2045:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 4829              		.loc 1 2045 0
 4830 0014 0E23     		movs	r3, #14
 4831 0016 FB18     		adds	r3, r7, r3
 4832 0018 0022     		movs	r2, #0
 4833 001a 1A70     		strb	r2, [r3]
2046:bma2x2.c      **** 
2047:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 4834              		.loc 1 2047 0
 4835 001c 214B     		ldr	r3, .L285
 4836 001e 1B68     		ldr	r3, [r3]
 4837 0020 002B     		cmp	r3, #0
 4838 0022 02D1     		bne	.L282
2048:bma2x2.c      **** 		return  E_BMA2x2_NULL_PTR;
 4839              		.loc 1 2048 0
 4840 0024 7F23     		movs	r3, #127
 4841 0026 5B42     		rsbs	r3, r3, #0
 4842 0028 37E0     		b	.L284
 4843              	.L282:
2049:bma2x2.c      **** 		} else {
2050:bma2x2.c      **** 			/* Write the shadow dis*/
2051:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 4844              		.loc 1 2051 0
 4845 002a 1E4B     		ldr	r3, .L285
 4846 002c 1B68     		ldr	r3, [r3]
 4847 002e DD68     		ldr	r5, [r3, #12]
 4848 0030 1C4B     		ldr	r3, .L285
 4849 0032 1B68     		ldr	r3, [r3]
 4850 0034 1879     		ldrb	r0, [r3, #4]
 4851 0036 0F23     		movs	r3, #15
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 125


 4852 0038 FC18     		adds	r4, r7, r3
 4853 003a 0E23     		movs	r3, #14
 4854 003c FA18     		adds	r2, r7, r3
 4855 003e 0123     		movs	r3, #1
 4856 0040 1321     		movs	r1, #19
 4857 0042 A847     		blx	r5
 4858 0044 0300     		movs	r3, r0
 4859 0046 2370     		strb	r3, [r4]
2052:bma2x2.c      **** 			(p_bma2x2->dev_addr, BMA2x2_DIS_SHADOW_PROC_REG,
2053:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2054:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 4860              		.loc 1 2054 0
 4861 0048 0E23     		movs	r3, #14
 4862 004a FB18     		adds	r3, r7, r3
 4863 004c 1B78     		ldrb	r3, [r3]
 4864 004e 5BB2     		sxtb	r3, r3
 4865 0050 4022     		movs	r2, #64
 4866 0052 9343     		bics	r3, r2
 4867 0054 5AB2     		sxtb	r2, r3
 4868 0056 FB1D     		adds	r3, r7, #7
 4869 0058 1B78     		ldrb	r3, [r3]
 4870 005a 9B01     		lsls	r3, r3, #6
 4871 005c 5BB2     		sxtb	r3, r3
 4872 005e 4021     		movs	r1, #64
 4873 0060 0B40     		ands	r3, r1
 4874 0062 5BB2     		sxtb	r3, r3
 4875 0064 1343     		orrs	r3, r2
 4876 0066 5BB2     		sxtb	r3, r3
 4877 0068 DAB2     		uxtb	r2, r3
 4878 006a 0E23     		movs	r3, #14
 4879 006c FB18     		adds	r3, r7, r3
 4880 006e 1A70     		strb	r2, [r3]
2055:bma2x2.c      **** 			(data_u8, BMA2x2_DIS_SHADOW_PROC, shadow_dis_u8);
2056:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(BMA2x2_DIS_SHADOW_PROC_REG,
 4881              		.loc 1 2056 0
 4882 0070 0E23     		movs	r3, #14
 4883 0072 FB18     		adds	r3, r7, r3
 4884 0074 0122     		movs	r2, #1
 4885 0076 1900     		movs	r1, r3
 4886 0078 1320     		movs	r0, #19
 4887 007a FFF7FEFF 		bl	bma2x2_write_reg
 4888 007e 0300     		movs	r3, r0
 4889 0080 DAB2     		uxtb	r2, r3
 4890 0082 0F23     		movs	r3, #15
 4891 0084 FB18     		adds	r3, r7, r3
 4892 0086 1B78     		ldrb	r3, [r3]
 4893 0088 D318     		adds	r3, r2, r3
 4894 008a DAB2     		uxtb	r2, r3
 4895 008c 0F23     		movs	r3, #15
 4896 008e FB18     		adds	r3, r7, r3
 4897 0090 1A70     		strb	r2, [r3]
2057:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2058:bma2x2.c      **** 		}
2059:bma2x2.c      **** 	return com_rslt;
 4898              		.loc 1 2059 0
 4899 0092 0F23     		movs	r3, #15
 4900 0094 FB18     		adds	r3, r7, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 126


 4901 0096 1B78     		ldrb	r3, [r3]
 4902 0098 5BB2     		sxtb	r3, r3
 4903              	.L284:
2060:bma2x2.c      **** }
 4904              		.loc 1 2060 0 discriminator 1
 4905 009a 1800     		movs	r0, r3
 4906 009c BD46     		mov	sp, r7
 4907 009e 04B0     		add	sp, sp, #16
 4908              		@ sp needed
 4909 00a0 B0BD     		pop	{r4, r5, r7, pc}
 4910              	.L286:
 4911 00a2 C046     		.align	2
 4912              	.L285:
 4913 00a4 00000000 		.word	p_bma2x2
 4914              		.cfi_endproc
 4915              	.LFE32:
 4916              		.size	bma2x2_set_shadow_dis, .-bma2x2_set_shadow_dis
 4917              		.section	.text.bma2x2_soft_rst,"ax",%progbits
 4918              		.align	2
 4919              		.global	bma2x2_soft_rst
 4920              		.code	16
 4921              		.thumb_func
 4922              		.type	bma2x2_soft_rst, %function
 4923              	bma2x2_soft_rst:
 4924              	.LFB33:
2061:bma2x2.c      **** /*!
2062:bma2x2.c      ****  *	@brief This function is used for the soft reset
2063:bma2x2.c      ****  *	The soft reset register will be written
2064:bma2x2.c      ****  *	with 0xB6 in the register 0x14.
2065:bma2x2.c      ****  *
2066:bma2x2.c      ****  *
2067:bma2x2.c      ****  *
2068:bma2x2.c      ****  *  \param : None
2069:bma2x2.c      ****  *
2070:bma2x2.c      ****  *	@return results of bus communication function
2071:bma2x2.c      ****  *	@retval 0 -> Success
2072:bma2x2.c      ****  *	@retval -1 -> Error
2073:bma2x2.c      ****  *
2074:bma2x2.c      ****  *
2075:bma2x2.c      ****  */
2076:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_soft_rst(void)
2077:bma2x2.c      **** {
 4925              		.loc 1 2077 0
 4926              		.cfi_startproc
 4927              		@ args = 0, pretend = 0, frame = 8
 4928              		@ frame_needed = 1, uses_anonymous_args = 0
 4929 0000 90B5     		push	{r4, r7, lr}
 4930              		.cfi_def_cfa_offset 12
 4931              		.cfi_offset 4, -12
 4932              		.cfi_offset 7, -8
 4933              		.cfi_offset 14, -4
 4934 0002 83B0     		sub	sp, sp, #12
 4935              		.cfi_def_cfa_offset 24
 4936 0004 00AF     		add	r7, sp, #0
 4937              		.cfi_def_cfa_register 7
2078:bma2x2.c      **** 	/*  Variable used to return value of
2079:bma2x2.c      **** 	communication routine*/
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 127


2080:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 4938              		.loc 1 2080 0
 4939 0006 FB1D     		adds	r3, r7, #7
 4940 0008 FF22     		movs	r2, #255
 4941 000a 1A70     		strb	r2, [r3]
2081:bma2x2.c      **** 	u8 data_u8 = BMA2x2_ENABLE_SOFT_RESET_VALUE;
 4942              		.loc 1 2081 0
 4943 000c BB1D     		adds	r3, r7, #6
 4944 000e B622     		movs	r2, #182
 4945 0010 1A70     		strb	r2, [r3]
2082:bma2x2.c      **** 
2083:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 4946              		.loc 1 2083 0
 4947 0012 0B4B     		ldr	r3, .L291
 4948 0014 1B68     		ldr	r3, [r3]
 4949 0016 002B     		cmp	r3, #0
 4950 0018 02D1     		bne	.L288
2084:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
2085:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 4951              		.loc 1 2085 0
 4952 001a 7F23     		movs	r3, #127
 4953 001c 5B42     		rsbs	r3, r3, #0
 4954 001e 0BE0     		b	.L290
 4955              	.L288:
2086:bma2x2.c      **** 		}  else {
2087:bma2x2.c      **** 			/*! To reset the sensor
2088:bma2x2.c      **** 			0xB6 value_u8 will be written */
2089:bma2x2.c      **** 			com_rslt = bma2x2_write_reg(BMA2x2_RST_ADDR,
 4956              		.loc 1 2089 0
 4957 0020 FC1D     		adds	r4, r7, #7
 4958 0022 BB1D     		adds	r3, r7, #6
 4959 0024 0122     		movs	r2, #1
 4960 0026 1900     		movs	r1, r3
 4961 0028 1420     		movs	r0, #20
 4962 002a FFF7FEFF 		bl	bma2x2_write_reg
 4963 002e 0300     		movs	r3, r0
 4964 0030 2370     		strb	r3, [r4]
2090:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2091:bma2x2.c      **** 		}
2092:bma2x2.c      **** 	return com_rslt;
 4965              		.loc 1 2092 0
 4966 0032 FB1D     		adds	r3, r7, #7
 4967 0034 1B78     		ldrb	r3, [r3]
 4968 0036 5BB2     		sxtb	r3, r3
 4969              	.L290:
2093:bma2x2.c      **** }
 4970              		.loc 1 2093 0 discriminator 1
 4971 0038 1800     		movs	r0, r3
 4972 003a BD46     		mov	sp, r7
 4973 003c 03B0     		add	sp, sp, #12
 4974              		@ sp needed
 4975 003e 90BD     		pop	{r4, r7, pc}
 4976              	.L292:
 4977              		.align	2
 4978              	.L291:
 4979 0040 00000000 		.word	p_bma2x2
 4980              		.cfi_endproc
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 128


 4981              	.LFE33:
 4982              		.size	bma2x2_soft_rst, .-bma2x2_soft_rst
 4983              		.section	.text.bma2x2_update_image,"ax",%progbits
 4984              		.align	2
 4985              		.global	bma2x2_update_image
 4986              		.code	16
 4987              		.thumb_func
 4988              		.type	bma2x2_update_image, %function
 4989              	bma2x2_update_image:
 4990              	.LFB34:
2094:bma2x2.c      **** /*!
2095:bma2x2.c      ****  * @brief This API is used to update the register values
2096:bma2x2.c      ****  *
2097:bma2x2.c      ****  *
2098:bma2x2.c      ****  *
2099:bma2x2.c      ****  *
2100:bma2x2.c      ****  *  @param : None
2101:bma2x2.c      ****  *
2102:bma2x2.c      ****  *
2103:bma2x2.c      ****  *
2104:bma2x2.c      ****  *	@return results of bus communication function
2105:bma2x2.c      ****  *	@retval 0 -> Success
2106:bma2x2.c      ****  *	@retval -1 -> Error
2107:bma2x2.c      ****  *
2108:bma2x2.c      ****  *
2109:bma2x2.c      ****  */
2110:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_update_image(void)
2111:bma2x2.c      **** {
 4991              		.loc 1 2111 0
 4992              		.cfi_startproc
 4993              		@ args = 0, pretend = 0, frame = 8
 4994              		@ frame_needed = 1, uses_anonymous_args = 0
 4995 0000 B0B5     		push	{r4, r5, r7, lr}
 4996              		.cfi_def_cfa_offset 16
 4997              		.cfi_offset 4, -16
 4998              		.cfi_offset 5, -12
 4999              		.cfi_offset 7, -8
 5000              		.cfi_offset 14, -4
 5001 0002 82B0     		sub	sp, sp, #8
 5002              		.cfi_def_cfa_offset 24
 5003 0004 00AF     		add	r7, sp, #0
 5004              		.cfi_def_cfa_register 7
2112:bma2x2.c      **** 	/*  Variable used to return value of
2113:bma2x2.c      **** 	communication routine*/
2114:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 5005              		.loc 1 2114 0
 5006 0006 FB1D     		adds	r3, r7, #7
 5007 0008 FF22     		movs	r2, #255
 5008 000a 1A70     		strb	r2, [r3]
2115:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 5009              		.loc 1 2115 0
 5010 000c BB1D     		adds	r3, r7, #6
 5011 000e 0022     		movs	r2, #0
 5012 0010 1A70     		strb	r2, [r3]
2116:bma2x2.c      **** 
2117:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 5013              		.loc 1 2117 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 129


 5014 0012 184B     		ldr	r3, .L297
 5015 0014 1B68     		ldr	r3, [r3]
 5016 0016 002B     		cmp	r3, #0
 5017 0018 02D1     		bne	.L294
2118:bma2x2.c      **** 		return  E_BMA2x2_NULL_PTR;
 5018              		.loc 1 2118 0
 5019 001a 7F23     		movs	r3, #127
 5020 001c 5B42     		rsbs	r3, r3, #0
 5021 001e 24E0     		b	.L296
 5022              	.L294:
2119:bma2x2.c      **** 		} else {
2120:bma2x2.c      **** 			/* Write the update image*/
2121:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 5023              		.loc 1 2121 0
 5024 0020 144B     		ldr	r3, .L297
 5025 0022 1B68     		ldr	r3, [r3]
 5026 0024 DD68     		ldr	r5, [r3, #12]
 5027 0026 134B     		ldr	r3, .L297
 5028 0028 1B68     		ldr	r3, [r3]
 5029 002a 1879     		ldrb	r0, [r3, #4]
 5030 002c FC1D     		adds	r4, r7, #7
 5031 002e BA1D     		adds	r2, r7, #6
 5032 0030 0123     		movs	r3, #1
 5033 0032 3321     		movs	r1, #51
 5034 0034 A847     		blx	r5
 5035 0036 0300     		movs	r3, r0
 5036 0038 2370     		strb	r3, [r4]
2122:bma2x2.c      **** 			(p_bma2x2->dev_addr, BMA2x2_UPDATE_IMAGE_REG,
2123:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2124:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 5037              		.loc 1 2124 0
 5038 003a BB1D     		adds	r3, r7, #6
 5039 003c 1B78     		ldrb	r3, [r3]
 5040 003e 0822     		movs	r2, #8
 5041 0040 1343     		orrs	r3, r2
 5042 0042 DAB2     		uxtb	r2, r3
 5043 0044 BB1D     		adds	r3, r7, #6
 5044 0046 1A70     		strb	r2, [r3]
2125:bma2x2.c      **** 			(data_u8, BMA2x2_UPDATE_IMAGE,
2126:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
2127:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(BMA2x2_UPDATE_IMAGE_REG,
 5045              		.loc 1 2127 0
 5046 0048 BB1D     		adds	r3, r7, #6
 5047 004a 0122     		movs	r2, #1
 5048 004c 1900     		movs	r1, r3
 5049 004e 3320     		movs	r0, #51
 5050 0050 FFF7FEFF 		bl	bma2x2_write_reg
 5051 0054 0300     		movs	r3, r0
 5052 0056 DAB2     		uxtb	r2, r3
 5053 0058 FB1D     		adds	r3, r7, #7
 5054 005a 1B78     		ldrb	r3, [r3]
 5055 005c D318     		adds	r3, r2, r3
 5056 005e DAB2     		uxtb	r2, r3
 5057 0060 FB1D     		adds	r3, r7, #7
 5058 0062 1A70     		strb	r2, [r3]
2128:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2129:bma2x2.c      **** 		}
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 130


2130:bma2x2.c      **** 	return com_rslt;
 5059              		.loc 1 2130 0
 5060 0064 FB1D     		adds	r3, r7, #7
 5061 0066 1B78     		ldrb	r3, [r3]
 5062 0068 5BB2     		sxtb	r3, r3
 5063              	.L296:
2131:bma2x2.c      **** }
 5064              		.loc 1 2131 0 discriminator 1
 5065 006a 1800     		movs	r0, r3
 5066 006c BD46     		mov	sp, r7
 5067 006e 02B0     		add	sp, sp, #8
 5068              		@ sp needed
 5069 0070 B0BD     		pop	{r4, r5, r7, pc}
 5070              	.L298:
 5071 0072 C046     		.align	2
 5072              	.L297:
 5073 0074 00000000 		.word	p_bma2x2
 5074              		.cfi_endproc
 5075              	.LFE34:
 5076              		.size	bma2x2_update_image, .-bma2x2_update_image
 5077              		.section	.text.bma2x2_get_intr_enable,"ax",%progbits
 5078              		.align	2
 5079              		.global	bma2x2_get_intr_enable
 5080              		.code	16
 5081              		.thumb_func
 5082              		.type	bma2x2_get_intr_enable, %function
 5083              	bma2x2_get_intr_enable:
 5084              	.LFB35:
2132:bma2x2.c      **** /*!
2133:bma2x2.c      ****  *	@brief This API is used to get
2134:bma2x2.c      ****  *  interrupt enable bits of the sensor in the registers 0x16 and 0x17
2135:bma2x2.c      ****  *	@note It reads the flat enable, orient enable,
2136:bma2x2.c      ****  *	@note single tap enable, double tap enable
2137:bma2x2.c      ****  *	@note slope-x enable, slope-y enable, slope-z enable,
2138:bma2x2.c      ****  *	@note fifo watermark enable,
2139:bma2x2.c      ****  *	@note fifo full enable, data enable, low-g enable,
2140:bma2x2.c      ****  *	@note high-z enable, high-y enable
2141:bma2x2.c      ****  *	@note high-z enable
2142:bma2x2.c      ****  *
2143:bma2x2.c      ****  *
2144:bma2x2.c      ****  *
2145:bma2x2.c      ****  *  @param intr_type_u8: The value of interrupts
2146:bma2x2.c      ****  *        intr_type_u8   |   result
2147:bma2x2.c      ****  *       ----------------- | ------------------
2148:bma2x2.c      ****  *              0          | BMA2x2_LOW_G_INTR
2149:bma2x2.c      ****  *              1          | BMA2x2_HIGH_G_X_INTR
2150:bma2x2.c      ****  *              2          | BMA2x2_HIGH_G_Y_INTR
2151:bma2x2.c      ****  *              3          | BMA2x2_HIGH_G_Z_INTR
2152:bma2x2.c      ****  *              4          | BMA2x2_DATA_ENABLE
2153:bma2x2.c      ****  *              5          | SLOPE_X_INTR
2154:bma2x2.c      ****  *              6          | SLOPE_Y_INTR
2155:bma2x2.c      ****  *              7          | SLOPE_Z_INTR
2156:bma2x2.c      ****  *              8          | SINGLE_TAP_INTR
2157:bma2x2.c      ****  *              9          | SINGLE_TAP_INTR
2158:bma2x2.c      ****  *              10         | ORIENT_INT
2159:bma2x2.c      ****  *              11         | FLAT_INT
2160:bma2x2.c      ****  *
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 131


2161:bma2x2.c      ****  *  @param value_u8 : The value of interrupts enable
2162:bma2x2.c      ****  *        value_u8       |   result
2163:bma2x2.c      ****  *       ----------------- | ------------------
2164:bma2x2.c      ****  *              0x00       | INTR_DISABLE
2165:bma2x2.c      ****  *              0x01       | INTR_ENABLE
2166:bma2x2.c      ****  *
2167:bma2x2.c      ****  *
2168:bma2x2.c      ****  *
2169:bma2x2.c      ****  *
2170:bma2x2.c      ****  *	@return results of bus communication function
2171:bma2x2.c      ****  *	@retval 0 -> Success
2172:bma2x2.c      ****  *	@retval -1 -> Error
2173:bma2x2.c      ****  *
2174:bma2x2.c      ****  *
2175:bma2x2.c      ****  */
2176:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_intr_enable(u8 intr_type_u8,
2177:bma2x2.c      **** u8 *value_u8)
2178:bma2x2.c      **** {
 5085              		.loc 1 2178 0
 5086              		.cfi_startproc
 5087              		@ args = 0, pretend = 0, frame = 16
 5088              		@ frame_needed = 1, uses_anonymous_args = 0
 5089 0000 B0B5     		push	{r4, r5, r7, lr}
 5090              		.cfi_def_cfa_offset 16
 5091              		.cfi_offset 4, -16
 5092              		.cfi_offset 5, -12
 5093              		.cfi_offset 7, -8
 5094              		.cfi_offset 14, -4
 5095 0002 84B0     		sub	sp, sp, #16
 5096              		.cfi_def_cfa_offset 32
 5097 0004 00AF     		add	r7, sp, #0
 5098              		.cfi_def_cfa_register 7
 5099 0006 0200     		movs	r2, r0
 5100 0008 3960     		str	r1, [r7]
 5101 000a FB1D     		adds	r3, r7, #7
 5102 000c 1A70     		strb	r2, [r3]
2179:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 5103              		.loc 1 2179 0
 5104 000e 0E23     		movs	r3, #14
 5105 0010 FB18     		adds	r3, r7, r3
 5106 0012 0022     		movs	r2, #0
 5107 0014 1A70     		strb	r2, [r3]
2180:bma2x2.c      **** 		/*  Variable used to return value of
2181:bma2x2.c      **** 	communication routine*/
2182:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 5108              		.loc 1 2182 0
 5109 0016 0F23     		movs	r3, #15
 5110 0018 FB18     		adds	r3, r7, r3
 5111 001a FF22     		movs	r2, #255
 5112 001c 1A70     		strb	r2, [r3]
2183:bma2x2.c      **** 
2184:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 5113              		.loc 1 2184 0
 5114 001e A74B     		ldr	r3, .L318
 5115 0020 1B68     		ldr	r3, [r3]
 5116 0022 002B     		cmp	r3, #0
 5117 0024 02D1     		bne	.L300
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 132


2185:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
2186:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 5118              		.loc 1 2186 0
 5119 0026 7F23     		movs	r3, #127
 5120 0028 5B42     		rsbs	r3, r3, #0
 5121 002a 43E1     		b	.L317
 5122              	.L300:
2187:bma2x2.c      **** 		} else {
2188:bma2x2.c      **** 		switch (intr_type_u8) {
 5123              		.loc 1 2188 0
 5124 002c FB1D     		adds	r3, r7, #7
 5125 002e 1B78     		ldrb	r3, [r3]
 5126 0030 0B2B     		cmp	r3, #11
 5127 0032 00D9     		bls	.LCB4643
 5128 0034 35E1     		b	.L302	@long jump
 5129              	.LCB4643:
 5130 0036 9A00     		lsls	r2, r3, #2
 5131 0038 A14B     		ldr	r3, .L318+4
 5132 003a D318     		adds	r3, r2, r3
 5133 003c 1B68     		ldr	r3, [r3]
 5134 003e 9F46     		mov	pc, r3
 5135              		.section	.rodata
 5136              		.align	2
 5137              	.L304:
 5138 0080 40000000 		.word	.L303
 5139 0084 74000000 		.word	.L305
 5140 0088 A4000000 		.word	.L306
 5141 008c D8000000 		.word	.L307
 5142 0090 0C010000 		.word	.L308
 5143 0094 40010000 		.word	.L309
 5144 0098 70010000 		.word	.L310
 5145 009c A4010000 		.word	.L311
 5146 00a0 D8010000 		.word	.L312
 5147 00a4 0C020000 		.word	.L313
 5148 00a8 40020000 		.word	.L314
 5149 00ac 74020000 		.word	.L315
 5150              		.section	.text.bma2x2_get_intr_enable
 5151              	.L303:
2189:bma2x2.c      **** 		case BMA2x2_LOW_G_INTR:
2190:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 5152              		.loc 1 2190 0
 5153 0040 9E4B     		ldr	r3, .L318
 5154 0042 1B68     		ldr	r3, [r3]
 5155 0044 DD68     		ldr	r5, [r3, #12]
 5156 0046 9D4B     		ldr	r3, .L318
 5157 0048 1B68     		ldr	r3, [r3]
 5158 004a 1879     		ldrb	r0, [r3, #4]
 5159 004c 0F23     		movs	r3, #15
 5160 004e FC18     		adds	r4, r7, r3
 5161 0050 0E23     		movs	r3, #14
 5162 0052 FA18     		adds	r2, r7, r3
 5163 0054 0123     		movs	r3, #1
 5164 0056 1721     		movs	r1, #23
 5165 0058 A847     		blx	r5
 5166 005a 0300     		movs	r3, r0
 5167 005c 2370     		strb	r3, [r4]
2191:bma2x2.c      **** 			(p_bma2x2->dev_addr,
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 133


2192:bma2x2.c      **** 			BMA2x2_ENABLE_LOW_G_INTR_REG,
2193:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2194:bma2x2.c      **** 			*value_u8 = BMA2x2_GET_BITSLICE
 5168              		.loc 1 2194 0
 5169 005e 0E23     		movs	r3, #14
 5170 0060 FB18     		adds	r3, r7, r3
 5171 0062 1B78     		ldrb	r3, [r3]
 5172 0064 DB10     		asrs	r3, r3, #3
 5173 0066 DBB2     		uxtb	r3, r3
 5174 0068 0122     		movs	r2, #1
 5175 006a 1340     		ands	r3, r2
 5176 006c DAB2     		uxtb	r2, r3
 5177 006e 3B68     		ldr	r3, [r7]
 5178 0070 1A70     		strb	r2, [r3]
2195:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_LOW_G_INTR);
2196:bma2x2.c      **** 		break;
 5179              		.loc 1 2196 0
 5180 0072 1BE1     		b	.L316
 5181              	.L305:
2197:bma2x2.c      **** 		case BMA2x2_HIGH_G_X_INTR:
2198:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 5182              		.loc 1 2198 0
 5183 0074 914B     		ldr	r3, .L318
 5184 0076 1B68     		ldr	r3, [r3]
 5185 0078 DD68     		ldr	r5, [r3, #12]
 5186 007a 904B     		ldr	r3, .L318
 5187 007c 1B68     		ldr	r3, [r3]
 5188 007e 1879     		ldrb	r0, [r3, #4]
 5189 0080 0F23     		movs	r3, #15
 5190 0082 FC18     		adds	r4, r7, r3
 5191 0084 0E23     		movs	r3, #14
 5192 0086 FA18     		adds	r2, r7, r3
 5193 0088 0123     		movs	r3, #1
 5194 008a 1721     		movs	r1, #23
 5195 008c A847     		blx	r5
 5196 008e 0300     		movs	r3, r0
 5197 0090 2370     		strb	r3, [r4]
2199:bma2x2.c      **** 			(p_bma2x2->dev_addr,
2200:bma2x2.c      **** 			BMA2x2_ENABLE_HIGH_G_X_INTR_REG,
2201:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2202:bma2x2.c      **** 			*value_u8 = BMA2x2_GET_BITSLICE
 5198              		.loc 1 2202 0
 5199 0092 0E23     		movs	r3, #14
 5200 0094 FB18     		adds	r3, r7, r3
 5201 0096 1B78     		ldrb	r3, [r3]
 5202 0098 0122     		movs	r2, #1
 5203 009a 1340     		ands	r3, r2
 5204 009c DAB2     		uxtb	r2, r3
 5205 009e 3B68     		ldr	r3, [r7]
 5206 00a0 1A70     		strb	r2, [r3]
2203:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_HIGH_G_X_INTR);
2204:bma2x2.c      **** 		break;
 5207              		.loc 1 2204 0
 5208 00a2 03E1     		b	.L316
 5209              	.L306:
2205:bma2x2.c      **** 		case BMA2x2_HIGH_G_Y_INTR:
2206:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 134


 5210              		.loc 1 2206 0
 5211 00a4 854B     		ldr	r3, .L318
 5212 00a6 1B68     		ldr	r3, [r3]
 5213 00a8 DD68     		ldr	r5, [r3, #12]
 5214 00aa 844B     		ldr	r3, .L318
 5215 00ac 1B68     		ldr	r3, [r3]
 5216 00ae 1879     		ldrb	r0, [r3, #4]
 5217 00b0 0F23     		movs	r3, #15
 5218 00b2 FC18     		adds	r4, r7, r3
 5219 00b4 0E23     		movs	r3, #14
 5220 00b6 FA18     		adds	r2, r7, r3
 5221 00b8 0123     		movs	r3, #1
 5222 00ba 1721     		movs	r1, #23
 5223 00bc A847     		blx	r5
 5224 00be 0300     		movs	r3, r0
 5225 00c0 2370     		strb	r3, [r4]
2207:bma2x2.c      **** 			(p_bma2x2->dev_addr,
2208:bma2x2.c      **** 			BMA2x2_ENABLE_HIGH_G_Y_INTR_REG,
2209:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2210:bma2x2.c      **** 			*value_u8 = BMA2x2_GET_BITSLICE
 5226              		.loc 1 2210 0
 5227 00c2 0E23     		movs	r3, #14
 5228 00c4 FB18     		adds	r3, r7, r3
 5229 00c6 1B78     		ldrb	r3, [r3]
 5230 00c8 5B10     		asrs	r3, r3, #1
 5231 00ca DBB2     		uxtb	r3, r3
 5232 00cc 0122     		movs	r2, #1
 5233 00ce 1340     		ands	r3, r2
 5234 00d0 DAB2     		uxtb	r2, r3
 5235 00d2 3B68     		ldr	r3, [r7]
 5236 00d4 1A70     		strb	r2, [r3]
2211:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_HIGH_G_Y_INTR);
2212:bma2x2.c      **** 		break;
 5237              		.loc 1 2212 0
 5238 00d6 E9E0     		b	.L316
 5239              	.L307:
2213:bma2x2.c      **** 		case BMA2x2_HIGH_G_Z_INTR:
2214:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 5240              		.loc 1 2214 0
 5241 00d8 784B     		ldr	r3, .L318
 5242 00da 1B68     		ldr	r3, [r3]
 5243 00dc DD68     		ldr	r5, [r3, #12]
 5244 00de 774B     		ldr	r3, .L318
 5245 00e0 1B68     		ldr	r3, [r3]
 5246 00e2 1879     		ldrb	r0, [r3, #4]
 5247 00e4 0F23     		movs	r3, #15
 5248 00e6 FC18     		adds	r4, r7, r3
 5249 00e8 0E23     		movs	r3, #14
 5250 00ea FA18     		adds	r2, r7, r3
 5251 00ec 0123     		movs	r3, #1
 5252 00ee 1721     		movs	r1, #23
 5253 00f0 A847     		blx	r5
 5254 00f2 0300     		movs	r3, r0
 5255 00f4 2370     		strb	r3, [r4]
2215:bma2x2.c      **** 			(p_bma2x2->dev_addr,
2216:bma2x2.c      **** 			BMA2x2_ENABLE_HIGH_G_Z_INTR_REG,
2217:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 135


2218:bma2x2.c      **** 			*value_u8 = BMA2x2_GET_BITSLICE
 5256              		.loc 1 2218 0
 5257 00f6 0E23     		movs	r3, #14
 5258 00f8 FB18     		adds	r3, r7, r3
 5259 00fa 1B78     		ldrb	r3, [r3]
 5260 00fc 9B10     		asrs	r3, r3, #2
 5261 00fe DBB2     		uxtb	r3, r3
 5262 0100 0122     		movs	r2, #1
 5263 0102 1340     		ands	r3, r2
 5264 0104 DAB2     		uxtb	r2, r3
 5265 0106 3B68     		ldr	r3, [r7]
 5266 0108 1A70     		strb	r2, [r3]
2219:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_HIGH_G_Z_INTR);
2220:bma2x2.c      **** 		break;
 5267              		.loc 1 2220 0
 5268 010a CFE0     		b	.L316
 5269              	.L308:
2221:bma2x2.c      **** 		case BMA2x2_DATA_ENABLE:
2222:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 5270              		.loc 1 2222 0
 5271 010c 6B4B     		ldr	r3, .L318
 5272 010e 1B68     		ldr	r3, [r3]
 5273 0110 DD68     		ldr	r5, [r3, #12]
 5274 0112 6A4B     		ldr	r3, .L318
 5275 0114 1B68     		ldr	r3, [r3]
 5276 0116 1879     		ldrb	r0, [r3, #4]
 5277 0118 0F23     		movs	r3, #15
 5278 011a FC18     		adds	r4, r7, r3
 5279 011c 0E23     		movs	r3, #14
 5280 011e FA18     		adds	r2, r7, r3
 5281 0120 0123     		movs	r3, #1
 5282 0122 1721     		movs	r1, #23
 5283 0124 A847     		blx	r5
 5284 0126 0300     		movs	r3, r0
 5285 0128 2370     		strb	r3, [r4]
2223:bma2x2.c      **** 			(p_bma2x2->dev_addr,
2224:bma2x2.c      **** 			BMA2x2_ENABLE_NEW_DATA_INTR_REG,
2225:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2226:bma2x2.c      **** 			*value_u8 = BMA2x2_GET_BITSLICE
 5286              		.loc 1 2226 0
 5287 012a 0E23     		movs	r3, #14
 5288 012c FB18     		adds	r3, r7, r3
 5289 012e 1B78     		ldrb	r3, [r3]
 5290 0130 1B11     		asrs	r3, r3, #4
 5291 0132 DBB2     		uxtb	r3, r3
 5292 0134 0122     		movs	r2, #1
 5293 0136 1340     		ands	r3, r2
 5294 0138 DAB2     		uxtb	r2, r3
 5295 013a 3B68     		ldr	r3, [r7]
 5296 013c 1A70     		strb	r2, [r3]
2227:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_NEW_DATA_INTR);
2228:bma2x2.c      **** 		break;
 5297              		.loc 1 2228 0
 5298 013e B5E0     		b	.L316
 5299              	.L309:
2229:bma2x2.c      **** 		case BMA2x2_SLOPE_X_INTR:
2230:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 136


 5300              		.loc 1 2230 0
 5301 0140 5E4B     		ldr	r3, .L318
 5302 0142 1B68     		ldr	r3, [r3]
 5303 0144 DD68     		ldr	r5, [r3, #12]
 5304 0146 5D4B     		ldr	r3, .L318
 5305 0148 1B68     		ldr	r3, [r3]
 5306 014a 1879     		ldrb	r0, [r3, #4]
 5307 014c 0F23     		movs	r3, #15
 5308 014e FC18     		adds	r4, r7, r3
 5309 0150 0E23     		movs	r3, #14
 5310 0152 FA18     		adds	r2, r7, r3
 5311 0154 0123     		movs	r3, #1
 5312 0156 1621     		movs	r1, #22
 5313 0158 A847     		blx	r5
 5314 015a 0300     		movs	r3, r0
 5315 015c 2370     		strb	r3, [r4]
2231:bma2x2.c      **** 			(p_bma2x2->dev_addr,
2232:bma2x2.c      **** 			BMA2x2_ENABLE_SLOPE_X_INTR_REG,
2233:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2234:bma2x2.c      **** 			*value_u8 = BMA2x2_GET_BITSLICE
 5316              		.loc 1 2234 0
 5317 015e 0E23     		movs	r3, #14
 5318 0160 FB18     		adds	r3, r7, r3
 5319 0162 1B78     		ldrb	r3, [r3]
 5320 0164 0122     		movs	r2, #1
 5321 0166 1340     		ands	r3, r2
 5322 0168 DAB2     		uxtb	r2, r3
 5323 016a 3B68     		ldr	r3, [r7]
 5324 016c 1A70     		strb	r2, [r3]
2235:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_SLOPE_X_INTR);
2236:bma2x2.c      **** 		break;
 5325              		.loc 1 2236 0
 5326 016e 9DE0     		b	.L316
 5327              	.L310:
2237:bma2x2.c      **** 		case BMA2x2_SLOPE_Y_INTR:
2238:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 5328              		.loc 1 2238 0
 5329 0170 524B     		ldr	r3, .L318
 5330 0172 1B68     		ldr	r3, [r3]
 5331 0174 DD68     		ldr	r5, [r3, #12]
 5332 0176 514B     		ldr	r3, .L318
 5333 0178 1B68     		ldr	r3, [r3]
 5334 017a 1879     		ldrb	r0, [r3, #4]
 5335 017c 0F23     		movs	r3, #15
 5336 017e FC18     		adds	r4, r7, r3
 5337 0180 0E23     		movs	r3, #14
 5338 0182 FA18     		adds	r2, r7, r3
 5339 0184 0123     		movs	r3, #1
 5340 0186 1621     		movs	r1, #22
 5341 0188 A847     		blx	r5
 5342 018a 0300     		movs	r3, r0
 5343 018c 2370     		strb	r3, [r4]
2239:bma2x2.c      **** 			(p_bma2x2->dev_addr,
2240:bma2x2.c      **** 			BMA2x2_ENABLE_SLOPE_Y_INTR_REG,
2241:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2242:bma2x2.c      **** 			*value_u8 = BMA2x2_GET_BITSLICE
 5344              		.loc 1 2242 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 137


 5345 018e 0E23     		movs	r3, #14
 5346 0190 FB18     		adds	r3, r7, r3
 5347 0192 1B78     		ldrb	r3, [r3]
 5348 0194 5B10     		asrs	r3, r3, #1
 5349 0196 DBB2     		uxtb	r3, r3
 5350 0198 0122     		movs	r2, #1
 5351 019a 1340     		ands	r3, r2
 5352 019c DAB2     		uxtb	r2, r3
 5353 019e 3B68     		ldr	r3, [r7]
 5354 01a0 1A70     		strb	r2, [r3]
2243:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_SLOPE_Y_INTR);
2244:bma2x2.c      **** 		break;
 5355              		.loc 1 2244 0
 5356 01a2 83E0     		b	.L316
 5357              	.L311:
2245:bma2x2.c      **** 		case BMA2x2_SLOPE_Z_INTR:
2246:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 5358              		.loc 1 2246 0
 5359 01a4 454B     		ldr	r3, .L318
 5360 01a6 1B68     		ldr	r3, [r3]
 5361 01a8 DD68     		ldr	r5, [r3, #12]
 5362 01aa 444B     		ldr	r3, .L318
 5363 01ac 1B68     		ldr	r3, [r3]
 5364 01ae 1879     		ldrb	r0, [r3, #4]
 5365 01b0 0F23     		movs	r3, #15
 5366 01b2 FC18     		adds	r4, r7, r3
 5367 01b4 0E23     		movs	r3, #14
 5368 01b6 FA18     		adds	r2, r7, r3
 5369 01b8 0123     		movs	r3, #1
 5370 01ba 1621     		movs	r1, #22
 5371 01bc A847     		blx	r5
 5372 01be 0300     		movs	r3, r0
 5373 01c0 2370     		strb	r3, [r4]
2247:bma2x2.c      **** 			(p_bma2x2->dev_addr,
2248:bma2x2.c      **** 			BMA2x2_ENABLE_SLOPE_Z_INTR_REG,
2249:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2250:bma2x2.c      **** 			*value_u8 = BMA2x2_GET_BITSLICE
 5374              		.loc 1 2250 0
 5375 01c2 0E23     		movs	r3, #14
 5376 01c4 FB18     		adds	r3, r7, r3
 5377 01c6 1B78     		ldrb	r3, [r3]
 5378 01c8 9B10     		asrs	r3, r3, #2
 5379 01ca DBB2     		uxtb	r3, r3
 5380 01cc 0122     		movs	r2, #1
 5381 01ce 1340     		ands	r3, r2
 5382 01d0 DAB2     		uxtb	r2, r3
 5383 01d2 3B68     		ldr	r3, [r7]
 5384 01d4 1A70     		strb	r2, [r3]
2251:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_SLOPE_Z_INTR);
2252:bma2x2.c      **** 		break;
 5385              		.loc 1 2252 0
 5386 01d6 69E0     		b	.L316
 5387              	.L312:
2253:bma2x2.c      **** 		case BMA2x2_SINGLE_TAP_INTR:
2254:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 5388              		.loc 1 2254 0
 5389 01d8 384B     		ldr	r3, .L318
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 138


 5390 01da 1B68     		ldr	r3, [r3]
 5391 01dc DD68     		ldr	r5, [r3, #12]
 5392 01de 374B     		ldr	r3, .L318
 5393 01e0 1B68     		ldr	r3, [r3]
 5394 01e2 1879     		ldrb	r0, [r3, #4]
 5395 01e4 0F23     		movs	r3, #15
 5396 01e6 FC18     		adds	r4, r7, r3
 5397 01e8 0E23     		movs	r3, #14
 5398 01ea FA18     		adds	r2, r7, r3
 5399 01ec 0123     		movs	r3, #1
 5400 01ee 1621     		movs	r1, #22
 5401 01f0 A847     		blx	r5
 5402 01f2 0300     		movs	r3, r0
 5403 01f4 2370     		strb	r3, [r4]
2255:bma2x2.c      **** 			(p_bma2x2->dev_addr,
2256:bma2x2.c      **** 			BMA2x2_ENABLE_SINGLE_TAP_INTR_REG,
2257:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2258:bma2x2.c      **** 			*value_u8 = BMA2x2_GET_BITSLICE
 5404              		.loc 1 2258 0
 5405 01f6 0E23     		movs	r3, #14
 5406 01f8 FB18     		adds	r3, r7, r3
 5407 01fa 1B78     		ldrb	r3, [r3]
 5408 01fc 5B11     		asrs	r3, r3, #5
 5409 01fe DBB2     		uxtb	r3, r3
 5410 0200 0122     		movs	r2, #1
 5411 0202 1340     		ands	r3, r2
 5412 0204 DAB2     		uxtb	r2, r3
 5413 0206 3B68     		ldr	r3, [r7]
 5414 0208 1A70     		strb	r2, [r3]
2259:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_SINGLE_TAP_INTR);
2260:bma2x2.c      **** 		break;
 5415              		.loc 1 2260 0
 5416 020a 4FE0     		b	.L316
 5417              	.L313:
2261:bma2x2.c      **** 		case BMA2x2_DOUBLE_TAP_INTR:
2262:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 5418              		.loc 1 2262 0
 5419 020c 2B4B     		ldr	r3, .L318
 5420 020e 1B68     		ldr	r3, [r3]
 5421 0210 DD68     		ldr	r5, [r3, #12]
 5422 0212 2A4B     		ldr	r3, .L318
 5423 0214 1B68     		ldr	r3, [r3]
 5424 0216 1879     		ldrb	r0, [r3, #4]
 5425 0218 0F23     		movs	r3, #15
 5426 021a FC18     		adds	r4, r7, r3
 5427 021c 0E23     		movs	r3, #14
 5428 021e FA18     		adds	r2, r7, r3
 5429 0220 0123     		movs	r3, #1
 5430 0222 1621     		movs	r1, #22
 5431 0224 A847     		blx	r5
 5432 0226 0300     		movs	r3, r0
 5433 0228 2370     		strb	r3, [r4]
2263:bma2x2.c      **** 			(p_bma2x2->dev_addr,
2264:bma2x2.c      **** 			BMA2x2_ENABLE_DOUBLE_TAP_INTR_REG,
2265:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2266:bma2x2.c      **** 			*value_u8 = BMA2x2_GET_BITSLICE
 5434              		.loc 1 2266 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 139


 5435 022a 0E23     		movs	r3, #14
 5436 022c FB18     		adds	r3, r7, r3
 5437 022e 1B78     		ldrb	r3, [r3]
 5438 0230 1B11     		asrs	r3, r3, #4
 5439 0232 DBB2     		uxtb	r3, r3
 5440 0234 0122     		movs	r2, #1
 5441 0236 1340     		ands	r3, r2
 5442 0238 DAB2     		uxtb	r2, r3
 5443 023a 3B68     		ldr	r3, [r7]
 5444 023c 1A70     		strb	r2, [r3]
2267:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_DOUBLE_TAP_INTR);
2268:bma2x2.c      **** 		break;
 5445              		.loc 1 2268 0
 5446 023e 35E0     		b	.L316
 5447              	.L314:
2269:bma2x2.c      **** 		case BMA2x2_ORIENT_INTR:
2270:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 5448              		.loc 1 2270 0
 5449 0240 1E4B     		ldr	r3, .L318
 5450 0242 1B68     		ldr	r3, [r3]
 5451 0244 DD68     		ldr	r5, [r3, #12]
 5452 0246 1D4B     		ldr	r3, .L318
 5453 0248 1B68     		ldr	r3, [r3]
 5454 024a 1879     		ldrb	r0, [r3, #4]
 5455 024c 0F23     		movs	r3, #15
 5456 024e FC18     		adds	r4, r7, r3
 5457 0250 0E23     		movs	r3, #14
 5458 0252 FA18     		adds	r2, r7, r3
 5459 0254 0123     		movs	r3, #1
 5460 0256 1621     		movs	r1, #22
 5461 0258 A847     		blx	r5
 5462 025a 0300     		movs	r3, r0
 5463 025c 2370     		strb	r3, [r4]
2271:bma2x2.c      **** 			(p_bma2x2->dev_addr,
2272:bma2x2.c      **** 			BMA2x2_ENABLE_ORIENT_INTR_REG,
2273:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2274:bma2x2.c      **** 			*value_u8 = BMA2x2_GET_BITSLICE
 5464              		.loc 1 2274 0
 5465 025e 0E23     		movs	r3, #14
 5466 0260 FB18     		adds	r3, r7, r3
 5467 0262 1B78     		ldrb	r3, [r3]
 5468 0264 9B11     		asrs	r3, r3, #6
 5469 0266 DBB2     		uxtb	r3, r3
 5470 0268 0122     		movs	r2, #1
 5471 026a 1340     		ands	r3, r2
 5472 026c DAB2     		uxtb	r2, r3
 5473 026e 3B68     		ldr	r3, [r7]
 5474 0270 1A70     		strb	r2, [r3]
2275:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_ORIENT_INTR);
2276:bma2x2.c      **** 		break;
 5475              		.loc 1 2276 0
 5476 0272 1BE0     		b	.L316
 5477              	.L315:
2277:bma2x2.c      **** 		case BMA2x2_FLAT_INTR:
2278:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 5478              		.loc 1 2278 0
 5479 0274 114B     		ldr	r3, .L318
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 140


 5480 0276 1B68     		ldr	r3, [r3]
 5481 0278 DD68     		ldr	r5, [r3, #12]
 5482 027a 104B     		ldr	r3, .L318
 5483 027c 1B68     		ldr	r3, [r3]
 5484 027e 1879     		ldrb	r0, [r3, #4]
 5485 0280 0F23     		movs	r3, #15
 5486 0282 FC18     		adds	r4, r7, r3
 5487 0284 0E23     		movs	r3, #14
 5488 0286 FA18     		adds	r2, r7, r3
 5489 0288 0123     		movs	r3, #1
 5490 028a 1621     		movs	r1, #22
 5491 028c A847     		blx	r5
 5492 028e 0300     		movs	r3, r0
 5493 0290 2370     		strb	r3, [r4]
2279:bma2x2.c      **** 			(p_bma2x2->dev_addr,
2280:bma2x2.c      **** 			BMA2x2_ENABLE_FLAT_INTR_REG,
2281:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2282:bma2x2.c      **** 			*value_u8 = BMA2x2_GET_BITSLICE
 5494              		.loc 1 2282 0
 5495 0292 0E23     		movs	r3, #14
 5496 0294 FB18     		adds	r3, r7, r3
 5497 0296 1B78     		ldrb	r3, [r3]
 5498 0298 DB09     		lsrs	r3, r3, #7
 5499 029a DAB2     		uxtb	r2, r3
 5500 029c 3B68     		ldr	r3, [r7]
 5501 029e 1A70     		strb	r2, [r3]
2283:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_FLAT_INTR);
2284:bma2x2.c      **** 		break;
 5502              		.loc 1 2284 0
 5503 02a0 04E0     		b	.L316
 5504              	.L302:
2285:bma2x2.c      **** 		default:
2286:bma2x2.c      **** 		com_rslt = E_OUT_OF_RANGE;
 5505              		.loc 1 2286 0
 5506 02a2 0F23     		movs	r3, #15
 5507 02a4 FB18     		adds	r3, r7, r3
 5508 02a6 FE22     		movs	r2, #254
 5509 02a8 1A70     		strb	r2, [r3]
2287:bma2x2.c      **** 		break;
 5510              		.loc 1 2287 0
 5511 02aa C046     		nop
 5512              	.L316:
2288:bma2x2.c      **** 		}
2289:bma2x2.c      **** 	}
2290:bma2x2.c      **** 	return com_rslt;
 5513              		.loc 1 2290 0
 5514 02ac 0F23     		movs	r3, #15
 5515 02ae FB18     		adds	r3, r7, r3
 5516 02b0 1B78     		ldrb	r3, [r3]
 5517 02b2 5BB2     		sxtb	r3, r3
 5518              	.L317:
2291:bma2x2.c      **** }
 5519              		.loc 1 2291 0 discriminator 1
 5520 02b4 1800     		movs	r0, r3
 5521 02b6 BD46     		mov	sp, r7
 5522 02b8 04B0     		add	sp, sp, #16
 5523              		@ sp needed
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 141


 5524 02ba B0BD     		pop	{r4, r5, r7, pc}
 5525              	.L319:
 5526              		.align	2
 5527              	.L318:
 5528 02bc 00000000 		.word	p_bma2x2
 5529 02c0 80000000 		.word	.L304
 5530              		.cfi_endproc
 5531              	.LFE35:
 5532              		.size	bma2x2_get_intr_enable, .-bma2x2_get_intr_enable
 5533              		.section	.text.bma2x2_set_intr_enable,"ax",%progbits
 5534              		.align	2
 5535              		.global	bma2x2_set_intr_enable
 5536              		.code	16
 5537              		.thumb_func
 5538              		.type	bma2x2_set_intr_enable, %function
 5539              	bma2x2_set_intr_enable:
 5540              	.LFB36:
2292:bma2x2.c      **** /*!
2293:bma2x2.c      ****  *	@brief This API is used to set
2294:bma2x2.c      ****  *  interrupt enable bits of the sensor in the registers 0x16 and 0x17
2295:bma2x2.c      ****  *	@note It reads the flat enable, orient enable,
2296:bma2x2.c      ****  *	@note single tap enable, double tap enable
2297:bma2x2.c      ****  *	@note slope-x enable, slope-y enable, slope-z enable,
2298:bma2x2.c      ****  *	@note fifo watermark enable,
2299:bma2x2.c      ****  *	@note fifo full enable, data enable, low-g enable,
2300:bma2x2.c      ****  *	@note high-z enable, high-y enable
2301:bma2x2.c      ****  *	@note high-z enable
2302:bma2x2.c      ****  *
2303:bma2x2.c      ****  *
2304:bma2x2.c      ****  *
2305:bma2x2.c      ****  *  @param intr_type_u8: The value of interrupts
2306:bma2x2.c      ****  *        intr_type_u8   |   result
2307:bma2x2.c      ****  *       ----------------- | ------------------
2308:bma2x2.c      ****  *              0          | BMA2x2_LOW_G_INTR
2309:bma2x2.c      ****  *              1          | BMA2x2_HIGH_G_X_INTR
2310:bma2x2.c      ****  *              2          | BMA2x2_HIGH_G_Y_INTR
2311:bma2x2.c      ****  *              3          | BMA2x2_HIGH_G_Z_INTR
2312:bma2x2.c      ****  *              4          | BMA2x2_DATA_ENABLE
2313:bma2x2.c      ****  *              5          | SLOPE_X_INTR
2314:bma2x2.c      ****  *              6          | SLOPE_Y_INTR
2315:bma2x2.c      ****  *              7          | SLOPE_Z_INTR
2316:bma2x2.c      ****  *              8          | SINGLE_TAP_INTR
2317:bma2x2.c      ****  *              9          | SINGLE_TAP_INTR
2318:bma2x2.c      ****  *              10         | ORIENT_INT
2319:bma2x2.c      ****  *              11         | FLAT_INT
2320:bma2x2.c      ****  *
2321:bma2x2.c      ****  *  @param value_u8 : The value of interrupts enable
2322:bma2x2.c      ****  *        value_u8       |   result
2323:bma2x2.c      ****  *       ----------------- | ------------------
2324:bma2x2.c      ****  *              0x00       | INTR_DISABLE
2325:bma2x2.c      ****  *              0x01       | INTR_ENABLE
2326:bma2x2.c      ****  *
2327:bma2x2.c      ****  *
2328:bma2x2.c      ****  *
2329:bma2x2.c      ****  *
2330:bma2x2.c      ****  *	@return results of bus communication function
2331:bma2x2.c      ****  *	@retval 0 -> Success
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 142


2332:bma2x2.c      ****  *	@retval -1 -> Error
2333:bma2x2.c      ****  *
2334:bma2x2.c      ****  *
2335:bma2x2.c      ****  */
2336:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_intr_enable(u8 intr_type_u8,
2337:bma2x2.c      **** u8 value_u8)
2338:bma2x2.c      **** {
 5541              		.loc 1 2338 0
 5542              		.cfi_startproc
 5543              		@ args = 0, pretend = 0, frame = 16
 5544              		@ frame_needed = 1, uses_anonymous_args = 0
 5545 0000 B0B5     		push	{r4, r5, r7, lr}
 5546              		.cfi_def_cfa_offset 16
 5547              		.cfi_offset 4, -16
 5548              		.cfi_offset 5, -12
 5549              		.cfi_offset 7, -8
 5550              		.cfi_offset 14, -4
 5551 0002 84B0     		sub	sp, sp, #16
 5552              		.cfi_def_cfa_offset 32
 5553 0004 00AF     		add	r7, sp, #0
 5554              		.cfi_def_cfa_register 7
 5555 0006 0200     		movs	r2, r0
 5556 0008 FB1D     		adds	r3, r7, #7
 5557 000a 1A70     		strb	r2, [r3]
 5558 000c BB1D     		adds	r3, r7, #6
 5559 000e 0A1C     		adds	r2, r1, #0
 5560 0010 1A70     		strb	r2, [r3]
2339:bma2x2.c      **** 		/*  Variable used to return value of
2340:bma2x2.c      **** 	communication routine*/
2341:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 5561              		.loc 1 2341 0
 5562 0012 0F23     		movs	r3, #15
 5563 0014 FB18     		adds	r3, r7, r3
 5564 0016 FF22     		movs	r2, #255
 5565 0018 1A70     		strb	r2, [r3]
2342:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 5566              		.loc 1 2342 0
 5567 001a 0E23     		movs	r3, #14
 5568 001c FB18     		adds	r3, r7, r3
 5569 001e 0022     		movs	r2, #0
 5570 0020 1A70     		strb	r2, [r3]
2343:bma2x2.c      **** 	u8 data2_u8 = BMA2x2_INIT_VALUE;
 5571              		.loc 1 2343 0
 5572 0022 0D23     		movs	r3, #13
 5573 0024 FB18     		adds	r3, r7, r3
 5574 0026 0022     		movs	r2, #0
 5575 0028 1A70     		strb	r2, [r3]
2344:bma2x2.c      **** 
2345:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 5576              		.loc 1 2345 0
 5577 002a B04B     		ldr	r3, .L339
 5578 002c 1B68     		ldr	r3, [r3]
 5579 002e 002B     		cmp	r3, #0
 5580 0030 02D1     		bne	.L321
2346:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
2347:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 5581              		.loc 1 2347 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 143


 5582 0032 7F23     		movs	r3, #127
 5583 0034 5B42     		rsbs	r3, r3, #0
 5584 0036 55E1     		b	.L338
 5585              	.L321:
2348:bma2x2.c      **** 		} else {
2349:bma2x2.c      **** 		com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 5586              		.loc 1 2349 0
 5587 0038 AC4B     		ldr	r3, .L339
 5588 003a 1B68     		ldr	r3, [r3]
 5589 003c DD68     		ldr	r5, [r3, #12]
 5590 003e AB4B     		ldr	r3, .L339
 5591 0040 1B68     		ldr	r3, [r3]
 5592 0042 1879     		ldrb	r0, [r3, #4]
 5593 0044 0F23     		movs	r3, #15
 5594 0046 FC18     		adds	r4, r7, r3
 5595 0048 0E23     		movs	r3, #14
 5596 004a FA18     		adds	r2, r7, r3
 5597 004c 0123     		movs	r3, #1
 5598 004e 1621     		movs	r1, #22
 5599 0050 A847     		blx	r5
 5600 0052 0300     		movs	r3, r0
 5601 0054 2370     		strb	r3, [r4]
2350:bma2x2.c      **** 		(p_bma2x2->dev_addr, BMA2x2_INTR_ENABLE1_ADDR,
2351:bma2x2.c      **** 		&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2352:bma2x2.c      **** 		com_rslt += p_bma2x2->BMA2x2_BUS_READ_FUNC
 5602              		.loc 1 2352 0
 5603 0056 A54B     		ldr	r3, .L339
 5604 0058 1B68     		ldr	r3, [r3]
 5605 005a DC68     		ldr	r4, [r3, #12]
 5606 005c A34B     		ldr	r3, .L339
 5607 005e 1B68     		ldr	r3, [r3]
 5608 0060 1879     		ldrb	r0, [r3, #4]
 5609 0062 0D23     		movs	r3, #13
 5610 0064 FA18     		adds	r2, r7, r3
 5611 0066 0123     		movs	r3, #1
 5612 0068 1721     		movs	r1, #23
 5613 006a A047     		blx	r4
 5614 006c 0300     		movs	r3, r0
 5615 006e DAB2     		uxtb	r2, r3
 5616 0070 0F23     		movs	r3, #15
 5617 0072 FB18     		adds	r3, r7, r3
 5618 0074 1B78     		ldrb	r3, [r3]
 5619 0076 D318     		adds	r3, r2, r3
 5620 0078 DAB2     		uxtb	r2, r3
 5621 007a 0F23     		movs	r3, #15
 5622 007c FB18     		adds	r3, r7, r3
 5623 007e 1A70     		strb	r2, [r3]
2353:bma2x2.c      **** 		(p_bma2x2->dev_addr, BMA2x2_INTR_ENABLE2_ADDR,
2354:bma2x2.c      **** 		&data2_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2355:bma2x2.c      **** 		value_u8 = value_u8 & BMA2x2_GEN_READ_WRITE_LENGTH;
 5624              		.loc 1 2355 0
 5625 0080 BB1D     		adds	r3, r7, #6
 5626 0082 BA1D     		adds	r2, r7, #6
 5627 0084 1278     		ldrb	r2, [r2]
 5628 0086 0121     		movs	r1, #1
 5629 0088 0A40     		ands	r2, r1
 5630 008a 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 144


2356:bma2x2.c      **** 		switch (intr_type_u8) {
 5631              		.loc 1 2356 0
 5632 008c FB1D     		adds	r3, r7, #7
 5633 008e 1B78     		ldrb	r3, [r3]
 5634 0090 0B2B     		cmp	r3, #11
 5635 0092 00D9     		bls	.LCB5116
 5636 0094 FBE0     		b	.L323	@long jump
 5637              	.LCB5116:
 5638 0096 9A00     		lsls	r2, r3, #2
 5639 0098 954B     		ldr	r3, .L339+4
 5640 009a D318     		adds	r3, r2, r3
 5641 009c 1B68     		ldr	r3, [r3]
 5642 009e 9F46     		mov	pc, r3
 5643              		.section	.rodata
 5644              		.align	2
 5645              	.L325:
 5646 00b0 A0000000 		.word	.L324
 5647 00b4 CA000000 		.word	.L326
 5648 00b8 F2000000 		.word	.L327
 5649 00bc 1C010000 		.word	.L328
 5650 00c0 46010000 		.word	.L329
 5651 00c4 70010000 		.word	.L330
 5652 00c8 98010000 		.word	.L331
 5653 00cc C2010000 		.word	.L332
 5654 00d0 EC010000 		.word	.L333
 5655 00d4 16020000 		.word	.L334
 5656 00d8 40020000 		.word	.L335
 5657 00dc 6A020000 		.word	.L336
 5658              		.section	.text.bma2x2_set_intr_enable
 5659              	.L324:
2357:bma2x2.c      **** 		case BMA2x2_LOW_G_INTR:
2358:bma2x2.c      **** 			/* Low G Interrupt  */
2359:bma2x2.c      **** 			data2_u8 = BMA2x2_SET_BITSLICE(data2_u8,
 5660              		.loc 1 2359 0
 5661 00a0 0D23     		movs	r3, #13
 5662 00a2 FB18     		adds	r3, r7, r3
 5663 00a4 1B78     		ldrb	r3, [r3]
 5664 00a6 5BB2     		sxtb	r3, r3
 5665 00a8 0822     		movs	r2, #8
 5666 00aa 9343     		bics	r3, r2
 5667 00ac 5AB2     		sxtb	r2, r3
 5668 00ae BB1D     		adds	r3, r7, #6
 5669 00b0 1B78     		ldrb	r3, [r3]
 5670 00b2 DB00     		lsls	r3, r3, #3
 5671 00b4 5BB2     		sxtb	r3, r3
 5672 00b6 0821     		movs	r1, #8
 5673 00b8 0B40     		ands	r3, r1
 5674 00ba 5BB2     		sxtb	r3, r3
 5675 00bc 1343     		orrs	r3, r2
 5676 00be 5BB2     		sxtb	r3, r3
 5677 00c0 DAB2     		uxtb	r2, r3
 5678 00c2 0D23     		movs	r3, #13
 5679 00c4 FB18     		adds	r3, r7, r3
 5680 00c6 1A70     		strb	r2, [r3]
2360:bma2x2.c      **** 			BMA2x2_ENABLE_LOW_G_INTR, value_u8);
2361:bma2x2.c      **** 		break;
 5681              		.loc 1 2361 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 145


 5682 00c8 E6E0     		b	.L337
 5683              	.L326:
2362:bma2x2.c      **** 		case BMA2x2_HIGH_G_X_INTR:
2363:bma2x2.c      **** 			/* High G X Interrupt */
2364:bma2x2.c      **** 			data2_u8 = BMA2x2_SET_BITSLICE(data2_u8,
 5684              		.loc 1 2364 0
 5685 00ca 0D23     		movs	r3, #13
 5686 00cc FB18     		adds	r3, r7, r3
 5687 00ce 1B78     		ldrb	r3, [r3]
 5688 00d0 5BB2     		sxtb	r3, r3
 5689 00d2 0122     		movs	r2, #1
 5690 00d4 9343     		bics	r3, r2
 5691 00d6 5AB2     		sxtb	r2, r3
 5692 00d8 BB1D     		adds	r3, r7, #6
 5693 00da 1B78     		ldrb	r3, [r3]
 5694 00dc 5BB2     		sxtb	r3, r3
 5695 00de 0121     		movs	r1, #1
 5696 00e0 0B40     		ands	r3, r1
 5697 00e2 5BB2     		sxtb	r3, r3
 5698 00e4 1343     		orrs	r3, r2
 5699 00e6 5BB2     		sxtb	r3, r3
 5700 00e8 DAB2     		uxtb	r2, r3
 5701 00ea 0D23     		movs	r3, #13
 5702 00ec FB18     		adds	r3, r7, r3
 5703 00ee 1A70     		strb	r2, [r3]
2365:bma2x2.c      **** 			BMA2x2_ENABLE_HIGH_G_X_INTR, value_u8);
2366:bma2x2.c      **** 		break;
 5704              		.loc 1 2366 0
 5705 00f0 D2E0     		b	.L337
 5706              	.L327:
2367:bma2x2.c      **** 		case BMA2x2_HIGH_G_Y_INTR:
2368:bma2x2.c      **** 			/* High G Y Interrupt */
2369:bma2x2.c      **** 			data2_u8 = BMA2x2_SET_BITSLICE(data2_u8,
 5707              		.loc 1 2369 0
 5708 00f2 0D23     		movs	r3, #13
 5709 00f4 FB18     		adds	r3, r7, r3
 5710 00f6 1B78     		ldrb	r3, [r3]
 5711 00f8 5BB2     		sxtb	r3, r3
 5712 00fa 0222     		movs	r2, #2
 5713 00fc 9343     		bics	r3, r2
 5714 00fe 5AB2     		sxtb	r2, r3
 5715 0100 BB1D     		adds	r3, r7, #6
 5716 0102 1B78     		ldrb	r3, [r3]
 5717 0104 5B00     		lsls	r3, r3, #1
 5718 0106 5BB2     		sxtb	r3, r3
 5719 0108 0221     		movs	r1, #2
 5720 010a 0B40     		ands	r3, r1
 5721 010c 5BB2     		sxtb	r3, r3
 5722 010e 1343     		orrs	r3, r2
 5723 0110 5BB2     		sxtb	r3, r3
 5724 0112 DAB2     		uxtb	r2, r3
 5725 0114 0D23     		movs	r3, #13
 5726 0116 FB18     		adds	r3, r7, r3
 5727 0118 1A70     		strb	r2, [r3]
2370:bma2x2.c      **** 			BMA2x2_ENABLE_HIGH_G_Y_INTR, value_u8);
2371:bma2x2.c      **** 		break;
 5728              		.loc 1 2371 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 146


 5729 011a BDE0     		b	.L337
 5730              	.L328:
2372:bma2x2.c      **** 		case BMA2x2_HIGH_G_Z_INTR:
2373:bma2x2.c      **** 			/* High G Z Interrupt */
2374:bma2x2.c      **** 			data2_u8 = BMA2x2_SET_BITSLICE(data2_u8,
 5731              		.loc 1 2374 0
 5732 011c 0D23     		movs	r3, #13
 5733 011e FB18     		adds	r3, r7, r3
 5734 0120 1B78     		ldrb	r3, [r3]
 5735 0122 5BB2     		sxtb	r3, r3
 5736 0124 0422     		movs	r2, #4
 5737 0126 9343     		bics	r3, r2
 5738 0128 5AB2     		sxtb	r2, r3
 5739 012a BB1D     		adds	r3, r7, #6
 5740 012c 1B78     		ldrb	r3, [r3]
 5741 012e 9B00     		lsls	r3, r3, #2
 5742 0130 5BB2     		sxtb	r3, r3
 5743 0132 0421     		movs	r1, #4
 5744 0134 0B40     		ands	r3, r1
 5745 0136 5BB2     		sxtb	r3, r3
 5746 0138 1343     		orrs	r3, r2
 5747 013a 5BB2     		sxtb	r3, r3
 5748 013c DAB2     		uxtb	r2, r3
 5749 013e 0D23     		movs	r3, #13
 5750 0140 FB18     		adds	r3, r7, r3
 5751 0142 1A70     		strb	r2, [r3]
2375:bma2x2.c      **** 			BMA2x2_ENABLE_HIGH_G_Z_INTR, value_u8);
2376:bma2x2.c      **** 		break;
 5752              		.loc 1 2376 0
 5753 0144 A8E0     		b	.L337
 5754              	.L329:
2377:bma2x2.c      **** 		case BMA2x2_DATA_ENABLE:
2378:bma2x2.c      **** 			/*Data En Interrupt  */
2379:bma2x2.c      **** 			data2_u8 = BMA2x2_SET_BITSLICE(data2_u8,
 5755              		.loc 1 2379 0
 5756 0146 0D23     		movs	r3, #13
 5757 0148 FB18     		adds	r3, r7, r3
 5758 014a 1B78     		ldrb	r3, [r3]
 5759 014c 5BB2     		sxtb	r3, r3
 5760 014e 1022     		movs	r2, #16
 5761 0150 9343     		bics	r3, r2
 5762 0152 5AB2     		sxtb	r2, r3
 5763 0154 BB1D     		adds	r3, r7, #6
 5764 0156 1B78     		ldrb	r3, [r3]
 5765 0158 1B01     		lsls	r3, r3, #4
 5766 015a 5BB2     		sxtb	r3, r3
 5767 015c 1021     		movs	r1, #16
 5768 015e 0B40     		ands	r3, r1
 5769 0160 5BB2     		sxtb	r3, r3
 5770 0162 1343     		orrs	r3, r2
 5771 0164 5BB2     		sxtb	r3, r3
 5772 0166 DAB2     		uxtb	r2, r3
 5773 0168 0D23     		movs	r3, #13
 5774 016a FB18     		adds	r3, r7, r3
 5775 016c 1A70     		strb	r2, [r3]
2380:bma2x2.c      **** 			BMA2x2_ENABLE_NEW_DATA_INTR, value_u8);
2381:bma2x2.c      **** 		break;
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 147


 5776              		.loc 1 2381 0
 5777 016e 93E0     		b	.L337
 5778              	.L330:
2382:bma2x2.c      **** 		case BMA2x2_SLOPE_X_INTR:
2383:bma2x2.c      **** 			/* Slope X Interrupt */
2384:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE(data_u8,
 5779              		.loc 1 2384 0
 5780 0170 0E23     		movs	r3, #14
 5781 0172 FB18     		adds	r3, r7, r3
 5782 0174 1B78     		ldrb	r3, [r3]
 5783 0176 5BB2     		sxtb	r3, r3
 5784 0178 0122     		movs	r2, #1
 5785 017a 9343     		bics	r3, r2
 5786 017c 5AB2     		sxtb	r2, r3
 5787 017e BB1D     		adds	r3, r7, #6
 5788 0180 1B78     		ldrb	r3, [r3]
 5789 0182 5BB2     		sxtb	r3, r3
 5790 0184 0121     		movs	r1, #1
 5791 0186 0B40     		ands	r3, r1
 5792 0188 5BB2     		sxtb	r3, r3
 5793 018a 1343     		orrs	r3, r2
 5794 018c 5BB2     		sxtb	r3, r3
 5795 018e DAB2     		uxtb	r2, r3
 5796 0190 0E23     		movs	r3, #14
 5797 0192 FB18     		adds	r3, r7, r3
 5798 0194 1A70     		strb	r2, [r3]
2385:bma2x2.c      **** 			BMA2x2_ENABLE_SLOPE_X_INTR, value_u8);
2386:bma2x2.c      **** 		break;
 5799              		.loc 1 2386 0
 5800 0196 7FE0     		b	.L337
 5801              	.L331:
2387:bma2x2.c      **** 		case BMA2x2_SLOPE_Y_INTR:
2388:bma2x2.c      **** 			/* Slope Y Interrupt */
2389:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE(data_u8,
 5802              		.loc 1 2389 0
 5803 0198 0E23     		movs	r3, #14
 5804 019a FB18     		adds	r3, r7, r3
 5805 019c 1B78     		ldrb	r3, [r3]
 5806 019e 5BB2     		sxtb	r3, r3
 5807 01a0 0222     		movs	r2, #2
 5808 01a2 9343     		bics	r3, r2
 5809 01a4 5AB2     		sxtb	r2, r3
 5810 01a6 BB1D     		adds	r3, r7, #6
 5811 01a8 1B78     		ldrb	r3, [r3]
 5812 01aa 5B00     		lsls	r3, r3, #1
 5813 01ac 5BB2     		sxtb	r3, r3
 5814 01ae 0221     		movs	r1, #2
 5815 01b0 0B40     		ands	r3, r1
 5816 01b2 5BB2     		sxtb	r3, r3
 5817 01b4 1343     		orrs	r3, r2
 5818 01b6 5BB2     		sxtb	r3, r3
 5819 01b8 DAB2     		uxtb	r2, r3
 5820 01ba 0E23     		movs	r3, #14
 5821 01bc FB18     		adds	r3, r7, r3
 5822 01be 1A70     		strb	r2, [r3]
2390:bma2x2.c      **** 			BMA2x2_ENABLE_SLOPE_Y_INTR, value_u8);
2391:bma2x2.c      **** 		break;
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 148


 5823              		.loc 1 2391 0
 5824 01c0 6AE0     		b	.L337
 5825              	.L332:
2392:bma2x2.c      **** 		case BMA2x2_SLOPE_Z_INTR:
2393:bma2x2.c      **** 			/* Slope Z Interrupt */
2394:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE(data_u8,
 5826              		.loc 1 2394 0
 5827 01c2 0E23     		movs	r3, #14
 5828 01c4 FB18     		adds	r3, r7, r3
 5829 01c6 1B78     		ldrb	r3, [r3]
 5830 01c8 5BB2     		sxtb	r3, r3
 5831 01ca 0422     		movs	r2, #4
 5832 01cc 9343     		bics	r3, r2
 5833 01ce 5AB2     		sxtb	r2, r3
 5834 01d0 BB1D     		adds	r3, r7, #6
 5835 01d2 1B78     		ldrb	r3, [r3]
 5836 01d4 9B00     		lsls	r3, r3, #2
 5837 01d6 5BB2     		sxtb	r3, r3
 5838 01d8 0421     		movs	r1, #4
 5839 01da 0B40     		ands	r3, r1
 5840 01dc 5BB2     		sxtb	r3, r3
 5841 01de 1343     		orrs	r3, r2
 5842 01e0 5BB2     		sxtb	r3, r3
 5843 01e2 DAB2     		uxtb	r2, r3
 5844 01e4 0E23     		movs	r3, #14
 5845 01e6 FB18     		adds	r3, r7, r3
 5846 01e8 1A70     		strb	r2, [r3]
2395:bma2x2.c      **** 			BMA2x2_ENABLE_SLOPE_Z_INTR, value_u8);
2396:bma2x2.c      **** 		break;
 5847              		.loc 1 2396 0
 5848 01ea 55E0     		b	.L337
 5849              	.L333:
2397:bma2x2.c      **** 		case BMA2x2_SINGLE_TAP_INTR:
2398:bma2x2.c      **** 			/* Single Tap Interrupt */
2399:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE(data_u8,
 5850              		.loc 1 2399 0
 5851 01ec 0E23     		movs	r3, #14
 5852 01ee FB18     		adds	r3, r7, r3
 5853 01f0 1B78     		ldrb	r3, [r3]
 5854 01f2 5BB2     		sxtb	r3, r3
 5855 01f4 2022     		movs	r2, #32
 5856 01f6 9343     		bics	r3, r2
 5857 01f8 5AB2     		sxtb	r2, r3
 5858 01fa BB1D     		adds	r3, r7, #6
 5859 01fc 1B78     		ldrb	r3, [r3]
 5860 01fe 5B01     		lsls	r3, r3, #5
 5861 0200 5BB2     		sxtb	r3, r3
 5862 0202 2021     		movs	r1, #32
 5863 0204 0B40     		ands	r3, r1
 5864 0206 5BB2     		sxtb	r3, r3
 5865 0208 1343     		orrs	r3, r2
 5866 020a 5BB2     		sxtb	r3, r3
 5867 020c DAB2     		uxtb	r2, r3
 5868 020e 0E23     		movs	r3, #14
 5869 0210 FB18     		adds	r3, r7, r3
 5870 0212 1A70     		strb	r2, [r3]
2400:bma2x2.c      **** 				BMA2x2_ENABLE_SINGLE_TAP_INTR, value_u8);
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 149


2401:bma2x2.c      **** 		break;
 5871              		.loc 1 2401 0
 5872 0214 40E0     		b	.L337
 5873              	.L334:
2402:bma2x2.c      **** 		case BMA2x2_DOUBLE_TAP_INTR:
2403:bma2x2.c      **** 			/* Double Tap Interrupt */
2404:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE(data_u8,
 5874              		.loc 1 2404 0
 5875 0216 0E23     		movs	r3, #14
 5876 0218 FB18     		adds	r3, r7, r3
 5877 021a 1B78     		ldrb	r3, [r3]
 5878 021c 5BB2     		sxtb	r3, r3
 5879 021e 1022     		movs	r2, #16
 5880 0220 9343     		bics	r3, r2
 5881 0222 5AB2     		sxtb	r2, r3
 5882 0224 BB1D     		adds	r3, r7, #6
 5883 0226 1B78     		ldrb	r3, [r3]
 5884 0228 1B01     		lsls	r3, r3, #4
 5885 022a 5BB2     		sxtb	r3, r3
 5886 022c 1021     		movs	r1, #16
 5887 022e 0B40     		ands	r3, r1
 5888 0230 5BB2     		sxtb	r3, r3
 5889 0232 1343     		orrs	r3, r2
 5890 0234 5BB2     		sxtb	r3, r3
 5891 0236 DAB2     		uxtb	r2, r3
 5892 0238 0E23     		movs	r3, #14
 5893 023a FB18     		adds	r3, r7, r3
 5894 023c 1A70     		strb	r2, [r3]
2405:bma2x2.c      **** 				BMA2x2_ENABLE_DOUBLE_TAP_INTR, value_u8);
2406:bma2x2.c      **** 		break;
 5895              		.loc 1 2406 0
 5896 023e 2BE0     		b	.L337
 5897              	.L335:
2407:bma2x2.c      **** 		case BMA2x2_ORIENT_INTR:
2408:bma2x2.c      **** 			/* Orient Interrupt  */
2409:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE(data_u8,
 5898              		.loc 1 2409 0
 5899 0240 0E23     		movs	r3, #14
 5900 0242 FB18     		adds	r3, r7, r3
 5901 0244 1B78     		ldrb	r3, [r3]
 5902 0246 5BB2     		sxtb	r3, r3
 5903 0248 4022     		movs	r2, #64
 5904 024a 9343     		bics	r3, r2
 5905 024c 5AB2     		sxtb	r2, r3
 5906 024e BB1D     		adds	r3, r7, #6
 5907 0250 1B78     		ldrb	r3, [r3]
 5908 0252 9B01     		lsls	r3, r3, #6
 5909 0254 5BB2     		sxtb	r3, r3
 5910 0256 4021     		movs	r1, #64
 5911 0258 0B40     		ands	r3, r1
 5912 025a 5BB2     		sxtb	r3, r3
 5913 025c 1343     		orrs	r3, r2
 5914 025e 5BB2     		sxtb	r3, r3
 5915 0260 DAB2     		uxtb	r2, r3
 5916 0262 0E23     		movs	r3, #14
 5917 0264 FB18     		adds	r3, r7, r3
 5918 0266 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 150


2410:bma2x2.c      **** 			BMA2x2_ENABLE_ORIENT_INTR, value_u8);
2411:bma2x2.c      **** 		break;
 5919              		.loc 1 2411 0
 5920 0268 16E0     		b	.L337
 5921              	.L336:
2412:bma2x2.c      **** 		case BMA2x2_FLAT_INTR:
2413:bma2x2.c      **** 			/* Flat Interrupt */
2414:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE(data_u8,
 5922              		.loc 1 2414 0
 5923 026a 0E23     		movs	r3, #14
 5924 026c FB18     		adds	r3, r7, r3
 5925 026e 1B78     		ldrb	r3, [r3]
 5926 0270 5BB2     		sxtb	r3, r3
 5927 0272 7F22     		movs	r2, #127
 5928 0274 1340     		ands	r3, r2
 5929 0276 5AB2     		sxtb	r2, r3
 5930 0278 BB1D     		adds	r3, r7, #6
 5931 027a 1B78     		ldrb	r3, [r3]
 5932 027c DB01     		lsls	r3, r3, #7
 5933 027e 5BB2     		sxtb	r3, r3
 5934 0280 1343     		orrs	r3, r2
 5935 0282 5BB2     		sxtb	r3, r3
 5936 0284 DAB2     		uxtb	r2, r3
 5937 0286 0E23     		movs	r3, #14
 5938 0288 FB18     		adds	r3, r7, r3
 5939 028a 1A70     		strb	r2, [r3]
2415:bma2x2.c      **** 			BMA2x2_ENABLE_FLAT_INTR, value_u8);
2416:bma2x2.c      **** 		break;
 5940              		.loc 1 2416 0
 5941 028c 04E0     		b	.L337
 5942              	.L323:
2417:bma2x2.c      **** 		default:
2418:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 5943              		.loc 1 2418 0
 5944 028e 0F23     		movs	r3, #15
 5945 0290 FB18     		adds	r3, r7, r3
 5946 0292 FE22     		movs	r2, #254
 5947 0294 1A70     		strb	r2, [r3]
2419:bma2x2.c      **** 		break;
 5948              		.loc 1 2419 0
 5949 0296 C046     		nop
 5950              	.L337:
2420:bma2x2.c      **** 		}
2421:bma2x2.c      **** 		/* write the interrupt*/
2422:bma2x2.c      **** 		com_rslt += bma2x2_write_reg
 5951              		.loc 1 2422 0
 5952 0298 0E23     		movs	r3, #14
 5953 029a FB18     		adds	r3, r7, r3
 5954 029c 0122     		movs	r2, #1
 5955 029e 1900     		movs	r1, r3
 5956 02a0 1620     		movs	r0, #22
 5957 02a2 FFF7FEFF 		bl	bma2x2_write_reg
 5958 02a6 0300     		movs	r3, r0
 5959 02a8 DAB2     		uxtb	r2, r3
 5960 02aa 0F23     		movs	r3, #15
 5961 02ac FB18     		adds	r3, r7, r3
 5962 02ae 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 151


 5963 02b0 D318     		adds	r3, r2, r3
 5964 02b2 DAB2     		uxtb	r2, r3
 5965 02b4 0F23     		movs	r3, #15
 5966 02b6 FB18     		adds	r3, r7, r3
 5967 02b8 1A70     		strb	r2, [r3]
2423:bma2x2.c      **** 		(BMA2x2_INTR_ENABLE1_ADDR,
2424:bma2x2.c      **** 		&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2425:bma2x2.c      **** 		com_rslt += bma2x2_write_reg
 5968              		.loc 1 2425 0
 5969 02ba 0D23     		movs	r3, #13
 5970 02bc FB18     		adds	r3, r7, r3
 5971 02be 0122     		movs	r2, #1
 5972 02c0 1900     		movs	r1, r3
 5973 02c2 1720     		movs	r0, #23
 5974 02c4 FFF7FEFF 		bl	bma2x2_write_reg
 5975 02c8 0300     		movs	r3, r0
 5976 02ca DAB2     		uxtb	r2, r3
 5977 02cc 0F23     		movs	r3, #15
 5978 02ce FB18     		adds	r3, r7, r3
 5979 02d0 1B78     		ldrb	r3, [r3]
 5980 02d2 D318     		adds	r3, r2, r3
 5981 02d4 DAB2     		uxtb	r2, r3
 5982 02d6 0F23     		movs	r3, #15
 5983 02d8 FB18     		adds	r3, r7, r3
 5984 02da 1A70     		strb	r2, [r3]
2426:bma2x2.c      **** 		(BMA2x2_INTR_ENABLE2_ADDR,
2427:bma2x2.c      **** 		&data2_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2428:bma2x2.c      **** 	}
2429:bma2x2.c      **** 	return com_rslt;
 5985              		.loc 1 2429 0
 5986 02dc 0F23     		movs	r3, #15
 5987 02de FB18     		adds	r3, r7, r3
 5988 02e0 1B78     		ldrb	r3, [r3]
 5989 02e2 5BB2     		sxtb	r3, r3
 5990              	.L338:
2430:bma2x2.c      **** }
 5991              		.loc 1 2430 0 discriminator 1
 5992 02e4 1800     		movs	r0, r3
 5993 02e6 BD46     		mov	sp, r7
 5994 02e8 04B0     		add	sp, sp, #16
 5995              		@ sp needed
 5996 02ea B0BD     		pop	{r4, r5, r7, pc}
 5997              	.L340:
 5998              		.align	2
 5999              	.L339:
 6000 02ec 00000000 		.word	p_bma2x2
 6001 02f0 B0000000 		.word	.L325
 6002              		.cfi_endproc
 6003              	.LFE36:
 6004              		.size	bma2x2_set_intr_enable, .-bma2x2_set_intr_enable
 6005              		.section	.text.bma2x2_get_intr_fifo_full,"ax",%progbits
 6006              		.align	2
 6007              		.global	bma2x2_get_intr_fifo_full
 6008              		.code	16
 6009              		.thumb_func
 6010              		.type	bma2x2_get_intr_fifo_full, %function
 6011              	bma2x2_get_intr_fifo_full:
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 152


 6012              	.LFB37:
2431:bma2x2.c      **** /*!
2432:bma2x2.c      ****  *	@brief This API is used to get
2433:bma2x2.c      ****  *	the interrupt fifo full enable interrupt status
2434:bma2x2.c      ****  *	in the register 0x17 bit 5
2435:bma2x2.c      ****  *
2436:bma2x2.c      ****  *
2437:bma2x2.c      ****  *  @param fifo_full_u8 The value of fifo full interrupt enable
2438:bma2x2.c      ****  *        fifo_full_u8   |   result
2439:bma2x2.c      ****  *       ----------------- | ------------------
2440:bma2x2.c      ****  *              0x00       | INTR_DISABLE
2441:bma2x2.c      ****  *              0x01       | INTR_ENABLE
2442:bma2x2.c      ****  *
2443:bma2x2.c      ****  *
2444:bma2x2.c      ****  *
2445:bma2x2.c      ****  *	@return results of bus communication function
2446:bma2x2.c      ****  *	@retval 0 -> Success
2447:bma2x2.c      ****  *	@retval -1 -> Error
2448:bma2x2.c      ****  *
2449:bma2x2.c      ****  *
2450:bma2x2.c      ****  */
2451:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_intr_fifo_full(u8 *fifo_full_u8)
2452:bma2x2.c      **** {
 6013              		.loc 1 2452 0
 6014              		.cfi_startproc
 6015              		@ args = 0, pretend = 0, frame = 16
 6016              		@ frame_needed = 1, uses_anonymous_args = 0
 6017 0000 B0B5     		push	{r4, r5, r7, lr}
 6018              		.cfi_def_cfa_offset 16
 6019              		.cfi_offset 4, -16
 6020              		.cfi_offset 5, -12
 6021              		.cfi_offset 7, -8
 6022              		.cfi_offset 14, -4
 6023 0002 84B0     		sub	sp, sp, #16
 6024              		.cfi_def_cfa_offset 32
 6025 0004 00AF     		add	r7, sp, #0
 6026              		.cfi_def_cfa_register 7
 6027 0006 7860     		str	r0, [r7, #4]
2453:bma2x2.c      **** 	/*  Variable used to return value of
2454:bma2x2.c      **** 	communication routine*/
2455:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 6028              		.loc 1 2455 0
 6029 0008 0F23     		movs	r3, #15
 6030 000a FB18     		adds	r3, r7, r3
 6031 000c FF22     		movs	r2, #255
 6032 000e 1A70     		strb	r2, [r3]
2456:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 6033              		.loc 1 2456 0
 6034 0010 0E23     		movs	r3, #14
 6035 0012 FB18     		adds	r3, r7, r3
 6036 0014 0022     		movs	r2, #0
 6037 0016 1A70     		strb	r2, [r3]
2457:bma2x2.c      **** 
2458:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 6038              		.loc 1 2458 0
 6039 0018 134B     		ldr	r3, .L345
 6040 001a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 153


 6041 001c 002B     		cmp	r3, #0
 6042 001e 02D1     		bne	.L342
2459:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
2460:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 6043              		.loc 1 2460 0
 6044 0020 7F23     		movs	r3, #127
 6045 0022 5B42     		rsbs	r3, r3, #0
 6046 0024 1CE0     		b	.L344
 6047              	.L342:
2461:bma2x2.c      **** 		} else {
2462:bma2x2.c      **** 			/* Read fifo full interrupt */
2463:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 6048              		.loc 1 2463 0
 6049 0026 104B     		ldr	r3, .L345
 6050 0028 1B68     		ldr	r3, [r3]
 6051 002a DD68     		ldr	r5, [r3, #12]
 6052 002c 0E4B     		ldr	r3, .L345
 6053 002e 1B68     		ldr	r3, [r3]
 6054 0030 1879     		ldrb	r0, [r3, #4]
 6055 0032 0F23     		movs	r3, #15
 6056 0034 FC18     		adds	r4, r7, r3
 6057 0036 0E23     		movs	r3, #14
 6058 0038 FA18     		adds	r2, r7, r3
 6059 003a 0123     		movs	r3, #1
 6060 003c 1721     		movs	r1, #23
 6061 003e A847     		blx	r5
 6062 0040 0300     		movs	r3, r0
 6063 0042 2370     		strb	r3, [r4]
2464:bma2x2.c      **** 			(p_bma2x2->dev_addr,
2465:bma2x2.c      **** 			BMA2x2_INTR_FIFO_FULL_ENABLE_INTR_REG,
2466:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2467:bma2x2.c      **** 			*fifo_full_u8 = BMA2x2_GET_BITSLICE(data_u8,
 6064              		.loc 1 2467 0
 6065 0044 0E23     		movs	r3, #14
 6066 0046 FB18     		adds	r3, r7, r3
 6067 0048 1B78     		ldrb	r3, [r3]
 6068 004a 5B11     		asrs	r3, r3, #5
 6069 004c DBB2     		uxtb	r3, r3
 6070 004e 0122     		movs	r2, #1
 6071 0050 1340     		ands	r3, r2
 6072 0052 DAB2     		uxtb	r2, r3
 6073 0054 7B68     		ldr	r3, [r7, #4]
 6074 0056 1A70     		strb	r2, [r3]
2468:bma2x2.c      **** 			BMA2x2_INTR_FIFO_FULL_ENABLE_INTR);
2469:bma2x2.c      **** 		}
2470:bma2x2.c      **** 	return com_rslt;
 6075              		.loc 1 2470 0
 6076 0058 0F23     		movs	r3, #15
 6077 005a FB18     		adds	r3, r7, r3
 6078 005c 1B78     		ldrb	r3, [r3]
 6079 005e 5BB2     		sxtb	r3, r3
 6080              	.L344:
2471:bma2x2.c      **** }
 6081              		.loc 1 2471 0 discriminator 1
 6082 0060 1800     		movs	r0, r3
 6083 0062 BD46     		mov	sp, r7
 6084 0064 04B0     		add	sp, sp, #16
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 154


 6085              		@ sp needed
 6086 0066 B0BD     		pop	{r4, r5, r7, pc}
 6087              	.L346:
 6088              		.align	2
 6089              	.L345:
 6090 0068 00000000 		.word	p_bma2x2
 6091              		.cfi_endproc
 6092              	.LFE37:
 6093              		.size	bma2x2_get_intr_fifo_full, .-bma2x2_get_intr_fifo_full
 6094              		.section	.text.bma2x2_set_intr_fifo_full,"ax",%progbits
 6095              		.align	2
 6096              		.global	bma2x2_set_intr_fifo_full
 6097              		.code	16
 6098              		.thumb_func
 6099              		.type	bma2x2_set_intr_fifo_full, %function
 6100              	bma2x2_set_intr_fifo_full:
 6101              	.LFB38:
2472:bma2x2.c      **** /*!
2473:bma2x2.c      ****  *	@brief This API is used to set
2474:bma2x2.c      ****  *	the interrupt fifo full enable interrupt status
2475:bma2x2.c      ****  *	in the register 0x17 bit 5
2476:bma2x2.c      ****  *
2477:bma2x2.c      ****  *
2478:bma2x2.c      ****  *  @param fifo_full_u8 The value of fifo full interrupt enable
2479:bma2x2.c      ****  *        fifo_full_u8   |   result
2480:bma2x2.c      ****  *       ----------------- | ------------------
2481:bma2x2.c      ****  *              0x00       | INTR_DISABLE
2482:bma2x2.c      ****  *              0x01       | INTR_ENABLE
2483:bma2x2.c      ****  *
2484:bma2x2.c      ****  *
2485:bma2x2.c      ****  *
2486:bma2x2.c      ****  *	@return results of bus communication function
2487:bma2x2.c      ****  *	@retval 0 -> Success
2488:bma2x2.c      ****  *	@retval -1 -> Error
2489:bma2x2.c      ****  *
2490:bma2x2.c      ****  *
2491:bma2x2.c      ****  */
2492:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_intr_fifo_full(u8 fifo_full_u8)
2493:bma2x2.c      **** {
 6102              		.loc 1 2493 0
 6103              		.cfi_startproc
 6104              		@ args = 0, pretend = 0, frame = 16
 6105              		@ frame_needed = 1, uses_anonymous_args = 0
 6106 0000 B0B5     		push	{r4, r5, r7, lr}
 6107              		.cfi_def_cfa_offset 16
 6108              		.cfi_offset 4, -16
 6109              		.cfi_offset 5, -12
 6110              		.cfi_offset 7, -8
 6111              		.cfi_offset 14, -4
 6112 0002 84B0     		sub	sp, sp, #16
 6113              		.cfi_def_cfa_offset 32
 6114 0004 00AF     		add	r7, sp, #0
 6115              		.cfi_def_cfa_register 7
 6116 0006 0200     		movs	r2, r0
 6117 0008 FB1D     		adds	r3, r7, #7
 6118 000a 1A70     		strb	r2, [r3]
2494:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 155


 6119              		.loc 1 2494 0
 6120 000c 0E23     		movs	r3, #14
 6121 000e FB18     		adds	r3, r7, r3
 6122 0010 0022     		movs	r2, #0
 6123 0012 1A70     		strb	r2, [r3]
2495:bma2x2.c      **** 		/*  Variable used to return value of
2496:bma2x2.c      **** 	communication routine*/
2497:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 6124              		.loc 1 2497 0
 6125 0014 0F23     		movs	r3, #15
 6126 0016 FB18     		adds	r3, r7, r3
 6127 0018 FF22     		movs	r2, #255
 6128 001a 1A70     		strb	r2, [r3]
2498:bma2x2.c      **** 
2499:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 6129              		.loc 1 2499 0
 6130 001c 254B     		ldr	r3, .L353
 6131 001e 1B68     		ldr	r3, [r3]
 6132 0020 002B     		cmp	r3, #0
 6133 0022 02D1     		bne	.L348
2500:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
2501:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 6134              		.loc 1 2501 0
 6135 0024 7F23     		movs	r3, #127
 6136 0026 5B42     		rsbs	r3, r3, #0
 6137 0028 40E0     		b	.L352
 6138              	.L348:
2502:bma2x2.c      **** 		} else {
2503:bma2x2.c      **** 		if (fifo_full_u8 < BMA2x2_FIFO_MODE_STATUS_RANGE) {
 6139              		.loc 1 2503 0
 6140 002a FB1D     		adds	r3, r7, #7
 6141 002c 1B78     		ldrb	r3, [r3]
 6142 002e 012B     		cmp	r3, #1
 6143 0030 34D8     		bhi	.L350
2504:bma2x2.c      **** 			/* Write fifo full interrupt */
2505:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 6144              		.loc 1 2505 0
 6145 0032 204B     		ldr	r3, .L353
 6146 0034 1B68     		ldr	r3, [r3]
 6147 0036 DD68     		ldr	r5, [r3, #12]
 6148 0038 1E4B     		ldr	r3, .L353
 6149 003a 1B68     		ldr	r3, [r3]
 6150 003c 1879     		ldrb	r0, [r3, #4]
 6151 003e 0F23     		movs	r3, #15
 6152 0040 FC18     		adds	r4, r7, r3
 6153 0042 0E23     		movs	r3, #14
 6154 0044 FA18     		adds	r2, r7, r3
 6155 0046 0123     		movs	r3, #1
 6156 0048 1721     		movs	r1, #23
 6157 004a A847     		blx	r5
 6158 004c 0300     		movs	r3, r0
 6159 004e 2370     		strb	r3, [r4]
2506:bma2x2.c      **** 			(p_bma2x2->dev_addr,
2507:bma2x2.c      **** 			BMA2x2_INTR_FIFO_FULL_ENABLE_INTR_REG,
2508:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2509:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 6160              		.loc 1 2509 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 156


 6161 0050 0E23     		movs	r3, #14
 6162 0052 FB18     		adds	r3, r7, r3
 6163 0054 1B78     		ldrb	r3, [r3]
 6164 0056 5BB2     		sxtb	r3, r3
 6165 0058 2022     		movs	r2, #32
 6166 005a 9343     		bics	r3, r2
 6167 005c 5AB2     		sxtb	r2, r3
 6168 005e FB1D     		adds	r3, r7, #7
 6169 0060 1B78     		ldrb	r3, [r3]
 6170 0062 5B01     		lsls	r3, r3, #5
 6171 0064 5BB2     		sxtb	r3, r3
 6172 0066 2021     		movs	r1, #32
 6173 0068 0B40     		ands	r3, r1
 6174 006a 5BB2     		sxtb	r3, r3
 6175 006c 1343     		orrs	r3, r2
 6176 006e 5BB2     		sxtb	r3, r3
 6177 0070 DAB2     		uxtb	r2, r3
 6178 0072 0E23     		movs	r3, #14
 6179 0074 FB18     		adds	r3, r7, r3
 6180 0076 1A70     		strb	r2, [r3]
2510:bma2x2.c      **** 			(data_u8, BMA2x2_INTR_FIFO_FULL_ENABLE_INTR,
2511:bma2x2.c      **** 			fifo_full_u8);
2512:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 6181              		.loc 1 2512 0
 6182 0078 0E23     		movs	r3, #14
 6183 007a FB18     		adds	r3, r7, r3
 6184 007c 0122     		movs	r2, #1
 6185 007e 1900     		movs	r1, r3
 6186 0080 1720     		movs	r0, #23
 6187 0082 FFF7FEFF 		bl	bma2x2_write_reg
 6188 0086 0300     		movs	r3, r0
 6189 0088 DAB2     		uxtb	r2, r3
 6190 008a 0F23     		movs	r3, #15
 6191 008c FB18     		adds	r3, r7, r3
 6192 008e 1B78     		ldrb	r3, [r3]
 6193 0090 D318     		adds	r3, r2, r3
 6194 0092 DAB2     		uxtb	r2, r3
 6195 0094 0F23     		movs	r3, #15
 6196 0096 FB18     		adds	r3, r7, r3
 6197 0098 1A70     		strb	r2, [r3]
 6198 009a 03E0     		b	.L351
 6199              	.L350:
2513:bma2x2.c      **** 			BMA2x2_INTR_FIFO_FULL_ENABLE_INTR_REG,
2514:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2515:bma2x2.c      **** 		} else {
2516:bma2x2.c      **** 		com_rslt = E_OUT_OF_RANGE;
 6200              		.loc 1 2516 0
 6201 009c 0F23     		movs	r3, #15
 6202 009e FB18     		adds	r3, r7, r3
 6203 00a0 FE22     		movs	r2, #254
 6204 00a2 1A70     		strb	r2, [r3]
 6205              	.L351:
2517:bma2x2.c      **** 		}
2518:bma2x2.c      **** 	}
2519:bma2x2.c      **** 	return com_rslt;
 6206              		.loc 1 2519 0
 6207 00a4 0F23     		movs	r3, #15
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 157


 6208 00a6 FB18     		adds	r3, r7, r3
 6209 00a8 1B78     		ldrb	r3, [r3]
 6210 00aa 5BB2     		sxtb	r3, r3
 6211              	.L352:
2520:bma2x2.c      **** }
 6212              		.loc 1 2520 0 discriminator 1
 6213 00ac 1800     		movs	r0, r3
 6214 00ae BD46     		mov	sp, r7
 6215 00b0 04B0     		add	sp, sp, #16
 6216              		@ sp needed
 6217 00b2 B0BD     		pop	{r4, r5, r7, pc}
 6218              	.L354:
 6219              		.align	2
 6220              	.L353:
 6221 00b4 00000000 		.word	p_bma2x2
 6222              		.cfi_endproc
 6223              	.LFE38:
 6224              		.size	bma2x2_set_intr_fifo_full, .-bma2x2_set_intr_fifo_full
 6225              		.section	.text.bma2x2_get_intr_fifo_wm,"ax",%progbits
 6226              		.align	2
 6227              		.global	bma2x2_get_intr_fifo_wm
 6228              		.code	16
 6229              		.thumb_func
 6230              		.type	bma2x2_get_intr_fifo_wm, %function
 6231              	bma2x2_get_intr_fifo_wm:
 6232              	.LFB39:
2521:bma2x2.c      **** /*!
2522:bma2x2.c      ****  * @brief This API is used to get
2523:bma2x2.c      ****  *	the interrupt fifo watermark enable interrupt status
2524:bma2x2.c      ****  *	in the register 0x17 bit 6
2525:bma2x2.c      ****  *
2526:bma2x2.c      ****  *
2527:bma2x2.c      ****  *
2528:bma2x2.c      ****  *
2529:bma2x2.c      ****  *  @param fifo_wm_u8 : the value FIFO Water Mark
2530:bma2x2.c      ****  *        fifo_wm_u8     |   result
2531:bma2x2.c      ****  *       ----------------- | ------------------
2532:bma2x2.c      ****  *              0x00       | INTR_DISABLE
2533:bma2x2.c      ****  *              0x01       | INTR_ENABLE
2534:bma2x2.c      ****  *
2535:bma2x2.c      ****  *
2536:bma2x2.c      ****  *
2537:bma2x2.c      ****  *	@return results of bus communication function
2538:bma2x2.c      ****  *	@retval 0 -> Success
2539:bma2x2.c      ****  *	@retval -1 -> Error
2540:bma2x2.c      ****  *
2541:bma2x2.c      ****  *
2542:bma2x2.c      ****  */
2543:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_intr_fifo_wm(u8 *fifo_wm_u8)
2544:bma2x2.c      **** {
 6233              		.loc 1 2544 0
 6234              		.cfi_startproc
 6235              		@ args = 0, pretend = 0, frame = 16
 6236              		@ frame_needed = 1, uses_anonymous_args = 0
 6237 0000 B0B5     		push	{r4, r5, r7, lr}
 6238              		.cfi_def_cfa_offset 16
 6239              		.cfi_offset 4, -16
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 158


 6240              		.cfi_offset 5, -12
 6241              		.cfi_offset 7, -8
 6242              		.cfi_offset 14, -4
 6243 0002 84B0     		sub	sp, sp, #16
 6244              		.cfi_def_cfa_offset 32
 6245 0004 00AF     		add	r7, sp, #0
 6246              		.cfi_def_cfa_register 7
 6247 0006 7860     		str	r0, [r7, #4]
2545:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 6248              		.loc 1 2545 0
 6249 0008 0E23     		movs	r3, #14
 6250 000a FB18     		adds	r3, r7, r3
 6251 000c 0022     		movs	r2, #0
 6252 000e 1A70     		strb	r2, [r3]
2546:bma2x2.c      **** 		/*  Variable used to return value of
2547:bma2x2.c      **** 	communication routine*/
2548:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 6253              		.loc 1 2548 0
 6254 0010 0F23     		movs	r3, #15
 6255 0012 FB18     		adds	r3, r7, r3
 6256 0014 FF22     		movs	r2, #255
 6257 0016 1A70     		strb	r2, [r3]
2549:bma2x2.c      **** 
2550:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 6258              		.loc 1 2550 0
 6259 0018 134B     		ldr	r3, .L359
 6260 001a 1B68     		ldr	r3, [r3]
 6261 001c 002B     		cmp	r3, #0
 6262 001e 02D1     		bne	.L356
2551:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
2552:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 6263              		.loc 1 2552 0
 6264 0020 7F23     		movs	r3, #127
 6265 0022 5B42     		rsbs	r3, r3, #0
 6266 0024 1CE0     		b	.L358
 6267              	.L356:
2553:bma2x2.c      **** 		} else {
2554:bma2x2.c      **** 			/* Read the fifo water mark*/
2555:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 6268              		.loc 1 2555 0
 6269 0026 104B     		ldr	r3, .L359
 6270 0028 1B68     		ldr	r3, [r3]
 6271 002a DD68     		ldr	r5, [r3, #12]
 6272 002c 0E4B     		ldr	r3, .L359
 6273 002e 1B68     		ldr	r3, [r3]
 6274 0030 1879     		ldrb	r0, [r3, #4]
 6275 0032 0F23     		movs	r3, #15
 6276 0034 FC18     		adds	r4, r7, r3
 6277 0036 0E23     		movs	r3, #14
 6278 0038 FA18     		adds	r2, r7, r3
 6279 003a 0123     		movs	r3, #1
 6280 003c 1721     		movs	r1, #23
 6281 003e A847     		blx	r5
 6282 0040 0300     		movs	r3, r0
 6283 0042 2370     		strb	r3, [r4]
2556:bma2x2.c      **** 			(p_bma2x2->dev_addr,
2557:bma2x2.c      **** 			BMA2x2_INTR_FIFO_WM_ENABLE_INTR_REG,
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 159


2558:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2559:bma2x2.c      **** 			*fifo_wm_u8 = BMA2x2_GET_BITSLICE
 6284              		.loc 1 2559 0
 6285 0044 0E23     		movs	r3, #14
 6286 0046 FB18     		adds	r3, r7, r3
 6287 0048 1B78     		ldrb	r3, [r3]
 6288 004a 9B11     		asrs	r3, r3, #6
 6289 004c DBB2     		uxtb	r3, r3
 6290 004e 0122     		movs	r2, #1
 6291 0050 1340     		ands	r3, r2
 6292 0052 DAB2     		uxtb	r2, r3
 6293 0054 7B68     		ldr	r3, [r7, #4]
 6294 0056 1A70     		strb	r2, [r3]
2560:bma2x2.c      **** 			(data_u8, BMA2x2_INTR_FIFO_WM_ENABLE_INTR);
2561:bma2x2.c      **** 		}
2562:bma2x2.c      **** 	return com_rslt;
 6295              		.loc 1 2562 0
 6296 0058 0F23     		movs	r3, #15
 6297 005a FB18     		adds	r3, r7, r3
 6298 005c 1B78     		ldrb	r3, [r3]
 6299 005e 5BB2     		sxtb	r3, r3
 6300              	.L358:
2563:bma2x2.c      **** }
 6301              		.loc 1 2563 0 discriminator 1
 6302 0060 1800     		movs	r0, r3
 6303 0062 BD46     		mov	sp, r7
 6304 0064 04B0     		add	sp, sp, #16
 6305              		@ sp needed
 6306 0066 B0BD     		pop	{r4, r5, r7, pc}
 6307              	.L360:
 6308              		.align	2
 6309              	.L359:
 6310 0068 00000000 		.word	p_bma2x2
 6311              		.cfi_endproc
 6312              	.LFE39:
 6313              		.size	bma2x2_get_intr_fifo_wm, .-bma2x2_get_intr_fifo_wm
 6314              		.section	.text.bma2x2_set_intr_fifo_wm,"ax",%progbits
 6315              		.align	2
 6316              		.global	bma2x2_set_intr_fifo_wm
 6317              		.code	16
 6318              		.thumb_func
 6319              		.type	bma2x2_set_intr_fifo_wm, %function
 6320              	bma2x2_set_intr_fifo_wm:
 6321              	.LFB40:
2564:bma2x2.c      **** /*!
2565:bma2x2.c      ****  * @brief This API is used to set
2566:bma2x2.c      ****  *	the interrupt fifo watermark enable interrupt status
2567:bma2x2.c      ****  *	in the register 0x17 bit 6
2568:bma2x2.c      ****  *
2569:bma2x2.c      ****  *
2570:bma2x2.c      ****  *
2571:bma2x2.c      ****  *
2572:bma2x2.c      ****  *  @param fifo_wm_u8 : the value FIFO Water Mark
2573:bma2x2.c      ****  *        fifo_wm_u8     |   result
2574:bma2x2.c      ****  *       ----------------- | ------------------
2575:bma2x2.c      ****  *              0x00       | INTR_DISABLE
2576:bma2x2.c      ****  *              0x01       | INTR_ENABLE
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 160


2577:bma2x2.c      ****  *
2578:bma2x2.c      ****  *
2579:bma2x2.c      ****  *
2580:bma2x2.c      ****  *	@return results of bus communication function
2581:bma2x2.c      ****  *	@retval 0 -> Success
2582:bma2x2.c      ****  *	@retval -1 -> Error
2583:bma2x2.c      ****  *
2584:bma2x2.c      ****  *
2585:bma2x2.c      ****  */
2586:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_intr_fifo_wm(u8 fifo_wm_u8)
2587:bma2x2.c      **** {
 6322              		.loc 1 2587 0
 6323              		.cfi_startproc
 6324              		@ args = 0, pretend = 0, frame = 16
 6325              		@ frame_needed = 1, uses_anonymous_args = 0
 6326 0000 B0B5     		push	{r4, r5, r7, lr}
 6327              		.cfi_def_cfa_offset 16
 6328              		.cfi_offset 4, -16
 6329              		.cfi_offset 5, -12
 6330              		.cfi_offset 7, -8
 6331              		.cfi_offset 14, -4
 6332 0002 84B0     		sub	sp, sp, #16
 6333              		.cfi_def_cfa_offset 32
 6334 0004 00AF     		add	r7, sp, #0
 6335              		.cfi_def_cfa_register 7
 6336 0006 0200     		movs	r2, r0
 6337 0008 FB1D     		adds	r3, r7, #7
 6338 000a 1A70     		strb	r2, [r3]
2588:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 6339              		.loc 1 2588 0
 6340 000c 0E23     		movs	r3, #14
 6341 000e FB18     		adds	r3, r7, r3
 6342 0010 0022     		movs	r2, #0
 6343 0012 1A70     		strb	r2, [r3]
2589:bma2x2.c      **** 		/*  Variable used to return value of
2590:bma2x2.c      **** 	communication routine*/
2591:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 6344              		.loc 1 2591 0
 6345 0014 0F23     		movs	r3, #15
 6346 0016 FB18     		adds	r3, r7, r3
 6347 0018 FF22     		movs	r2, #255
 6348 001a 1A70     		strb	r2, [r3]
2592:bma2x2.c      **** 
2593:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 6349              		.loc 1 2593 0
 6350 001c 254B     		ldr	r3, .L367
 6351 001e 1B68     		ldr	r3, [r3]
 6352 0020 002B     		cmp	r3, #0
 6353 0022 02D1     		bne	.L362
2594:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
2595:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 6354              		.loc 1 2595 0
 6355 0024 7F23     		movs	r3, #127
 6356 0026 5B42     		rsbs	r3, r3, #0
 6357 0028 40E0     		b	.L366
 6358              	.L362:
2596:bma2x2.c      **** 		} else {
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 161


2597:bma2x2.c      **** 		if (fifo_wm_u8 < BMA2x2_FIFO_MODE_STATUS_RANGE) {
 6359              		.loc 1 2597 0
 6360 002a FB1D     		adds	r3, r7, #7
 6361 002c 1B78     		ldrb	r3, [r3]
 6362 002e 012B     		cmp	r3, #1
 6363 0030 34D8     		bhi	.L364
2598:bma2x2.c      **** 			/* Write the fifo water mark interrupt*/
2599:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 6364              		.loc 1 2599 0
 6365 0032 204B     		ldr	r3, .L367
 6366 0034 1B68     		ldr	r3, [r3]
 6367 0036 DD68     		ldr	r5, [r3, #12]
 6368 0038 1E4B     		ldr	r3, .L367
 6369 003a 1B68     		ldr	r3, [r3]
 6370 003c 1879     		ldrb	r0, [r3, #4]
 6371 003e 0F23     		movs	r3, #15
 6372 0040 FC18     		adds	r4, r7, r3
 6373 0042 0E23     		movs	r3, #14
 6374 0044 FA18     		adds	r2, r7, r3
 6375 0046 0123     		movs	r3, #1
 6376 0048 1721     		movs	r1, #23
 6377 004a A847     		blx	r5
 6378 004c 0300     		movs	r3, r0
 6379 004e 2370     		strb	r3, [r4]
2600:bma2x2.c      **** 			(p_bma2x2->dev_addr,
2601:bma2x2.c      **** 			BMA2x2_INTR_FIFO_WM_ENABLE_INTR_REG,
2602:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2603:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 6380              		.loc 1 2603 0
 6381 0050 0E23     		movs	r3, #14
 6382 0052 FB18     		adds	r3, r7, r3
 6383 0054 1B78     		ldrb	r3, [r3]
 6384 0056 5BB2     		sxtb	r3, r3
 6385 0058 4022     		movs	r2, #64
 6386 005a 9343     		bics	r3, r2
 6387 005c 5AB2     		sxtb	r2, r3
 6388 005e FB1D     		adds	r3, r7, #7
 6389 0060 1B78     		ldrb	r3, [r3]
 6390 0062 9B01     		lsls	r3, r3, #6
 6391 0064 5BB2     		sxtb	r3, r3
 6392 0066 4021     		movs	r1, #64
 6393 0068 0B40     		ands	r3, r1
 6394 006a 5BB2     		sxtb	r3, r3
 6395 006c 1343     		orrs	r3, r2
 6396 006e 5BB2     		sxtb	r3, r3
 6397 0070 DAB2     		uxtb	r2, r3
 6398 0072 0E23     		movs	r3, #14
 6399 0074 FB18     		adds	r3, r7, r3
 6400 0076 1A70     		strb	r2, [r3]
2604:bma2x2.c      **** 			(data_u8, BMA2x2_INTR_FIFO_WM_ENABLE_INTR,
2605:bma2x2.c      **** 			fifo_wm_u8);
2606:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 6401              		.loc 1 2606 0
 6402 0078 0E23     		movs	r3, #14
 6403 007a FB18     		adds	r3, r7, r3
 6404 007c 0122     		movs	r2, #1
 6405 007e 1900     		movs	r1, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 162


 6406 0080 1720     		movs	r0, #23
 6407 0082 FFF7FEFF 		bl	bma2x2_write_reg
 6408 0086 0300     		movs	r3, r0
 6409 0088 DAB2     		uxtb	r2, r3
 6410 008a 0F23     		movs	r3, #15
 6411 008c FB18     		adds	r3, r7, r3
 6412 008e 1B78     		ldrb	r3, [r3]
 6413 0090 D318     		adds	r3, r2, r3
 6414 0092 DAB2     		uxtb	r2, r3
 6415 0094 0F23     		movs	r3, #15
 6416 0096 FB18     		adds	r3, r7, r3
 6417 0098 1A70     		strb	r2, [r3]
 6418 009a 03E0     		b	.L365
 6419              	.L364:
2607:bma2x2.c      **** 			BMA2x2_INTR_FIFO_WM_ENABLE_INTR_REG,
2608:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2609:bma2x2.c      **** 		} else {
2610:bma2x2.c      **** 		com_rslt = E_OUT_OF_RANGE;
 6420              		.loc 1 2610 0
 6421 009c 0F23     		movs	r3, #15
 6422 009e FB18     		adds	r3, r7, r3
 6423 00a0 FE22     		movs	r2, #254
 6424 00a2 1A70     		strb	r2, [r3]
 6425              	.L365:
2611:bma2x2.c      **** 		}
2612:bma2x2.c      **** 	}
2613:bma2x2.c      **** 	return com_rslt;
 6426              		.loc 1 2613 0
 6427 00a4 0F23     		movs	r3, #15
 6428 00a6 FB18     		adds	r3, r7, r3
 6429 00a8 1B78     		ldrb	r3, [r3]
 6430 00aa 5BB2     		sxtb	r3, r3
 6431              	.L366:
2614:bma2x2.c      **** }
 6432              		.loc 1 2614 0 discriminator 1
 6433 00ac 1800     		movs	r0, r3
 6434 00ae BD46     		mov	sp, r7
 6435 00b0 04B0     		add	sp, sp, #16
 6436              		@ sp needed
 6437 00b2 B0BD     		pop	{r4, r5, r7, pc}
 6438              	.L368:
 6439              		.align	2
 6440              	.L367:
 6441 00b4 00000000 		.word	p_bma2x2
 6442              		.cfi_endproc
 6443              	.LFE40:
 6444              		.size	bma2x2_set_intr_fifo_wm, .-bma2x2_set_intr_fifo_wm
 6445              		.section	.text.bma2x2_get_slow_no_motion,"ax",%progbits
 6446              		.align	2
 6447              		.global	bma2x2_get_slow_no_motion
 6448              		.code	16
 6449              		.thumb_func
 6450              		.type	bma2x2_get_slow_no_motion, %function
 6451              	bma2x2_get_slow_no_motion:
 6452              	.LFB41:
2615:bma2x2.c      **** /*!
2616:bma2x2.c      ****  * @brief This API is used to get
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 163


2617:bma2x2.c      ****  * the interrupt status of slow/no motion select and slow no motion
2618:bma2x2.c      ****  * enable xyz interrupt in the register 0x18 bit from 0 to 3
2619:bma2x2.c      ****  *
2620:bma2x2.c      ****  *
2621:bma2x2.c      ****  *  @param  channel_u8 : The value of slow/no motion select
2622:bma2x2.c      ****  *        channel_u8     |   result
2623:bma2x2.c      ****  *       ----------------- | ------------------
2624:bma2x2.c      ****  *              0          | BMA2x2_ACCEL_SLOW_NO_MOTION_ENABLE_X
2625:bma2x2.c      ****  *              1          | BMA2x2_ACCEL_SLOW_NO_MOTION_ENABLE_Y
2626:bma2x2.c      ****  *              2          | BMA2x2_ACCEL_SLOW_NO_MOTION_ENABLE_Z
2627:bma2x2.c      ****  *              3          | BMA2x2_ACCEL_SLOW_NO_MOTION_ENABLE_SEL
2628:bma2x2.c      ****  *
2629:bma2x2.c      ****  *	@param slow_no_motion_u8 : The value of slow no motion interrupt enable
2630:bma2x2.c      ****  *        slow_no_motion_u8     |   result
2631:bma2x2.c      ****  *       ------------------------ | ------------------
2632:bma2x2.c      ****  *              0x00              | INTR_DISABLE
2633:bma2x2.c      ****  *              0x01              | INTR_ENABLE
2634:bma2x2.c      ****  *
2635:bma2x2.c      ****  *
2636:bma2x2.c      ****  *	@return results of bus communication function
2637:bma2x2.c      ****  *	@retval 0 -> Success
2638:bma2x2.c      ****  *	@retval -1 -> Error
2639:bma2x2.c      ****  *
2640:bma2x2.c      ****  *
2641:bma2x2.c      ****  */
2642:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_slow_no_motion(u8 channel_u8,
2643:bma2x2.c      **** u8 *slow_no_motion_u8)
2644:bma2x2.c      **** {
 6453              		.loc 1 2644 0
 6454              		.cfi_startproc
 6455              		@ args = 0, pretend = 0, frame = 16
 6456              		@ frame_needed = 1, uses_anonymous_args = 0
 6457 0000 B0B5     		push	{r4, r5, r7, lr}
 6458              		.cfi_def_cfa_offset 16
 6459              		.cfi_offset 4, -16
 6460              		.cfi_offset 5, -12
 6461              		.cfi_offset 7, -8
 6462              		.cfi_offset 14, -4
 6463 0002 84B0     		sub	sp, sp, #16
 6464              		.cfi_def_cfa_offset 32
 6465 0004 00AF     		add	r7, sp, #0
 6466              		.cfi_def_cfa_register 7
 6467 0006 0200     		movs	r2, r0
 6468 0008 3960     		str	r1, [r7]
 6469 000a FB1D     		adds	r3, r7, #7
 6470 000c 1A70     		strb	r2, [r3]
2645:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 6471              		.loc 1 2645 0
 6472 000e 0E23     		movs	r3, #14
 6473 0010 FB18     		adds	r3, r7, r3
 6474 0012 0022     		movs	r2, #0
 6475 0014 1A70     		strb	r2, [r3]
2646:bma2x2.c      **** 		/*  Variable used to return value of
2647:bma2x2.c      **** 	communication routine*/
2648:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 6476              		.loc 1 2648 0
 6477 0016 0F23     		movs	r3, #15
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 164


 6478 0018 FB18     		adds	r3, r7, r3
 6479 001a FF22     		movs	r2, #255
 6480 001c 1A70     		strb	r2, [r3]
2649:bma2x2.c      **** 
2650:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 6481              		.loc 1 2650 0
 6482 001e 434B     		ldr	r3, .L380
 6483 0020 1B68     		ldr	r3, [r3]
 6484 0022 002B     		cmp	r3, #0
 6485 0024 02D1     		bne	.L370
2651:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
2652:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 6486              		.loc 1 2652 0
 6487 0026 7F23     		movs	r3, #127
 6488 0028 5B42     		rsbs	r3, r3, #0
 6489 002a 7BE0     		b	.L379
 6490              	.L370:
2653:bma2x2.c      **** 		} else {
2654:bma2x2.c      **** 		/* Read the slow no motion interrupt */
2655:bma2x2.c      **** 		switch (channel_u8) {
 6491              		.loc 1 2655 0
 6492 002c FB1D     		adds	r3, r7, #7
 6493 002e 1B78     		ldrb	r3, [r3]
 6494 0030 012B     		cmp	r3, #1
 6495 0032 20D0     		beq	.L373
 6496 0034 02DC     		bgt	.L374
 6497 0036 002B     		cmp	r3, #0
 6498 0038 05D0     		beq	.L375
 6499 003a 6AE0     		b	.L372
 6500              	.L374:
 6501 003c 022B     		cmp	r3, #2
 6502 003e 34D0     		beq	.L376
 6503 0040 032B     		cmp	r3, #3
 6504 0042 4CD0     		beq	.L377
 6505 0044 65E0     		b	.L372
 6506              	.L375:
2656:bma2x2.c      **** 		case BMA2x2_SLOW_NO_MOTION_ENABLE_X:
2657:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 6507              		.loc 1 2657 0
 6508 0046 394B     		ldr	r3, .L380
 6509 0048 1B68     		ldr	r3, [r3]
 6510 004a DD68     		ldr	r5, [r3, #12]
 6511 004c 374B     		ldr	r3, .L380
 6512 004e 1B68     		ldr	r3, [r3]
 6513 0050 1879     		ldrb	r0, [r3, #4]
 6514 0052 0F23     		movs	r3, #15
 6515 0054 FC18     		adds	r4, r7, r3
 6516 0056 0E23     		movs	r3, #14
 6517 0058 FA18     		adds	r2, r7, r3
 6518 005a 0123     		movs	r3, #1
 6519 005c 1821     		movs	r1, #24
 6520 005e A847     		blx	r5
 6521 0060 0300     		movs	r3, r0
 6522 0062 2370     		strb	r3, [r4]
2658:bma2x2.c      **** 			(p_bma2x2->dev_addr,
2659:bma2x2.c      **** 			BMA2x2_INTR_SLOW_NO_MOTION_ENABLE_X_INTR_REG,
2660:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 165


2661:bma2x2.c      **** 			*slow_no_motion_u8 = BMA2x2_GET_BITSLICE
 6523              		.loc 1 2661 0
 6524 0064 0E23     		movs	r3, #14
 6525 0066 FB18     		adds	r3, r7, r3
 6526 0068 1B78     		ldrb	r3, [r3]
 6527 006a 0122     		movs	r2, #1
 6528 006c 1340     		ands	r3, r2
 6529 006e DAB2     		uxtb	r2, r3
 6530 0070 3B68     		ldr	r3, [r7]
 6531 0072 1A70     		strb	r2, [r3]
2662:bma2x2.c      **** 			(data_u8, BMA2x2_INTR_SLOW_NO_MOTION_ENABLE_X_INTR);
2663:bma2x2.c      **** 		break;
 6532              		.loc 1 2663 0
 6533 0074 52E0     		b	.L378
 6534              	.L373:
2664:bma2x2.c      **** 		case BMA2x2_SLOW_NO_MOTION_ENABLE_Y:
2665:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 6535              		.loc 1 2665 0
 6536 0076 2D4B     		ldr	r3, .L380
 6537 0078 1B68     		ldr	r3, [r3]
 6538 007a DD68     		ldr	r5, [r3, #12]
 6539 007c 2B4B     		ldr	r3, .L380
 6540 007e 1B68     		ldr	r3, [r3]
 6541 0080 1879     		ldrb	r0, [r3, #4]
 6542 0082 0F23     		movs	r3, #15
 6543 0084 FC18     		adds	r4, r7, r3
 6544 0086 0E23     		movs	r3, #14
 6545 0088 FA18     		adds	r2, r7, r3
 6546 008a 0123     		movs	r3, #1
 6547 008c 1821     		movs	r1, #24
 6548 008e A847     		blx	r5
 6549 0090 0300     		movs	r3, r0
 6550 0092 2370     		strb	r3, [r4]
2666:bma2x2.c      **** 			(p_bma2x2->dev_addr,
2667:bma2x2.c      **** 			BMA2x2_INTR_SLOW_NO_MOTION_ENABLE_Y_INTR_REG,
2668:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2669:bma2x2.c      **** 			*slow_no_motion_u8 = BMA2x2_GET_BITSLICE
 6551              		.loc 1 2669 0
 6552 0094 0E23     		movs	r3, #14
 6553 0096 FB18     		adds	r3, r7, r3
 6554 0098 1B78     		ldrb	r3, [r3]
 6555 009a 5B10     		asrs	r3, r3, #1
 6556 009c DBB2     		uxtb	r3, r3
 6557 009e 0122     		movs	r2, #1
 6558 00a0 1340     		ands	r3, r2
 6559 00a2 DAB2     		uxtb	r2, r3
 6560 00a4 3B68     		ldr	r3, [r7]
 6561 00a6 1A70     		strb	r2, [r3]
2670:bma2x2.c      **** 			(data_u8, BMA2x2_INTR_SLOW_NO_MOTION_ENABLE_Y_INTR);
2671:bma2x2.c      **** 		break;
 6562              		.loc 1 2671 0
 6563 00a8 38E0     		b	.L378
 6564              	.L376:
2672:bma2x2.c      **** 		case BMA2x2_SLOW_NO_MOTION_ENABLE_Z:
2673:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 6565              		.loc 1 2673 0
 6566 00aa 204B     		ldr	r3, .L380
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 166


 6567 00ac 1B68     		ldr	r3, [r3]
 6568 00ae DD68     		ldr	r5, [r3, #12]
 6569 00b0 1E4B     		ldr	r3, .L380
 6570 00b2 1B68     		ldr	r3, [r3]
 6571 00b4 1879     		ldrb	r0, [r3, #4]
 6572 00b6 0F23     		movs	r3, #15
 6573 00b8 FC18     		adds	r4, r7, r3
 6574 00ba 0E23     		movs	r3, #14
 6575 00bc FA18     		adds	r2, r7, r3
 6576 00be 0123     		movs	r3, #1
 6577 00c0 1821     		movs	r1, #24
 6578 00c2 A847     		blx	r5
 6579 00c4 0300     		movs	r3, r0
 6580 00c6 2370     		strb	r3, [r4]
2674:bma2x2.c      **** 			(p_bma2x2->dev_addr,
2675:bma2x2.c      **** 			BMA2x2_INTR_SLOW_NO_MOTION_ENABLE_Z_INTR_REG,
2676:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2677:bma2x2.c      **** 			*slow_no_motion_u8 = BMA2x2_GET_BITSLICE
 6581              		.loc 1 2677 0
 6582 00c8 0E23     		movs	r3, #14
 6583 00ca FB18     		adds	r3, r7, r3
 6584 00cc 1B78     		ldrb	r3, [r3]
 6585 00ce 9B10     		asrs	r3, r3, #2
 6586 00d0 DBB2     		uxtb	r3, r3
 6587 00d2 0122     		movs	r2, #1
 6588 00d4 1340     		ands	r3, r2
 6589 00d6 DAB2     		uxtb	r2, r3
 6590 00d8 3B68     		ldr	r3, [r7]
 6591 00da 1A70     		strb	r2, [r3]
2678:bma2x2.c      **** 			(data_u8, BMA2x2_INTR_SLOW_NO_MOTION_ENABLE_Z_INTR);
2679:bma2x2.c      **** 		break;
 6592              		.loc 1 2679 0
 6593 00dc 1EE0     		b	.L378
 6594              	.L377:
2680:bma2x2.c      **** 		case BMA2x2_SLOW_NO_MOTION_ENABLE_SELECT:
2681:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 6595              		.loc 1 2681 0
 6596 00de 134B     		ldr	r3, .L380
 6597 00e0 1B68     		ldr	r3, [r3]
 6598 00e2 DD68     		ldr	r5, [r3, #12]
 6599 00e4 114B     		ldr	r3, .L380
 6600 00e6 1B68     		ldr	r3, [r3]
 6601 00e8 1879     		ldrb	r0, [r3, #4]
 6602 00ea 0F23     		movs	r3, #15
 6603 00ec FC18     		adds	r4, r7, r3
 6604 00ee 0E23     		movs	r3, #14
 6605 00f0 FA18     		adds	r2, r7, r3
 6606 00f2 0123     		movs	r3, #1
 6607 00f4 1821     		movs	r1, #24
 6608 00f6 A847     		blx	r5
 6609 00f8 0300     		movs	r3, r0
 6610 00fa 2370     		strb	r3, [r4]
2682:bma2x2.c      **** 			(p_bma2x2->dev_addr,
2683:bma2x2.c      **** 			BMA2x2_INTR_SLOW_NO_MOTION_ENABLE_SELECT_INTR_REG,
2684:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2685:bma2x2.c      **** 			*slow_no_motion_u8 = BMA2x2_GET_BITSLICE
 6611              		.loc 1 2685 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 167


 6612 00fc 0E23     		movs	r3, #14
 6613 00fe FB18     		adds	r3, r7, r3
 6614 0100 1B78     		ldrb	r3, [r3]
 6615 0102 DB10     		asrs	r3, r3, #3
 6616 0104 DBB2     		uxtb	r3, r3
 6617 0106 0122     		movs	r2, #1
 6618 0108 1340     		ands	r3, r2
 6619 010a DAB2     		uxtb	r2, r3
 6620 010c 3B68     		ldr	r3, [r7]
 6621 010e 1A70     		strb	r2, [r3]
2686:bma2x2.c      **** 			(data_u8,
2687:bma2x2.c      **** 			BMA2x2_INTR_SLOW_NO_MOTION_ENABLE_SELECT_INTR);
2688:bma2x2.c      **** 		break;
 6622              		.loc 1 2688 0
 6623 0110 04E0     		b	.L378
 6624              	.L372:
2689:bma2x2.c      **** 		default:
2690:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 6625              		.loc 1 2690 0
 6626 0112 0F23     		movs	r3, #15
 6627 0114 FB18     		adds	r3, r7, r3
 6628 0116 FE22     		movs	r2, #254
 6629 0118 1A70     		strb	r2, [r3]
2691:bma2x2.c      **** 		break;
 6630              		.loc 1 2691 0
 6631 011a C046     		nop
 6632              	.L378:
2692:bma2x2.c      **** 		}
2693:bma2x2.c      **** 	}
2694:bma2x2.c      **** 	return com_rslt;
 6633              		.loc 1 2694 0
 6634 011c 0F23     		movs	r3, #15
 6635 011e FB18     		adds	r3, r7, r3
 6636 0120 1B78     		ldrb	r3, [r3]
 6637 0122 5BB2     		sxtb	r3, r3
 6638              	.L379:
2695:bma2x2.c      **** }
 6639              		.loc 1 2695 0 discriminator 1
 6640 0124 1800     		movs	r0, r3
 6641 0126 BD46     		mov	sp, r7
 6642 0128 04B0     		add	sp, sp, #16
 6643              		@ sp needed
 6644 012a B0BD     		pop	{r4, r5, r7, pc}
 6645              	.L381:
 6646              		.align	2
 6647              	.L380:
 6648 012c 00000000 		.word	p_bma2x2
 6649              		.cfi_endproc
 6650              	.LFE41:
 6651              		.size	bma2x2_get_slow_no_motion, .-bma2x2_get_slow_no_motion
 6652              		.section	.text.bma2x2_set_slow_no_motion,"ax",%progbits
 6653              		.align	2
 6654              		.global	bma2x2_set_slow_no_motion
 6655              		.code	16
 6656              		.thumb_func
 6657              		.type	bma2x2_set_slow_no_motion, %function
 6658              	bma2x2_set_slow_no_motion:
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 168


 6659              	.LFB42:
2696:bma2x2.c      **** /*!
2697:bma2x2.c      ****  * @brief This API is used to set
2698:bma2x2.c      ****  * the interrupt status of slow/no motion select and slow no motion
2699:bma2x2.c      ****  * enable xyz interrupt in the register 0x18 bit from 0 to 3
2700:bma2x2.c      ****  *
2701:bma2x2.c      ****  *
2702:bma2x2.c      ****  *  @param  channel_u8 : The value of slow/no motion select
2703:bma2x2.c      ****  *        channel_u8     |   result
2704:bma2x2.c      ****  *       ----------------- | ------------------
2705:bma2x2.c      ****  *              0          | BMA2x2_ACCEL_SLOW_NO_MOTION_ENABLE_X
2706:bma2x2.c      ****  *              1          | BMA2x2_ACCEL_SLOW_NO_MOTION_ENABLE_Y
2707:bma2x2.c      ****  *              2          | BMA2x2_ACCEL_SLOW_NO_MOTION_ENABLE_Z
2708:bma2x2.c      ****  *              3          | BMA2x2_ACCEL_SLOW_NO_MOTION_ENABLE_SEL
2709:bma2x2.c      ****  *
2710:bma2x2.c      ****  *	@param slow_no_motion_u8 : The value of slow no motion
2711:bma2x2.c      ****  *      interrupt enable
2712:bma2x2.c      ****  *        slow_no_motion_u8     |   result
2713:bma2x2.c      ****  *       ------------------------ | ------------------
2714:bma2x2.c      ****  *              0x00              | INTR_DISABLE
2715:bma2x2.c      ****  *              0x01              | INTR_ENABLE
2716:bma2x2.c      ****  *
2717:bma2x2.c      ****  *
2718:bma2x2.c      ****  *	@return results of bus communication function
2719:bma2x2.c      ****  *	@retval 0 -> Success
2720:bma2x2.c      ****  *	@retval -1 -> Error
2721:bma2x2.c      ****  *
2722:bma2x2.c      ****  *
2723:bma2x2.c      ****  */
2724:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_slow_no_motion(u8 channel_u8,
2725:bma2x2.c      **** u8 slow_no_motion_u8)
2726:bma2x2.c      **** {
 6660              		.loc 1 2726 0
 6661              		.cfi_startproc
 6662              		@ args = 0, pretend = 0, frame = 16
 6663              		@ frame_needed = 1, uses_anonymous_args = 0
 6664 0000 B0B5     		push	{r4, r5, r7, lr}
 6665              		.cfi_def_cfa_offset 16
 6666              		.cfi_offset 4, -16
 6667              		.cfi_offset 5, -12
 6668              		.cfi_offset 7, -8
 6669              		.cfi_offset 14, -4
 6670 0002 84B0     		sub	sp, sp, #16
 6671              		.cfi_def_cfa_offset 32
 6672 0004 00AF     		add	r7, sp, #0
 6673              		.cfi_def_cfa_register 7
 6674 0006 0200     		movs	r2, r0
 6675 0008 FB1D     		adds	r3, r7, #7
 6676 000a 1A70     		strb	r2, [r3]
 6677 000c BB1D     		adds	r3, r7, #6
 6678 000e 0A1C     		adds	r2, r1, #0
 6679 0010 1A70     		strb	r2, [r3]
2727:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 6680              		.loc 1 2727 0
 6681 0012 0E23     		movs	r3, #14
 6682 0014 FB18     		adds	r3, r7, r3
 6683 0016 0022     		movs	r2, #0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 169


 6684 0018 1A70     		strb	r2, [r3]
2728:bma2x2.c      **** 		/*  Variable used to return value of
2729:bma2x2.c      **** 	communication routine*/
2730:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 6685              		.loc 1 2730 0
 6686 001a 0F23     		movs	r3, #15
 6687 001c FB18     		adds	r3, r7, r3
 6688 001e FF22     		movs	r2, #255
 6689 0020 1A70     		strb	r2, [r3]
2731:bma2x2.c      **** 
2732:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 6690              		.loc 1 2732 0
 6691 0022 7A4B     		ldr	r3, .L393
 6692 0024 1B68     		ldr	r3, [r3]
 6693 0026 002B     		cmp	r3, #0
 6694 0028 02D1     		bne	.L383
2733:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
2734:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 6695              		.loc 1 2734 0
 6696 002a 7F23     		movs	r3, #127
 6697 002c 5B42     		rsbs	r3, r3, #0
 6698 002e E9E0     		b	.L392
 6699              	.L383:
2735:bma2x2.c      **** 		} else {
2736:bma2x2.c      **** 		/* Write the slow no motion interrupt*/
2737:bma2x2.c      **** 		switch (channel_u8) {
 6700              		.loc 1 2737 0
 6701 0030 FB1D     		adds	r3, r7, #7
 6702 0032 1B78     		ldrb	r3, [r3]
 6703 0034 012B     		cmp	r3, #1
 6704 0036 3DD0     		beq	.L386
 6705 0038 02DC     		bgt	.L387
 6706 003a 002B     		cmp	r3, #0
 6707 003c 06D0     		beq	.L388
 6708 003e D8E0     		b	.L385
 6709              	.L387:
 6710 0040 022B     		cmp	r3, #2
 6711 0042 6CD0     		beq	.L389
 6712 0044 032B     		cmp	r3, #3
 6713 0046 00D1     		bne	.LCB6147
 6714 0048 9EE0     		b	.L390	@long jump
 6715              	.LCB6147:
 6716 004a D2E0     		b	.L385
 6717              	.L388:
2738:bma2x2.c      **** 		case BMA2x2_SLOW_NO_MOTION_ENABLE_X:
2739:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 6718              		.loc 1 2739 0
 6719 004c 6F4B     		ldr	r3, .L393
 6720 004e 1B68     		ldr	r3, [r3]
 6721 0050 DD68     		ldr	r5, [r3, #12]
 6722 0052 6E4B     		ldr	r3, .L393
 6723 0054 1B68     		ldr	r3, [r3]
 6724 0056 1879     		ldrb	r0, [r3, #4]
 6725 0058 0F23     		movs	r3, #15
 6726 005a FC18     		adds	r4, r7, r3
 6727 005c 0E23     		movs	r3, #14
 6728 005e FA18     		adds	r2, r7, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 170


 6729 0060 0123     		movs	r3, #1
 6730 0062 1821     		movs	r1, #24
 6731 0064 A847     		blx	r5
 6732 0066 0300     		movs	r3, r0
 6733 0068 2370     		strb	r3, [r4]
2740:bma2x2.c      **** 			(p_bma2x2->dev_addr,
2741:bma2x2.c      **** 			BMA2x2_INTR_SLOW_NO_MOTION_ENABLE_X_INTR_REG,
2742:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2743:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 6734              		.loc 1 2743 0
 6735 006a 0E23     		movs	r3, #14
 6736 006c FB18     		adds	r3, r7, r3
 6737 006e 1B78     		ldrb	r3, [r3]
 6738 0070 5BB2     		sxtb	r3, r3
 6739 0072 0122     		movs	r2, #1
 6740 0074 9343     		bics	r3, r2
 6741 0076 5AB2     		sxtb	r2, r3
 6742 0078 BB1D     		adds	r3, r7, #6
 6743 007a 1B78     		ldrb	r3, [r3]
 6744 007c 5BB2     		sxtb	r3, r3
 6745 007e 0121     		movs	r1, #1
 6746 0080 0B40     		ands	r3, r1
 6747 0082 5BB2     		sxtb	r3, r3
 6748 0084 1343     		orrs	r3, r2
 6749 0086 5BB2     		sxtb	r3, r3
 6750 0088 DAB2     		uxtb	r2, r3
 6751 008a 0E23     		movs	r3, #14
 6752 008c FB18     		adds	r3, r7, r3
 6753 008e 1A70     		strb	r2, [r3]
2744:bma2x2.c      **** 			(data_u8,
2745:bma2x2.c      **** 			BMA2x2_INTR_SLOW_NO_MOTION_ENABLE_X_INTR,
2746:bma2x2.c      **** 			slow_no_motion_u8);
2747:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 6754              		.loc 1 2747 0
 6755 0090 0E23     		movs	r3, #14
 6756 0092 FB18     		adds	r3, r7, r3
 6757 0094 0122     		movs	r2, #1
 6758 0096 1900     		movs	r1, r3
 6759 0098 1820     		movs	r0, #24
 6760 009a FFF7FEFF 		bl	bma2x2_write_reg
 6761 009e 0300     		movs	r3, r0
 6762 00a0 DAB2     		uxtb	r2, r3
 6763 00a2 0F23     		movs	r3, #15
 6764 00a4 FB18     		adds	r3, r7, r3
 6765 00a6 1B78     		ldrb	r3, [r3]
 6766 00a8 D318     		adds	r3, r2, r3
 6767 00aa DAB2     		uxtb	r2, r3
 6768 00ac 0F23     		movs	r3, #15
 6769 00ae FB18     		adds	r3, r7, r3
 6770 00b0 1A70     		strb	r2, [r3]
2748:bma2x2.c      **** 			BMA2x2_INTR_SLOW_NO_MOTION_ENABLE_X_INTR_REG,
2749:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2750:bma2x2.c      **** 		break;
 6771              		.loc 1 2750 0
 6772 00b2 A3E0     		b	.L391
 6773              	.L386:
2751:bma2x2.c      **** 		case BMA2x2_SLOW_NO_MOTION_ENABLE_Y:
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 171


2752:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 6774              		.loc 1 2752 0
 6775 00b4 554B     		ldr	r3, .L393
 6776 00b6 1B68     		ldr	r3, [r3]
 6777 00b8 DD68     		ldr	r5, [r3, #12]
 6778 00ba 544B     		ldr	r3, .L393
 6779 00bc 1B68     		ldr	r3, [r3]
 6780 00be 1879     		ldrb	r0, [r3, #4]
 6781 00c0 0F23     		movs	r3, #15
 6782 00c2 FC18     		adds	r4, r7, r3
 6783 00c4 0E23     		movs	r3, #14
 6784 00c6 FA18     		adds	r2, r7, r3
 6785 00c8 0123     		movs	r3, #1
 6786 00ca 1821     		movs	r1, #24
 6787 00cc A847     		blx	r5
 6788 00ce 0300     		movs	r3, r0
 6789 00d0 2370     		strb	r3, [r4]
2753:bma2x2.c      **** 			(p_bma2x2->dev_addr,
2754:bma2x2.c      **** 			BMA2x2_INTR_SLOW_NO_MOTION_ENABLE_Y_INTR_REG,
2755:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2756:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 6790              		.loc 1 2756 0
 6791 00d2 0E23     		movs	r3, #14
 6792 00d4 FB18     		adds	r3, r7, r3
 6793 00d6 1B78     		ldrb	r3, [r3]
 6794 00d8 5BB2     		sxtb	r3, r3
 6795 00da 0222     		movs	r2, #2
 6796 00dc 9343     		bics	r3, r2
 6797 00de 5AB2     		sxtb	r2, r3
 6798 00e0 BB1D     		adds	r3, r7, #6
 6799 00e2 1B78     		ldrb	r3, [r3]
 6800 00e4 5B00     		lsls	r3, r3, #1
 6801 00e6 5BB2     		sxtb	r3, r3
 6802 00e8 0221     		movs	r1, #2
 6803 00ea 0B40     		ands	r3, r1
 6804 00ec 5BB2     		sxtb	r3, r3
 6805 00ee 1343     		orrs	r3, r2
 6806 00f0 5BB2     		sxtb	r3, r3
 6807 00f2 DAB2     		uxtb	r2, r3
 6808 00f4 0E23     		movs	r3, #14
 6809 00f6 FB18     		adds	r3, r7, r3
 6810 00f8 1A70     		strb	r2, [r3]
2757:bma2x2.c      **** 			(data_u8,
2758:bma2x2.c      **** 			BMA2x2_INTR_SLOW_NO_MOTION_ENABLE_Y_INTR,
2759:bma2x2.c      **** 			slow_no_motion_u8);
2760:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 6811              		.loc 1 2760 0
 6812 00fa 0E23     		movs	r3, #14
 6813 00fc FB18     		adds	r3, r7, r3
 6814 00fe 0122     		movs	r2, #1
 6815 0100 1900     		movs	r1, r3
 6816 0102 1820     		movs	r0, #24
 6817 0104 FFF7FEFF 		bl	bma2x2_write_reg
 6818 0108 0300     		movs	r3, r0
 6819 010a DAB2     		uxtb	r2, r3
 6820 010c 0F23     		movs	r3, #15
 6821 010e FB18     		adds	r3, r7, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 172


 6822 0110 1B78     		ldrb	r3, [r3]
 6823 0112 D318     		adds	r3, r2, r3
 6824 0114 DAB2     		uxtb	r2, r3
 6825 0116 0F23     		movs	r3, #15
 6826 0118 FB18     		adds	r3, r7, r3
 6827 011a 1A70     		strb	r2, [r3]
2761:bma2x2.c      **** 			BMA2x2_INTR_SLOW_NO_MOTION_ENABLE_Y_INTR_REG,
2762:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2763:bma2x2.c      **** 		break;
 6828              		.loc 1 2763 0
 6829 011c 6EE0     		b	.L391
 6830              	.L389:
2764:bma2x2.c      **** 		case BMA2x2_SLOW_NO_MOTION_ENABLE_Z:
2765:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 6831              		.loc 1 2765 0
 6832 011e 3B4B     		ldr	r3, .L393
 6833 0120 1B68     		ldr	r3, [r3]
 6834 0122 DD68     		ldr	r5, [r3, #12]
 6835 0124 394B     		ldr	r3, .L393
 6836 0126 1B68     		ldr	r3, [r3]
 6837 0128 1879     		ldrb	r0, [r3, #4]
 6838 012a 0F23     		movs	r3, #15
 6839 012c FC18     		adds	r4, r7, r3
 6840 012e 0E23     		movs	r3, #14
 6841 0130 FA18     		adds	r2, r7, r3
 6842 0132 0123     		movs	r3, #1
 6843 0134 1821     		movs	r1, #24
 6844 0136 A847     		blx	r5
 6845 0138 0300     		movs	r3, r0
 6846 013a 2370     		strb	r3, [r4]
2766:bma2x2.c      **** 			(p_bma2x2->dev_addr,
2767:bma2x2.c      **** 			BMA2x2_INTR_SLOW_NO_MOTION_ENABLE_Z_INTR_REG,
2768:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2769:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 6847              		.loc 1 2769 0
 6848 013c 0E23     		movs	r3, #14
 6849 013e FB18     		adds	r3, r7, r3
 6850 0140 1B78     		ldrb	r3, [r3]
 6851 0142 5BB2     		sxtb	r3, r3
 6852 0144 0422     		movs	r2, #4
 6853 0146 9343     		bics	r3, r2
 6854 0148 5AB2     		sxtb	r2, r3
 6855 014a BB1D     		adds	r3, r7, #6
 6856 014c 1B78     		ldrb	r3, [r3]
 6857 014e 9B00     		lsls	r3, r3, #2
 6858 0150 5BB2     		sxtb	r3, r3
 6859 0152 0421     		movs	r1, #4
 6860 0154 0B40     		ands	r3, r1
 6861 0156 5BB2     		sxtb	r3, r3
 6862 0158 1343     		orrs	r3, r2
 6863 015a 5BB2     		sxtb	r3, r3
 6864 015c DAB2     		uxtb	r2, r3
 6865 015e 0E23     		movs	r3, #14
 6866 0160 FB18     		adds	r3, r7, r3
 6867 0162 1A70     		strb	r2, [r3]
2770:bma2x2.c      **** 			(data_u8,
2771:bma2x2.c      **** 			BMA2x2_INTR_SLOW_NO_MOTION_ENABLE_Z_INTR,
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 173


2772:bma2x2.c      **** 			slow_no_motion_u8);
2773:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 6868              		.loc 1 2773 0
 6869 0164 0E23     		movs	r3, #14
 6870 0166 FB18     		adds	r3, r7, r3
 6871 0168 0122     		movs	r2, #1
 6872 016a 1900     		movs	r1, r3
 6873 016c 1820     		movs	r0, #24
 6874 016e FFF7FEFF 		bl	bma2x2_write_reg
 6875 0172 0300     		movs	r3, r0
 6876 0174 DAB2     		uxtb	r2, r3
 6877 0176 0F23     		movs	r3, #15
 6878 0178 FB18     		adds	r3, r7, r3
 6879 017a 1B78     		ldrb	r3, [r3]
 6880 017c D318     		adds	r3, r2, r3
 6881 017e DAB2     		uxtb	r2, r3
 6882 0180 0F23     		movs	r3, #15
 6883 0182 FB18     		adds	r3, r7, r3
 6884 0184 1A70     		strb	r2, [r3]
2774:bma2x2.c      **** 			BMA2x2_INTR_SLOW_NO_MOTION_ENABLE_Z_INTR_REG,
2775:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2776:bma2x2.c      **** 		break;
 6885              		.loc 1 2776 0
 6886 0186 39E0     		b	.L391
 6887              	.L390:
2777:bma2x2.c      **** 		case BMA2x2_SLOW_NO_MOTION_ENABLE_SELECT:
2778:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 6888              		.loc 1 2778 0
 6889 0188 204B     		ldr	r3, .L393
 6890 018a 1B68     		ldr	r3, [r3]
 6891 018c DD68     		ldr	r5, [r3, #12]
 6892 018e 1F4B     		ldr	r3, .L393
 6893 0190 1B68     		ldr	r3, [r3]
 6894 0192 1879     		ldrb	r0, [r3, #4]
 6895 0194 0F23     		movs	r3, #15
 6896 0196 FC18     		adds	r4, r7, r3
 6897 0198 0E23     		movs	r3, #14
 6898 019a FA18     		adds	r2, r7, r3
 6899 019c 0123     		movs	r3, #1
 6900 019e 1821     		movs	r1, #24
 6901 01a0 A847     		blx	r5
 6902 01a2 0300     		movs	r3, r0
 6903 01a4 2370     		strb	r3, [r4]
2779:bma2x2.c      **** 			(p_bma2x2->dev_addr,
2780:bma2x2.c      **** 			BMA2x2_INTR_SLOW_NO_MOTION_ENABLE_SELECT_INTR_REG,
2781:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2782:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 6904              		.loc 1 2782 0
 6905 01a6 0E23     		movs	r3, #14
 6906 01a8 FB18     		adds	r3, r7, r3
 6907 01aa 1B78     		ldrb	r3, [r3]
 6908 01ac 5BB2     		sxtb	r3, r3
 6909 01ae 0822     		movs	r2, #8
 6910 01b0 9343     		bics	r3, r2
 6911 01b2 5AB2     		sxtb	r2, r3
 6912 01b4 BB1D     		adds	r3, r7, #6
 6913 01b6 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 174


 6914 01b8 DB00     		lsls	r3, r3, #3
 6915 01ba 5BB2     		sxtb	r3, r3
 6916 01bc 0821     		movs	r1, #8
 6917 01be 0B40     		ands	r3, r1
 6918 01c0 5BB2     		sxtb	r3, r3
 6919 01c2 1343     		orrs	r3, r2
 6920 01c4 5BB2     		sxtb	r3, r3
 6921 01c6 DAB2     		uxtb	r2, r3
 6922 01c8 0E23     		movs	r3, #14
 6923 01ca FB18     		adds	r3, r7, r3
 6924 01cc 1A70     		strb	r2, [r3]
2783:bma2x2.c      **** 			(data_u8,
2784:bma2x2.c      **** 			BMA2x2_INTR_SLOW_NO_MOTION_ENABLE_SELECT_INTR,
2785:bma2x2.c      **** 			slow_no_motion_u8);
2786:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 6925              		.loc 1 2786 0
 6926 01ce 0E23     		movs	r3, #14
 6927 01d0 FB18     		adds	r3, r7, r3
 6928 01d2 0122     		movs	r2, #1
 6929 01d4 1900     		movs	r1, r3
 6930 01d6 1820     		movs	r0, #24
 6931 01d8 FFF7FEFF 		bl	bma2x2_write_reg
 6932 01dc 0300     		movs	r3, r0
 6933 01de DAB2     		uxtb	r2, r3
 6934 01e0 0F23     		movs	r3, #15
 6935 01e2 FB18     		adds	r3, r7, r3
 6936 01e4 1B78     		ldrb	r3, [r3]
 6937 01e6 D318     		adds	r3, r2, r3
 6938 01e8 DAB2     		uxtb	r2, r3
 6939 01ea 0F23     		movs	r3, #15
 6940 01ec FB18     		adds	r3, r7, r3
 6941 01ee 1A70     		strb	r2, [r3]
2787:bma2x2.c      **** 			BMA2x2_INTR_SLOW_NO_MOTION_ENABLE_SELECT_INTR_REG,
2788:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2789:bma2x2.c      **** 		break;
 6942              		.loc 1 2789 0
 6943 01f0 04E0     		b	.L391
 6944              	.L385:
2790:bma2x2.c      **** 		default:
2791:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 6945              		.loc 1 2791 0
 6946 01f2 0F23     		movs	r3, #15
 6947 01f4 FB18     		adds	r3, r7, r3
 6948 01f6 FE22     		movs	r2, #254
 6949 01f8 1A70     		strb	r2, [r3]
2792:bma2x2.c      **** 		break;
 6950              		.loc 1 2792 0
 6951 01fa C046     		nop
 6952              	.L391:
2793:bma2x2.c      **** 		}
2794:bma2x2.c      **** 	}
2795:bma2x2.c      **** 	return com_rslt;
 6953              		.loc 1 2795 0
 6954 01fc 0F23     		movs	r3, #15
 6955 01fe FB18     		adds	r3, r7, r3
 6956 0200 1B78     		ldrb	r3, [r3]
 6957 0202 5BB2     		sxtb	r3, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 175


 6958              	.L392:
2796:bma2x2.c      **** }
 6959              		.loc 1 2796 0 discriminator 1
 6960 0204 1800     		movs	r0, r3
 6961 0206 BD46     		mov	sp, r7
 6962 0208 04B0     		add	sp, sp, #16
 6963              		@ sp needed
 6964 020a B0BD     		pop	{r4, r5, r7, pc}
 6965              	.L394:
 6966              		.align	2
 6967              	.L393:
 6968 020c 00000000 		.word	p_bma2x2
 6969              		.cfi_endproc
 6970              	.LFE42:
 6971              		.size	bma2x2_set_slow_no_motion, .-bma2x2_set_slow_no_motion
 6972              		.section	.text.bma2x2_get_intr_low_g,"ax",%progbits
 6973              		.align	2
 6974              		.global	bma2x2_get_intr_low_g
 6975              		.code	16
 6976              		.thumb_func
 6977              		.type	bma2x2_get_intr_low_g, %function
 6978              	bma2x2_get_intr_low_g:
 6979              	.LFB43:
2797:bma2x2.c      **** /*!
2798:bma2x2.c      ****  * @brief  This API is used to get
2799:bma2x2.c      ****  * the interrupt enable of low_g interrupt in the register 0x19 and 0x1B
2800:bma2x2.c      ****  * @note INTR1_Low_g -> register 0x19 bit 0
2801:bma2x2.c      ****  * @note INTR2_Low_g -> register 0x1B bit 0
2802:bma2x2.c      ****  *
2803:bma2x2.c      ****  *
2804:bma2x2.c      ****  *
2805:bma2x2.c      ****  *
2806:bma2x2.c      ****  * @param channel_u8 : The value of low interrupt selection channel
2807:bma2x2.c      ****  *        channel_u8     |   result
2808:bma2x2.c      ****  *       ----------------- | ------------------
2809:bma2x2.c      ****  *              0          | BMA2x2_ACCEL_INTR1_LOW_G
2810:bma2x2.c      ****  *              1          | BMA2x2_ACCEL_INTR2_LOW_G
2811:bma2x2.c      ****  *
2812:bma2x2.c      ****  * @param intr_low_g_u8 : the value of low_g interrupt
2813:bma2x2.c      ****  *        intr_low_u8           |   result
2814:bma2x2.c      ****  *       ------------------------ | ------------------
2815:bma2x2.c      ****  *              0x00              | INTR_DISABLE
2816:bma2x2.c      ****  *              0x01              | INTR_ENABLE
2817:bma2x2.c      ****  *
2818:bma2x2.c      ****  *
2819:bma2x2.c      ****  *
2820:bma2x2.c      ****  *	@return results of bus communication function
2821:bma2x2.c      ****  *	@retval 0 -> Success
2822:bma2x2.c      ****  *	@retval -1 -> Error
2823:bma2x2.c      ****  *
2824:bma2x2.c      ****  *
2825:bma2x2.c      ****  */
2826:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_intr_low_g(u8 channel_u8,
2827:bma2x2.c      **** u8 *intr_low_g_u8)
2828:bma2x2.c      **** {
 6980              		.loc 1 2828 0
 6981              		.cfi_startproc
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 176


 6982              		@ args = 0, pretend = 0, frame = 16
 6983              		@ frame_needed = 1, uses_anonymous_args = 0
 6984 0000 B0B5     		push	{r4, r5, r7, lr}
 6985              		.cfi_def_cfa_offset 16
 6986              		.cfi_offset 4, -16
 6987              		.cfi_offset 5, -12
 6988              		.cfi_offset 7, -8
 6989              		.cfi_offset 14, -4
 6990 0002 84B0     		sub	sp, sp, #16
 6991              		.cfi_def_cfa_offset 32
 6992 0004 00AF     		add	r7, sp, #0
 6993              		.cfi_def_cfa_register 7
 6994 0006 0200     		movs	r2, r0
 6995 0008 3960     		str	r1, [r7]
 6996 000a FB1D     		adds	r3, r7, #7
 6997 000c 1A70     		strb	r2, [r3]
2829:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 6998              		.loc 1 2829 0
 6999 000e 0E23     		movs	r3, #14
 7000 0010 FB18     		adds	r3, r7, r3
 7001 0012 0022     		movs	r2, #0
 7002 0014 1A70     		strb	r2, [r3]
2830:bma2x2.c      **** 	/*  Variable used to return value of
2831:bma2x2.c      **** 	communication routine*/
2832:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 7003              		.loc 1 2832 0
 7004 0016 0F23     		movs	r3, #15
 7005 0018 FB18     		adds	r3, r7, r3
 7006 001a FF22     		movs	r2, #255
 7007 001c 1A70     		strb	r2, [r3]
2833:bma2x2.c      **** 
2834:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 7008              		.loc 1 2834 0
 7009 001e 254B     		ldr	r3, .L404
 7010 0020 1B68     		ldr	r3, [r3]
 7011 0022 002B     		cmp	r3, #0
 7012 0024 02D1     		bne	.L396
2835:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
2836:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 7013              		.loc 1 2836 0
 7014 0026 7F23     		movs	r3, #127
 7015 0028 5B42     		rsbs	r3, r3, #0
 7016 002a 3FE0     		b	.L402
 7017              	.L396:
2837:bma2x2.c      **** 		} else {
2838:bma2x2.c      **** 		switch (channel_u8) {
 7018              		.loc 1 2838 0
 7019 002c FB1D     		adds	r3, r7, #7
 7020 002e 1B78     		ldrb	r3, [r3]
 7021 0030 002B     		cmp	r3, #0
 7022 0032 02D0     		beq	.L399
 7023 0034 012B     		cmp	r3, #1
 7024 0036 18D0     		beq	.L400
 7025 0038 2FE0     		b	.L403
 7026              	.L399:
2839:bma2x2.c      **** 		/* Read the low_g interrupt*/
2840:bma2x2.c      **** 		case BMA2x2_INTR1_LOW_G:
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 177


2841:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 7027              		.loc 1 2841 0
 7028 003a 1E4B     		ldr	r3, .L404
 7029 003c 1B68     		ldr	r3, [r3]
 7030 003e DD68     		ldr	r5, [r3, #12]
 7031 0040 1C4B     		ldr	r3, .L404
 7032 0042 1B68     		ldr	r3, [r3]
 7033 0044 1879     		ldrb	r0, [r3, #4]
 7034 0046 0F23     		movs	r3, #15
 7035 0048 FC18     		adds	r4, r7, r3
 7036 004a 0E23     		movs	r3, #14
 7037 004c FA18     		adds	r2, r7, r3
 7038 004e 0123     		movs	r3, #1
 7039 0050 1921     		movs	r1, #25
 7040 0052 A847     		blx	r5
 7041 0054 0300     		movs	r3, r0
 7042 0056 2370     		strb	r3, [r4]
2842:bma2x2.c      **** 			(p_bma2x2->dev_addr,
2843:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_LOW_G_REG,
2844:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2845:bma2x2.c      **** 			*intr_low_g_u8 = BMA2x2_GET_BITSLICE
 7043              		.loc 1 2845 0
 7044 0058 0E23     		movs	r3, #14
 7045 005a FB18     		adds	r3, r7, r3
 7046 005c 1B78     		ldrb	r3, [r3]
 7047 005e 0122     		movs	r2, #1
 7048 0060 1340     		ands	r3, r2
 7049 0062 DAB2     		uxtb	r2, r3
 7050 0064 3B68     		ldr	r3, [r7]
 7051 0066 1A70     		strb	r2, [r3]
2846:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_INTR1_PAD_LOW_G);
2847:bma2x2.c      **** 		break;
 7052              		.loc 1 2847 0
 7053 0068 1CE0     		b	.L401
 7054              	.L400:
2848:bma2x2.c      **** 		case BMA2x2_INTR2_LOW_G:
2849:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 7055              		.loc 1 2849 0
 7056 006a 124B     		ldr	r3, .L404
 7057 006c 1B68     		ldr	r3, [r3]
 7058 006e DD68     		ldr	r5, [r3, #12]
 7059 0070 104B     		ldr	r3, .L404
 7060 0072 1B68     		ldr	r3, [r3]
 7061 0074 1879     		ldrb	r0, [r3, #4]
 7062 0076 0F23     		movs	r3, #15
 7063 0078 FC18     		adds	r4, r7, r3
 7064 007a 0E23     		movs	r3, #14
 7065 007c FA18     		adds	r2, r7, r3
 7066 007e 0123     		movs	r3, #1
 7067 0080 1B21     		movs	r1, #27
 7068 0082 A847     		blx	r5
 7069 0084 0300     		movs	r3, r0
 7070 0086 2370     		strb	r3, [r4]
2850:bma2x2.c      **** 			(p_bma2x2->dev_addr,
2851:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_LOW_G_REG,
2852:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2853:bma2x2.c      **** 			*intr_low_g_u8 = BMA2x2_GET_BITSLICE
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 178


 7071              		.loc 1 2853 0
 7072 0088 0E23     		movs	r3, #14
 7073 008a FB18     		adds	r3, r7, r3
 7074 008c 1B78     		ldrb	r3, [r3]
 7075 008e 0122     		movs	r2, #1
 7076 0090 1340     		ands	r3, r2
 7077 0092 DAB2     		uxtb	r2, r3
 7078 0094 3B68     		ldr	r3, [r7]
 7079 0096 1A70     		strb	r2, [r3]
2854:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_INTR2_PAD_LOW_G);
2855:bma2x2.c      **** 		break;
 7080              		.loc 1 2855 0
 7081 0098 04E0     		b	.L401
 7082              	.L403:
2856:bma2x2.c      **** 		default:
2857:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 7083              		.loc 1 2857 0
 7084 009a 0F23     		movs	r3, #15
 7085 009c FB18     		adds	r3, r7, r3
 7086 009e FE22     		movs	r2, #254
 7087 00a0 1A70     		strb	r2, [r3]
2858:bma2x2.c      **** 		break;
 7088              		.loc 1 2858 0
 7089 00a2 C046     		nop
 7090              	.L401:
2859:bma2x2.c      **** 		}
2860:bma2x2.c      **** 	}
2861:bma2x2.c      **** 	return com_rslt;
 7091              		.loc 1 2861 0
 7092 00a4 0F23     		movs	r3, #15
 7093 00a6 FB18     		adds	r3, r7, r3
 7094 00a8 1B78     		ldrb	r3, [r3]
 7095 00aa 5BB2     		sxtb	r3, r3
 7096              	.L402:
2862:bma2x2.c      **** }
 7097              		.loc 1 2862 0 discriminator 1
 7098 00ac 1800     		movs	r0, r3
 7099 00ae BD46     		mov	sp, r7
 7100 00b0 04B0     		add	sp, sp, #16
 7101              		@ sp needed
 7102 00b2 B0BD     		pop	{r4, r5, r7, pc}
 7103              	.L405:
 7104              		.align	2
 7105              	.L404:
 7106 00b4 00000000 		.word	p_bma2x2
 7107              		.cfi_endproc
 7108              	.LFE43:
 7109              		.size	bma2x2_get_intr_low_g, .-bma2x2_get_intr_low_g
 7110              		.section	.text.bma2x2_set_intr_low_g,"ax",%progbits
 7111              		.align	2
 7112              		.global	bma2x2_set_intr_low_g
 7113              		.code	16
 7114              		.thumb_func
 7115              		.type	bma2x2_set_intr_low_g, %function
 7116              	bma2x2_set_intr_low_g:
 7117              	.LFB44:
2863:bma2x2.c      **** /*!
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 179


2864:bma2x2.c      ****  * @brief  This API is used to set
2865:bma2x2.c      ****  * the interrupt enable of low_g interrupt in the register 0x19 and 0x1B
2866:bma2x2.c      ****  * @note INTR1_Low_g -> register 0x19 bit 0
2867:bma2x2.c      ****  * @note INTR2_Low_g -> register 0x1B bit 0
2868:bma2x2.c      ****  *
2869:bma2x2.c      ****  *
2870:bma2x2.c      ****  *
2871:bma2x2.c      ****  *
2872:bma2x2.c      ****  * @param channel_u8 : The value of low interrupt selection channel
2873:bma2x2.c      ****  *        channel_u8     |   result
2874:bma2x2.c      ****  *       ----------------- | ------------------
2875:bma2x2.c      ****  *              0          | BMA2x2_ACCEL_INTR1_LOW_G
2876:bma2x2.c      ****  *              1          | BMA2x2_ACCEL_INTR2_LOW_G
2877:bma2x2.c      ****  *
2878:bma2x2.c      ****  * @param intr_low_u8 : the value of low_g interrupt
2879:bma2x2.c      ****  *        intr_low_u8           |   result
2880:bma2x2.c      ****  *       ------------------------ | ------------------
2881:bma2x2.c      ****  *              0x00              | INTR_DISABLE
2882:bma2x2.c      ****  *              0x01              | INTR_ENABLE
2883:bma2x2.c      ****  *
2884:bma2x2.c      ****  *
2885:bma2x2.c      ****  *
2886:bma2x2.c      ****  *	@return results of bus communication function
2887:bma2x2.c      ****  *	@retval 0 -> Success
2888:bma2x2.c      ****  *	@retval -1 -> Error
2889:bma2x2.c      ****  *
2890:bma2x2.c      ****  *
2891:bma2x2.c      ****  */
2892:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_intr_low_g(u8 channel_u8,
2893:bma2x2.c      **** u8 intr_low_u8)
2894:bma2x2.c      **** {
 7118              		.loc 1 2894 0
 7119              		.cfi_startproc
 7120              		@ args = 0, pretend = 0, frame = 16
 7121              		@ frame_needed = 1, uses_anonymous_args = 0
 7122 0000 B0B5     		push	{r4, r5, r7, lr}
 7123              		.cfi_def_cfa_offset 16
 7124              		.cfi_offset 4, -16
 7125              		.cfi_offset 5, -12
 7126              		.cfi_offset 7, -8
 7127              		.cfi_offset 14, -4
 7128 0002 84B0     		sub	sp, sp, #16
 7129              		.cfi_def_cfa_offset 32
 7130 0004 00AF     		add	r7, sp, #0
 7131              		.cfi_def_cfa_register 7
 7132 0006 0200     		movs	r2, r0
 7133 0008 FB1D     		adds	r3, r7, #7
 7134 000a 1A70     		strb	r2, [r3]
 7135 000c BB1D     		adds	r3, r7, #6
 7136 000e 0A1C     		adds	r2, r1, #0
 7137 0010 1A70     		strb	r2, [r3]
2895:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 7138              		.loc 1 2895 0
 7139 0012 0E23     		movs	r3, #14
 7140 0014 FB18     		adds	r3, r7, r3
 7141 0016 0022     		movs	r2, #0
 7142 0018 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 180


2896:bma2x2.c      **** 		/*  Variable used to return value of
2897:bma2x2.c      **** 	communication routine*/
2898:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 7143              		.loc 1 2898 0
 7144 001a 0F23     		movs	r3, #15
 7145 001c FB18     		adds	r3, r7, r3
 7146 001e FF22     		movs	r2, #255
 7147 0020 1A70     		strb	r2, [r3]
2899:bma2x2.c      **** 
2900:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 7148              		.loc 1 2900 0
 7149 0022 414B     		ldr	r3, .L415
 7150 0024 1B68     		ldr	r3, [r3]
 7151 0026 002B     		cmp	r3, #0
 7152 0028 02D1     		bne	.L407
2901:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
2902:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 7153              		.loc 1 2902 0
 7154 002a 7F23     		movs	r3, #127
 7155 002c 5B42     		rsbs	r3, r3, #0
 7156 002e 77E0     		b	.L413
 7157              	.L407:
2903:bma2x2.c      **** 		} else {
2904:bma2x2.c      **** 		switch (channel_u8) {
 7158              		.loc 1 2904 0
 7159 0030 FB1D     		adds	r3, r7, #7
 7160 0032 1B78     		ldrb	r3, [r3]
 7161 0034 002B     		cmp	r3, #0
 7162 0036 02D0     		beq	.L410
 7163 0038 012B     		cmp	r3, #1
 7164 003a 34D0     		beq	.L411
 7165 003c 67E0     		b	.L414
 7166              	.L410:
2905:bma2x2.c      **** 		case BMA2x2_INTR1_LOW_G:
2906:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 7167              		.loc 1 2906 0
 7168 003e 3A4B     		ldr	r3, .L415
 7169 0040 1B68     		ldr	r3, [r3]
 7170 0042 DD68     		ldr	r5, [r3, #12]
 7171 0044 384B     		ldr	r3, .L415
 7172 0046 1B68     		ldr	r3, [r3]
 7173 0048 1879     		ldrb	r0, [r3, #4]
 7174 004a 0F23     		movs	r3, #15
 7175 004c FC18     		adds	r4, r7, r3
 7176 004e 0E23     		movs	r3, #14
 7177 0050 FA18     		adds	r2, r7, r3
 7178 0052 0123     		movs	r3, #1
 7179 0054 1921     		movs	r1, #25
 7180 0056 A847     		blx	r5
 7181 0058 0300     		movs	r3, r0
 7182 005a 2370     		strb	r3, [r4]
2907:bma2x2.c      **** 			(p_bma2x2->dev_addr,
2908:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_LOW_G_REG,
2909:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2910:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE(data_u8,
 7183              		.loc 1 2910 0
 7184 005c 0E23     		movs	r3, #14
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 181


 7185 005e FB18     		adds	r3, r7, r3
 7186 0060 1B78     		ldrb	r3, [r3]
 7187 0062 5BB2     		sxtb	r3, r3
 7188 0064 0122     		movs	r2, #1
 7189 0066 9343     		bics	r3, r2
 7190 0068 5AB2     		sxtb	r2, r3
 7191 006a BB1D     		adds	r3, r7, #6
 7192 006c 1B78     		ldrb	r3, [r3]
 7193 006e 5BB2     		sxtb	r3, r3
 7194 0070 0121     		movs	r1, #1
 7195 0072 0B40     		ands	r3, r1
 7196 0074 5BB2     		sxtb	r3, r3
 7197 0076 1343     		orrs	r3, r2
 7198 0078 5BB2     		sxtb	r3, r3
 7199 007a DAB2     		uxtb	r2, r3
 7200 007c 0E23     		movs	r3, #14
 7201 007e FB18     		adds	r3, r7, r3
 7202 0080 1A70     		strb	r2, [r3]
2911:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_LOW_G, intr_low_u8);
2912:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 7203              		.loc 1 2912 0
 7204 0082 0E23     		movs	r3, #14
 7205 0084 FB18     		adds	r3, r7, r3
 7206 0086 0122     		movs	r2, #1
 7207 0088 1900     		movs	r1, r3
 7208 008a 1920     		movs	r0, #25
 7209 008c FFF7FEFF 		bl	bma2x2_write_reg
 7210 0090 0300     		movs	r3, r0
 7211 0092 DAB2     		uxtb	r2, r3
 7212 0094 0F23     		movs	r3, #15
 7213 0096 FB18     		adds	r3, r7, r3
 7214 0098 1B78     		ldrb	r3, [r3]
 7215 009a D318     		adds	r3, r2, r3
 7216 009c DAB2     		uxtb	r2, r3
 7217 009e 0F23     		movs	r3, #15
 7218 00a0 FB18     		adds	r3, r7, r3
 7219 00a2 1A70     		strb	r2, [r3]
2913:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_LOW_G_REG,
2914:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2915:bma2x2.c      **** 		break;
 7220              		.loc 1 2915 0
 7221 00a4 38E0     		b	.L412
 7222              	.L411:
2916:bma2x2.c      **** 		case BMA2x2_INTR2_LOW_G:
2917:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 7223              		.loc 1 2917 0
 7224 00a6 204B     		ldr	r3, .L415
 7225 00a8 1B68     		ldr	r3, [r3]
 7226 00aa DD68     		ldr	r5, [r3, #12]
 7227 00ac 1E4B     		ldr	r3, .L415
 7228 00ae 1B68     		ldr	r3, [r3]
 7229 00b0 1879     		ldrb	r0, [r3, #4]
 7230 00b2 0F23     		movs	r3, #15
 7231 00b4 FC18     		adds	r4, r7, r3
 7232 00b6 0E23     		movs	r3, #14
 7233 00b8 FA18     		adds	r2, r7, r3
 7234 00ba 0123     		movs	r3, #1
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 182


 7235 00bc 1B21     		movs	r1, #27
 7236 00be A847     		blx	r5
 7237 00c0 0300     		movs	r3, r0
 7238 00c2 2370     		strb	r3, [r4]
2918:bma2x2.c      **** 			(p_bma2x2->dev_addr,
2919:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_LOW_G_REG,
2920:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2921:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 7239              		.loc 1 2921 0
 7240 00c4 0E23     		movs	r3, #14
 7241 00c6 FB18     		adds	r3, r7, r3
 7242 00c8 1B78     		ldrb	r3, [r3]
 7243 00ca 5BB2     		sxtb	r3, r3
 7244 00cc 0122     		movs	r2, #1
 7245 00ce 9343     		bics	r3, r2
 7246 00d0 5AB2     		sxtb	r2, r3
 7247 00d2 BB1D     		adds	r3, r7, #6
 7248 00d4 1B78     		ldrb	r3, [r3]
 7249 00d6 5BB2     		sxtb	r3, r3
 7250 00d8 0121     		movs	r1, #1
 7251 00da 0B40     		ands	r3, r1
 7252 00dc 5BB2     		sxtb	r3, r3
 7253 00de 1343     		orrs	r3, r2
 7254 00e0 5BB2     		sxtb	r3, r3
 7255 00e2 DAB2     		uxtb	r2, r3
 7256 00e4 0E23     		movs	r3, #14
 7257 00e6 FB18     		adds	r3, r7, r3
 7258 00e8 1A70     		strb	r2, [r3]
2922:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_INTR2_PAD_LOW_G,
2923:bma2x2.c      **** 			intr_low_u8);
2924:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 7259              		.loc 1 2924 0
 7260 00ea 0E23     		movs	r3, #14
 7261 00ec FB18     		adds	r3, r7, r3
 7262 00ee 0122     		movs	r2, #1
 7263 00f0 1900     		movs	r1, r3
 7264 00f2 1B20     		movs	r0, #27
 7265 00f4 FFF7FEFF 		bl	bma2x2_write_reg
 7266 00f8 0300     		movs	r3, r0
 7267 00fa DAB2     		uxtb	r2, r3
 7268 00fc 0F23     		movs	r3, #15
 7269 00fe FB18     		adds	r3, r7, r3
 7270 0100 1B78     		ldrb	r3, [r3]
 7271 0102 D318     		adds	r3, r2, r3
 7272 0104 DAB2     		uxtb	r2, r3
 7273 0106 0F23     		movs	r3, #15
 7274 0108 FB18     		adds	r3, r7, r3
 7275 010a 1A70     		strb	r2, [r3]
2925:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_LOW_G_REG,
2926:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2927:bma2x2.c      **** 		break;
 7276              		.loc 1 2927 0
 7277 010c 04E0     		b	.L412
 7278              	.L414:
2928:bma2x2.c      **** 		default:
2929:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 7279              		.loc 1 2929 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 183


 7280 010e 0F23     		movs	r3, #15
 7281 0110 FB18     		adds	r3, r7, r3
 7282 0112 FE22     		movs	r2, #254
 7283 0114 1A70     		strb	r2, [r3]
2930:bma2x2.c      **** 		break;
 7284              		.loc 1 2930 0
 7285 0116 C046     		nop
 7286              	.L412:
2931:bma2x2.c      **** 		}
2932:bma2x2.c      **** 	}
2933:bma2x2.c      **** 	return com_rslt;
 7287              		.loc 1 2933 0
 7288 0118 0F23     		movs	r3, #15
 7289 011a FB18     		adds	r3, r7, r3
 7290 011c 1B78     		ldrb	r3, [r3]
 7291 011e 5BB2     		sxtb	r3, r3
 7292              	.L413:
2934:bma2x2.c      **** }
 7293              		.loc 1 2934 0 discriminator 1
 7294 0120 1800     		movs	r0, r3
 7295 0122 BD46     		mov	sp, r7
 7296 0124 04B0     		add	sp, sp, #16
 7297              		@ sp needed
 7298 0126 B0BD     		pop	{r4, r5, r7, pc}
 7299              	.L416:
 7300              		.align	2
 7301              	.L415:
 7302 0128 00000000 		.word	p_bma2x2
 7303              		.cfi_endproc
 7304              	.LFE44:
 7305              		.size	bma2x2_set_intr_low_g, .-bma2x2_set_intr_low_g
 7306              		.section	.text.bma2x2_get_intr_high_g,"ax",%progbits
 7307              		.align	2
 7308              		.global	bma2x2_get_intr_high_g
 7309              		.code	16
 7310              		.thumb_func
 7311              		.type	bma2x2_get_intr_high_g, %function
 7312              	bma2x2_get_intr_high_g:
 7313              	.LFB45:
2935:bma2x2.c      **** /*!
2936:bma2x2.c      ****  * @brief This API is used to get
2937:bma2x2.c      ****  * the interrupt enable of high_g interrupt in the register 0x19 and 0x1B
2938:bma2x2.c      ****  * @note INTR1_high_g -> register 0x19 bit 1
2939:bma2x2.c      ****  * @note INTR2_high_g -> register 0x1B bit 1
2940:bma2x2.c      ****  *
2941:bma2x2.c      ****  *
2942:bma2x2.c      ****  *  @param  channel_u8: The value of high_g interrupt selection
2943:bma2x2.c      ****  *        channel_u8     |   result
2944:bma2x2.c      ****  *       ----------------- | ------------------
2945:bma2x2.c      ****  *              0          | BMA2x2_ACCEL_INTR1_HIGH_G
2946:bma2x2.c      ****  *              1          | BMA2x2_ACCEL_INTR2_HIGH_G
2947:bma2x2.c      ****  *
2948:bma2x2.c      ****  * @param intr_high_g_u8 : the value of high_g interrupt
2949:bma2x2.c      ****  *        intr_high_g_u8        |   result
2950:bma2x2.c      ****  *       ------------------------ | ------------------
2951:bma2x2.c      ****  *              0x00              | INTR_DISABLE
2952:bma2x2.c      ****  *              0x01              | INTR_ENABLE
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 184


2953:bma2x2.c      ****  *
2954:bma2x2.c      ****  *
2955:bma2x2.c      ****  *	@return results of bus communication function
2956:bma2x2.c      ****  *	@retval 0 -> Success
2957:bma2x2.c      ****  *	@retval -1 -> Error
2958:bma2x2.c      ****  *
2959:bma2x2.c      ****  *
2960:bma2x2.c      ****  */
2961:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_intr_high_g(u8 channel_u8,
2962:bma2x2.c      **** u8 *intr_high_g_u8)
2963:bma2x2.c      **** {
 7314              		.loc 1 2963 0
 7315              		.cfi_startproc
 7316              		@ args = 0, pretend = 0, frame = 16
 7317              		@ frame_needed = 1, uses_anonymous_args = 0
 7318 0000 B0B5     		push	{r4, r5, r7, lr}
 7319              		.cfi_def_cfa_offset 16
 7320              		.cfi_offset 4, -16
 7321              		.cfi_offset 5, -12
 7322              		.cfi_offset 7, -8
 7323              		.cfi_offset 14, -4
 7324 0002 84B0     		sub	sp, sp, #16
 7325              		.cfi_def_cfa_offset 32
 7326 0004 00AF     		add	r7, sp, #0
 7327              		.cfi_def_cfa_register 7
 7328 0006 0200     		movs	r2, r0
 7329 0008 3960     		str	r1, [r7]
 7330 000a FB1D     		adds	r3, r7, #7
 7331 000c 1A70     		strb	r2, [r3]
2964:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 7332              		.loc 1 2964 0
 7333 000e 0E23     		movs	r3, #14
 7334 0010 FB18     		adds	r3, r7, r3
 7335 0012 0022     		movs	r2, #0
 7336 0014 1A70     		strb	r2, [r3]
2965:bma2x2.c      **** 	/*  Variable used to return value of
2966:bma2x2.c      **** 	communication routine*/
2967:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 7337              		.loc 1 2967 0
 7338 0016 0F23     		movs	r3, #15
 7339 0018 FB18     		adds	r3, r7, r3
 7340 001a FF22     		movs	r2, #255
 7341 001c 1A70     		strb	r2, [r3]
2968:bma2x2.c      **** 
2969:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 7342              		.loc 1 2969 0
 7343 001e 274B     		ldr	r3, .L426
 7344 0020 1B68     		ldr	r3, [r3]
 7345 0022 002B     		cmp	r3, #0
 7346 0024 02D1     		bne	.L418
2970:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
2971:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 7347              		.loc 1 2971 0
 7348 0026 7F23     		movs	r3, #127
 7349 0028 5B42     		rsbs	r3, r3, #0
 7350 002a 43E0     		b	.L424
 7351              	.L418:
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 185


2972:bma2x2.c      **** 		} else {
2973:bma2x2.c      **** 		switch (channel_u8) {
 7352              		.loc 1 2973 0
 7353 002c FB1D     		adds	r3, r7, #7
 7354 002e 1B78     		ldrb	r3, [r3]
 7355 0030 002B     		cmp	r3, #0
 7356 0032 02D0     		beq	.L421
 7357 0034 012B     		cmp	r3, #1
 7358 0036 1AD0     		beq	.L422
 7359 0038 33E0     		b	.L425
 7360              	.L421:
2974:bma2x2.c      **** 		/* read the high_g interrupt*/
2975:bma2x2.c      **** 		case BMA2x2_INTR1_HIGH_G:
2976:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 7361              		.loc 1 2976 0
 7362 003a 204B     		ldr	r3, .L426
 7363 003c 1B68     		ldr	r3, [r3]
 7364 003e DD68     		ldr	r5, [r3, #12]
 7365 0040 1E4B     		ldr	r3, .L426
 7366 0042 1B68     		ldr	r3, [r3]
 7367 0044 1879     		ldrb	r0, [r3, #4]
 7368 0046 0F23     		movs	r3, #15
 7369 0048 FC18     		adds	r4, r7, r3
 7370 004a 0E23     		movs	r3, #14
 7371 004c FA18     		adds	r2, r7, r3
 7372 004e 0123     		movs	r3, #1
 7373 0050 1921     		movs	r1, #25
 7374 0052 A847     		blx	r5
 7375 0054 0300     		movs	r3, r0
 7376 0056 2370     		strb	r3, [r4]
2977:bma2x2.c      **** 			(p_bma2x2->dev_addr,
2978:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_HIGH_G_REG,
2979:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2980:bma2x2.c      **** 			*intr_high_g_u8 = BMA2x2_GET_BITSLICE
 7377              		.loc 1 2980 0
 7378 0058 0E23     		movs	r3, #14
 7379 005a FB18     		adds	r3, r7, r3
 7380 005c 1B78     		ldrb	r3, [r3]
 7381 005e 5B10     		asrs	r3, r3, #1
 7382 0060 DBB2     		uxtb	r3, r3
 7383 0062 0122     		movs	r2, #1
 7384 0064 1340     		ands	r3, r2
 7385 0066 DAB2     		uxtb	r2, r3
 7386 0068 3B68     		ldr	r3, [r7]
 7387 006a 1A70     		strb	r2, [r3]
2981:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_INTR1_PAD_HIGH_G);
2982:bma2x2.c      **** 		break;
 7388              		.loc 1 2982 0
 7389 006c 1EE0     		b	.L423
 7390              	.L422:
2983:bma2x2.c      **** 		case BMA2x2_INTR2_HIGH_G:
2984:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 7391              		.loc 1 2984 0
 7392 006e 134B     		ldr	r3, .L426
 7393 0070 1B68     		ldr	r3, [r3]
 7394 0072 DD68     		ldr	r5, [r3, #12]
 7395 0074 114B     		ldr	r3, .L426
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 186


 7396 0076 1B68     		ldr	r3, [r3]
 7397 0078 1879     		ldrb	r0, [r3, #4]
 7398 007a 0F23     		movs	r3, #15
 7399 007c FC18     		adds	r4, r7, r3
 7400 007e 0E23     		movs	r3, #14
 7401 0080 FA18     		adds	r2, r7, r3
 7402 0082 0123     		movs	r3, #1
 7403 0084 1B21     		movs	r1, #27
 7404 0086 A847     		blx	r5
 7405 0088 0300     		movs	r3, r0
 7406 008a 2370     		strb	r3, [r4]
2985:bma2x2.c      **** 			(p_bma2x2->dev_addr,
2986:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_HIGH_G_REG,
2987:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
2988:bma2x2.c      **** 			*intr_high_g_u8 = BMA2x2_GET_BITSLICE
 7407              		.loc 1 2988 0
 7408 008c 0E23     		movs	r3, #14
 7409 008e FB18     		adds	r3, r7, r3
 7410 0090 1B78     		ldrb	r3, [r3]
 7411 0092 5B10     		asrs	r3, r3, #1
 7412 0094 DBB2     		uxtb	r3, r3
 7413 0096 0122     		movs	r2, #1
 7414 0098 1340     		ands	r3, r2
 7415 009a DAB2     		uxtb	r2, r3
 7416 009c 3B68     		ldr	r3, [r7]
 7417 009e 1A70     		strb	r2, [r3]
2989:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_INTR2_PAD_HIGH_G);
2990:bma2x2.c      **** 		break;
 7418              		.loc 1 2990 0
 7419 00a0 04E0     		b	.L423
 7420              	.L425:
2991:bma2x2.c      **** 		default:
2992:bma2x2.c      **** 		com_rslt = E_OUT_OF_RANGE;
 7421              		.loc 1 2992 0
 7422 00a2 0F23     		movs	r3, #15
 7423 00a4 FB18     		adds	r3, r7, r3
 7424 00a6 FE22     		movs	r2, #254
 7425 00a8 1A70     		strb	r2, [r3]
2993:bma2x2.c      **** 		break;
 7426              		.loc 1 2993 0
 7427 00aa C046     		nop
 7428              	.L423:
2994:bma2x2.c      **** 		}
2995:bma2x2.c      **** 	}
2996:bma2x2.c      **** 	return com_rslt;
 7429              		.loc 1 2996 0
 7430 00ac 0F23     		movs	r3, #15
 7431 00ae FB18     		adds	r3, r7, r3
 7432 00b0 1B78     		ldrb	r3, [r3]
 7433 00b2 5BB2     		sxtb	r3, r3
 7434              	.L424:
2997:bma2x2.c      **** }
 7435              		.loc 1 2997 0 discriminator 1
 7436 00b4 1800     		movs	r0, r3
 7437 00b6 BD46     		mov	sp, r7
 7438 00b8 04B0     		add	sp, sp, #16
 7439              		@ sp needed
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 187


 7440 00ba B0BD     		pop	{r4, r5, r7, pc}
 7441              	.L427:
 7442              		.align	2
 7443              	.L426:
 7444 00bc 00000000 		.word	p_bma2x2
 7445              		.cfi_endproc
 7446              	.LFE45:
 7447              		.size	bma2x2_get_intr_high_g, .-bma2x2_get_intr_high_g
 7448              		.section	.text.bma2x2_set_intr_high_g,"ax",%progbits
 7449              		.align	2
 7450              		.global	bma2x2_set_intr_high_g
 7451              		.code	16
 7452              		.thumb_func
 7453              		.type	bma2x2_set_intr_high_g, %function
 7454              	bma2x2_set_intr_high_g:
 7455              	.LFB46:
2998:bma2x2.c      **** /*!
2999:bma2x2.c      ****  * @brief This API is used to set
3000:bma2x2.c      ****  * the interrupt enable of high_g interrupt in the register 0x19 and 0x1B
3001:bma2x2.c      ****  * @note INTR1_high_g -> register 0x19 bit 1
3002:bma2x2.c      ****  * @note INTR2_high_g -> register 0x1B bit 1
3003:bma2x2.c      ****  *
3004:bma2x2.c      ****  *
3005:bma2x2.c      ****  *  @param  channel_u8: The value of high_g interrupt selection
3006:bma2x2.c      ****  *        channel_u8     |   result
3007:bma2x2.c      ****  *       ----------------- | ------------------
3008:bma2x2.c      ****  *              0          | BMA2x2_ACCEL_INTR1_HIGH_G
3009:bma2x2.c      ****  *              1          | BMA2x2_ACCEL_INTR2_HIGH_G
3010:bma2x2.c      ****  *
3011:bma2x2.c      ****  * @param intr_high_g_u8 : the value of high_g interrupt
3012:bma2x2.c      ****  *        intr_high_g_u8        |   result
3013:bma2x2.c      ****  *       ------------------------ | ------------------
3014:bma2x2.c      ****  *              0x00              | INTR_DISABLE
3015:bma2x2.c      ****  *              0x01              | INTR_ENABLE
3016:bma2x2.c      ****  *
3017:bma2x2.c      ****  *
3018:bma2x2.c      ****  *	@return results of bus communication function
3019:bma2x2.c      ****  *	@retval 0 -> Success
3020:bma2x2.c      ****  *	@retval -1 -> Error
3021:bma2x2.c      ****  *
3022:bma2x2.c      ****  *
3023:bma2x2.c      ****  */
3024:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_intr_high_g(u8 channel_u8,
3025:bma2x2.c      **** u8 intr_high_g_u8)
3026:bma2x2.c      **** {
 7456              		.loc 1 3026 0
 7457              		.cfi_startproc
 7458              		@ args = 0, pretend = 0, frame = 16
 7459              		@ frame_needed = 1, uses_anonymous_args = 0
 7460 0000 B0B5     		push	{r4, r5, r7, lr}
 7461              		.cfi_def_cfa_offset 16
 7462              		.cfi_offset 4, -16
 7463              		.cfi_offset 5, -12
 7464              		.cfi_offset 7, -8
 7465              		.cfi_offset 14, -4
 7466 0002 84B0     		sub	sp, sp, #16
 7467              		.cfi_def_cfa_offset 32
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 188


 7468 0004 00AF     		add	r7, sp, #0
 7469              		.cfi_def_cfa_register 7
 7470 0006 0200     		movs	r2, r0
 7471 0008 FB1D     		adds	r3, r7, #7
 7472 000a 1A70     		strb	r2, [r3]
 7473 000c BB1D     		adds	r3, r7, #6
 7474 000e 0A1C     		adds	r2, r1, #0
 7475 0010 1A70     		strb	r2, [r3]
3027:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 7476              		.loc 1 3027 0
 7477 0012 0E23     		movs	r3, #14
 7478 0014 FB18     		adds	r3, r7, r3
 7479 0016 0022     		movs	r2, #0
 7480 0018 1A70     		strb	r2, [r3]
3028:bma2x2.c      **** 	/*  Variable used to return value of
3029:bma2x2.c      **** 	communication routine*/
3030:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 7481              		.loc 1 3030 0
 7482 001a 0F23     		movs	r3, #15
 7483 001c FB18     		adds	r3, r7, r3
 7484 001e FF22     		movs	r2, #255
 7485 0020 1A70     		strb	r2, [r3]
3031:bma2x2.c      **** 
3032:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 7486              		.loc 1 3032 0
 7487 0022 424B     		ldr	r3, .L437
 7488 0024 1B68     		ldr	r3, [r3]
 7489 0026 002B     		cmp	r3, #0
 7490 0028 02D1     		bne	.L429
3033:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
3034:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 7491              		.loc 1 3034 0
 7492 002a 7F23     		movs	r3, #127
 7493 002c 5B42     		rsbs	r3, r3, #0
 7494 002e 79E0     		b	.L435
 7495              	.L429:
3035:bma2x2.c      **** 		} else {
3036:bma2x2.c      **** 		/* write the high_g interrupt*/
3037:bma2x2.c      **** 		switch (channel_u8) {
 7496              		.loc 1 3037 0
 7497 0030 FB1D     		adds	r3, r7, #7
 7498 0032 1B78     		ldrb	r3, [r3]
 7499 0034 002B     		cmp	r3, #0
 7500 0036 02D0     		beq	.L432
 7501 0038 012B     		cmp	r3, #1
 7502 003a 35D0     		beq	.L433
 7503 003c 69E0     		b	.L436
 7504              	.L432:
3038:bma2x2.c      **** 		case BMA2x2_INTR1_HIGH_G:
3039:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 7505              		.loc 1 3039 0
 7506 003e 3B4B     		ldr	r3, .L437
 7507 0040 1B68     		ldr	r3, [r3]
 7508 0042 DD68     		ldr	r5, [r3, #12]
 7509 0044 394B     		ldr	r3, .L437
 7510 0046 1B68     		ldr	r3, [r3]
 7511 0048 1879     		ldrb	r0, [r3, #4]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 189


 7512 004a 0F23     		movs	r3, #15
 7513 004c FC18     		adds	r4, r7, r3
 7514 004e 0E23     		movs	r3, #14
 7515 0050 FA18     		adds	r2, r7, r3
 7516 0052 0123     		movs	r3, #1
 7517 0054 1921     		movs	r1, #25
 7518 0056 A847     		blx	r5
 7519 0058 0300     		movs	r3, r0
 7520 005a 2370     		strb	r3, [r4]
3040:bma2x2.c      **** 			(p_bma2x2->dev_addr,
3041:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_HIGH_G_REG,
3042:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3043:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 7521              		.loc 1 3043 0
 7522 005c 0E23     		movs	r3, #14
 7523 005e FB18     		adds	r3, r7, r3
 7524 0060 1B78     		ldrb	r3, [r3]
 7525 0062 5BB2     		sxtb	r3, r3
 7526 0064 0222     		movs	r2, #2
 7527 0066 9343     		bics	r3, r2
 7528 0068 5AB2     		sxtb	r2, r3
 7529 006a BB1D     		adds	r3, r7, #6
 7530 006c 1B78     		ldrb	r3, [r3]
 7531 006e 5B00     		lsls	r3, r3, #1
 7532 0070 5BB2     		sxtb	r3, r3
 7533 0072 0221     		movs	r1, #2
 7534 0074 0B40     		ands	r3, r1
 7535 0076 5BB2     		sxtb	r3, r3
 7536 0078 1343     		orrs	r3, r2
 7537 007a 5BB2     		sxtb	r3, r3
 7538 007c DAB2     		uxtb	r2, r3
 7539 007e 0E23     		movs	r3, #14
 7540 0080 FB18     		adds	r3, r7, r3
 7541 0082 1A70     		strb	r2, [r3]
3044:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_INTR1_PAD_HIGH_G,
3045:bma2x2.c      **** 			intr_high_g_u8);
3046:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 7542              		.loc 1 3046 0
 7543 0084 0E23     		movs	r3, #14
 7544 0086 FB18     		adds	r3, r7, r3
 7545 0088 0122     		movs	r2, #1
 7546 008a 1900     		movs	r1, r3
 7547 008c 1920     		movs	r0, #25
 7548 008e FFF7FEFF 		bl	bma2x2_write_reg
 7549 0092 0300     		movs	r3, r0
 7550 0094 DAB2     		uxtb	r2, r3
 7551 0096 0F23     		movs	r3, #15
 7552 0098 FB18     		adds	r3, r7, r3
 7553 009a 1B78     		ldrb	r3, [r3]
 7554 009c D318     		adds	r3, r2, r3
 7555 009e DAB2     		uxtb	r2, r3
 7556 00a0 0F23     		movs	r3, #15
 7557 00a2 FB18     		adds	r3, r7, r3
 7558 00a4 1A70     		strb	r2, [r3]
3047:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_HIGH_G_REG,
3048:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3049:bma2x2.c      **** 		break;
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 190


 7559              		.loc 1 3049 0
 7560 00a6 39E0     		b	.L434
 7561              	.L433:
3050:bma2x2.c      **** 		case BMA2x2_INTR2_HIGH_G:
3051:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 7562              		.loc 1 3051 0
 7563 00a8 204B     		ldr	r3, .L437
 7564 00aa 1B68     		ldr	r3, [r3]
 7565 00ac DD68     		ldr	r5, [r3, #12]
 7566 00ae 1F4B     		ldr	r3, .L437
 7567 00b0 1B68     		ldr	r3, [r3]
 7568 00b2 1879     		ldrb	r0, [r3, #4]
 7569 00b4 0F23     		movs	r3, #15
 7570 00b6 FC18     		adds	r4, r7, r3
 7571 00b8 0E23     		movs	r3, #14
 7572 00ba FA18     		adds	r2, r7, r3
 7573 00bc 0123     		movs	r3, #1
 7574 00be 1B21     		movs	r1, #27
 7575 00c0 A847     		blx	r5
 7576 00c2 0300     		movs	r3, r0
 7577 00c4 2370     		strb	r3, [r4]
3052:bma2x2.c      **** 			(p_bma2x2->dev_addr,
3053:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_HIGH_G_REG,
3054:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3055:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 7578              		.loc 1 3055 0
 7579 00c6 0E23     		movs	r3, #14
 7580 00c8 FB18     		adds	r3, r7, r3
 7581 00ca 1B78     		ldrb	r3, [r3]
 7582 00cc 5BB2     		sxtb	r3, r3
 7583 00ce 0222     		movs	r2, #2
 7584 00d0 9343     		bics	r3, r2
 7585 00d2 5AB2     		sxtb	r2, r3
 7586 00d4 BB1D     		adds	r3, r7, #6
 7587 00d6 1B78     		ldrb	r3, [r3]
 7588 00d8 5B00     		lsls	r3, r3, #1
 7589 00da 5BB2     		sxtb	r3, r3
 7590 00dc 0221     		movs	r1, #2
 7591 00de 0B40     		ands	r3, r1
 7592 00e0 5BB2     		sxtb	r3, r3
 7593 00e2 1343     		orrs	r3, r2
 7594 00e4 5BB2     		sxtb	r3, r3
 7595 00e6 DAB2     		uxtb	r2, r3
 7596 00e8 0E23     		movs	r3, #14
 7597 00ea FB18     		adds	r3, r7, r3
 7598 00ec 1A70     		strb	r2, [r3]
3056:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_INTR2_PAD_HIGH_G,
3057:bma2x2.c      **** 			intr_high_g_u8);
3058:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 7599              		.loc 1 3058 0
 7600 00ee 0E23     		movs	r3, #14
 7601 00f0 FB18     		adds	r3, r7, r3
 7602 00f2 0122     		movs	r2, #1
 7603 00f4 1900     		movs	r1, r3
 7604 00f6 1B20     		movs	r0, #27
 7605 00f8 FFF7FEFF 		bl	bma2x2_write_reg
 7606 00fc 0300     		movs	r3, r0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 191


 7607 00fe DAB2     		uxtb	r2, r3
 7608 0100 0F23     		movs	r3, #15
 7609 0102 FB18     		adds	r3, r7, r3
 7610 0104 1B78     		ldrb	r3, [r3]
 7611 0106 D318     		adds	r3, r2, r3
 7612 0108 DAB2     		uxtb	r2, r3
 7613 010a 0F23     		movs	r3, #15
 7614 010c FB18     		adds	r3, r7, r3
 7615 010e 1A70     		strb	r2, [r3]
3059:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_HIGH_G_REG,
3060:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3061:bma2x2.c      **** 		break;
 7616              		.loc 1 3061 0
 7617 0110 04E0     		b	.L434
 7618              	.L436:
3062:bma2x2.c      **** 		default:
3063:bma2x2.c      **** 		com_rslt = E_OUT_OF_RANGE;
 7619              		.loc 1 3063 0
 7620 0112 0F23     		movs	r3, #15
 7621 0114 FB18     		adds	r3, r7, r3
 7622 0116 FE22     		movs	r2, #254
 7623 0118 1A70     		strb	r2, [r3]
3064:bma2x2.c      **** 		break;
 7624              		.loc 1 3064 0
 7625 011a C046     		nop
 7626              	.L434:
3065:bma2x2.c      **** 		}
3066:bma2x2.c      **** 	}
3067:bma2x2.c      **** 	return com_rslt;
 7627              		.loc 1 3067 0
 7628 011c 0F23     		movs	r3, #15
 7629 011e FB18     		adds	r3, r7, r3
 7630 0120 1B78     		ldrb	r3, [r3]
 7631 0122 5BB2     		sxtb	r3, r3
 7632              	.L435:
3068:bma2x2.c      **** }
 7633              		.loc 1 3068 0 discriminator 1
 7634 0124 1800     		movs	r0, r3
 7635 0126 BD46     		mov	sp, r7
 7636 0128 04B0     		add	sp, sp, #16
 7637              		@ sp needed
 7638 012a B0BD     		pop	{r4, r5, r7, pc}
 7639              	.L438:
 7640              		.align	2
 7641              	.L437:
 7642 012c 00000000 		.word	p_bma2x2
 7643              		.cfi_endproc
 7644              	.LFE46:
 7645              		.size	bma2x2_set_intr_high_g, .-bma2x2_set_intr_high_g
 7646              		.section	.text.bma2x2_get_intr_slope,"ax",%progbits
 7647              		.align	2
 7648              		.global	bma2x2_get_intr_slope
 7649              		.code	16
 7650              		.thumb_func
 7651              		.type	bma2x2_get_intr_slope, %function
 7652              	bma2x2_get_intr_slope:
 7653              	.LFB47:
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 192


3069:bma2x2.c      **** /*!
3070:bma2x2.c      ****  * @brief This API is used to get
3071:bma2x2.c      ****  * the interrupt enable of slope interrupt in the register 0x19 and 0x1B
3072:bma2x2.c      ****  * @note INTR1_slope -> register 0x19 bit 2
3073:bma2x2.c      ****  * @note INTR2_slope -> register 0x1B bit 2
3074:bma2x2.c      ****  *
3075:bma2x2.c      ****  *
3076:bma2x2.c      ****  *
3077:bma2x2.c      ****  * @param channel_u8: the value of slope channel select
3078:bma2x2.c      ****  *        channel_u8     |   result
3079:bma2x2.c      ****  *       ----------------- | ------------------
3080:bma2x2.c      ****  *              0          | BMA2x2_ACCEL_INTR1_SLOPE
3081:bma2x2.c      ****  *              1          | BMA2x2_ACCEL_INTR2_SLOPE
3082:bma2x2.c      ****  *
3083:bma2x2.c      ****  * @param intr_slope_u8 : The slope value enable value
3084:bma2x2.c      ****  *        intr_slope_u8         |   result
3085:bma2x2.c      ****  *       ------------------------ | ------------------
3086:bma2x2.c      ****  *              0x00              | INTR_DISABLE
3087:bma2x2.c      ****  *              0x01              | INTR_ENABLE
3088:bma2x2.c      ****  *
3089:bma2x2.c      ****  *
3090:bma2x2.c      ****  *
3091:bma2x2.c      ****  *	@return results of bus communication function
3092:bma2x2.c      ****  *	@retval 0 -> Success
3093:bma2x2.c      ****  *	@retval -1 -> Error
3094:bma2x2.c      ****  *
3095:bma2x2.c      ****  *
3096:bma2x2.c      ****  */
3097:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_intr_slope(u8 channel_u8,
3098:bma2x2.c      **** u8 *intr_slope_u8)
3099:bma2x2.c      **** {
 7654              		.loc 1 3099 0
 7655              		.cfi_startproc
 7656              		@ args = 0, pretend = 0, frame = 16
 7657              		@ frame_needed = 1, uses_anonymous_args = 0
 7658 0000 B0B5     		push	{r4, r5, r7, lr}
 7659              		.cfi_def_cfa_offset 16
 7660              		.cfi_offset 4, -16
 7661              		.cfi_offset 5, -12
 7662              		.cfi_offset 7, -8
 7663              		.cfi_offset 14, -4
 7664 0002 84B0     		sub	sp, sp, #16
 7665              		.cfi_def_cfa_offset 32
 7666 0004 00AF     		add	r7, sp, #0
 7667              		.cfi_def_cfa_register 7
 7668 0006 0200     		movs	r2, r0
 7669 0008 3960     		str	r1, [r7]
 7670 000a FB1D     		adds	r3, r7, #7
 7671 000c 1A70     		strb	r2, [r3]
3100:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 7672              		.loc 1 3100 0
 7673 000e 0E23     		movs	r3, #14
 7674 0010 FB18     		adds	r3, r7, r3
 7675 0012 0022     		movs	r2, #0
 7676 0014 1A70     		strb	r2, [r3]
3101:bma2x2.c      **** 		/*  Variable used to return value of
3102:bma2x2.c      **** 	communication routine*/
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 193


3103:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 7677              		.loc 1 3103 0
 7678 0016 0F23     		movs	r3, #15
 7679 0018 FB18     		adds	r3, r7, r3
 7680 001a FF22     		movs	r2, #255
 7681 001c 1A70     		strb	r2, [r3]
3104:bma2x2.c      **** 
3105:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 7682              		.loc 1 3105 0
 7683 001e 274B     		ldr	r3, .L448
 7684 0020 1B68     		ldr	r3, [r3]
 7685 0022 002B     		cmp	r3, #0
 7686 0024 02D1     		bne	.L440
3106:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
3107:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 7687              		.loc 1 3107 0
 7688 0026 7F23     		movs	r3, #127
 7689 0028 5B42     		rsbs	r3, r3, #0
 7690 002a 43E0     		b	.L446
 7691              	.L440:
3108:bma2x2.c      **** 		} else {
3109:bma2x2.c      **** 		/* Read the slope value */
3110:bma2x2.c      **** 		switch (channel_u8) {
 7692              		.loc 1 3110 0
 7693 002c FB1D     		adds	r3, r7, #7
 7694 002e 1B78     		ldrb	r3, [r3]
 7695 0030 002B     		cmp	r3, #0
 7696 0032 02D0     		beq	.L443
 7697 0034 012B     		cmp	r3, #1
 7698 0036 1AD0     		beq	.L444
 7699 0038 33E0     		b	.L447
 7700              	.L443:
3111:bma2x2.c      **** 		case BMA2x2_INTR1_SLOPE:
3112:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 7701              		.loc 1 3112 0
 7702 003a 204B     		ldr	r3, .L448
 7703 003c 1B68     		ldr	r3, [r3]
 7704 003e DD68     		ldr	r5, [r3, #12]
 7705 0040 1E4B     		ldr	r3, .L448
 7706 0042 1B68     		ldr	r3, [r3]
 7707 0044 1879     		ldrb	r0, [r3, #4]
 7708 0046 0F23     		movs	r3, #15
 7709 0048 FC18     		adds	r4, r7, r3
 7710 004a 0E23     		movs	r3, #14
 7711 004c FA18     		adds	r2, r7, r3
 7712 004e 0123     		movs	r3, #1
 7713 0050 1921     		movs	r1, #25
 7714 0052 A847     		blx	r5
 7715 0054 0300     		movs	r3, r0
 7716 0056 2370     		strb	r3, [r4]
3113:bma2x2.c      **** 			(p_bma2x2->dev_addr,
3114:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_SLOPE_REG,
3115:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3116:bma2x2.c      **** 			*intr_slope_u8 = BMA2x2_GET_BITSLICE
 7717              		.loc 1 3116 0
 7718 0058 0E23     		movs	r3, #14
 7719 005a FB18     		adds	r3, r7, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 194


 7720 005c 1B78     		ldrb	r3, [r3]
 7721 005e 9B10     		asrs	r3, r3, #2
 7722 0060 DBB2     		uxtb	r3, r3
 7723 0062 0122     		movs	r2, #1
 7724 0064 1340     		ands	r3, r2
 7725 0066 DAB2     		uxtb	r2, r3
 7726 0068 3B68     		ldr	r3, [r7]
 7727 006a 1A70     		strb	r2, [r3]
3117:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_INTR1_PAD_SLOPE);
3118:bma2x2.c      **** 		break;
 7728              		.loc 1 3118 0
 7729 006c 1EE0     		b	.L445
 7730              	.L444:
3119:bma2x2.c      **** 		case BMA2x2_INTR2_SLOPE:
3120:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 7731              		.loc 1 3120 0
 7732 006e 134B     		ldr	r3, .L448
 7733 0070 1B68     		ldr	r3, [r3]
 7734 0072 DD68     		ldr	r5, [r3, #12]
 7735 0074 114B     		ldr	r3, .L448
 7736 0076 1B68     		ldr	r3, [r3]
 7737 0078 1879     		ldrb	r0, [r3, #4]
 7738 007a 0F23     		movs	r3, #15
 7739 007c FC18     		adds	r4, r7, r3
 7740 007e 0E23     		movs	r3, #14
 7741 0080 FA18     		adds	r2, r7, r3
 7742 0082 0123     		movs	r3, #1
 7743 0084 1B21     		movs	r1, #27
 7744 0086 A847     		blx	r5
 7745 0088 0300     		movs	r3, r0
 7746 008a 2370     		strb	r3, [r4]
3121:bma2x2.c      **** 			(p_bma2x2->dev_addr,
3122:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_SLOPE_REG,
3123:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3124:bma2x2.c      **** 			*intr_slope_u8 = BMA2x2_GET_BITSLICE
 7747              		.loc 1 3124 0
 7748 008c 0E23     		movs	r3, #14
 7749 008e FB18     		adds	r3, r7, r3
 7750 0090 1B78     		ldrb	r3, [r3]
 7751 0092 9B10     		asrs	r3, r3, #2
 7752 0094 DBB2     		uxtb	r3, r3
 7753 0096 0122     		movs	r2, #1
 7754 0098 1340     		ands	r3, r2
 7755 009a DAB2     		uxtb	r2, r3
 7756 009c 3B68     		ldr	r3, [r7]
 7757 009e 1A70     		strb	r2, [r3]
3125:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_INTR2_PAD_SLOPE);
3126:bma2x2.c      **** 		break;
 7758              		.loc 1 3126 0
 7759 00a0 04E0     		b	.L445
 7760              	.L447:
3127:bma2x2.c      **** 		default:
3128:bma2x2.c      **** 		com_rslt = E_OUT_OF_RANGE;
 7761              		.loc 1 3128 0
 7762 00a2 0F23     		movs	r3, #15
 7763 00a4 FB18     		adds	r3, r7, r3
 7764 00a6 FE22     		movs	r2, #254
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 195


 7765 00a8 1A70     		strb	r2, [r3]
3129:bma2x2.c      **** 		break;
 7766              		.loc 1 3129 0
 7767 00aa C046     		nop
 7768              	.L445:
3130:bma2x2.c      **** 		}
3131:bma2x2.c      **** 	}
3132:bma2x2.c      **** 	return com_rslt;
 7769              		.loc 1 3132 0
 7770 00ac 0F23     		movs	r3, #15
 7771 00ae FB18     		adds	r3, r7, r3
 7772 00b0 1B78     		ldrb	r3, [r3]
 7773 00b2 5BB2     		sxtb	r3, r3
 7774              	.L446:
3133:bma2x2.c      **** }
 7775              		.loc 1 3133 0 discriminator 1
 7776 00b4 1800     		movs	r0, r3
 7777 00b6 BD46     		mov	sp, r7
 7778 00b8 04B0     		add	sp, sp, #16
 7779              		@ sp needed
 7780 00ba B0BD     		pop	{r4, r5, r7, pc}
 7781              	.L449:
 7782              		.align	2
 7783              	.L448:
 7784 00bc 00000000 		.word	p_bma2x2
 7785              		.cfi_endproc
 7786              	.LFE47:
 7787              		.size	bma2x2_get_intr_slope, .-bma2x2_get_intr_slope
 7788              		.section	.text.bma2x2_set_intr_slope,"ax",%progbits
 7789              		.align	2
 7790              		.global	bma2x2_set_intr_slope
 7791              		.code	16
 7792              		.thumb_func
 7793              		.type	bma2x2_set_intr_slope, %function
 7794              	bma2x2_set_intr_slope:
 7795              	.LFB48:
3134:bma2x2.c      **** /*!
3135:bma2x2.c      ****  * @brief This API is used to set
3136:bma2x2.c      ****  * the interrupt enable of slope interrupt in the register 0x19 and 0x1B
3137:bma2x2.c      ****  * @note INTR1_slope -> register 0x19 bit 2
3138:bma2x2.c      ****  * @note INTR2_slope -> register 0x1B bit 2
3139:bma2x2.c      ****  *
3140:bma2x2.c      ****  *
3141:bma2x2.c      ****  *
3142:bma2x2.c      ****  * @param channel_u8: the value of slope channel select
3143:bma2x2.c      ****  *        channel_u8     |   result
3144:bma2x2.c      ****  *       ----------------- | ------------------
3145:bma2x2.c      ****  *              0          | BMA2x2_ACCEL_INTR1_SLOPE
3146:bma2x2.c      ****  *              1          | BMA2x2_ACCEL_INTR2_SLOPE
3147:bma2x2.c      ****  *
3148:bma2x2.c      ****  * @param intr_slope_u8 : The slope value enable value
3149:bma2x2.c      ****  *        intr_slope_u8         |   result
3150:bma2x2.c      ****  *       ------------------------ | ------------------
3151:bma2x2.c      ****  *              0x00              | INTR_DISABLE
3152:bma2x2.c      ****  *              0x01              | INTR_ENABLE
3153:bma2x2.c      ****  *
3154:bma2x2.c      ****  *
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 196


3155:bma2x2.c      ****  *
3156:bma2x2.c      ****  *	@return results of bus communication function
3157:bma2x2.c      ****  *	@retval 0 -> Success
3158:bma2x2.c      ****  *	@retval -1 -> Error
3159:bma2x2.c      ****  *
3160:bma2x2.c      ****  *
3161:bma2x2.c      ****  */
3162:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_intr_slope(u8 channel_u8,
3163:bma2x2.c      **** u8 intr_slope_u8)
3164:bma2x2.c      **** {
 7796              		.loc 1 3164 0
 7797              		.cfi_startproc
 7798              		@ args = 0, pretend = 0, frame = 16
 7799              		@ frame_needed = 1, uses_anonymous_args = 0
 7800 0000 B0B5     		push	{r4, r5, r7, lr}
 7801              		.cfi_def_cfa_offset 16
 7802              		.cfi_offset 4, -16
 7803              		.cfi_offset 5, -12
 7804              		.cfi_offset 7, -8
 7805              		.cfi_offset 14, -4
 7806 0002 84B0     		sub	sp, sp, #16
 7807              		.cfi_def_cfa_offset 32
 7808 0004 00AF     		add	r7, sp, #0
 7809              		.cfi_def_cfa_register 7
 7810 0006 0200     		movs	r2, r0
 7811 0008 FB1D     		adds	r3, r7, #7
 7812 000a 1A70     		strb	r2, [r3]
 7813 000c BB1D     		adds	r3, r7, #6
 7814 000e 0A1C     		adds	r2, r1, #0
 7815 0010 1A70     		strb	r2, [r3]
3165:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 7816              		.loc 1 3165 0
 7817 0012 0E23     		movs	r3, #14
 7818 0014 FB18     		adds	r3, r7, r3
 7819 0016 0022     		movs	r2, #0
 7820 0018 1A70     		strb	r2, [r3]
3166:bma2x2.c      **** 		/*  Variable used to return value of
3167:bma2x2.c      **** 	communication routine*/
3168:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 7821              		.loc 1 3168 0
 7822 001a 0F23     		movs	r3, #15
 7823 001c FB18     		adds	r3, r7, r3
 7824 001e FF22     		movs	r2, #255
 7825 0020 1A70     		strb	r2, [r3]
3169:bma2x2.c      **** 
3170:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 7826              		.loc 1 3170 0
 7827 0022 424B     		ldr	r3, .L459
 7828 0024 1B68     		ldr	r3, [r3]
 7829 0026 002B     		cmp	r3, #0
 7830 0028 02D1     		bne	.L451
3171:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
3172:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 7831              		.loc 1 3172 0
 7832 002a 7F23     		movs	r3, #127
 7833 002c 5B42     		rsbs	r3, r3, #0
 7834 002e 79E0     		b	.L457
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 197


 7835              	.L451:
3173:bma2x2.c      **** 		} else {
3174:bma2x2.c      **** 		switch (channel_u8) {
 7836              		.loc 1 3174 0
 7837 0030 FB1D     		adds	r3, r7, #7
 7838 0032 1B78     		ldrb	r3, [r3]
 7839 0034 002B     		cmp	r3, #0
 7840 0036 02D0     		beq	.L454
 7841 0038 012B     		cmp	r3, #1
 7842 003a 35D0     		beq	.L455
 7843 003c 69E0     		b	.L458
 7844              	.L454:
3175:bma2x2.c      **** 		/* Write the slope value */
3176:bma2x2.c      **** 		case BMA2x2_INTR1_SLOPE:
3177:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 7845              		.loc 1 3177 0
 7846 003e 3B4B     		ldr	r3, .L459
 7847 0040 1B68     		ldr	r3, [r3]
 7848 0042 DD68     		ldr	r5, [r3, #12]
 7849 0044 394B     		ldr	r3, .L459
 7850 0046 1B68     		ldr	r3, [r3]
 7851 0048 1879     		ldrb	r0, [r3, #4]
 7852 004a 0F23     		movs	r3, #15
 7853 004c FC18     		adds	r4, r7, r3
 7854 004e 0E23     		movs	r3, #14
 7855 0050 FA18     		adds	r2, r7, r3
 7856 0052 0123     		movs	r3, #1
 7857 0054 1921     		movs	r1, #25
 7858 0056 A847     		blx	r5
 7859 0058 0300     		movs	r3, r0
 7860 005a 2370     		strb	r3, [r4]
3178:bma2x2.c      **** 			(p_bma2x2->dev_addr,
3179:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_SLOPE_REG,
3180:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3181:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 7861              		.loc 1 3181 0
 7862 005c 0E23     		movs	r3, #14
 7863 005e FB18     		adds	r3, r7, r3
 7864 0060 1B78     		ldrb	r3, [r3]
 7865 0062 5BB2     		sxtb	r3, r3
 7866 0064 0422     		movs	r2, #4
 7867 0066 9343     		bics	r3, r2
 7868 0068 5AB2     		sxtb	r2, r3
 7869 006a BB1D     		adds	r3, r7, #6
 7870 006c 1B78     		ldrb	r3, [r3]
 7871 006e 9B00     		lsls	r3, r3, #2
 7872 0070 5BB2     		sxtb	r3, r3
 7873 0072 0421     		movs	r1, #4
 7874 0074 0B40     		ands	r3, r1
 7875 0076 5BB2     		sxtb	r3, r3
 7876 0078 1343     		orrs	r3, r2
 7877 007a 5BB2     		sxtb	r3, r3
 7878 007c DAB2     		uxtb	r2, r3
 7879 007e 0E23     		movs	r3, #14
 7880 0080 FB18     		adds	r3, r7, r3
 7881 0082 1A70     		strb	r2, [r3]
3182:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_INTR1_PAD_SLOPE,
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 198


3183:bma2x2.c      **** 			intr_slope_u8);
3184:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 7882              		.loc 1 3184 0
 7883 0084 0E23     		movs	r3, #14
 7884 0086 FB18     		adds	r3, r7, r3
 7885 0088 0122     		movs	r2, #1
 7886 008a 1900     		movs	r1, r3
 7887 008c 1920     		movs	r0, #25
 7888 008e FFF7FEFF 		bl	bma2x2_write_reg
 7889 0092 0300     		movs	r3, r0
 7890 0094 DAB2     		uxtb	r2, r3
 7891 0096 0F23     		movs	r3, #15
 7892 0098 FB18     		adds	r3, r7, r3
 7893 009a 1B78     		ldrb	r3, [r3]
 7894 009c D318     		adds	r3, r2, r3
 7895 009e DAB2     		uxtb	r2, r3
 7896 00a0 0F23     		movs	r3, #15
 7897 00a2 FB18     		adds	r3, r7, r3
 7898 00a4 1A70     		strb	r2, [r3]
3185:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_SLOPE_REG,
3186:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3187:bma2x2.c      **** 		break;
 7899              		.loc 1 3187 0
 7900 00a6 39E0     		b	.L456
 7901              	.L455:
3188:bma2x2.c      **** 		case BMA2x2_INTR2_SLOPE:
3189:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 7902              		.loc 1 3189 0
 7903 00a8 204B     		ldr	r3, .L459
 7904 00aa 1B68     		ldr	r3, [r3]
 7905 00ac DD68     		ldr	r5, [r3, #12]
 7906 00ae 1F4B     		ldr	r3, .L459
 7907 00b0 1B68     		ldr	r3, [r3]
 7908 00b2 1879     		ldrb	r0, [r3, #4]
 7909 00b4 0F23     		movs	r3, #15
 7910 00b6 FC18     		adds	r4, r7, r3
 7911 00b8 0E23     		movs	r3, #14
 7912 00ba FA18     		adds	r2, r7, r3
 7913 00bc 0123     		movs	r3, #1
 7914 00be 1B21     		movs	r1, #27
 7915 00c0 A847     		blx	r5
 7916 00c2 0300     		movs	r3, r0
 7917 00c4 2370     		strb	r3, [r4]
3190:bma2x2.c      **** 			(p_bma2x2->dev_addr,
3191:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_SLOPE_REG,
3192:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3193:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 7918              		.loc 1 3193 0
 7919 00c6 0E23     		movs	r3, #14
 7920 00c8 FB18     		adds	r3, r7, r3
 7921 00ca 1B78     		ldrb	r3, [r3]
 7922 00cc 5BB2     		sxtb	r3, r3
 7923 00ce 0422     		movs	r2, #4
 7924 00d0 9343     		bics	r3, r2
 7925 00d2 5AB2     		sxtb	r2, r3
 7926 00d4 BB1D     		adds	r3, r7, #6
 7927 00d6 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 199


 7928 00d8 9B00     		lsls	r3, r3, #2
 7929 00da 5BB2     		sxtb	r3, r3
 7930 00dc 0421     		movs	r1, #4
 7931 00de 0B40     		ands	r3, r1
 7932 00e0 5BB2     		sxtb	r3, r3
 7933 00e2 1343     		orrs	r3, r2
 7934 00e4 5BB2     		sxtb	r3, r3
 7935 00e6 DAB2     		uxtb	r2, r3
 7936 00e8 0E23     		movs	r3, #14
 7937 00ea FB18     		adds	r3, r7, r3
 7938 00ec 1A70     		strb	r2, [r3]
3194:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_INTR2_PAD_SLOPE,
3195:bma2x2.c      **** 			intr_slope_u8);
3196:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 7939              		.loc 1 3196 0
 7940 00ee 0E23     		movs	r3, #14
 7941 00f0 FB18     		adds	r3, r7, r3
 7942 00f2 0122     		movs	r2, #1
 7943 00f4 1900     		movs	r1, r3
 7944 00f6 1B20     		movs	r0, #27
 7945 00f8 FFF7FEFF 		bl	bma2x2_write_reg
 7946 00fc 0300     		movs	r3, r0
 7947 00fe DAB2     		uxtb	r2, r3
 7948 0100 0F23     		movs	r3, #15
 7949 0102 FB18     		adds	r3, r7, r3
 7950 0104 1B78     		ldrb	r3, [r3]
 7951 0106 D318     		adds	r3, r2, r3
 7952 0108 DAB2     		uxtb	r2, r3
 7953 010a 0F23     		movs	r3, #15
 7954 010c FB18     		adds	r3, r7, r3
 7955 010e 1A70     		strb	r2, [r3]
3197:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_SLOPE_REG,
3198:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3199:bma2x2.c      **** 		break;
 7956              		.loc 1 3199 0
 7957 0110 04E0     		b	.L456
 7958              	.L458:
3200:bma2x2.c      **** 		default:
3201:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 7959              		.loc 1 3201 0
 7960 0112 0F23     		movs	r3, #15
 7961 0114 FB18     		adds	r3, r7, r3
 7962 0116 FE22     		movs	r2, #254
 7963 0118 1A70     		strb	r2, [r3]
3202:bma2x2.c      **** 		break;
 7964              		.loc 1 3202 0
 7965 011a C046     		nop
 7966              	.L456:
3203:bma2x2.c      **** 		}
3204:bma2x2.c      **** 	}
3205:bma2x2.c      **** 	return com_rslt;
 7967              		.loc 1 3205 0
 7968 011c 0F23     		movs	r3, #15
 7969 011e FB18     		adds	r3, r7, r3
 7970 0120 1B78     		ldrb	r3, [r3]
 7971 0122 5BB2     		sxtb	r3, r3
 7972              	.L457:
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 200


3206:bma2x2.c      **** }
 7973              		.loc 1 3206 0 discriminator 1
 7974 0124 1800     		movs	r0, r3
 7975 0126 BD46     		mov	sp, r7
 7976 0128 04B0     		add	sp, sp, #16
 7977              		@ sp needed
 7978 012a B0BD     		pop	{r4, r5, r7, pc}
 7979              	.L460:
 7980              		.align	2
 7981              	.L459:
 7982 012c 00000000 		.word	p_bma2x2
 7983              		.cfi_endproc
 7984              	.LFE48:
 7985              		.size	bma2x2_set_intr_slope, .-bma2x2_set_intr_slope
 7986              		.section	.text.bma2x2_get_intr_slow_no_motion,"ax",%progbits
 7987              		.align	2
 7988              		.global	bma2x2_get_intr_slow_no_motion
 7989              		.code	16
 7990              		.thumb_func
 7991              		.type	bma2x2_get_intr_slow_no_motion, %function
 7992              	bma2x2_get_intr_slow_no_motion:
 7993              	.LFB49:
3207:bma2x2.c      **** /*!
3208:bma2x2.c      ****  * @brief This API is used to get
3209:bma2x2.c      ****  * the interrupt enable of slow/no motion interrupt in
3210:bma2x2.c      ****  * the register 0x19 and 0x1B
3211:bma2x2.c      ****  * @note INTR1_slow_no_motion -> register 0x19 bit 3
3212:bma2x2.c      ****  * @note INTR2_slow_no_motion -> register 0x1B bit 3
3213:bma2x2.c      ****  *
3214:bma2x2.c      ****  *
3215:bma2x2.c      ****  *
3216:bma2x2.c      ****  *
3217:bma2x2.c      ****  *  @param channel_u8 : The value of slow/no motion selection
3218:bma2x2.c      ****  *        channel_u8     |   result
3219:bma2x2.c      ****  *       ----------------- | ------------------
3220:bma2x2.c      ****  *              0          | BMA2x2_INTR1_SLOW_NO_MOTION
3221:bma2x2.c      ****  *              1          | BMA2x2_INTR2_SLOW_NO_MOTION
3222:bma2x2.c      ****  *
3223:bma2x2.c      ****  *  @param intr_slow_no_motion_u8:  the slow_no_motion enable value
3224:bma2x2.c      ****  *       intr_slow_no_motion_u8 |   result
3225:bma2x2.c      ****  *       ------------------------ | ------------------
3226:bma2x2.c      ****  *              0x00              | INTR_DISABLE
3227:bma2x2.c      ****  *              0x01              | INTR_ENABLE
3228:bma2x2.c      ****  *
3229:bma2x2.c      ****  *
3230:bma2x2.c      ****  *	@return results of bus communication function
3231:bma2x2.c      ****  *	@retval 0 -> Success
3232:bma2x2.c      ****  *	@retval -1 -> Error
3233:bma2x2.c      ****  *
3234:bma2x2.c      ****  *
3235:bma2x2.c      ****  */
3236:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_intr_slow_no_motion(u8 channel_u8,
3237:bma2x2.c      **** u8 *intr_slow_no_motion_u8)
3238:bma2x2.c      **** {
 7994              		.loc 1 3238 0
 7995              		.cfi_startproc
 7996              		@ args = 0, pretend = 0, frame = 16
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 201


 7997              		@ frame_needed = 1, uses_anonymous_args = 0
 7998 0000 B0B5     		push	{r4, r5, r7, lr}
 7999              		.cfi_def_cfa_offset 16
 8000              		.cfi_offset 4, -16
 8001              		.cfi_offset 5, -12
 8002              		.cfi_offset 7, -8
 8003              		.cfi_offset 14, -4
 8004 0002 84B0     		sub	sp, sp, #16
 8005              		.cfi_def_cfa_offset 32
 8006 0004 00AF     		add	r7, sp, #0
 8007              		.cfi_def_cfa_register 7
 8008 0006 0200     		movs	r2, r0
 8009 0008 3960     		str	r1, [r7]
 8010 000a FB1D     		adds	r3, r7, #7
 8011 000c 1A70     		strb	r2, [r3]
3239:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 8012              		.loc 1 3239 0
 8013 000e 0E23     		movs	r3, #14
 8014 0010 FB18     		adds	r3, r7, r3
 8015 0012 0022     		movs	r2, #0
 8016 0014 1A70     		strb	r2, [r3]
3240:bma2x2.c      **** 		/*  Variable used to return value of
3241:bma2x2.c      **** 	communication routine*/
3242:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8017              		.loc 1 3242 0
 8018 0016 0F23     		movs	r3, #15
 8019 0018 FB18     		adds	r3, r7, r3
 8020 001a FF22     		movs	r2, #255
 8021 001c 1A70     		strb	r2, [r3]
3243:bma2x2.c      **** 
3244:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 8022              		.loc 1 3244 0
 8023 001e 274B     		ldr	r3, .L470
 8024 0020 1B68     		ldr	r3, [r3]
 8025 0022 002B     		cmp	r3, #0
 8026 0024 02D1     		bne	.L462
3245:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
3246:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 8027              		.loc 1 3246 0
 8028 0026 7F23     		movs	r3, #127
 8029 0028 5B42     		rsbs	r3, r3, #0
 8030 002a 43E0     		b	.L468
 8031              	.L462:
3247:bma2x2.c      **** 		} else {
3248:bma2x2.c      **** 		/* Read the slow no motion interrupt */
3249:bma2x2.c      **** 		switch (channel_u8) {
 8032              		.loc 1 3249 0
 8033 002c FB1D     		adds	r3, r7, #7
 8034 002e 1B78     		ldrb	r3, [r3]
 8035 0030 002B     		cmp	r3, #0
 8036 0032 02D0     		beq	.L465
 8037 0034 012B     		cmp	r3, #1
 8038 0036 1AD0     		beq	.L466
 8039 0038 33E0     		b	.L469
 8040              	.L465:
3250:bma2x2.c      **** 		case BMA2x2_INTR1_SLOW_NO_MOTION:
3251:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 202


 8041              		.loc 1 3251 0
 8042 003a 204B     		ldr	r3, .L470
 8043 003c 1B68     		ldr	r3, [r3]
 8044 003e DD68     		ldr	r5, [r3, #12]
 8045 0040 1E4B     		ldr	r3, .L470
 8046 0042 1B68     		ldr	r3, [r3]
 8047 0044 1879     		ldrb	r0, [r3, #4]
 8048 0046 0F23     		movs	r3, #15
 8049 0048 FC18     		adds	r4, r7, r3
 8050 004a 0E23     		movs	r3, #14
 8051 004c FA18     		adds	r2, r7, r3
 8052 004e 0123     		movs	r3, #1
 8053 0050 1921     		movs	r1, #25
 8054 0052 A847     		blx	r5
 8055 0054 0300     		movs	r3, r0
 8056 0056 2370     		strb	r3, [r4]
3252:bma2x2.c      **** 			(p_bma2x2->dev_addr,
3253:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_SLOW_NO_MOTION_REG,
3254:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3255:bma2x2.c      **** 			*intr_slow_no_motion_u8 = BMA2x2_GET_BITSLICE
 8057              		.loc 1 3255 0
 8058 0058 0E23     		movs	r3, #14
 8059 005a FB18     		adds	r3, r7, r3
 8060 005c 1B78     		ldrb	r3, [r3]
 8061 005e DB10     		asrs	r3, r3, #3
 8062 0060 DBB2     		uxtb	r3, r3
 8063 0062 0122     		movs	r2, #1
 8064 0064 1340     		ands	r3, r2
 8065 0066 DAB2     		uxtb	r2, r3
 8066 0068 3B68     		ldr	r3, [r7]
 8067 006a 1A70     		strb	r2, [r3]
3256:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_INTR1_PAD_SLOW_NO_MOTION);
3257:bma2x2.c      **** 		break;
 8068              		.loc 1 3257 0
 8069 006c 1EE0     		b	.L467
 8070              	.L466:
3258:bma2x2.c      **** 		case BMA2x2_INTR2_SLOW_NO_MOTION:
3259:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 8071              		.loc 1 3259 0
 8072 006e 134B     		ldr	r3, .L470
 8073 0070 1B68     		ldr	r3, [r3]
 8074 0072 DD68     		ldr	r5, [r3, #12]
 8075 0074 114B     		ldr	r3, .L470
 8076 0076 1B68     		ldr	r3, [r3]
 8077 0078 1879     		ldrb	r0, [r3, #4]
 8078 007a 0F23     		movs	r3, #15
 8079 007c FC18     		adds	r4, r7, r3
 8080 007e 0E23     		movs	r3, #14
 8081 0080 FA18     		adds	r2, r7, r3
 8082 0082 0123     		movs	r3, #1
 8083 0084 1B21     		movs	r1, #27
 8084 0086 A847     		blx	r5
 8085 0088 0300     		movs	r3, r0
 8086 008a 2370     		strb	r3, [r4]
3260:bma2x2.c      **** 			(p_bma2x2->dev_addr,
3261:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_SLOW_NO_MOTION_REG,
3262:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 203


3263:bma2x2.c      **** 			*intr_slow_no_motion_u8 = BMA2x2_GET_BITSLICE
 8087              		.loc 1 3263 0
 8088 008c 0E23     		movs	r3, #14
 8089 008e FB18     		adds	r3, r7, r3
 8090 0090 1B78     		ldrb	r3, [r3]
 8091 0092 DB10     		asrs	r3, r3, #3
 8092 0094 DBB2     		uxtb	r3, r3
 8093 0096 0122     		movs	r2, #1
 8094 0098 1340     		ands	r3, r2
 8095 009a DAB2     		uxtb	r2, r3
 8096 009c 3B68     		ldr	r3, [r7]
 8097 009e 1A70     		strb	r2, [r3]
3264:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_INTR2_PAD_SLOW_NO_MOTION);
3265:bma2x2.c      **** 		break;
 8098              		.loc 1 3265 0
 8099 00a0 04E0     		b	.L467
 8100              	.L469:
3266:bma2x2.c      **** 		default:
3267:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 8101              		.loc 1 3267 0
 8102 00a2 0F23     		movs	r3, #15
 8103 00a4 FB18     		adds	r3, r7, r3
 8104 00a6 FE22     		movs	r2, #254
 8105 00a8 1A70     		strb	r2, [r3]
3268:bma2x2.c      **** 		break;
 8106              		.loc 1 3268 0
 8107 00aa C046     		nop
 8108              	.L467:
3269:bma2x2.c      **** 		}
3270:bma2x2.c      **** 	}
3271:bma2x2.c      **** 	return com_rslt;
 8109              		.loc 1 3271 0
 8110 00ac 0F23     		movs	r3, #15
 8111 00ae FB18     		adds	r3, r7, r3
 8112 00b0 1B78     		ldrb	r3, [r3]
 8113 00b2 5BB2     		sxtb	r3, r3
 8114              	.L468:
3272:bma2x2.c      **** }
 8115              		.loc 1 3272 0 discriminator 1
 8116 00b4 1800     		movs	r0, r3
 8117 00b6 BD46     		mov	sp, r7
 8118 00b8 04B0     		add	sp, sp, #16
 8119              		@ sp needed
 8120 00ba B0BD     		pop	{r4, r5, r7, pc}
 8121              	.L471:
 8122              		.align	2
 8123              	.L470:
 8124 00bc 00000000 		.word	p_bma2x2
 8125              		.cfi_endproc
 8126              	.LFE49:
 8127              		.size	bma2x2_get_intr_slow_no_motion, .-bma2x2_get_intr_slow_no_motion
 8128              		.section	.text.bma2x2_set_intr_slow_no_motion,"ax",%progbits
 8129              		.align	2
 8130              		.global	bma2x2_set_intr_slow_no_motion
 8131              		.code	16
 8132              		.thumb_func
 8133              		.type	bma2x2_set_intr_slow_no_motion, %function
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 204


 8134              	bma2x2_set_intr_slow_no_motion:
 8135              	.LFB50:
3273:bma2x2.c      **** /*!
3274:bma2x2.c      ****  * @brief This API is used to set
3275:bma2x2.c      ****  * the interrupt enable of slow/no motion interrupt in
3276:bma2x2.c      ****  * the register 0x19 and 0x1B
3277:bma2x2.c      ****  * @note INTR1_slow_no_motion -> register 0x19 bit 3
3278:bma2x2.c      ****  * @note INTR2_slow_no_motion -> register 0x1B bit 3
3279:bma2x2.c      ****  *
3280:bma2x2.c      ****  *
3281:bma2x2.c      ****  *
3282:bma2x2.c      ****  *
3283:bma2x2.c      ****  *  @param channel_u8 : The value of slow/no motion selection
3284:bma2x2.c      ****  *        channel_u8     |   result
3285:bma2x2.c      ****  *       ----------------- | ------------------
3286:bma2x2.c      ****  *              0          | BMA2x2_INTR1_SLOW_NO_MOTION
3287:bma2x2.c      ****  *              1          | BMA2x2_INTR2_SLOW_NO_MOTION
3288:bma2x2.c      ****  *
3289:bma2x2.c      ****  *  @param intr_slow_no_motion_u8:  the slow_no_motion enable value
3290:bma2x2.c      ****  *       intr_slow_no_motion_u8 |   result
3291:bma2x2.c      ****  *       ------------------------ | ------------------
3292:bma2x2.c      ****  *              0x00              | INTR_DISABLE
3293:bma2x2.c      ****  *              0x01              | INTR_ENABLE
3294:bma2x2.c      ****  *
3295:bma2x2.c      ****  *
3296:bma2x2.c      ****  *	@return results of bus communication function
3297:bma2x2.c      ****  *	@retval 0 -> Success
3298:bma2x2.c      ****  *	@retval -1 -> Error
3299:bma2x2.c      ****  *
3300:bma2x2.c      ****  *
3301:bma2x2.c      ****  */
3302:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_intr_slow_no_motion(u8 channel_u8,
3303:bma2x2.c      **** u8 intr_slow_no_motion_u8)
3304:bma2x2.c      **** {
 8136              		.loc 1 3304 0
 8137              		.cfi_startproc
 8138              		@ args = 0, pretend = 0, frame = 16
 8139              		@ frame_needed = 1, uses_anonymous_args = 0
 8140 0000 B0B5     		push	{r4, r5, r7, lr}
 8141              		.cfi_def_cfa_offset 16
 8142              		.cfi_offset 4, -16
 8143              		.cfi_offset 5, -12
 8144              		.cfi_offset 7, -8
 8145              		.cfi_offset 14, -4
 8146 0002 84B0     		sub	sp, sp, #16
 8147              		.cfi_def_cfa_offset 32
 8148 0004 00AF     		add	r7, sp, #0
 8149              		.cfi_def_cfa_register 7
 8150 0006 0200     		movs	r2, r0
 8151 0008 FB1D     		adds	r3, r7, #7
 8152 000a 1A70     		strb	r2, [r3]
 8153 000c BB1D     		adds	r3, r7, #6
 8154 000e 0A1C     		adds	r2, r1, #0
 8155 0010 1A70     		strb	r2, [r3]
3305:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 8156              		.loc 1 3305 0
 8157 0012 0E23     		movs	r3, #14
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 205


 8158 0014 FB18     		adds	r3, r7, r3
 8159 0016 0022     		movs	r2, #0
 8160 0018 1A70     		strb	r2, [r3]
3306:bma2x2.c      **** 	/*  Variable used to return value of
3307:bma2x2.c      **** 	communication routine*/
3308:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8161              		.loc 1 3308 0
 8162 001a 0F23     		movs	r3, #15
 8163 001c FB18     		adds	r3, r7, r3
 8164 001e FF22     		movs	r2, #255
 8165 0020 1A70     		strb	r2, [r3]
3309:bma2x2.c      **** 
3310:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 8166              		.loc 1 3310 0
 8167 0022 424B     		ldr	r3, .L481
 8168 0024 1B68     		ldr	r3, [r3]
 8169 0026 002B     		cmp	r3, #0
 8170 0028 02D1     		bne	.L473
3311:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
3312:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 8171              		.loc 1 3312 0
 8172 002a 7F23     		movs	r3, #127
 8173 002c 5B42     		rsbs	r3, r3, #0
 8174 002e 79E0     		b	.L479
 8175              	.L473:
3313:bma2x2.c      **** 		} else {
3314:bma2x2.c      **** 		switch (channel_u8) {
 8176              		.loc 1 3314 0
 8177 0030 FB1D     		adds	r3, r7, #7
 8178 0032 1B78     		ldrb	r3, [r3]
 8179 0034 002B     		cmp	r3, #0
 8180 0036 02D0     		beq	.L476
 8181 0038 012B     		cmp	r3, #1
 8182 003a 35D0     		beq	.L477
 8183 003c 69E0     		b	.L480
 8184              	.L476:
3315:bma2x2.c      **** 		/* Write the slow no motion interrupt */
3316:bma2x2.c      **** 		case BMA2x2_INTR1_SLOW_NO_MOTION:
3317:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 8185              		.loc 1 3317 0
 8186 003e 3B4B     		ldr	r3, .L481
 8187 0040 1B68     		ldr	r3, [r3]
 8188 0042 DD68     		ldr	r5, [r3, #12]
 8189 0044 394B     		ldr	r3, .L481
 8190 0046 1B68     		ldr	r3, [r3]
 8191 0048 1879     		ldrb	r0, [r3, #4]
 8192 004a 0F23     		movs	r3, #15
 8193 004c FC18     		adds	r4, r7, r3
 8194 004e 0E23     		movs	r3, #14
 8195 0050 FA18     		adds	r2, r7, r3
 8196 0052 0123     		movs	r3, #1
 8197 0054 1921     		movs	r1, #25
 8198 0056 A847     		blx	r5
 8199 0058 0300     		movs	r3, r0
 8200 005a 2370     		strb	r3, [r4]
3318:bma2x2.c      **** 			(p_bma2x2->dev_addr,
3319:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_SLOW_NO_MOTION_REG,
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 206


3320:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3321:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 8201              		.loc 1 3321 0
 8202 005c 0E23     		movs	r3, #14
 8203 005e FB18     		adds	r3, r7, r3
 8204 0060 1B78     		ldrb	r3, [r3]
 8205 0062 5BB2     		sxtb	r3, r3
 8206 0064 0822     		movs	r2, #8
 8207 0066 9343     		bics	r3, r2
 8208 0068 5AB2     		sxtb	r2, r3
 8209 006a BB1D     		adds	r3, r7, #6
 8210 006c 1B78     		ldrb	r3, [r3]
 8211 006e DB00     		lsls	r3, r3, #3
 8212 0070 5BB2     		sxtb	r3, r3
 8213 0072 0821     		movs	r1, #8
 8214 0074 0B40     		ands	r3, r1
 8215 0076 5BB2     		sxtb	r3, r3
 8216 0078 1343     		orrs	r3, r2
 8217 007a 5BB2     		sxtb	r3, r3
 8218 007c DAB2     		uxtb	r2, r3
 8219 007e 0E23     		movs	r3, #14
 8220 0080 FB18     		adds	r3, r7, r3
 8221 0082 1A70     		strb	r2, [r3]
3322:bma2x2.c      **** 			(data_u8,
3323:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_SLOW_NO_MOTION,
3324:bma2x2.c      **** 			intr_slow_no_motion_u8);
3325:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 8222              		.loc 1 3325 0
 8223 0084 0E23     		movs	r3, #14
 8224 0086 FB18     		adds	r3, r7, r3
 8225 0088 0122     		movs	r2, #1
 8226 008a 1900     		movs	r1, r3
 8227 008c 1920     		movs	r0, #25
 8228 008e FFF7FEFF 		bl	bma2x2_write_reg
 8229 0092 0300     		movs	r3, r0
 8230 0094 DAB2     		uxtb	r2, r3
 8231 0096 0F23     		movs	r3, #15
 8232 0098 FB18     		adds	r3, r7, r3
 8233 009a 1B78     		ldrb	r3, [r3]
 8234 009c D318     		adds	r3, r2, r3
 8235 009e DAB2     		uxtb	r2, r3
 8236 00a0 0F23     		movs	r3, #15
 8237 00a2 FB18     		adds	r3, r7, r3
 8238 00a4 1A70     		strb	r2, [r3]
3326:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_SLOW_NO_MOTION_REG,
3327:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3328:bma2x2.c      **** 		break;
 8239              		.loc 1 3328 0
 8240 00a6 39E0     		b	.L478
 8241              	.L477:
3329:bma2x2.c      **** 		case BMA2x2_INTR2_SLOW_NO_MOTION:
3330:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 8242              		.loc 1 3330 0
 8243 00a8 204B     		ldr	r3, .L481
 8244 00aa 1B68     		ldr	r3, [r3]
 8245 00ac DD68     		ldr	r5, [r3, #12]
 8246 00ae 1F4B     		ldr	r3, .L481
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 207


 8247 00b0 1B68     		ldr	r3, [r3]
 8248 00b2 1879     		ldrb	r0, [r3, #4]
 8249 00b4 0F23     		movs	r3, #15
 8250 00b6 FC18     		adds	r4, r7, r3
 8251 00b8 0E23     		movs	r3, #14
 8252 00ba FA18     		adds	r2, r7, r3
 8253 00bc 0123     		movs	r3, #1
 8254 00be 1B21     		movs	r1, #27
 8255 00c0 A847     		blx	r5
 8256 00c2 0300     		movs	r3, r0
 8257 00c4 2370     		strb	r3, [r4]
3331:bma2x2.c      **** 			(p_bma2x2->dev_addr,
3332:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_SLOW_NO_MOTION_REG,
3333:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3334:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 8258              		.loc 1 3334 0
 8259 00c6 0E23     		movs	r3, #14
 8260 00c8 FB18     		adds	r3, r7, r3
 8261 00ca 1B78     		ldrb	r3, [r3]
 8262 00cc 5BB2     		sxtb	r3, r3
 8263 00ce 0822     		movs	r2, #8
 8264 00d0 9343     		bics	r3, r2
 8265 00d2 5AB2     		sxtb	r2, r3
 8266 00d4 BB1D     		adds	r3, r7, #6
 8267 00d6 1B78     		ldrb	r3, [r3]
 8268 00d8 DB00     		lsls	r3, r3, #3
 8269 00da 5BB2     		sxtb	r3, r3
 8270 00dc 0821     		movs	r1, #8
 8271 00de 0B40     		ands	r3, r1
 8272 00e0 5BB2     		sxtb	r3, r3
 8273 00e2 1343     		orrs	r3, r2
 8274 00e4 5BB2     		sxtb	r3, r3
 8275 00e6 DAB2     		uxtb	r2, r3
 8276 00e8 0E23     		movs	r3, #14
 8277 00ea FB18     		adds	r3, r7, r3
 8278 00ec 1A70     		strb	r2, [r3]
3335:bma2x2.c      **** 			(data_u8,
3336:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_SLOW_NO_MOTION,
3337:bma2x2.c      **** 			intr_slow_no_motion_u8);
3338:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 8279              		.loc 1 3338 0
 8280 00ee 0E23     		movs	r3, #14
 8281 00f0 FB18     		adds	r3, r7, r3
 8282 00f2 0122     		movs	r2, #1
 8283 00f4 1900     		movs	r1, r3
 8284 00f6 1B20     		movs	r0, #27
 8285 00f8 FFF7FEFF 		bl	bma2x2_write_reg
 8286 00fc 0300     		movs	r3, r0
 8287 00fe DAB2     		uxtb	r2, r3
 8288 0100 0F23     		movs	r3, #15
 8289 0102 FB18     		adds	r3, r7, r3
 8290 0104 1B78     		ldrb	r3, [r3]
 8291 0106 D318     		adds	r3, r2, r3
 8292 0108 DAB2     		uxtb	r2, r3
 8293 010a 0F23     		movs	r3, #15
 8294 010c FB18     		adds	r3, r7, r3
 8295 010e 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 208


3339:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_SLOW_NO_MOTION_REG,
3340:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3341:bma2x2.c      **** 		break;
 8296              		.loc 1 3341 0
 8297 0110 04E0     		b	.L478
 8298              	.L480:
3342:bma2x2.c      **** 		default:
3343:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 8299              		.loc 1 3343 0
 8300 0112 0F23     		movs	r3, #15
 8301 0114 FB18     		adds	r3, r7, r3
 8302 0116 FE22     		movs	r2, #254
 8303 0118 1A70     		strb	r2, [r3]
3344:bma2x2.c      **** 		break;
 8304              		.loc 1 3344 0
 8305 011a C046     		nop
 8306              	.L478:
3345:bma2x2.c      **** 		}
3346:bma2x2.c      **** 	}
3347:bma2x2.c      **** 	return com_rslt;
 8307              		.loc 1 3347 0
 8308 011c 0F23     		movs	r3, #15
 8309 011e FB18     		adds	r3, r7, r3
 8310 0120 1B78     		ldrb	r3, [r3]
 8311 0122 5BB2     		sxtb	r3, r3
 8312              	.L479:
3348:bma2x2.c      **** }
 8313              		.loc 1 3348 0 discriminator 1
 8314 0124 1800     		movs	r0, r3
 8315 0126 BD46     		mov	sp, r7
 8316 0128 04B0     		add	sp, sp, #16
 8317              		@ sp needed
 8318 012a B0BD     		pop	{r4, r5, r7, pc}
 8319              	.L482:
 8320              		.align	2
 8321              	.L481:
 8322 012c 00000000 		.word	p_bma2x2
 8323              		.cfi_endproc
 8324              	.LFE50:
 8325              		.size	bma2x2_set_intr_slow_no_motion, .-bma2x2_set_intr_slow_no_motion
 8326              		.section	.text.bma2x2_get_intr_double_tap,"ax",%progbits
 8327              		.align	2
 8328              		.global	bma2x2_get_intr_double_tap
 8329              		.code	16
 8330              		.thumb_func
 8331              		.type	bma2x2_get_intr_double_tap, %function
 8332              	bma2x2_get_intr_double_tap:
 8333              	.LFB51:
3349:bma2x2.c      **** /*!
3350:bma2x2.c      ****  * @brief This API is used to get
3351:bma2x2.c      ****  * the interrupt enable of double tap interrupt
3352:bma2x2.c      ****  * in the register 0x19 and 0x1B
3353:bma2x2.c      ****  * @note INTR1_double -> register 0x19 bit 4
3354:bma2x2.c      ****  * @note INTR2_double -> register 0x1B bit 4
3355:bma2x2.c      ****  *
3356:bma2x2.c      ****  *
3357:bma2x2.c      ****  *
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 209


3358:bma2x2.c      ****  *
3359:bma2x2.c      ****  *  @param channel_u8: The value of double tap selection
3360:bma2x2.c      ****  *        channel_u8     |   result
3361:bma2x2.c      ****  *       ----------------- | ------------------
3362:bma2x2.c      ****  *              0          | BMA2x2_ACCEL_INTR1_DOUBLE_TAP
3363:bma2x2.c      ****  *              1          | BMA2x2_ACCEL_INTR2_DOUBLE_TAP
3364:bma2x2.c      ****  *
3365:bma2x2.c      ****  *	@param intr_double_tap_u8: The double tap interrupt enable value
3366:bma2x2.c      ****  *       intr_double_tap_u8     |   result
3367:bma2x2.c      ****  *       ------------------------ | ------------------
3368:bma2x2.c      ****  *              0x00              | INTR_DISABLE
3369:bma2x2.c      ****  *              0x01              | INTR_ENABLE
3370:bma2x2.c      ****  *
3371:bma2x2.c      ****  *	@return results of bus communication function
3372:bma2x2.c      ****  *	@retval 0 -> Success
3373:bma2x2.c      ****  *	@retval -1 -> Error
3374:bma2x2.c      ****  *
3375:bma2x2.c      ****  *
3376:bma2x2.c      ****  */
3377:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_intr_double_tap(u8 channel_u8,
3378:bma2x2.c      **** u8 *intr_double_tap_u8)
3379:bma2x2.c      **** {
 8334              		.loc 1 3379 0
 8335              		.cfi_startproc
 8336              		@ args = 0, pretend = 0, frame = 16
 8337              		@ frame_needed = 1, uses_anonymous_args = 0
 8338 0000 B0B5     		push	{r4, r5, r7, lr}
 8339              		.cfi_def_cfa_offset 16
 8340              		.cfi_offset 4, -16
 8341              		.cfi_offset 5, -12
 8342              		.cfi_offset 7, -8
 8343              		.cfi_offset 14, -4
 8344 0002 84B0     		sub	sp, sp, #16
 8345              		.cfi_def_cfa_offset 32
 8346 0004 00AF     		add	r7, sp, #0
 8347              		.cfi_def_cfa_register 7
 8348 0006 0200     		movs	r2, r0
 8349 0008 3960     		str	r1, [r7]
 8350 000a FB1D     		adds	r3, r7, #7
 8351 000c 1A70     		strb	r2, [r3]
3380:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 8352              		.loc 1 3380 0
 8353 000e 0E23     		movs	r3, #14
 8354 0010 FB18     		adds	r3, r7, r3
 8355 0012 0022     		movs	r2, #0
 8356 0014 1A70     		strb	r2, [r3]
3381:bma2x2.c      **** 		/*  Variable used to return value of
3382:bma2x2.c      **** 	communication routine*/
3383:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8357              		.loc 1 3383 0
 8358 0016 0F23     		movs	r3, #15
 8359 0018 FB18     		adds	r3, r7, r3
 8360 001a FF22     		movs	r2, #255
 8361 001c 1A70     		strb	r2, [r3]
3384:bma2x2.c      **** 
3385:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 8362              		.loc 1 3385 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 210


 8363 001e 274B     		ldr	r3, .L492
 8364 0020 1B68     		ldr	r3, [r3]
 8365 0022 002B     		cmp	r3, #0
 8366 0024 02D1     		bne	.L484
3386:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
3387:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 8367              		.loc 1 3387 0
 8368 0026 7F23     		movs	r3, #127
 8369 0028 5B42     		rsbs	r3, r3, #0
 8370 002a 43E0     		b	.L490
 8371              	.L484:
3388:bma2x2.c      **** 		} else {
3389:bma2x2.c      **** 		/* read the double tap*/
3390:bma2x2.c      **** 		switch (channel_u8) {
 8372              		.loc 1 3390 0
 8373 002c FB1D     		adds	r3, r7, #7
 8374 002e 1B78     		ldrb	r3, [r3]
 8375 0030 002B     		cmp	r3, #0
 8376 0032 02D0     		beq	.L487
 8377 0034 012B     		cmp	r3, #1
 8378 0036 1AD0     		beq	.L488
 8379 0038 33E0     		b	.L491
 8380              	.L487:
3391:bma2x2.c      **** 		case BMA2x2_INTR1_DOUBLE_TAP:
3392:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 8381              		.loc 1 3392 0
 8382 003a 204B     		ldr	r3, .L492
 8383 003c 1B68     		ldr	r3, [r3]
 8384 003e DD68     		ldr	r5, [r3, #12]
 8385 0040 1E4B     		ldr	r3, .L492
 8386 0042 1B68     		ldr	r3, [r3]
 8387 0044 1879     		ldrb	r0, [r3, #4]
 8388 0046 0F23     		movs	r3, #15
 8389 0048 FC18     		adds	r4, r7, r3
 8390 004a 0E23     		movs	r3, #14
 8391 004c FA18     		adds	r2, r7, r3
 8392 004e 0123     		movs	r3, #1
 8393 0050 1921     		movs	r1, #25
 8394 0052 A847     		blx	r5
 8395 0054 0300     		movs	r3, r0
 8396 0056 2370     		strb	r3, [r4]
3393:bma2x2.c      **** 			(p_bma2x2->dev_addr,
3394:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_DOUBLE_TAP_REG,
3395:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3396:bma2x2.c      **** 			*intr_double_tap_u8 = BMA2x2_GET_BITSLICE
 8397              		.loc 1 3396 0
 8398 0058 0E23     		movs	r3, #14
 8399 005a FB18     		adds	r3, r7, r3
 8400 005c 1B78     		ldrb	r3, [r3]
 8401 005e 1B11     		asrs	r3, r3, #4
 8402 0060 DBB2     		uxtb	r3, r3
 8403 0062 0122     		movs	r2, #1
 8404 0064 1340     		ands	r3, r2
 8405 0066 DAB2     		uxtb	r2, r3
 8406 0068 3B68     		ldr	r3, [r7]
 8407 006a 1A70     		strb	r2, [r3]
3397:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_INTR1_PAD_DOUBLE_TAP);
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 211


3398:bma2x2.c      **** 		break;
 8408              		.loc 1 3398 0
 8409 006c 1EE0     		b	.L489
 8410              	.L488:
3399:bma2x2.c      **** 		case BMA2x2_INTR2_DOUBLE_TAP:
3400:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 8411              		.loc 1 3400 0
 8412 006e 134B     		ldr	r3, .L492
 8413 0070 1B68     		ldr	r3, [r3]
 8414 0072 DD68     		ldr	r5, [r3, #12]
 8415 0074 114B     		ldr	r3, .L492
 8416 0076 1B68     		ldr	r3, [r3]
 8417 0078 1879     		ldrb	r0, [r3, #4]
 8418 007a 0F23     		movs	r3, #15
 8419 007c FC18     		adds	r4, r7, r3
 8420 007e 0E23     		movs	r3, #14
 8421 0080 FA18     		adds	r2, r7, r3
 8422 0082 0123     		movs	r3, #1
 8423 0084 1B21     		movs	r1, #27
 8424 0086 A847     		blx	r5
 8425 0088 0300     		movs	r3, r0
 8426 008a 2370     		strb	r3, [r4]
3401:bma2x2.c      **** 			(p_bma2x2->dev_addr,
3402:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_DOUBLE_TAP_REG,
3403:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3404:bma2x2.c      **** 			*intr_double_tap_u8 = BMA2x2_GET_BITSLICE
 8427              		.loc 1 3404 0
 8428 008c 0E23     		movs	r3, #14
 8429 008e FB18     		adds	r3, r7, r3
 8430 0090 1B78     		ldrb	r3, [r3]
 8431 0092 1B11     		asrs	r3, r3, #4
 8432 0094 DBB2     		uxtb	r3, r3
 8433 0096 0122     		movs	r2, #1
 8434 0098 1340     		ands	r3, r2
 8435 009a DAB2     		uxtb	r2, r3
 8436 009c 3B68     		ldr	r3, [r7]
 8437 009e 1A70     		strb	r2, [r3]
3405:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_INTR2_PAD_DOUBLE_TAP);
3406:bma2x2.c      **** 		break;
 8438              		.loc 1 3406 0
 8439 00a0 04E0     		b	.L489
 8440              	.L491:
3407:bma2x2.c      **** 		default:
3408:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 8441              		.loc 1 3408 0
 8442 00a2 0F23     		movs	r3, #15
 8443 00a4 FB18     		adds	r3, r7, r3
 8444 00a6 FE22     		movs	r2, #254
 8445 00a8 1A70     		strb	r2, [r3]
3409:bma2x2.c      **** 		break;
 8446              		.loc 1 3409 0
 8447 00aa C046     		nop
 8448              	.L489:
3410:bma2x2.c      **** 		}
3411:bma2x2.c      **** 	}
3412:bma2x2.c      **** 	return com_rslt;
 8449              		.loc 1 3412 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 212


 8450 00ac 0F23     		movs	r3, #15
 8451 00ae FB18     		adds	r3, r7, r3
 8452 00b0 1B78     		ldrb	r3, [r3]
 8453 00b2 5BB2     		sxtb	r3, r3
 8454              	.L490:
3413:bma2x2.c      **** }
 8455              		.loc 1 3413 0 discriminator 1
 8456 00b4 1800     		movs	r0, r3
 8457 00b6 BD46     		mov	sp, r7
 8458 00b8 04B0     		add	sp, sp, #16
 8459              		@ sp needed
 8460 00ba B0BD     		pop	{r4, r5, r7, pc}
 8461              	.L493:
 8462              		.align	2
 8463              	.L492:
 8464 00bc 00000000 		.word	p_bma2x2
 8465              		.cfi_endproc
 8466              	.LFE51:
 8467              		.size	bma2x2_get_intr_double_tap, .-bma2x2_get_intr_double_tap
 8468              		.section	.text.bma2x2_set_intr_double_tap,"ax",%progbits
 8469              		.align	2
 8470              		.global	bma2x2_set_intr_double_tap
 8471              		.code	16
 8472              		.thumb_func
 8473              		.type	bma2x2_set_intr_double_tap, %function
 8474              	bma2x2_set_intr_double_tap:
 8475              	.LFB52:
3414:bma2x2.c      **** /*!
3415:bma2x2.c      ****  * @brief This API is used to set
3416:bma2x2.c      ****  * the interrupt enable of double tap interrupt
3417:bma2x2.c      ****  * in the register 0x19 and 0x1B
3418:bma2x2.c      ****  * @note INTR1_double -> register 0x19 bit 4
3419:bma2x2.c      ****  * @note INTR2_double -> register 0x1B bit 4
3420:bma2x2.c      ****  *
3421:bma2x2.c      ****  *
3422:bma2x2.c      ****  *
3423:bma2x2.c      ****  *
3424:bma2x2.c      ****  *  @param channel_u8: The value of double tap selection
3425:bma2x2.c      ****  *        channel_u8     |   result
3426:bma2x2.c      ****  *       ----------------- | ------------------
3427:bma2x2.c      ****  *              0          | BMA2x2_ACCEL_INTR1_DOUBLE_TAP
3428:bma2x2.c      ****  *              1          | BMA2x2_ACCEL_INTR2_DOUBLE_TAP
3429:bma2x2.c      ****  *
3430:bma2x2.c      ****  *	@param intr_double_tap_u8: The double tap interrupt enable value
3431:bma2x2.c      ****  *       intr_double_tap_u8     |   result
3432:bma2x2.c      ****  *       ------------------------ | ------------------
3433:bma2x2.c      ****  *              0x00              | INTR_DISABLE
3434:bma2x2.c      ****  *              0x01              | INTR_ENABLE
3435:bma2x2.c      ****  *
3436:bma2x2.c      ****  *	@return results of bus communication function
3437:bma2x2.c      ****  *	@retval 0 -> Success
3438:bma2x2.c      ****  *	@retval -1 -> Error
3439:bma2x2.c      ****  *
3440:bma2x2.c      ****  *
3441:bma2x2.c      ****  */
3442:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_intr_double_tap(u8 channel_u8,
3443:bma2x2.c      **** u8 intr_double_tap_u8)
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 213


3444:bma2x2.c      **** {
 8476              		.loc 1 3444 0
 8477              		.cfi_startproc
 8478              		@ args = 0, pretend = 0, frame = 16
 8479              		@ frame_needed = 1, uses_anonymous_args = 0
 8480 0000 B0B5     		push	{r4, r5, r7, lr}
 8481              		.cfi_def_cfa_offset 16
 8482              		.cfi_offset 4, -16
 8483              		.cfi_offset 5, -12
 8484              		.cfi_offset 7, -8
 8485              		.cfi_offset 14, -4
 8486 0002 84B0     		sub	sp, sp, #16
 8487              		.cfi_def_cfa_offset 32
 8488 0004 00AF     		add	r7, sp, #0
 8489              		.cfi_def_cfa_register 7
 8490 0006 0200     		movs	r2, r0
 8491 0008 FB1D     		adds	r3, r7, #7
 8492 000a 1A70     		strb	r2, [r3]
 8493 000c BB1D     		adds	r3, r7, #6
 8494 000e 0A1C     		adds	r2, r1, #0
 8495 0010 1A70     		strb	r2, [r3]
3445:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 8496              		.loc 1 3445 0
 8497 0012 0E23     		movs	r3, #14
 8498 0014 FB18     		adds	r3, r7, r3
 8499 0016 0022     		movs	r2, #0
 8500 0018 1A70     		strb	r2, [r3]
3446:bma2x2.c      **** 		/*  Variable used to return value of
3447:bma2x2.c      **** 	communication routine*/
3448:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8501              		.loc 1 3448 0
 8502 001a 0F23     		movs	r3, #15
 8503 001c FB18     		adds	r3, r7, r3
 8504 001e FF22     		movs	r2, #255
 8505 0020 1A70     		strb	r2, [r3]
3449:bma2x2.c      **** 
3450:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 8506              		.loc 1 3450 0
 8507 0022 424B     		ldr	r3, .L503
 8508 0024 1B68     		ldr	r3, [r3]
 8509 0026 002B     		cmp	r3, #0
 8510 0028 02D1     		bne	.L495
3451:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
3452:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 8511              		.loc 1 3452 0
 8512 002a 7F23     		movs	r3, #127
 8513 002c 5B42     		rsbs	r3, r3, #0
 8514 002e 79E0     		b	.L501
 8515              	.L495:
3453:bma2x2.c      **** 		} else {
3454:bma2x2.c      **** 		switch (channel_u8) {
 8516              		.loc 1 3454 0
 8517 0030 FB1D     		adds	r3, r7, #7
 8518 0032 1B78     		ldrb	r3, [r3]
 8519 0034 002B     		cmp	r3, #0
 8520 0036 02D0     		beq	.L498
 8521 0038 012B     		cmp	r3, #1
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 214


 8522 003a 35D0     		beq	.L499
 8523 003c 69E0     		b	.L502
 8524              	.L498:
3455:bma2x2.c      **** 		/* write the double tap*/
3456:bma2x2.c      **** 		case BMA2x2_INTR1_DOUBLE_TAP:
3457:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 8525              		.loc 1 3457 0
 8526 003e 3B4B     		ldr	r3, .L503
 8527 0040 1B68     		ldr	r3, [r3]
 8528 0042 DD68     		ldr	r5, [r3, #12]
 8529 0044 394B     		ldr	r3, .L503
 8530 0046 1B68     		ldr	r3, [r3]
 8531 0048 1879     		ldrb	r0, [r3, #4]
 8532 004a 0F23     		movs	r3, #15
 8533 004c FC18     		adds	r4, r7, r3
 8534 004e 0E23     		movs	r3, #14
 8535 0050 FA18     		adds	r2, r7, r3
 8536 0052 0123     		movs	r3, #1
 8537 0054 1921     		movs	r1, #25
 8538 0056 A847     		blx	r5
 8539 0058 0300     		movs	r3, r0
 8540 005a 2370     		strb	r3, [r4]
3458:bma2x2.c      **** 			(p_bma2x2->dev_addr,
3459:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_DOUBLE_TAP_REG,
3460:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3461:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 8541              		.loc 1 3461 0
 8542 005c 0E23     		movs	r3, #14
 8543 005e FB18     		adds	r3, r7, r3
 8544 0060 1B78     		ldrb	r3, [r3]
 8545 0062 5BB2     		sxtb	r3, r3
 8546 0064 1022     		movs	r2, #16
 8547 0066 9343     		bics	r3, r2
 8548 0068 5AB2     		sxtb	r2, r3
 8549 006a BB1D     		adds	r3, r7, #6
 8550 006c 1B78     		ldrb	r3, [r3]
 8551 006e 1B01     		lsls	r3, r3, #4
 8552 0070 5BB2     		sxtb	r3, r3
 8553 0072 1021     		movs	r1, #16
 8554 0074 0B40     		ands	r3, r1
 8555 0076 5BB2     		sxtb	r3, r3
 8556 0078 1343     		orrs	r3, r2
 8557 007a 5BB2     		sxtb	r3, r3
 8558 007c DAB2     		uxtb	r2, r3
 8559 007e 0E23     		movs	r3, #14
 8560 0080 FB18     		adds	r3, r7, r3
 8561 0082 1A70     		strb	r2, [r3]
3462:bma2x2.c      **** 			(data_u8,
3463:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_DOUBLE_TAP,
3464:bma2x2.c      **** 			intr_double_tap_u8);
3465:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 8562              		.loc 1 3465 0
 8563 0084 0E23     		movs	r3, #14
 8564 0086 FB18     		adds	r3, r7, r3
 8565 0088 0122     		movs	r2, #1
 8566 008a 1900     		movs	r1, r3
 8567 008c 1920     		movs	r0, #25
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 215


 8568 008e FFF7FEFF 		bl	bma2x2_write_reg
 8569 0092 0300     		movs	r3, r0
 8570 0094 DAB2     		uxtb	r2, r3
 8571 0096 0F23     		movs	r3, #15
 8572 0098 FB18     		adds	r3, r7, r3
 8573 009a 1B78     		ldrb	r3, [r3]
 8574 009c D318     		adds	r3, r2, r3
 8575 009e DAB2     		uxtb	r2, r3
 8576 00a0 0F23     		movs	r3, #15
 8577 00a2 FB18     		adds	r3, r7, r3
 8578 00a4 1A70     		strb	r2, [r3]
3466:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_DOUBLE_TAP_REG,
3467:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3468:bma2x2.c      **** 		break;
 8579              		.loc 1 3468 0
 8580 00a6 39E0     		b	.L500
 8581              	.L499:
3469:bma2x2.c      **** 		case BMA2x2_INTR2_DOUBLE_TAP:
3470:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 8582              		.loc 1 3470 0
 8583 00a8 204B     		ldr	r3, .L503
 8584 00aa 1B68     		ldr	r3, [r3]
 8585 00ac DD68     		ldr	r5, [r3, #12]
 8586 00ae 1F4B     		ldr	r3, .L503
 8587 00b0 1B68     		ldr	r3, [r3]
 8588 00b2 1879     		ldrb	r0, [r3, #4]
 8589 00b4 0F23     		movs	r3, #15
 8590 00b6 FC18     		adds	r4, r7, r3
 8591 00b8 0E23     		movs	r3, #14
 8592 00ba FA18     		adds	r2, r7, r3
 8593 00bc 0123     		movs	r3, #1
 8594 00be 1B21     		movs	r1, #27
 8595 00c0 A847     		blx	r5
 8596 00c2 0300     		movs	r3, r0
 8597 00c4 2370     		strb	r3, [r4]
3471:bma2x2.c      **** 			(p_bma2x2->dev_addr,
3472:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_DOUBLE_TAP_REG,
3473:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3474:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 8598              		.loc 1 3474 0
 8599 00c6 0E23     		movs	r3, #14
 8600 00c8 FB18     		adds	r3, r7, r3
 8601 00ca 1B78     		ldrb	r3, [r3]
 8602 00cc 5BB2     		sxtb	r3, r3
 8603 00ce 1022     		movs	r2, #16
 8604 00d0 9343     		bics	r3, r2
 8605 00d2 5AB2     		sxtb	r2, r3
 8606 00d4 BB1D     		adds	r3, r7, #6
 8607 00d6 1B78     		ldrb	r3, [r3]
 8608 00d8 1B01     		lsls	r3, r3, #4
 8609 00da 5BB2     		sxtb	r3, r3
 8610 00dc 1021     		movs	r1, #16
 8611 00de 0B40     		ands	r3, r1
 8612 00e0 5BB2     		sxtb	r3, r3
 8613 00e2 1343     		orrs	r3, r2
 8614 00e4 5BB2     		sxtb	r3, r3
 8615 00e6 DAB2     		uxtb	r2, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 216


 8616 00e8 0E23     		movs	r3, #14
 8617 00ea FB18     		adds	r3, r7, r3
 8618 00ec 1A70     		strb	r2, [r3]
3475:bma2x2.c      **** 			(data_u8,
3476:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_DOUBLE_TAP,
3477:bma2x2.c      **** 			intr_double_tap_u8);
3478:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 8619              		.loc 1 3478 0
 8620 00ee 0E23     		movs	r3, #14
 8621 00f0 FB18     		adds	r3, r7, r3
 8622 00f2 0122     		movs	r2, #1
 8623 00f4 1900     		movs	r1, r3
 8624 00f6 1B20     		movs	r0, #27
 8625 00f8 FFF7FEFF 		bl	bma2x2_write_reg
 8626 00fc 0300     		movs	r3, r0
 8627 00fe DAB2     		uxtb	r2, r3
 8628 0100 0F23     		movs	r3, #15
 8629 0102 FB18     		adds	r3, r7, r3
 8630 0104 1B78     		ldrb	r3, [r3]
 8631 0106 D318     		adds	r3, r2, r3
 8632 0108 DAB2     		uxtb	r2, r3
 8633 010a 0F23     		movs	r3, #15
 8634 010c FB18     		adds	r3, r7, r3
 8635 010e 1A70     		strb	r2, [r3]
3479:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_DOUBLE_TAP_REG,
3480:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3481:bma2x2.c      **** 		break;
 8636              		.loc 1 3481 0
 8637 0110 04E0     		b	.L500
 8638              	.L502:
3482:bma2x2.c      **** 		default:
3483:bma2x2.c      **** 		com_rslt = E_OUT_OF_RANGE;
 8639              		.loc 1 3483 0
 8640 0112 0F23     		movs	r3, #15
 8641 0114 FB18     		adds	r3, r7, r3
 8642 0116 FE22     		movs	r2, #254
 8643 0118 1A70     		strb	r2, [r3]
3484:bma2x2.c      **** 		break;
 8644              		.loc 1 3484 0
 8645 011a C046     		nop
 8646              	.L500:
3485:bma2x2.c      **** 		}
3486:bma2x2.c      **** 	}
3487:bma2x2.c      **** 	return com_rslt;
 8647              		.loc 1 3487 0
 8648 011c 0F23     		movs	r3, #15
 8649 011e FB18     		adds	r3, r7, r3
 8650 0120 1B78     		ldrb	r3, [r3]
 8651 0122 5BB2     		sxtb	r3, r3
 8652              	.L501:
3488:bma2x2.c      **** }
 8653              		.loc 1 3488 0 discriminator 1
 8654 0124 1800     		movs	r0, r3
 8655 0126 BD46     		mov	sp, r7
 8656 0128 04B0     		add	sp, sp, #16
 8657              		@ sp needed
 8658 012a B0BD     		pop	{r4, r5, r7, pc}
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 217


 8659              	.L504:
 8660              		.align	2
 8661              	.L503:
 8662 012c 00000000 		.word	p_bma2x2
 8663              		.cfi_endproc
 8664              	.LFE52:
 8665              		.size	bma2x2_set_intr_double_tap, .-bma2x2_set_intr_double_tap
 8666              		.section	.text.bma2x2_get_intr_single_tap,"ax",%progbits
 8667              		.align	2
 8668              		.global	bma2x2_get_intr_single_tap
 8669              		.code	16
 8670              		.thumb_func
 8671              		.type	bma2x2_get_intr_single_tap, %function
 8672              	bma2x2_get_intr_single_tap:
 8673              	.LFB53:
3489:bma2x2.c      **** /*!
3490:bma2x2.c      ****  * @brief This API is used to get
3491:bma2x2.c      ****  * the interrupt enable of single tap
3492:bma2x2.c      ****  * interrupt in the register 0x19 and 0x1B
3493:bma2x2.c      ****  * @note INTR1_single_tap -> register 0x19 bit 5
3494:bma2x2.c      ****  * @note INTR2_single_tap -> register 0x1B bit 5
3495:bma2x2.c      ****  *
3496:bma2x2.c      ****  *
3497:bma2x2.c      ****  *  @param channel_u8: The value of single tap interrupt select
3498:bma2x2.c      ****  *        channel_u8     |   result
3499:bma2x2.c      ****  *       ----------------- | ------------------
3500:bma2x2.c      ****  *              0          | BMA2x2_ACCEL_INTR1_SINGLE_TAP
3501:bma2x2.c      ****  *              1          | BMA2x2_ACCEL_INTR2_SINGLE_TAP
3502:bma2x2.c      ****  *
3503:bma2x2.c      ****  *  @param intr_single_tap_u8: The single tap interrupt enable value
3504:bma2x2.c      ****  *       intr_single_tap_u8     |   result
3505:bma2x2.c      ****  *       ------------------------ | ------------------
3506:bma2x2.c      ****  *              0x00              | INTR_DISABLE
3507:bma2x2.c      ****  *              0x01              | INTR_ENABLE
3508:bma2x2.c      ****  *
3509:bma2x2.c      ****  *
3510:bma2x2.c      ****  *	@return results of bus communication function
3511:bma2x2.c      ****  *	@retval 0 -> Success
3512:bma2x2.c      ****  *	@retval -1 -> Error
3513:bma2x2.c      ****  *
3514:bma2x2.c      ****  *
3515:bma2x2.c      ****  */
3516:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_intr_single_tap(u8 channel_u8,
3517:bma2x2.c      **** u8 *intr_single_tap_u8)
3518:bma2x2.c      **** {
 8674              		.loc 1 3518 0
 8675              		.cfi_startproc
 8676              		@ args = 0, pretend = 0, frame = 16
 8677              		@ frame_needed = 1, uses_anonymous_args = 0
 8678 0000 B0B5     		push	{r4, r5, r7, lr}
 8679              		.cfi_def_cfa_offset 16
 8680              		.cfi_offset 4, -16
 8681              		.cfi_offset 5, -12
 8682              		.cfi_offset 7, -8
 8683              		.cfi_offset 14, -4
 8684 0002 84B0     		sub	sp, sp, #16
 8685              		.cfi_def_cfa_offset 32
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 218


 8686 0004 00AF     		add	r7, sp, #0
 8687              		.cfi_def_cfa_register 7
 8688 0006 0200     		movs	r2, r0
 8689 0008 3960     		str	r1, [r7]
 8690 000a FB1D     		adds	r3, r7, #7
 8691 000c 1A70     		strb	r2, [r3]
3519:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 8692              		.loc 1 3519 0
 8693 000e 0E23     		movs	r3, #14
 8694 0010 FB18     		adds	r3, r7, r3
 8695 0012 0022     		movs	r2, #0
 8696 0014 1A70     		strb	r2, [r3]
3520:bma2x2.c      **** 		/*  Variable used to return value of
3521:bma2x2.c      **** 	communication routine*/
3522:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8697              		.loc 1 3522 0
 8698 0016 0F23     		movs	r3, #15
 8699 0018 FB18     		adds	r3, r7, r3
 8700 001a FF22     		movs	r2, #255
 8701 001c 1A70     		strb	r2, [r3]
3523:bma2x2.c      **** 
3524:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 8702              		.loc 1 3524 0
 8703 001e 274B     		ldr	r3, .L514
 8704 0020 1B68     		ldr	r3, [r3]
 8705 0022 002B     		cmp	r3, #0
 8706 0024 02D1     		bne	.L506
3525:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
3526:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 8707              		.loc 1 3526 0
 8708 0026 7F23     		movs	r3, #127
 8709 0028 5B42     		rsbs	r3, r3, #0
 8710 002a 43E0     		b	.L512
 8711              	.L506:
3527:bma2x2.c      **** 		} else {
3528:bma2x2.c      **** 		switch (channel_u8) {
 8712              		.loc 1 3528 0
 8713 002c FB1D     		adds	r3, r7, #7
 8714 002e 1B78     		ldrb	r3, [r3]
 8715 0030 002B     		cmp	r3, #0
 8716 0032 02D0     		beq	.L509
 8717 0034 012B     		cmp	r3, #1
 8718 0036 1AD0     		beq	.L510
 8719 0038 33E0     		b	.L513
 8720              	.L509:
3529:bma2x2.c      **** 		/* Read the single tap value*/
3530:bma2x2.c      **** 		case BMA2x2_INTR1_SINGLE_TAP:
3531:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 8721              		.loc 1 3531 0
 8722 003a 204B     		ldr	r3, .L514
 8723 003c 1B68     		ldr	r3, [r3]
 8724 003e DD68     		ldr	r5, [r3, #12]
 8725 0040 1E4B     		ldr	r3, .L514
 8726 0042 1B68     		ldr	r3, [r3]
 8727 0044 1879     		ldrb	r0, [r3, #4]
 8728 0046 0F23     		movs	r3, #15
 8729 0048 FC18     		adds	r4, r7, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 219


 8730 004a 0E23     		movs	r3, #14
 8731 004c FA18     		adds	r2, r7, r3
 8732 004e 0123     		movs	r3, #1
 8733 0050 1921     		movs	r1, #25
 8734 0052 A847     		blx	r5
 8735 0054 0300     		movs	r3, r0
 8736 0056 2370     		strb	r3, [r4]
3532:bma2x2.c      **** 			(p_bma2x2->dev_addr,
3533:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_SINGLE_TAP_REG,
3534:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3535:bma2x2.c      **** 			*intr_single_tap_u8 = BMA2x2_GET_BITSLICE
 8737              		.loc 1 3535 0
 8738 0058 0E23     		movs	r3, #14
 8739 005a FB18     		adds	r3, r7, r3
 8740 005c 1B78     		ldrb	r3, [r3]
 8741 005e 5B11     		asrs	r3, r3, #5
 8742 0060 DBB2     		uxtb	r3, r3
 8743 0062 0122     		movs	r2, #1
 8744 0064 1340     		ands	r3, r2
 8745 0066 DAB2     		uxtb	r2, r3
 8746 0068 3B68     		ldr	r3, [r7]
 8747 006a 1A70     		strb	r2, [r3]
3536:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_INTR1_PAD_SINGLE_TAP);
3537:bma2x2.c      **** 		break;
 8748              		.loc 1 3537 0
 8749 006c 1EE0     		b	.L511
 8750              	.L510:
3538:bma2x2.c      **** 		case BMA2x2_INTR2_SINGLE_TAP:
3539:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 8751              		.loc 1 3539 0
 8752 006e 134B     		ldr	r3, .L514
 8753 0070 1B68     		ldr	r3, [r3]
 8754 0072 DD68     		ldr	r5, [r3, #12]
 8755 0074 114B     		ldr	r3, .L514
 8756 0076 1B68     		ldr	r3, [r3]
 8757 0078 1879     		ldrb	r0, [r3, #4]
 8758 007a 0F23     		movs	r3, #15
 8759 007c FC18     		adds	r4, r7, r3
 8760 007e 0E23     		movs	r3, #14
 8761 0080 FA18     		adds	r2, r7, r3
 8762 0082 0123     		movs	r3, #1
 8763 0084 1B21     		movs	r1, #27
 8764 0086 A847     		blx	r5
 8765 0088 0300     		movs	r3, r0
 8766 008a 2370     		strb	r3, [r4]
3540:bma2x2.c      **** 			(p_bma2x2->dev_addr,
3541:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_SINGLE_TAP_REG,
3542:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3543:bma2x2.c      **** 			*intr_single_tap_u8 = BMA2x2_GET_BITSLICE
 8767              		.loc 1 3543 0
 8768 008c 0E23     		movs	r3, #14
 8769 008e FB18     		adds	r3, r7, r3
 8770 0090 1B78     		ldrb	r3, [r3]
 8771 0092 5B11     		asrs	r3, r3, #5
 8772 0094 DBB2     		uxtb	r3, r3
 8773 0096 0122     		movs	r2, #1
 8774 0098 1340     		ands	r3, r2
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 220


 8775 009a DAB2     		uxtb	r2, r3
 8776 009c 3B68     		ldr	r3, [r7]
 8777 009e 1A70     		strb	r2, [r3]
3544:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_INTR2_PAD_SINGLE_TAP);
3545:bma2x2.c      **** 		break;
 8778              		.loc 1 3545 0
 8779 00a0 04E0     		b	.L511
 8780              	.L513:
3546:bma2x2.c      **** 		default:
3547:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 8781              		.loc 1 3547 0
 8782 00a2 0F23     		movs	r3, #15
 8783 00a4 FB18     		adds	r3, r7, r3
 8784 00a6 FE22     		movs	r2, #254
 8785 00a8 1A70     		strb	r2, [r3]
3548:bma2x2.c      **** 		break;
 8786              		.loc 1 3548 0
 8787 00aa C046     		nop
 8788              	.L511:
3549:bma2x2.c      **** 		}
3550:bma2x2.c      **** 	}
3551:bma2x2.c      **** 	return com_rslt;
 8789              		.loc 1 3551 0
 8790 00ac 0F23     		movs	r3, #15
 8791 00ae FB18     		adds	r3, r7, r3
 8792 00b0 1B78     		ldrb	r3, [r3]
 8793 00b2 5BB2     		sxtb	r3, r3
 8794              	.L512:
3552:bma2x2.c      **** }
 8795              		.loc 1 3552 0 discriminator 1
 8796 00b4 1800     		movs	r0, r3
 8797 00b6 BD46     		mov	sp, r7
 8798 00b8 04B0     		add	sp, sp, #16
 8799              		@ sp needed
 8800 00ba B0BD     		pop	{r4, r5, r7, pc}
 8801              	.L515:
 8802              		.align	2
 8803              	.L514:
 8804 00bc 00000000 		.word	p_bma2x2
 8805              		.cfi_endproc
 8806              	.LFE53:
 8807              		.size	bma2x2_get_intr_single_tap, .-bma2x2_get_intr_single_tap
 8808              		.section	.text.bma2x2_set_intr_single_tap,"ax",%progbits
 8809              		.align	2
 8810              		.global	bma2x2_set_intr_single_tap
 8811              		.code	16
 8812              		.thumb_func
 8813              		.type	bma2x2_set_intr_single_tap, %function
 8814              	bma2x2_set_intr_single_tap:
 8815              	.LFB54:
3553:bma2x2.c      **** /*!
3554:bma2x2.c      ****  * @brief This API is used to set
3555:bma2x2.c      ****  * the interrupt enable of single tap
3556:bma2x2.c      ****  * interrupt in the register 0x19 and 0x1B
3557:bma2x2.c      ****  * @note INTR1_single_tap -> register 0x19 bit 5
3558:bma2x2.c      ****  * @note INTR2_single_tap -> register 0x1B bit 5
3559:bma2x2.c      ****  *
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 221


3560:bma2x2.c      ****  *
3561:bma2x2.c      ****  *  @param channel_u8: The value of single tap interrupt select
3562:bma2x2.c      ****  *        channel_u8     |   result
3563:bma2x2.c      ****  *       ----------------- | ------------------
3564:bma2x2.c      ****  *              0          | BMA2x2_ACCEL_INTR1_SINGLE_TAP
3565:bma2x2.c      ****  *              1          | BMA2x2_ACCEL_INTR2_SINGLE_TAP
3566:bma2x2.c      ****  *
3567:bma2x2.c      ****  *  @param intr_single_tap_u8: The single tap interrupt enable value
3568:bma2x2.c      ****  *       intr_single_tap_u8     |   result
3569:bma2x2.c      ****  *       ------------------------ | ------------------
3570:bma2x2.c      ****  *              0x00              | INTR_DISABLE
3571:bma2x2.c      ****  *              0x01              | INTR_ENABLE
3572:bma2x2.c      ****  *
3573:bma2x2.c      ****  *
3574:bma2x2.c      ****  *	@return results of bus communication function
3575:bma2x2.c      ****  *	@retval 0 -> Success
3576:bma2x2.c      ****  *	@retval -1 -> Error
3577:bma2x2.c      ****  *
3578:bma2x2.c      ****  *
3579:bma2x2.c      ****  */
3580:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_intr_single_tap(u8 channel_u8,
3581:bma2x2.c      **** u8 intr_single_tap_u8)
3582:bma2x2.c      **** {
 8816              		.loc 1 3582 0
 8817              		.cfi_startproc
 8818              		@ args = 0, pretend = 0, frame = 16
 8819              		@ frame_needed = 1, uses_anonymous_args = 0
 8820 0000 B0B5     		push	{r4, r5, r7, lr}
 8821              		.cfi_def_cfa_offset 16
 8822              		.cfi_offset 4, -16
 8823              		.cfi_offset 5, -12
 8824              		.cfi_offset 7, -8
 8825              		.cfi_offset 14, -4
 8826 0002 84B0     		sub	sp, sp, #16
 8827              		.cfi_def_cfa_offset 32
 8828 0004 00AF     		add	r7, sp, #0
 8829              		.cfi_def_cfa_register 7
 8830 0006 0200     		movs	r2, r0
 8831 0008 FB1D     		adds	r3, r7, #7
 8832 000a 1A70     		strb	r2, [r3]
 8833 000c BB1D     		adds	r3, r7, #6
 8834 000e 0A1C     		adds	r2, r1, #0
 8835 0010 1A70     		strb	r2, [r3]
3583:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 8836              		.loc 1 3583 0
 8837 0012 0E23     		movs	r3, #14
 8838 0014 FB18     		adds	r3, r7, r3
 8839 0016 0022     		movs	r2, #0
 8840 0018 1A70     		strb	r2, [r3]
3584:bma2x2.c      **** 		/*  Variable used to return value of
3585:bma2x2.c      **** 	communication routine*/
3586:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8841              		.loc 1 3586 0
 8842 001a 0F23     		movs	r3, #15
 8843 001c FB18     		adds	r3, r7, r3
 8844 001e FF22     		movs	r2, #255
 8845 0020 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 222


3587:bma2x2.c      **** 
3588:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 8846              		.loc 1 3588 0
 8847 0022 424B     		ldr	r3, .L525
 8848 0024 1B68     		ldr	r3, [r3]
 8849 0026 002B     		cmp	r3, #0
 8850 0028 02D1     		bne	.L517
3589:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
3590:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 8851              		.loc 1 3590 0
 8852 002a 7F23     		movs	r3, #127
 8853 002c 5B42     		rsbs	r3, r3, #0
 8854 002e 79E0     		b	.L523
 8855              	.L517:
3591:bma2x2.c      **** 		} else {
3592:bma2x2.c      **** 		switch (channel_u8) {
 8856              		.loc 1 3592 0
 8857 0030 FB1D     		adds	r3, r7, #7
 8858 0032 1B78     		ldrb	r3, [r3]
 8859 0034 002B     		cmp	r3, #0
 8860 0036 02D0     		beq	.L520
 8861 0038 012B     		cmp	r3, #1
 8862 003a 35D0     		beq	.L521
 8863 003c 69E0     		b	.L524
 8864              	.L520:
3593:bma2x2.c      **** 		/* write the single tap value*/
3594:bma2x2.c      **** 		case BMA2x2_INTR1_SINGLE_TAP:
3595:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 8865              		.loc 1 3595 0
 8866 003e 3B4B     		ldr	r3, .L525
 8867 0040 1B68     		ldr	r3, [r3]
 8868 0042 DD68     		ldr	r5, [r3, #12]
 8869 0044 394B     		ldr	r3, .L525
 8870 0046 1B68     		ldr	r3, [r3]
 8871 0048 1879     		ldrb	r0, [r3, #4]
 8872 004a 0F23     		movs	r3, #15
 8873 004c FC18     		adds	r4, r7, r3
 8874 004e 0E23     		movs	r3, #14
 8875 0050 FA18     		adds	r2, r7, r3
 8876 0052 0123     		movs	r3, #1
 8877 0054 1921     		movs	r1, #25
 8878 0056 A847     		blx	r5
 8879 0058 0300     		movs	r3, r0
 8880 005a 2370     		strb	r3, [r4]
3596:bma2x2.c      **** 			(p_bma2x2->dev_addr,
3597:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_SINGLE_TAP_REG,
3598:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3599:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE(data_u8,
 8881              		.loc 1 3599 0
 8882 005c 0E23     		movs	r3, #14
 8883 005e FB18     		adds	r3, r7, r3
 8884 0060 1B78     		ldrb	r3, [r3]
 8885 0062 5BB2     		sxtb	r3, r3
 8886 0064 2022     		movs	r2, #32
 8887 0066 9343     		bics	r3, r2
 8888 0068 5AB2     		sxtb	r2, r3
 8889 006a BB1D     		adds	r3, r7, #6
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 223


 8890 006c 1B78     		ldrb	r3, [r3]
 8891 006e 5B01     		lsls	r3, r3, #5
 8892 0070 5BB2     		sxtb	r3, r3
 8893 0072 2021     		movs	r1, #32
 8894 0074 0B40     		ands	r3, r1
 8895 0076 5BB2     		sxtb	r3, r3
 8896 0078 1343     		orrs	r3, r2
 8897 007a 5BB2     		sxtb	r3, r3
 8898 007c DAB2     		uxtb	r2, r3
 8899 007e 0E23     		movs	r3, #14
 8900 0080 FB18     		adds	r3, r7, r3
 8901 0082 1A70     		strb	r2, [r3]
3600:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_SINGLE_TAP,
3601:bma2x2.c      **** 			intr_single_tap_u8);
3602:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 8902              		.loc 1 3602 0
 8903 0084 0E23     		movs	r3, #14
 8904 0086 FB18     		adds	r3, r7, r3
 8905 0088 0122     		movs	r2, #1
 8906 008a 1900     		movs	r1, r3
 8907 008c 1920     		movs	r0, #25
 8908 008e FFF7FEFF 		bl	bma2x2_write_reg
 8909 0092 0300     		movs	r3, r0
 8910 0094 DAB2     		uxtb	r2, r3
 8911 0096 0F23     		movs	r3, #15
 8912 0098 FB18     		adds	r3, r7, r3
 8913 009a 1B78     		ldrb	r3, [r3]
 8914 009c D318     		adds	r3, r2, r3
 8915 009e DAB2     		uxtb	r2, r3
 8916 00a0 0F23     		movs	r3, #15
 8917 00a2 FB18     		adds	r3, r7, r3
 8918 00a4 1A70     		strb	r2, [r3]
3603:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_SINGLE_TAP_REG,
3604:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3605:bma2x2.c      **** 		break;
 8919              		.loc 1 3605 0
 8920 00a6 39E0     		b	.L522
 8921              	.L521:
3606:bma2x2.c      **** 		case BMA2x2_INTR2_SINGLE_TAP:
3607:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 8922              		.loc 1 3607 0
 8923 00a8 204B     		ldr	r3, .L525
 8924 00aa 1B68     		ldr	r3, [r3]
 8925 00ac DD68     		ldr	r5, [r3, #12]
 8926 00ae 1F4B     		ldr	r3, .L525
 8927 00b0 1B68     		ldr	r3, [r3]
 8928 00b2 1879     		ldrb	r0, [r3, #4]
 8929 00b4 0F23     		movs	r3, #15
 8930 00b6 FC18     		adds	r4, r7, r3
 8931 00b8 0E23     		movs	r3, #14
 8932 00ba FA18     		adds	r2, r7, r3
 8933 00bc 0123     		movs	r3, #1
 8934 00be 1B21     		movs	r1, #27
 8935 00c0 A847     		blx	r5
 8936 00c2 0300     		movs	r3, r0
 8937 00c4 2370     		strb	r3, [r4]
3608:bma2x2.c      **** 			(p_bma2x2->dev_addr,
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 224


3609:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_SINGLE_TAP_REG,
3610:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3611:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 8938              		.loc 1 3611 0
 8939 00c6 0E23     		movs	r3, #14
 8940 00c8 FB18     		adds	r3, r7, r3
 8941 00ca 1B78     		ldrb	r3, [r3]
 8942 00cc 5BB2     		sxtb	r3, r3
 8943 00ce 2022     		movs	r2, #32
 8944 00d0 9343     		bics	r3, r2
 8945 00d2 5AB2     		sxtb	r2, r3
 8946 00d4 BB1D     		adds	r3, r7, #6
 8947 00d6 1B78     		ldrb	r3, [r3]
 8948 00d8 5B01     		lsls	r3, r3, #5
 8949 00da 5BB2     		sxtb	r3, r3
 8950 00dc 2021     		movs	r1, #32
 8951 00de 0B40     		ands	r3, r1
 8952 00e0 5BB2     		sxtb	r3, r3
 8953 00e2 1343     		orrs	r3, r2
 8954 00e4 5BB2     		sxtb	r3, r3
 8955 00e6 DAB2     		uxtb	r2, r3
 8956 00e8 0E23     		movs	r3, #14
 8957 00ea FB18     		adds	r3, r7, r3
 8958 00ec 1A70     		strb	r2, [r3]
3612:bma2x2.c      **** 			(data_u8,
3613:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_SINGLE_TAP,
3614:bma2x2.c      **** 			intr_single_tap_u8);
3615:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 8959              		.loc 1 3615 0
 8960 00ee 0E23     		movs	r3, #14
 8961 00f0 FB18     		adds	r3, r7, r3
 8962 00f2 0122     		movs	r2, #1
 8963 00f4 1900     		movs	r1, r3
 8964 00f6 1B20     		movs	r0, #27
 8965 00f8 FFF7FEFF 		bl	bma2x2_write_reg
 8966 00fc 0300     		movs	r3, r0
 8967 00fe DAB2     		uxtb	r2, r3
 8968 0100 0F23     		movs	r3, #15
 8969 0102 FB18     		adds	r3, r7, r3
 8970 0104 1B78     		ldrb	r3, [r3]
 8971 0106 D318     		adds	r3, r2, r3
 8972 0108 DAB2     		uxtb	r2, r3
 8973 010a 0F23     		movs	r3, #15
 8974 010c FB18     		adds	r3, r7, r3
 8975 010e 1A70     		strb	r2, [r3]
3616:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_SINGLE_TAP_REG,
3617:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3618:bma2x2.c      **** 		break;
 8976              		.loc 1 3618 0
 8977 0110 04E0     		b	.L522
 8978              	.L524:
3619:bma2x2.c      **** 		default:
3620:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 8979              		.loc 1 3620 0
 8980 0112 0F23     		movs	r3, #15
 8981 0114 FB18     		adds	r3, r7, r3
 8982 0116 FE22     		movs	r2, #254
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 225


 8983 0118 1A70     		strb	r2, [r3]
3621:bma2x2.c      **** 		break;
 8984              		.loc 1 3621 0
 8985 011a C046     		nop
 8986              	.L522:
3622:bma2x2.c      **** 		}
3623:bma2x2.c      **** 	}
3624:bma2x2.c      **** 	return com_rslt;
 8987              		.loc 1 3624 0
 8988 011c 0F23     		movs	r3, #15
 8989 011e FB18     		adds	r3, r7, r3
 8990 0120 1B78     		ldrb	r3, [r3]
 8991 0122 5BB2     		sxtb	r3, r3
 8992              	.L523:
3625:bma2x2.c      **** }
 8993              		.loc 1 3625 0 discriminator 1
 8994 0124 1800     		movs	r0, r3
 8995 0126 BD46     		mov	sp, r7
 8996 0128 04B0     		add	sp, sp, #16
 8997              		@ sp needed
 8998 012a B0BD     		pop	{r4, r5, r7, pc}
 8999              	.L526:
 9000              		.align	2
 9001              	.L525:
 9002 012c 00000000 		.word	p_bma2x2
 9003              		.cfi_endproc
 9004              	.LFE54:
 9005              		.size	bma2x2_set_intr_single_tap, .-bma2x2_set_intr_single_tap
 9006              		.section	.text.bma2x2_get_intr_orient,"ax",%progbits
 9007              		.align	2
 9008              		.global	bma2x2_get_intr_orient
 9009              		.code	16
 9010              		.thumb_func
 9011              		.type	bma2x2_get_intr_orient, %function
 9012              	bma2x2_get_intr_orient:
 9013              	.LFB55:
3626:bma2x2.c      **** /*!
3627:bma2x2.c      ****  * @brief This API is used to get
3628:bma2x2.c      ****  * the interrupt status of orient interrupt in the register 0x19 and 0x1B
3629:bma2x2.c      ****  * @note INTR1_orient -> register 0x19 bit 6
3630:bma2x2.c      ****  * @note INTR2_orient -> register 0x1B bit 6
3631:bma2x2.c      ****  *
3632:bma2x2.c      ****  *
3633:bma2x2.c      ****  * @param channel_u8: The value of orient interrupt select
3634:bma2x2.c      ****  *        channel_u8     |   result
3635:bma2x2.c      ****  *       ----------------- | ------------------
3636:bma2x2.c      ****  *              0          | BMA2x2_ACCEL_INTR1_ORIENT
3637:bma2x2.c      ****  *              1          | BMA2x2_ACCEL_INTR2_ORIENT
3638:bma2x2.c      ****  *
3639:bma2x2.c      ****  *  @param intr_orient_u8: The value of orient interrupt enable
3640:bma2x2.c      ****  *       intr_orient_u8         |   result
3641:bma2x2.c      ****  *       ------------------------ | ------------------
3642:bma2x2.c      ****  *              0x00              | INTR_DISABLE
3643:bma2x2.c      ****  *              0x01              | INTR_ENABLE
3644:bma2x2.c      ****  *
3645:bma2x2.c      ****  *
3646:bma2x2.c      ****  *	@return results of bus communication function
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 226


3647:bma2x2.c      ****  *	@retval 0 -> Success
3648:bma2x2.c      ****  *	@retval -1 -> Error
3649:bma2x2.c      ****  *
3650:bma2x2.c      ****  *
3651:bma2x2.c      **** */
3652:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_intr_orient(u8 channel_u8,
3653:bma2x2.c      **** u8 *intr_orient_u8)
3654:bma2x2.c      **** {
 9014              		.loc 1 3654 0
 9015              		.cfi_startproc
 9016              		@ args = 0, pretend = 0, frame = 16
 9017              		@ frame_needed = 1, uses_anonymous_args = 0
 9018 0000 B0B5     		push	{r4, r5, r7, lr}
 9019              		.cfi_def_cfa_offset 16
 9020              		.cfi_offset 4, -16
 9021              		.cfi_offset 5, -12
 9022              		.cfi_offset 7, -8
 9023              		.cfi_offset 14, -4
 9024 0002 84B0     		sub	sp, sp, #16
 9025              		.cfi_def_cfa_offset 32
 9026 0004 00AF     		add	r7, sp, #0
 9027              		.cfi_def_cfa_register 7
 9028 0006 0200     		movs	r2, r0
 9029 0008 3960     		str	r1, [r7]
 9030 000a FB1D     		adds	r3, r7, #7
 9031 000c 1A70     		strb	r2, [r3]
3655:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 9032              		.loc 1 3655 0
 9033 000e 0E23     		movs	r3, #14
 9034 0010 FB18     		adds	r3, r7, r3
 9035 0012 0022     		movs	r2, #0
 9036 0014 1A70     		strb	r2, [r3]
3656:bma2x2.c      **** 		/*  Variable used to return value of
3657:bma2x2.c      **** 	communication routine*/
3658:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 9037              		.loc 1 3658 0
 9038 0016 0F23     		movs	r3, #15
 9039 0018 FB18     		adds	r3, r7, r3
 9040 001a FF22     		movs	r2, #255
 9041 001c 1A70     		strb	r2, [r3]
3659:bma2x2.c      **** 
3660:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 9042              		.loc 1 3660 0
 9043 001e 274B     		ldr	r3, .L536
 9044 0020 1B68     		ldr	r3, [r3]
 9045 0022 002B     		cmp	r3, #0
 9046 0024 02D1     		bne	.L528
3661:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
3662:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 9047              		.loc 1 3662 0
 9048 0026 7F23     		movs	r3, #127
 9049 0028 5B42     		rsbs	r3, r3, #0
 9050 002a 43E0     		b	.L534
 9051              	.L528:
3663:bma2x2.c      **** 		} else {
3664:bma2x2.c      **** 		switch (channel_u8) {
 9052              		.loc 1 3664 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 227


 9053 002c FB1D     		adds	r3, r7, #7
 9054 002e 1B78     		ldrb	r3, [r3]
 9055 0030 002B     		cmp	r3, #0
 9056 0032 02D0     		beq	.L531
 9057 0034 012B     		cmp	r3, #1
 9058 0036 1AD0     		beq	.L532
 9059 0038 33E0     		b	.L535
 9060              	.L531:
3665:bma2x2.c      **** 		/* Read orient interrupt*/
3666:bma2x2.c      **** 		case BMA2x2_INTR1_ORIENT:
3667:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 9061              		.loc 1 3667 0
 9062 003a 204B     		ldr	r3, .L536
 9063 003c 1B68     		ldr	r3, [r3]
 9064 003e DD68     		ldr	r5, [r3, #12]
 9065 0040 1E4B     		ldr	r3, .L536
 9066 0042 1B68     		ldr	r3, [r3]
 9067 0044 1879     		ldrb	r0, [r3, #4]
 9068 0046 0F23     		movs	r3, #15
 9069 0048 FC18     		adds	r4, r7, r3
 9070 004a 0E23     		movs	r3, #14
 9071 004c FA18     		adds	r2, r7, r3
 9072 004e 0123     		movs	r3, #1
 9073 0050 1921     		movs	r1, #25
 9074 0052 A847     		blx	r5
 9075 0054 0300     		movs	r3, r0
 9076 0056 2370     		strb	r3, [r4]
3668:bma2x2.c      **** 			(p_bma2x2->dev_addr,
3669:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_ORIENT_REG,
3670:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3671:bma2x2.c      **** 			*intr_orient_u8 = BMA2x2_GET_BITSLICE
 9077              		.loc 1 3671 0
 9078 0058 0E23     		movs	r3, #14
 9079 005a FB18     		adds	r3, r7, r3
 9080 005c 1B78     		ldrb	r3, [r3]
 9081 005e 9B11     		asrs	r3, r3, #6
 9082 0060 DBB2     		uxtb	r3, r3
 9083 0062 0122     		movs	r2, #1
 9084 0064 1340     		ands	r3, r2
 9085 0066 DAB2     		uxtb	r2, r3
 9086 0068 3B68     		ldr	r3, [r7]
 9087 006a 1A70     		strb	r2, [r3]
3672:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_INTR1_PAD_ORIENT);
3673:bma2x2.c      **** 		break;
 9088              		.loc 1 3673 0
 9089 006c 1EE0     		b	.L533
 9090              	.L532:
3674:bma2x2.c      **** 		case BMA2x2_INTR2_ORIENT:
3675:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 9091              		.loc 1 3675 0
 9092 006e 134B     		ldr	r3, .L536
 9093 0070 1B68     		ldr	r3, [r3]
 9094 0072 DD68     		ldr	r5, [r3, #12]
 9095 0074 114B     		ldr	r3, .L536
 9096 0076 1B68     		ldr	r3, [r3]
 9097 0078 1879     		ldrb	r0, [r3, #4]
 9098 007a 0F23     		movs	r3, #15
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 228


 9099 007c FC18     		adds	r4, r7, r3
 9100 007e 0E23     		movs	r3, #14
 9101 0080 FA18     		adds	r2, r7, r3
 9102 0082 0123     		movs	r3, #1
 9103 0084 1B21     		movs	r1, #27
 9104 0086 A847     		blx	r5
 9105 0088 0300     		movs	r3, r0
 9106 008a 2370     		strb	r3, [r4]
3676:bma2x2.c      **** 			(p_bma2x2->dev_addr,
3677:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_ORIENT_REG,
3678:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3679:bma2x2.c      **** 			*intr_orient_u8 = BMA2x2_GET_BITSLICE
 9107              		.loc 1 3679 0
 9108 008c 0E23     		movs	r3, #14
 9109 008e FB18     		adds	r3, r7, r3
 9110 0090 1B78     		ldrb	r3, [r3]
 9111 0092 9B11     		asrs	r3, r3, #6
 9112 0094 DBB2     		uxtb	r3, r3
 9113 0096 0122     		movs	r2, #1
 9114 0098 1340     		ands	r3, r2
 9115 009a DAB2     		uxtb	r2, r3
 9116 009c 3B68     		ldr	r3, [r7]
 9117 009e 1A70     		strb	r2, [r3]
3680:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_INTR2_PAD_ORIENT);
3681:bma2x2.c      **** 		break;
 9118              		.loc 1 3681 0
 9119 00a0 04E0     		b	.L533
 9120              	.L535:
3682:bma2x2.c      **** 		default:
3683:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 9121              		.loc 1 3683 0
 9122 00a2 0F23     		movs	r3, #15
 9123 00a4 FB18     		adds	r3, r7, r3
 9124 00a6 FE22     		movs	r2, #254
 9125 00a8 1A70     		strb	r2, [r3]
3684:bma2x2.c      **** 		break;
 9126              		.loc 1 3684 0
 9127 00aa C046     		nop
 9128              	.L533:
3685:bma2x2.c      **** 		}
3686:bma2x2.c      **** 	}
3687:bma2x2.c      **** 	return com_rslt;
 9129              		.loc 1 3687 0
 9130 00ac 0F23     		movs	r3, #15
 9131 00ae FB18     		adds	r3, r7, r3
 9132 00b0 1B78     		ldrb	r3, [r3]
 9133 00b2 5BB2     		sxtb	r3, r3
 9134              	.L534:
3688:bma2x2.c      **** }
 9135              		.loc 1 3688 0 discriminator 1
 9136 00b4 1800     		movs	r0, r3
 9137 00b6 BD46     		mov	sp, r7
 9138 00b8 04B0     		add	sp, sp, #16
 9139              		@ sp needed
 9140 00ba B0BD     		pop	{r4, r5, r7, pc}
 9141              	.L537:
 9142              		.align	2
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 229


 9143              	.L536:
 9144 00bc 00000000 		.word	p_bma2x2
 9145              		.cfi_endproc
 9146              	.LFE55:
 9147              		.size	bma2x2_get_intr_orient, .-bma2x2_get_intr_orient
 9148              		.section	.text.bma2x2_set_intr_orient,"ax",%progbits
 9149              		.align	2
 9150              		.global	bma2x2_set_intr_orient
 9151              		.code	16
 9152              		.thumb_func
 9153              		.type	bma2x2_set_intr_orient, %function
 9154              	bma2x2_set_intr_orient:
 9155              	.LFB56:
3689:bma2x2.c      **** /*!
3690:bma2x2.c      ****  * @brief This API is used to set
3691:bma2x2.c      ****  * the interrupt status of orient interrupt in the register 0x19 and 0x1B
3692:bma2x2.c      ****  * @note INTR1_orient -> register 0x19 bit 6
3693:bma2x2.c      ****  * @note INTR2_orient -> register 0x1B bit 6
3694:bma2x2.c      ****  *
3695:bma2x2.c      ****  *
3696:bma2x2.c      ****  * @param channel_u8: The value of orient interrupt select
3697:bma2x2.c      ****  *        channel_u8     |   result
3698:bma2x2.c      ****  *       ----------------- | ------------------
3699:bma2x2.c      ****  *              0          | BMA2x2_ACCEL_INTR1_ORIENT
3700:bma2x2.c      ****  *              1          | BMA2x2_ACCEL_INTR2_ORIENT
3701:bma2x2.c      ****  *
3702:bma2x2.c      ****  *  @param intr_orient_u8: The value of orient interrupt enable
3703:bma2x2.c      ****  *       intr_orient_u8         |   result
3704:bma2x2.c      ****  *       ------------------------ | ------------------
3705:bma2x2.c      ****  *              0x00              | INTR_DISABLE
3706:bma2x2.c      ****  *              0x01              | INTR_ENABLE
3707:bma2x2.c      ****  *
3708:bma2x2.c      ****  *
3709:bma2x2.c      ****  *	@return results of bus communication function
3710:bma2x2.c      ****  *	@retval 0 -> Success
3711:bma2x2.c      ****  *	@retval -1 -> Error
3712:bma2x2.c      ****  *
3713:bma2x2.c      ****  *
3714:bma2x2.c      **** */
3715:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_intr_orient(u8 channel_u8,
3716:bma2x2.c      **** u8 intr_orient_u8)
3717:bma2x2.c      **** {
 9156              		.loc 1 3717 0
 9157              		.cfi_startproc
 9158              		@ args = 0, pretend = 0, frame = 16
 9159              		@ frame_needed = 1, uses_anonymous_args = 0
 9160 0000 B0B5     		push	{r4, r5, r7, lr}
 9161              		.cfi_def_cfa_offset 16
 9162              		.cfi_offset 4, -16
 9163              		.cfi_offset 5, -12
 9164              		.cfi_offset 7, -8
 9165              		.cfi_offset 14, -4
 9166 0002 84B0     		sub	sp, sp, #16
 9167              		.cfi_def_cfa_offset 32
 9168 0004 00AF     		add	r7, sp, #0
 9169              		.cfi_def_cfa_register 7
 9170 0006 0200     		movs	r2, r0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 230


 9171 0008 FB1D     		adds	r3, r7, #7
 9172 000a 1A70     		strb	r2, [r3]
 9173 000c BB1D     		adds	r3, r7, #6
 9174 000e 0A1C     		adds	r2, r1, #0
 9175 0010 1A70     		strb	r2, [r3]
3718:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 9176              		.loc 1 3718 0
 9177 0012 0E23     		movs	r3, #14
 9178 0014 FB18     		adds	r3, r7, r3
 9179 0016 0022     		movs	r2, #0
 9180 0018 1A70     		strb	r2, [r3]
3719:bma2x2.c      **** 	/*  Variable used to return value of
3720:bma2x2.c      **** 	communication routine*/
3721:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 9181              		.loc 1 3721 0
 9182 001a 0F23     		movs	r3, #15
 9183 001c FB18     		adds	r3, r7, r3
 9184 001e FF22     		movs	r2, #255
 9185 0020 1A70     		strb	r2, [r3]
3722:bma2x2.c      **** 
3723:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 9186              		.loc 1 3723 0
 9187 0022 424B     		ldr	r3, .L547
 9188 0024 1B68     		ldr	r3, [r3]
 9189 0026 002B     		cmp	r3, #0
 9190 0028 02D1     		bne	.L539
3724:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
3725:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 9191              		.loc 1 3725 0
 9192 002a 7F23     		movs	r3, #127
 9193 002c 5B42     		rsbs	r3, r3, #0
 9194 002e 79E0     		b	.L545
 9195              	.L539:
3726:bma2x2.c      **** 		} else {
3727:bma2x2.c      **** 		switch (channel_u8) {
 9196              		.loc 1 3727 0
 9197 0030 FB1D     		adds	r3, r7, #7
 9198 0032 1B78     		ldrb	r3, [r3]
 9199 0034 002B     		cmp	r3, #0
 9200 0036 02D0     		beq	.L542
 9201 0038 012B     		cmp	r3, #1
 9202 003a 35D0     		beq	.L543
 9203 003c 69E0     		b	.L546
 9204              	.L542:
3728:bma2x2.c      **** 		/* Write orient interrupt */
3729:bma2x2.c      **** 		case BMA2x2_INTR1_ORIENT:
3730:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 9205              		.loc 1 3730 0
 9206 003e 3B4B     		ldr	r3, .L547
 9207 0040 1B68     		ldr	r3, [r3]
 9208 0042 DD68     		ldr	r5, [r3, #12]
 9209 0044 394B     		ldr	r3, .L547
 9210 0046 1B68     		ldr	r3, [r3]
 9211 0048 1879     		ldrb	r0, [r3, #4]
 9212 004a 0F23     		movs	r3, #15
 9213 004c FC18     		adds	r4, r7, r3
 9214 004e 0E23     		movs	r3, #14
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 231


 9215 0050 FA18     		adds	r2, r7, r3
 9216 0052 0123     		movs	r3, #1
 9217 0054 1921     		movs	r1, #25
 9218 0056 A847     		blx	r5
 9219 0058 0300     		movs	r3, r0
 9220 005a 2370     		strb	r3, [r4]
3731:bma2x2.c      **** 			(p_bma2x2->dev_addr,
3732:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_ORIENT_REG,
3733:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3734:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 9221              		.loc 1 3734 0
 9222 005c 0E23     		movs	r3, #14
 9223 005e FB18     		adds	r3, r7, r3
 9224 0060 1B78     		ldrb	r3, [r3]
 9225 0062 5BB2     		sxtb	r3, r3
 9226 0064 4022     		movs	r2, #64
 9227 0066 9343     		bics	r3, r2
 9228 0068 5AB2     		sxtb	r2, r3
 9229 006a BB1D     		adds	r3, r7, #6
 9230 006c 1B78     		ldrb	r3, [r3]
 9231 006e 9B01     		lsls	r3, r3, #6
 9232 0070 5BB2     		sxtb	r3, r3
 9233 0072 4021     		movs	r1, #64
 9234 0074 0B40     		ands	r3, r1
 9235 0076 5BB2     		sxtb	r3, r3
 9236 0078 1343     		orrs	r3, r2
 9237 007a 5BB2     		sxtb	r3, r3
 9238 007c DAB2     		uxtb	r2, r3
 9239 007e 0E23     		movs	r3, #14
 9240 0080 FB18     		adds	r3, r7, r3
 9241 0082 1A70     		strb	r2, [r3]
3735:bma2x2.c      **** 			(data_u8,
3736:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_ORIENT, intr_orient_u8);
3737:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 9242              		.loc 1 3737 0
 9243 0084 0E23     		movs	r3, #14
 9244 0086 FB18     		adds	r3, r7, r3
 9245 0088 0122     		movs	r2, #1
 9246 008a 1900     		movs	r1, r3
 9247 008c 1920     		movs	r0, #25
 9248 008e FFF7FEFF 		bl	bma2x2_write_reg
 9249 0092 0300     		movs	r3, r0
 9250 0094 DAB2     		uxtb	r2, r3
 9251 0096 0F23     		movs	r3, #15
 9252 0098 FB18     		adds	r3, r7, r3
 9253 009a 1B78     		ldrb	r3, [r3]
 9254 009c D318     		adds	r3, r2, r3
 9255 009e DAB2     		uxtb	r2, r3
 9256 00a0 0F23     		movs	r3, #15
 9257 00a2 FB18     		adds	r3, r7, r3
 9258 00a4 1A70     		strb	r2, [r3]
3738:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_ORIENT_REG,
3739:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3740:bma2x2.c      **** 		break;
 9259              		.loc 1 3740 0
 9260 00a6 39E0     		b	.L544
 9261              	.L543:
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 232


3741:bma2x2.c      **** 		case BMA2x2_INTR2_ORIENT:
3742:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 9262              		.loc 1 3742 0
 9263 00a8 204B     		ldr	r3, .L547
 9264 00aa 1B68     		ldr	r3, [r3]
 9265 00ac DD68     		ldr	r5, [r3, #12]
 9266 00ae 1F4B     		ldr	r3, .L547
 9267 00b0 1B68     		ldr	r3, [r3]
 9268 00b2 1879     		ldrb	r0, [r3, #4]
 9269 00b4 0F23     		movs	r3, #15
 9270 00b6 FC18     		adds	r4, r7, r3
 9271 00b8 0E23     		movs	r3, #14
 9272 00ba FA18     		adds	r2, r7, r3
 9273 00bc 0123     		movs	r3, #1
 9274 00be 1B21     		movs	r1, #27
 9275 00c0 A847     		blx	r5
 9276 00c2 0300     		movs	r3, r0
 9277 00c4 2370     		strb	r3, [r4]
3743:bma2x2.c      **** 			(p_bma2x2->dev_addr,
3744:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_ORIENT_REG,
3745:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3746:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 9278              		.loc 1 3746 0
 9279 00c6 0E23     		movs	r3, #14
 9280 00c8 FB18     		adds	r3, r7, r3
 9281 00ca 1B78     		ldrb	r3, [r3]
 9282 00cc 5BB2     		sxtb	r3, r3
 9283 00ce 4022     		movs	r2, #64
 9284 00d0 9343     		bics	r3, r2
 9285 00d2 5AB2     		sxtb	r2, r3
 9286 00d4 BB1D     		adds	r3, r7, #6
 9287 00d6 1B78     		ldrb	r3, [r3]
 9288 00d8 9B01     		lsls	r3, r3, #6
 9289 00da 5BB2     		sxtb	r3, r3
 9290 00dc 4021     		movs	r1, #64
 9291 00de 0B40     		ands	r3, r1
 9292 00e0 5BB2     		sxtb	r3, r3
 9293 00e2 1343     		orrs	r3, r2
 9294 00e4 5BB2     		sxtb	r3, r3
 9295 00e6 DAB2     		uxtb	r2, r3
 9296 00e8 0E23     		movs	r3, #14
 9297 00ea FB18     		adds	r3, r7, r3
 9298 00ec 1A70     		strb	r2, [r3]
3747:bma2x2.c      **** 			(data_u8,
3748:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_ORIENT, intr_orient_u8);
3749:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 9299              		.loc 1 3749 0
 9300 00ee 0E23     		movs	r3, #14
 9301 00f0 FB18     		adds	r3, r7, r3
 9302 00f2 0122     		movs	r2, #1
 9303 00f4 1900     		movs	r1, r3
 9304 00f6 1B20     		movs	r0, #27
 9305 00f8 FFF7FEFF 		bl	bma2x2_write_reg
 9306 00fc 0300     		movs	r3, r0
 9307 00fe DAB2     		uxtb	r2, r3
 9308 0100 0F23     		movs	r3, #15
 9309 0102 FB18     		adds	r3, r7, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 233


 9310 0104 1B78     		ldrb	r3, [r3]
 9311 0106 D318     		adds	r3, r2, r3
 9312 0108 DAB2     		uxtb	r2, r3
 9313 010a 0F23     		movs	r3, #15
 9314 010c FB18     		adds	r3, r7, r3
 9315 010e 1A70     		strb	r2, [r3]
3750:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_ORIENT_REG,
3751:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3752:bma2x2.c      **** 		break;
 9316              		.loc 1 3752 0
 9317 0110 04E0     		b	.L544
 9318              	.L546:
3753:bma2x2.c      **** 		default:
3754:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 9319              		.loc 1 3754 0
 9320 0112 0F23     		movs	r3, #15
 9321 0114 FB18     		adds	r3, r7, r3
 9322 0116 FE22     		movs	r2, #254
 9323 0118 1A70     		strb	r2, [r3]
3755:bma2x2.c      **** 		break;
 9324              		.loc 1 3755 0
 9325 011a C046     		nop
 9326              	.L544:
3756:bma2x2.c      **** 		}
3757:bma2x2.c      **** 	}
3758:bma2x2.c      **** 	return com_rslt;
 9327              		.loc 1 3758 0
 9328 011c 0F23     		movs	r3, #15
 9329 011e FB18     		adds	r3, r7, r3
 9330 0120 1B78     		ldrb	r3, [r3]
 9331 0122 5BB2     		sxtb	r3, r3
 9332              	.L545:
3759:bma2x2.c      **** }
 9333              		.loc 1 3759 0 discriminator 1
 9334 0124 1800     		movs	r0, r3
 9335 0126 BD46     		mov	sp, r7
 9336 0128 04B0     		add	sp, sp, #16
 9337              		@ sp needed
 9338 012a B0BD     		pop	{r4, r5, r7, pc}
 9339              	.L548:
 9340              		.align	2
 9341              	.L547:
 9342 012c 00000000 		.word	p_bma2x2
 9343              		.cfi_endproc
 9344              	.LFE56:
 9345              		.size	bma2x2_set_intr_orient, .-bma2x2_set_intr_orient
 9346              		.section	.text.bma2x2_get_intr_flat,"ax",%progbits
 9347              		.align	2
 9348              		.global	bma2x2_get_intr_flat
 9349              		.code	16
 9350              		.thumb_func
 9351              		.type	bma2x2_get_intr_flat, %function
 9352              	bma2x2_get_intr_flat:
 9353              	.LFB57:
3760:bma2x2.c      **** /*!
3761:bma2x2.c      ****  * @brief This API is used to get
3762:bma2x2.c      ****  * the interrupt enable of flat interrupt in the register 0x19 and 0x1B
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 234


3763:bma2x2.c      ****  * @note INTR1_flat -> register 0x19 bit 7
3764:bma2x2.c      ****  * @note INTR2_flat -> register 0x1B bit 7
3765:bma2x2.c      ****  *
3766:bma2x2.c      ****  *
3767:bma2x2.c      ****  *
3768:bma2x2.c      ****  *
3769:bma2x2.c      ****  * @param channel_u8: The value of flat interrupt select
3770:bma2x2.c      ****  *        channel_u8     |   result
3771:bma2x2.c      ****  *       ----------------- | ------------------
3772:bma2x2.c      ****  *              0          | BMA2x2_ACCEL_INTR1_FLAT
3773:bma2x2.c      ****  *              1          | BMA2x2_ACCEL_INTR2_FLAT
3774:bma2x2.c      ****  *
3775:bma2x2.c      ****  * @param intr_flat_u8: The flat interrupt enable value
3776:bma2x2.c      ****  *       intr_flat_u8           |   result
3777:bma2x2.c      ****  *       ------------------------ | ------------------
3778:bma2x2.c      ****  *              0x00              | INTR_DISABLE
3779:bma2x2.c      ****  *              0x01              | INTR_ENABLE
3780:bma2x2.c      ****  *
3781:bma2x2.c      ****  *
3782:bma2x2.c      ****  *	@return results of bus communication function
3783:bma2x2.c      ****  *	@retval 0 -> Success
3784:bma2x2.c      ****  *	@retval -1 -> Error
3785:bma2x2.c      ****  *
3786:bma2x2.c      ****  *
3787:bma2x2.c      **** */
3788:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_intr_flat(u8 channel_u8,
3789:bma2x2.c      **** u8 *intr_flat_u8)
3790:bma2x2.c      **** {
 9354              		.loc 1 3790 0
 9355              		.cfi_startproc
 9356              		@ args = 0, pretend = 0, frame = 16
 9357              		@ frame_needed = 1, uses_anonymous_args = 0
 9358 0000 B0B5     		push	{r4, r5, r7, lr}
 9359              		.cfi_def_cfa_offset 16
 9360              		.cfi_offset 4, -16
 9361              		.cfi_offset 5, -12
 9362              		.cfi_offset 7, -8
 9363              		.cfi_offset 14, -4
 9364 0002 84B0     		sub	sp, sp, #16
 9365              		.cfi_def_cfa_offset 32
 9366 0004 00AF     		add	r7, sp, #0
 9367              		.cfi_def_cfa_register 7
 9368 0006 0200     		movs	r2, r0
 9369 0008 3960     		str	r1, [r7]
 9370 000a FB1D     		adds	r3, r7, #7
 9371 000c 1A70     		strb	r2, [r3]
3791:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 9372              		.loc 1 3791 0
 9373 000e 0E23     		movs	r3, #14
 9374 0010 FB18     		adds	r3, r7, r3
 9375 0012 0022     		movs	r2, #0
 9376 0014 1A70     		strb	r2, [r3]
3792:bma2x2.c      **** 		/*  Variable used to return value of
3793:bma2x2.c      **** 	communication routine*/
3794:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 9377              		.loc 1 3794 0
 9378 0016 0F23     		movs	r3, #15
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 235


 9379 0018 FB18     		adds	r3, r7, r3
 9380 001a FF22     		movs	r2, #255
 9381 001c 1A70     		strb	r2, [r3]
3795:bma2x2.c      **** 
3796:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 9382              		.loc 1 3796 0
 9383 001e 244B     		ldr	r3, .L558
 9384 0020 1B68     		ldr	r3, [r3]
 9385 0022 002B     		cmp	r3, #0
 9386 0024 02D1     		bne	.L550
3797:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
3798:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 9387              		.loc 1 3798 0
 9388 0026 7F23     		movs	r3, #127
 9389 0028 5B42     		rsbs	r3, r3, #0
 9390 002a 3DE0     		b	.L556
 9391              	.L550:
3799:bma2x2.c      **** 		} else {
3800:bma2x2.c      **** 		switch (channel_u8) {
 9392              		.loc 1 3800 0
 9393 002c FB1D     		adds	r3, r7, #7
 9394 002e 1B78     		ldrb	r3, [r3]
 9395 0030 002B     		cmp	r3, #0
 9396 0032 02D0     		beq	.L553
 9397 0034 012B     		cmp	r3, #1
 9398 0036 17D0     		beq	.L554
 9399 0038 2DE0     		b	.L557
 9400              	.L553:
3801:bma2x2.c      **** 		/* Read flat interrupt */
3802:bma2x2.c      **** 		case BMA2x2_INTR1_FLAT:
3803:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 9401              		.loc 1 3803 0
 9402 003a 1D4B     		ldr	r3, .L558
 9403 003c 1B68     		ldr	r3, [r3]
 9404 003e DD68     		ldr	r5, [r3, #12]
 9405 0040 1B4B     		ldr	r3, .L558
 9406 0042 1B68     		ldr	r3, [r3]
 9407 0044 1879     		ldrb	r0, [r3, #4]
 9408 0046 0F23     		movs	r3, #15
 9409 0048 FC18     		adds	r4, r7, r3
 9410 004a 0E23     		movs	r3, #14
 9411 004c FA18     		adds	r2, r7, r3
 9412 004e 0123     		movs	r3, #1
 9413 0050 1921     		movs	r1, #25
 9414 0052 A847     		blx	r5
 9415 0054 0300     		movs	r3, r0
 9416 0056 2370     		strb	r3, [r4]
3804:bma2x2.c      **** 			(p_bma2x2->dev_addr,
3805:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_FLAT_REG,
3806:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3807:bma2x2.c      **** 			*intr_flat_u8 = BMA2x2_GET_BITSLICE
 9417              		.loc 1 3807 0
 9418 0058 0E23     		movs	r3, #14
 9419 005a FB18     		adds	r3, r7, r3
 9420 005c 1B78     		ldrb	r3, [r3]
 9421 005e DB09     		lsrs	r3, r3, #7
 9422 0060 DAB2     		uxtb	r2, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 236


 9423 0062 3B68     		ldr	r3, [r7]
 9424 0064 1A70     		strb	r2, [r3]
3808:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_INTR1_PAD_FLAT);
3809:bma2x2.c      **** 		break;
 9425              		.loc 1 3809 0
 9426 0066 1BE0     		b	.L555
 9427              	.L554:
3810:bma2x2.c      **** 		case BMA2x2_INTR2_FLAT:
3811:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 9428              		.loc 1 3811 0
 9429 0068 114B     		ldr	r3, .L558
 9430 006a 1B68     		ldr	r3, [r3]
 9431 006c DD68     		ldr	r5, [r3, #12]
 9432 006e 104B     		ldr	r3, .L558
 9433 0070 1B68     		ldr	r3, [r3]
 9434 0072 1879     		ldrb	r0, [r3, #4]
 9435 0074 0F23     		movs	r3, #15
 9436 0076 FC18     		adds	r4, r7, r3
 9437 0078 0E23     		movs	r3, #14
 9438 007a FA18     		adds	r2, r7, r3
 9439 007c 0123     		movs	r3, #1
 9440 007e 1B21     		movs	r1, #27
 9441 0080 A847     		blx	r5
 9442 0082 0300     		movs	r3, r0
 9443 0084 2370     		strb	r3, [r4]
3812:bma2x2.c      **** 			(p_bma2x2->dev_addr,
3813:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_FLAT_REG,
3814:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3815:bma2x2.c      **** 			*intr_flat_u8 = BMA2x2_GET_BITSLICE
 9444              		.loc 1 3815 0
 9445 0086 0E23     		movs	r3, #14
 9446 0088 FB18     		adds	r3, r7, r3
 9447 008a 1B78     		ldrb	r3, [r3]
 9448 008c DB09     		lsrs	r3, r3, #7
 9449 008e DAB2     		uxtb	r2, r3
 9450 0090 3B68     		ldr	r3, [r7]
 9451 0092 1A70     		strb	r2, [r3]
3816:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_INTR2_PAD_FLAT);
3817:bma2x2.c      **** 		break;
 9452              		.loc 1 3817 0
 9453 0094 04E0     		b	.L555
 9454              	.L557:
3818:bma2x2.c      **** 		default:
3819:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 9455              		.loc 1 3819 0
 9456 0096 0F23     		movs	r3, #15
 9457 0098 FB18     		adds	r3, r7, r3
 9458 009a FE22     		movs	r2, #254
 9459 009c 1A70     		strb	r2, [r3]
3820:bma2x2.c      **** 		break;
 9460              		.loc 1 3820 0
 9461 009e C046     		nop
 9462              	.L555:
3821:bma2x2.c      **** 		}
3822:bma2x2.c      **** 	}
3823:bma2x2.c      **** 	return com_rslt;
 9463              		.loc 1 3823 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 237


 9464 00a0 0F23     		movs	r3, #15
 9465 00a2 FB18     		adds	r3, r7, r3
 9466 00a4 1B78     		ldrb	r3, [r3]
 9467 00a6 5BB2     		sxtb	r3, r3
 9468              	.L556:
3824:bma2x2.c      **** }
 9469              		.loc 1 3824 0 discriminator 1
 9470 00a8 1800     		movs	r0, r3
 9471 00aa BD46     		mov	sp, r7
 9472 00ac 04B0     		add	sp, sp, #16
 9473              		@ sp needed
 9474 00ae B0BD     		pop	{r4, r5, r7, pc}
 9475              	.L559:
 9476              		.align	2
 9477              	.L558:
 9478 00b0 00000000 		.word	p_bma2x2
 9479              		.cfi_endproc
 9480              	.LFE57:
 9481              		.size	bma2x2_get_intr_flat, .-bma2x2_get_intr_flat
 9482              		.section	.text.bma2x2_set_intr_flat,"ax",%progbits
 9483              		.align	2
 9484              		.global	bma2x2_set_intr_flat
 9485              		.code	16
 9486              		.thumb_func
 9487              		.type	bma2x2_set_intr_flat, %function
 9488              	bma2x2_set_intr_flat:
 9489              	.LFB58:
3825:bma2x2.c      **** /*!
3826:bma2x2.c      ****  * @brief This API is used to set
3827:bma2x2.c      ****  * the interrupt enable of flat interrupt in the register 0x19 and 0x1B
3828:bma2x2.c      ****  * @note INTR1_flat -> register 0x19 bit 7
3829:bma2x2.c      ****  * @note INTR2_flat -> register 0x1B bit 7
3830:bma2x2.c      ****  *
3831:bma2x2.c      ****  *
3832:bma2x2.c      ****  *
3833:bma2x2.c      ****  *
3834:bma2x2.c      ****  * @param channel_u8: The value of flat interrupt select
3835:bma2x2.c      ****  *        channel_u8     |   result
3836:bma2x2.c      ****  *       ----------------- | ------------------
3837:bma2x2.c      ****  *              0          | BMA2x2_ACCEL_INTR1_FLAT
3838:bma2x2.c      ****  *              1          | BMA2x2_ACCEL_INTR2_FLAT
3839:bma2x2.c      ****  *
3840:bma2x2.c      ****  * @param intr_flat_u8: The flat interrupt enable value
3841:bma2x2.c      ****  *       intr_flat_u8           |   result
3842:bma2x2.c      ****  *       ------------------------ | ------------------
3843:bma2x2.c      ****  *              0x00              | INTR_DISABLE
3844:bma2x2.c      ****  *              0x01              | INTR_ENABLE
3845:bma2x2.c      ****  *
3846:bma2x2.c      ****  *
3847:bma2x2.c      ****  *	@return results of bus communication function
3848:bma2x2.c      ****  *	@retval 0 -> Success
3849:bma2x2.c      ****  *	@retval -1 -> Error
3850:bma2x2.c      ****  *
3851:bma2x2.c      ****  *
3852:bma2x2.c      **** */
3853:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_intr_flat(u8 channel_u8,
3854:bma2x2.c      **** u8 intr_flat_u8)
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 238


3855:bma2x2.c      **** {
 9490              		.loc 1 3855 0
 9491              		.cfi_startproc
 9492              		@ args = 0, pretend = 0, frame = 16
 9493              		@ frame_needed = 1, uses_anonymous_args = 0
 9494 0000 B0B5     		push	{r4, r5, r7, lr}
 9495              		.cfi_def_cfa_offset 16
 9496              		.cfi_offset 4, -16
 9497              		.cfi_offset 5, -12
 9498              		.cfi_offset 7, -8
 9499              		.cfi_offset 14, -4
 9500 0002 84B0     		sub	sp, sp, #16
 9501              		.cfi_def_cfa_offset 32
 9502 0004 00AF     		add	r7, sp, #0
 9503              		.cfi_def_cfa_register 7
 9504 0006 0200     		movs	r2, r0
 9505 0008 FB1D     		adds	r3, r7, #7
 9506 000a 1A70     		strb	r2, [r3]
 9507 000c BB1D     		adds	r3, r7, #6
 9508 000e 0A1C     		adds	r2, r1, #0
 9509 0010 1A70     		strb	r2, [r3]
3856:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 9510              		.loc 1 3856 0
 9511 0012 0E23     		movs	r3, #14
 9512 0014 FB18     		adds	r3, r7, r3
 9513 0016 0022     		movs	r2, #0
 9514 0018 1A70     		strb	r2, [r3]
3857:bma2x2.c      **** 	/*  Variable used to return value of
3858:bma2x2.c      **** 	communication routine*/
3859:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 9515              		.loc 1 3859 0
 9516 001a 0F23     		movs	r3, #15
 9517 001c FB18     		adds	r3, r7, r3
 9518 001e FF22     		movs	r2, #255
 9519 0020 1A70     		strb	r2, [r3]
3860:bma2x2.c      **** 
3861:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 9520              		.loc 1 3861 0
 9521 0022 3F4B     		ldr	r3, .L569
 9522 0024 1B68     		ldr	r3, [r3]
 9523 0026 002B     		cmp	r3, #0
 9524 0028 02D1     		bne	.L561
3862:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
3863:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 9525              		.loc 1 3863 0
 9526 002a 7F23     		movs	r3, #127
 9527 002c 5B42     		rsbs	r3, r3, #0
 9528 002e 73E0     		b	.L567
 9529              	.L561:
3864:bma2x2.c      **** 		} else {
3865:bma2x2.c      **** 		switch (channel_u8) {
 9530              		.loc 1 3865 0
 9531 0030 FB1D     		adds	r3, r7, #7
 9532 0032 1B78     		ldrb	r3, [r3]
 9533 0034 002B     		cmp	r3, #0
 9534 0036 02D0     		beq	.L564
 9535 0038 012B     		cmp	r3, #1
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 239


 9536 003a 32D0     		beq	.L565
 9537 003c 63E0     		b	.L568
 9538              	.L564:
3866:bma2x2.c      **** 		/* write flat interrupt */
3867:bma2x2.c      **** 		case BMA2x2_INTR1_FLAT:
3868:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 9539              		.loc 1 3868 0
 9540 003e 384B     		ldr	r3, .L569
 9541 0040 1B68     		ldr	r3, [r3]
 9542 0042 DD68     		ldr	r5, [r3, #12]
 9543 0044 364B     		ldr	r3, .L569
 9544 0046 1B68     		ldr	r3, [r3]
 9545 0048 1879     		ldrb	r0, [r3, #4]
 9546 004a 0F23     		movs	r3, #15
 9547 004c FC18     		adds	r4, r7, r3
 9548 004e 0E23     		movs	r3, #14
 9549 0050 FA18     		adds	r2, r7, r3
 9550 0052 0123     		movs	r3, #1
 9551 0054 1921     		movs	r1, #25
 9552 0056 A847     		blx	r5
 9553 0058 0300     		movs	r3, r0
 9554 005a 2370     		strb	r3, [r4]
3869:bma2x2.c      **** 			(p_bma2x2->dev_addr,
3870:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_FLAT_REG,
3871:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3872:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 9555              		.loc 1 3872 0
 9556 005c 0E23     		movs	r3, #14
 9557 005e FB18     		adds	r3, r7, r3
 9558 0060 1B78     		ldrb	r3, [r3]
 9559 0062 5BB2     		sxtb	r3, r3
 9560 0064 7F22     		movs	r2, #127
 9561 0066 1340     		ands	r3, r2
 9562 0068 5AB2     		sxtb	r2, r3
 9563 006a BB1D     		adds	r3, r7, #6
 9564 006c 1B78     		ldrb	r3, [r3]
 9565 006e DB01     		lsls	r3, r3, #7
 9566 0070 5BB2     		sxtb	r3, r3
 9567 0072 1343     		orrs	r3, r2
 9568 0074 5BB2     		sxtb	r3, r3
 9569 0076 DAB2     		uxtb	r2, r3
 9570 0078 0E23     		movs	r3, #14
 9571 007a FB18     		adds	r3, r7, r3
 9572 007c 1A70     		strb	r2, [r3]
3873:bma2x2.c      **** 			(data_u8,
3874:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_FLAT, intr_flat_u8);
3875:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 9573              		.loc 1 3875 0
 9574 007e 0E23     		movs	r3, #14
 9575 0080 FB18     		adds	r3, r7, r3
 9576 0082 0122     		movs	r2, #1
 9577 0084 1900     		movs	r1, r3
 9578 0086 1920     		movs	r0, #25
 9579 0088 FFF7FEFF 		bl	bma2x2_write_reg
 9580 008c 0300     		movs	r3, r0
 9581 008e DAB2     		uxtb	r2, r3
 9582 0090 0F23     		movs	r3, #15
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 240


 9583 0092 FB18     		adds	r3, r7, r3
 9584 0094 1B78     		ldrb	r3, [r3]
 9585 0096 D318     		adds	r3, r2, r3
 9586 0098 DAB2     		uxtb	r2, r3
 9587 009a 0F23     		movs	r3, #15
 9588 009c FB18     		adds	r3, r7, r3
 9589 009e 1A70     		strb	r2, [r3]
3876:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_FLAT_REG,
3877:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3878:bma2x2.c      **** 		break;
 9590              		.loc 1 3878 0
 9591 00a0 36E0     		b	.L566
 9592              	.L565:
3879:bma2x2.c      **** 		case BMA2x2_INTR2_FLAT:
3880:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 9593              		.loc 1 3880 0
 9594 00a2 1F4B     		ldr	r3, .L569
 9595 00a4 1B68     		ldr	r3, [r3]
 9596 00a6 DD68     		ldr	r5, [r3, #12]
 9597 00a8 1D4B     		ldr	r3, .L569
 9598 00aa 1B68     		ldr	r3, [r3]
 9599 00ac 1879     		ldrb	r0, [r3, #4]
 9600 00ae 0F23     		movs	r3, #15
 9601 00b0 FC18     		adds	r4, r7, r3
 9602 00b2 0E23     		movs	r3, #14
 9603 00b4 FA18     		adds	r2, r7, r3
 9604 00b6 0123     		movs	r3, #1
 9605 00b8 1B21     		movs	r1, #27
 9606 00ba A847     		blx	r5
 9607 00bc 0300     		movs	r3, r0
 9608 00be 2370     		strb	r3, [r4]
3881:bma2x2.c      **** 			(p_bma2x2->dev_addr,
3882:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_FLAT_REG,
3883:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3884:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 9609              		.loc 1 3884 0
 9610 00c0 0E23     		movs	r3, #14
 9611 00c2 FB18     		adds	r3, r7, r3
 9612 00c4 1B78     		ldrb	r3, [r3]
 9613 00c6 5BB2     		sxtb	r3, r3
 9614 00c8 7F22     		movs	r2, #127
 9615 00ca 1340     		ands	r3, r2
 9616 00cc 5AB2     		sxtb	r2, r3
 9617 00ce BB1D     		adds	r3, r7, #6
 9618 00d0 1B78     		ldrb	r3, [r3]
 9619 00d2 DB01     		lsls	r3, r3, #7
 9620 00d4 5BB2     		sxtb	r3, r3
 9621 00d6 1343     		orrs	r3, r2
 9622 00d8 5BB2     		sxtb	r3, r3
 9623 00da DAB2     		uxtb	r2, r3
 9624 00dc 0E23     		movs	r3, #14
 9625 00de FB18     		adds	r3, r7, r3
 9626 00e0 1A70     		strb	r2, [r3]
3885:bma2x2.c      **** 			(data_u8,
3886:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_FLAT, intr_flat_u8);
3887:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 9627              		.loc 1 3887 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 241


 9628 00e2 0E23     		movs	r3, #14
 9629 00e4 FB18     		adds	r3, r7, r3
 9630 00e6 0122     		movs	r2, #1
 9631 00e8 1900     		movs	r1, r3
 9632 00ea 1B20     		movs	r0, #27
 9633 00ec FFF7FEFF 		bl	bma2x2_write_reg
 9634 00f0 0300     		movs	r3, r0
 9635 00f2 DAB2     		uxtb	r2, r3
 9636 00f4 0F23     		movs	r3, #15
 9637 00f6 FB18     		adds	r3, r7, r3
 9638 00f8 1B78     		ldrb	r3, [r3]
 9639 00fa D318     		adds	r3, r2, r3
 9640 00fc DAB2     		uxtb	r2, r3
 9641 00fe 0F23     		movs	r3, #15
 9642 0100 FB18     		adds	r3, r7, r3
 9643 0102 1A70     		strb	r2, [r3]
3888:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_FLAT_REG,
3889:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3890:bma2x2.c      **** 		break;
 9644              		.loc 1 3890 0
 9645 0104 04E0     		b	.L566
 9646              	.L568:
3891:bma2x2.c      **** 		default:
3892:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 9647              		.loc 1 3892 0
 9648 0106 0F23     		movs	r3, #15
 9649 0108 FB18     		adds	r3, r7, r3
 9650 010a FE22     		movs	r2, #254
 9651 010c 1A70     		strb	r2, [r3]
3893:bma2x2.c      **** 		break;
 9652              		.loc 1 3893 0
 9653 010e C046     		nop
 9654              	.L566:
3894:bma2x2.c      **** 		}
3895:bma2x2.c      **** 	}
3896:bma2x2.c      **** 	return com_rslt;
 9655              		.loc 1 3896 0
 9656 0110 0F23     		movs	r3, #15
 9657 0112 FB18     		adds	r3, r7, r3
 9658 0114 1B78     		ldrb	r3, [r3]
 9659 0116 5BB2     		sxtb	r3, r3
 9660              	.L567:
3897:bma2x2.c      **** }
 9661              		.loc 1 3897 0 discriminator 1
 9662 0118 1800     		movs	r0, r3
 9663 011a BD46     		mov	sp, r7
 9664 011c 04B0     		add	sp, sp, #16
 9665              		@ sp needed
 9666 011e B0BD     		pop	{r4, r5, r7, pc}
 9667              	.L570:
 9668              		.align	2
 9669              	.L569:
 9670 0120 00000000 		.word	p_bma2x2
 9671              		.cfi_endproc
 9672              	.LFE58:
 9673              		.size	bma2x2_set_intr_flat, .-bma2x2_set_intr_flat
 9674              		.section	.text.bma2x2_get_new_data,"ax",%progbits
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 242


 9675              		.align	2
 9676              		.global	bma2x2_get_new_data
 9677              		.code	16
 9678              		.thumb_func
 9679              		.type	bma2x2_get_new_data, %function
 9680              	bma2x2_get_new_data:
 9681              	.LFB59:
3898:bma2x2.c      **** /*!
3899:bma2x2.c      ****  * @brief This API is used to get
3900:bma2x2.c      ****  * the interrupt status of new data in the register 0x19
3901:bma2x2.c      ****  * @note INTR1_data -> register 0x19 bit 0
3902:bma2x2.c      ****  * @note INTR2_data -> register 0x19 bit 7
3903:bma2x2.c      ****  *
3904:bma2x2.c      ****  *
3905:bma2x2.c      ****  *
3906:bma2x2.c      ****  *  @param channel_u8: The value of new data interrupt select
3907:bma2x2.c      ****  *        channel_u8     |   result
3908:bma2x2.c      ****  *       ----------------- | ------------------
3909:bma2x2.c      ****  *              0          | BMA2x2_ACCEL_INTR1_NEWDATA
3910:bma2x2.c      ****  *              1          | BMA2x2_ACCEL_INTR2_NEWDATA
3911:bma2x2.c      ****  *
3912:bma2x2.c      ****  *	@param intr_newdata_u8: The new data interrupt enable value
3913:bma2x2.c      ****  *       intr_newdata_u8          |    result
3914:bma2x2.c      ****  *       ------------------------ | ------------------
3915:bma2x2.c      ****  *              0x00              | INTR_DISABLE
3916:bma2x2.c      ****  *              0x01              | INTR_ENABLE
3917:bma2x2.c      ****  *
3918:bma2x2.c      ****  *
3919:bma2x2.c      ****  *	@return results of bus communication function
3920:bma2x2.c      ****  *	@retval 0 -> Success
3921:bma2x2.c      ****  *	@retval -1 -> Error
3922:bma2x2.c      ****  *
3923:bma2x2.c      ****  *
3924:bma2x2.c      ****  */
3925:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_new_data(u8 channel_u8,
3926:bma2x2.c      **** u8 *intr_newdata_u8)
3927:bma2x2.c      **** {
 9682              		.loc 1 3927 0
 9683              		.cfi_startproc
 9684              		@ args = 0, pretend = 0, frame = 16
 9685              		@ frame_needed = 1, uses_anonymous_args = 0
 9686 0000 B0B5     		push	{r4, r5, r7, lr}
 9687              		.cfi_def_cfa_offset 16
 9688              		.cfi_offset 4, -16
 9689              		.cfi_offset 5, -12
 9690              		.cfi_offset 7, -8
 9691              		.cfi_offset 14, -4
 9692 0002 84B0     		sub	sp, sp, #16
 9693              		.cfi_def_cfa_offset 32
 9694 0004 00AF     		add	r7, sp, #0
 9695              		.cfi_def_cfa_register 7
 9696 0006 0200     		movs	r2, r0
 9697 0008 3960     		str	r1, [r7]
 9698 000a FB1D     		adds	r3, r7, #7
 9699 000c 1A70     		strb	r2, [r3]
3928:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 9700              		.loc 1 3928 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 243


 9701 000e 0E23     		movs	r3, #14
 9702 0010 FB18     		adds	r3, r7, r3
 9703 0012 0022     		movs	r2, #0
 9704 0014 1A70     		strb	r2, [r3]
3929:bma2x2.c      **** 		/*  Variable used to return value of
3930:bma2x2.c      **** 	communication routine*/
3931:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 9705              		.loc 1 3931 0
 9706 0016 0F23     		movs	r3, #15
 9707 0018 FB18     		adds	r3, r7, r3
 9708 001a FF22     		movs	r2, #255
 9709 001c 1A70     		strb	r2, [r3]
3932:bma2x2.c      **** 
3933:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 9710              		.loc 1 3933 0
 9711 001e 254B     		ldr	r3, .L580
 9712 0020 1B68     		ldr	r3, [r3]
 9713 0022 002B     		cmp	r3, #0
 9714 0024 02D1     		bne	.L572
3934:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
3935:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 9715              		.loc 1 3935 0
 9716 0026 7F23     		movs	r3, #127
 9717 0028 5B42     		rsbs	r3, r3, #0
 9718 002a 3EE0     		b	.L578
 9719              	.L572:
3936:bma2x2.c      **** 		} else {
3937:bma2x2.c      **** 		switch (channel_u8) {
 9720              		.loc 1 3937 0
 9721 002c FB1D     		adds	r3, r7, #7
 9722 002e 1B78     		ldrb	r3, [r3]
 9723 0030 002B     		cmp	r3, #0
 9724 0032 02D0     		beq	.L575
 9725 0034 012B     		cmp	r3, #1
 9726 0036 18D0     		beq	.L576
 9727 0038 2EE0     		b	.L579
 9728              	.L575:
3938:bma2x2.c      **** 		/* Read the data interrupt*/
3939:bma2x2.c      **** 		case BMA2x2_INTR1_NEWDATA:
3940:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 9729              		.loc 1 3940 0
 9730 003a 1E4B     		ldr	r3, .L580
 9731 003c 1B68     		ldr	r3, [r3]
 9732 003e DD68     		ldr	r5, [r3, #12]
 9733 0040 1C4B     		ldr	r3, .L580
 9734 0042 1B68     		ldr	r3, [r3]
 9735 0044 1879     		ldrb	r0, [r3, #4]
 9736 0046 0F23     		movs	r3, #15
 9737 0048 FC18     		adds	r4, r7, r3
 9738 004a 0E23     		movs	r3, #14
 9739 004c FA18     		adds	r2, r7, r3
 9740 004e 0123     		movs	r3, #1
 9741 0050 1A21     		movs	r1, #26
 9742 0052 A847     		blx	r5
 9743 0054 0300     		movs	r3, r0
 9744 0056 2370     		strb	r3, [r4]
3941:bma2x2.c      **** 			(p_bma2x2->dev_addr,
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 244


3942:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_NEWDATA_REG,
3943:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3944:bma2x2.c      **** 			*intr_newdata_u8 = BMA2x2_GET_BITSLICE
 9745              		.loc 1 3944 0
 9746 0058 0E23     		movs	r3, #14
 9747 005a FB18     		adds	r3, r7, r3
 9748 005c 1B78     		ldrb	r3, [r3]
 9749 005e 0122     		movs	r2, #1
 9750 0060 1340     		ands	r3, r2
 9751 0062 DAB2     		uxtb	r2, r3
 9752 0064 3B68     		ldr	r3, [r7]
 9753 0066 1A70     		strb	r2, [r3]
3945:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_INTR1_PAD_NEWDATA);
3946:bma2x2.c      **** 		break;
 9754              		.loc 1 3946 0
 9755 0068 1BE0     		b	.L577
 9756              	.L576:
3947:bma2x2.c      **** 		case BMA2x2_INTR2_NEWDATA:
3948:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 9757              		.loc 1 3948 0
 9758 006a 124B     		ldr	r3, .L580
 9759 006c 1B68     		ldr	r3, [r3]
 9760 006e DD68     		ldr	r5, [r3, #12]
 9761 0070 104B     		ldr	r3, .L580
 9762 0072 1B68     		ldr	r3, [r3]
 9763 0074 1879     		ldrb	r0, [r3, #4]
 9764 0076 0F23     		movs	r3, #15
 9765 0078 FC18     		adds	r4, r7, r3
 9766 007a 0E23     		movs	r3, #14
 9767 007c FA18     		adds	r2, r7, r3
 9768 007e 0123     		movs	r3, #1
 9769 0080 1A21     		movs	r1, #26
 9770 0082 A847     		blx	r5
 9771 0084 0300     		movs	r3, r0
 9772 0086 2370     		strb	r3, [r4]
3949:bma2x2.c      **** 			(p_bma2x2->dev_addr,
3950:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_NEWDATA_REG,
3951:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
3952:bma2x2.c      **** 			*intr_newdata_u8 = BMA2x2_GET_BITSLICE
 9773              		.loc 1 3952 0
 9774 0088 0E23     		movs	r3, #14
 9775 008a FB18     		adds	r3, r7, r3
 9776 008c 1B78     		ldrb	r3, [r3]
 9777 008e DB09     		lsrs	r3, r3, #7
 9778 0090 DAB2     		uxtb	r2, r3
 9779 0092 3B68     		ldr	r3, [r7]
 9780 0094 1A70     		strb	r2, [r3]
3953:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_INTR2_PAD_NEWDATA);
3954:bma2x2.c      **** 		break;
 9781              		.loc 1 3954 0
 9782 0096 04E0     		b	.L577
 9783              	.L579:
3955:bma2x2.c      **** 		default:
3956:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 9784              		.loc 1 3956 0
 9785 0098 0F23     		movs	r3, #15
 9786 009a FB18     		adds	r3, r7, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 245


 9787 009c FE22     		movs	r2, #254
 9788 009e 1A70     		strb	r2, [r3]
3957:bma2x2.c      **** 		break;
 9789              		.loc 1 3957 0
 9790 00a0 C046     		nop
 9791              	.L577:
3958:bma2x2.c      **** 		}
3959:bma2x2.c      **** 	}
3960:bma2x2.c      **** 	return com_rslt;
 9792              		.loc 1 3960 0
 9793 00a2 0F23     		movs	r3, #15
 9794 00a4 FB18     		adds	r3, r7, r3
 9795 00a6 1B78     		ldrb	r3, [r3]
 9796 00a8 5BB2     		sxtb	r3, r3
 9797              	.L578:
3961:bma2x2.c      **** }
 9798              		.loc 1 3961 0 discriminator 1
 9799 00aa 1800     		movs	r0, r3
 9800 00ac BD46     		mov	sp, r7
 9801 00ae 04B0     		add	sp, sp, #16
 9802              		@ sp needed
 9803 00b0 B0BD     		pop	{r4, r5, r7, pc}
 9804              	.L581:
 9805 00b2 C046     		.align	2
 9806              	.L580:
 9807 00b4 00000000 		.word	p_bma2x2
 9808              		.cfi_endproc
 9809              	.LFE59:
 9810              		.size	bma2x2_get_new_data, .-bma2x2_get_new_data
 9811              		.section	.text.bma2x2_set_new_data,"ax",%progbits
 9812              		.align	2
 9813              		.global	bma2x2_set_new_data
 9814              		.code	16
 9815              		.thumb_func
 9816              		.type	bma2x2_set_new_data, %function
 9817              	bma2x2_set_new_data:
 9818              	.LFB60:
3962:bma2x2.c      **** /*!
3963:bma2x2.c      ****  * @brief This API is used to set
3964:bma2x2.c      ****  * the interrupt status of new data in the register 0x19
3965:bma2x2.c      ****  * @note INTR1_data -> register 0x19 bit 0
3966:bma2x2.c      ****  * @note INTR2_data -> register 0x19 bit 7
3967:bma2x2.c      ****  *
3968:bma2x2.c      ****  *
3969:bma2x2.c      ****  *
3970:bma2x2.c      ****  *  @param channel_u8: The value of new data interrupt select
3971:bma2x2.c      ****  *        channel_u8     |   result
3972:bma2x2.c      ****  *       ----------------- | ------------------
3973:bma2x2.c      ****  *              0          | BMA2x2_ACCEL_INTR1_NEWDATA
3974:bma2x2.c      ****  *              1          | BMA2x2_ACCEL_INTR2_NEWDATA
3975:bma2x2.c      ****  *
3976:bma2x2.c      ****  *	@param intr_newdata_u8: The new data interrupt enable value
3977:bma2x2.c      ****  *       intr_newdata_u8          |    result
3978:bma2x2.c      ****  *       ------------------------ | ------------------
3979:bma2x2.c      ****  *              0x00              | INTR_DISABLE
3980:bma2x2.c      ****  *              0x01              | INTR_ENABLE
3981:bma2x2.c      ****  *
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 246


3982:bma2x2.c      ****  *
3983:bma2x2.c      ****  *	@return results of bus communication function
3984:bma2x2.c      ****  *	@retval 0 -> Success
3985:bma2x2.c      ****  *	@retval -1 -> Error
3986:bma2x2.c      ****  *
3987:bma2x2.c      ****  *
3988:bma2x2.c      ****  */
3989:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_new_data(u8 channel_u8,
3990:bma2x2.c      **** u8 intr_newdata_u8)
3991:bma2x2.c      **** {
 9819              		.loc 1 3991 0
 9820              		.cfi_startproc
 9821              		@ args = 0, pretend = 0, frame = 16
 9822              		@ frame_needed = 1, uses_anonymous_args = 0
 9823 0000 B0B5     		push	{r4, r5, r7, lr}
 9824              		.cfi_def_cfa_offset 16
 9825              		.cfi_offset 4, -16
 9826              		.cfi_offset 5, -12
 9827              		.cfi_offset 7, -8
 9828              		.cfi_offset 14, -4
 9829 0002 84B0     		sub	sp, sp, #16
 9830              		.cfi_def_cfa_offset 32
 9831 0004 00AF     		add	r7, sp, #0
 9832              		.cfi_def_cfa_register 7
 9833 0006 0200     		movs	r2, r0
 9834 0008 FB1D     		adds	r3, r7, #7
 9835 000a 1A70     		strb	r2, [r3]
 9836 000c BB1D     		adds	r3, r7, #6
 9837 000e 0A1C     		adds	r2, r1, #0
 9838 0010 1A70     		strb	r2, [r3]
3992:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 9839              		.loc 1 3992 0
 9840 0012 0E23     		movs	r3, #14
 9841 0014 FB18     		adds	r3, r7, r3
 9842 0016 0022     		movs	r2, #0
 9843 0018 1A70     		strb	r2, [r3]
3993:bma2x2.c      **** 	/*  Variable used to return value of
3994:bma2x2.c      **** 	communication routine*/
3995:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 9844              		.loc 1 3995 0
 9845 001a 0F23     		movs	r3, #15
 9846 001c FB18     		adds	r3, r7, r3
 9847 001e FF22     		movs	r2, #255
 9848 0020 1A70     		strb	r2, [r3]
3996:bma2x2.c      **** 
3997:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 9849              		.loc 1 3997 0
 9850 0022 404B     		ldr	r3, .L591
 9851 0024 1B68     		ldr	r3, [r3]
 9852 0026 002B     		cmp	r3, #0
 9853 0028 02D1     		bne	.L583
3998:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
3999:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 9854              		.loc 1 3999 0
 9855 002a 7F23     		movs	r3, #127
 9856 002c 5B42     		rsbs	r3, r3, #0
 9857 002e 75E0     		b	.L589
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 247


 9858              	.L583:
4000:bma2x2.c      **** 		} else {
4001:bma2x2.c      **** 		switch (channel_u8) {
 9859              		.loc 1 4001 0
 9860 0030 FB1D     		adds	r3, r7, #7
 9861 0032 1B78     		ldrb	r3, [r3]
 9862 0034 002B     		cmp	r3, #0
 9863 0036 02D0     		beq	.L586
 9864 0038 012B     		cmp	r3, #1
 9865 003a 34D0     		beq	.L587
 9866 003c 65E0     		b	.L590
 9867              	.L586:
4002:bma2x2.c      **** 		/* write the new data interrupt */
4003:bma2x2.c      **** 		case BMA2x2_INTR1_NEWDATA:
4004:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 9868              		.loc 1 4004 0
 9869 003e 394B     		ldr	r3, .L591
 9870 0040 1B68     		ldr	r3, [r3]
 9871 0042 DD68     		ldr	r5, [r3, #12]
 9872 0044 374B     		ldr	r3, .L591
 9873 0046 1B68     		ldr	r3, [r3]
 9874 0048 1879     		ldrb	r0, [r3, #4]
 9875 004a 0F23     		movs	r3, #15
 9876 004c FC18     		adds	r4, r7, r3
 9877 004e 0E23     		movs	r3, #14
 9878 0050 FA18     		adds	r2, r7, r3
 9879 0052 0123     		movs	r3, #1
 9880 0054 1A21     		movs	r1, #26
 9881 0056 A847     		blx	r5
 9882 0058 0300     		movs	r3, r0
 9883 005a 2370     		strb	r3, [r4]
4005:bma2x2.c      **** 			(p_bma2x2->dev_addr,
4006:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_NEWDATA_REG,
4007:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4008:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 9884              		.loc 1 4008 0
 9885 005c 0E23     		movs	r3, #14
 9886 005e FB18     		adds	r3, r7, r3
 9887 0060 1B78     		ldrb	r3, [r3]
 9888 0062 5BB2     		sxtb	r3, r3
 9889 0064 0122     		movs	r2, #1
 9890 0066 9343     		bics	r3, r2
 9891 0068 5AB2     		sxtb	r2, r3
 9892 006a BB1D     		adds	r3, r7, #6
 9893 006c 1B78     		ldrb	r3, [r3]
 9894 006e 5BB2     		sxtb	r3, r3
 9895 0070 0121     		movs	r1, #1
 9896 0072 0B40     		ands	r3, r1
 9897 0074 5BB2     		sxtb	r3, r3
 9898 0076 1343     		orrs	r3, r2
 9899 0078 5BB2     		sxtb	r3, r3
 9900 007a DAB2     		uxtb	r2, r3
 9901 007c 0E23     		movs	r3, #14
 9902 007e FB18     		adds	r3, r7, r3
 9903 0080 1A70     		strb	r2, [r3]
4009:bma2x2.c      **** 			(data_u8,
4010:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_NEWDATA, intr_newdata_u8);
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 248


4011:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 9904              		.loc 1 4011 0
 9905 0082 0E23     		movs	r3, #14
 9906 0084 FB18     		adds	r3, r7, r3
 9907 0086 0122     		movs	r2, #1
 9908 0088 1900     		movs	r1, r3
 9909 008a 1A20     		movs	r0, #26
 9910 008c FFF7FEFF 		bl	bma2x2_write_reg
 9911 0090 0300     		movs	r3, r0
 9912 0092 DAB2     		uxtb	r2, r3
 9913 0094 0F23     		movs	r3, #15
 9914 0096 FB18     		adds	r3, r7, r3
 9915 0098 1B78     		ldrb	r3, [r3]
 9916 009a D318     		adds	r3, r2, r3
 9917 009c DAB2     		uxtb	r2, r3
 9918 009e 0F23     		movs	r3, #15
 9919 00a0 FB18     		adds	r3, r7, r3
 9920 00a2 1A70     		strb	r2, [r3]
4012:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_NEWDATA_REG,
4013:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4014:bma2x2.c      **** 		break;
 9921              		.loc 1 4014 0
 9922 00a4 36E0     		b	.L588
 9923              	.L587:
4015:bma2x2.c      **** 		case BMA2x2_INTR2_NEWDATA:
4016:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 9924              		.loc 1 4016 0
 9925 00a6 1F4B     		ldr	r3, .L591
 9926 00a8 1B68     		ldr	r3, [r3]
 9927 00aa DD68     		ldr	r5, [r3, #12]
 9928 00ac 1D4B     		ldr	r3, .L591
 9929 00ae 1B68     		ldr	r3, [r3]
 9930 00b0 1879     		ldrb	r0, [r3, #4]
 9931 00b2 0F23     		movs	r3, #15
 9932 00b4 FC18     		adds	r4, r7, r3
 9933 00b6 0E23     		movs	r3, #14
 9934 00b8 FA18     		adds	r2, r7, r3
 9935 00ba 0123     		movs	r3, #1
 9936 00bc 1A21     		movs	r1, #26
 9937 00be A847     		blx	r5
 9938 00c0 0300     		movs	r3, r0
 9939 00c2 2370     		strb	r3, [r4]
4017:bma2x2.c      **** 			(p_bma2x2->dev_addr,
4018:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_NEWDATA_REG,
4019:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4020:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 9940              		.loc 1 4020 0
 9941 00c4 0E23     		movs	r3, #14
 9942 00c6 FB18     		adds	r3, r7, r3
 9943 00c8 1B78     		ldrb	r3, [r3]
 9944 00ca 5BB2     		sxtb	r3, r3
 9945 00cc 7F22     		movs	r2, #127
 9946 00ce 1340     		ands	r3, r2
 9947 00d0 5AB2     		sxtb	r2, r3
 9948 00d2 BB1D     		adds	r3, r7, #6
 9949 00d4 1B78     		ldrb	r3, [r3]
 9950 00d6 DB01     		lsls	r3, r3, #7
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 249


 9951 00d8 5BB2     		sxtb	r3, r3
 9952 00da 1343     		orrs	r3, r2
 9953 00dc 5BB2     		sxtb	r3, r3
 9954 00de DAB2     		uxtb	r2, r3
 9955 00e0 0E23     		movs	r3, #14
 9956 00e2 FB18     		adds	r3, r7, r3
 9957 00e4 1A70     		strb	r2, [r3]
4021:bma2x2.c      **** 			(data_u8,
4022:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_NEWDATA, intr_newdata_u8);
4023:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 9958              		.loc 1 4023 0
 9959 00e6 0E23     		movs	r3, #14
 9960 00e8 FB18     		adds	r3, r7, r3
 9961 00ea 0122     		movs	r2, #1
 9962 00ec 1900     		movs	r1, r3
 9963 00ee 1A20     		movs	r0, #26
 9964 00f0 FFF7FEFF 		bl	bma2x2_write_reg
 9965 00f4 0300     		movs	r3, r0
 9966 00f6 DAB2     		uxtb	r2, r3
 9967 00f8 0F23     		movs	r3, #15
 9968 00fa FB18     		adds	r3, r7, r3
 9969 00fc 1B78     		ldrb	r3, [r3]
 9970 00fe D318     		adds	r3, r2, r3
 9971 0100 DAB2     		uxtb	r2, r3
 9972 0102 0F23     		movs	r3, #15
 9973 0104 FB18     		adds	r3, r7, r3
 9974 0106 1A70     		strb	r2, [r3]
4024:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_NEWDATA_REG,
4025:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4026:bma2x2.c      **** 		break;
 9975              		.loc 1 4026 0
 9976 0108 04E0     		b	.L588
 9977              	.L590:
4027:bma2x2.c      **** 		default:
4028:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 9978              		.loc 1 4028 0
 9979 010a 0F23     		movs	r3, #15
 9980 010c FB18     		adds	r3, r7, r3
 9981 010e FE22     		movs	r2, #254
 9982 0110 1A70     		strb	r2, [r3]
4029:bma2x2.c      **** 		break;
 9983              		.loc 1 4029 0
 9984 0112 C046     		nop
 9985              	.L588:
4030:bma2x2.c      **** 		}
4031:bma2x2.c      **** 	}
4032:bma2x2.c      **** 	return com_rslt;
 9986              		.loc 1 4032 0
 9987 0114 0F23     		movs	r3, #15
 9988 0116 FB18     		adds	r3, r7, r3
 9989 0118 1B78     		ldrb	r3, [r3]
 9990 011a 5BB2     		sxtb	r3, r3
 9991              	.L589:
4033:bma2x2.c      **** }
 9992              		.loc 1 4033 0 discriminator 1
 9993 011c 1800     		movs	r0, r3
 9994 011e BD46     		mov	sp, r7
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 250


 9995 0120 04B0     		add	sp, sp, #16
 9996              		@ sp needed
 9997 0122 B0BD     		pop	{r4, r5, r7, pc}
 9998              	.L592:
 9999              		.align	2
 10000              	.L591:
 10001 0124 00000000 		.word	p_bma2x2
 10002              		.cfi_endproc
 10003              	.LFE60:
 10004              		.size	bma2x2_set_new_data, .-bma2x2_set_new_data
 10005              		.section	.text.bma2x2_get_intr1_fifo_wm,"ax",%progbits
 10006              		.align	2
 10007              		.global	bma2x2_get_intr1_fifo_wm
 10008              		.code	16
 10009              		.thumb_func
 10010              		.type	bma2x2_get_intr1_fifo_wm, %function
 10011              	bma2x2_get_intr1_fifo_wm:
 10012              	.LFB61:
4034:bma2x2.c      **** /*!
4035:bma2x2.c      ****  * @brief This API is used to get the fifo watermark interrupt1 data
4036:bma2x2.c      ****  * in the register 0x1A bit 1
4037:bma2x2.c      ****  *
4038:bma2x2.c      ****  *  @param  intr1_fifo_wm_u8 : The value of interrupt1 FIFO watermark enable
4039:bma2x2.c      ****  *       intr1_fifo_wm_u8       |    result
4040:bma2x2.c      ****  *       ------------------------ | ------------------
4041:bma2x2.c      ****  *              0x00              | INTR_DISABLE
4042:bma2x2.c      ****  *              0x01              | INTR_ENABLE
4043:bma2x2.c      ****  *
4044:bma2x2.c      ****  *
4045:bma2x2.c      ****  *
4046:bma2x2.c      ****  *	@return results of bus communication function
4047:bma2x2.c      ****  *	@retval 0 -> Success
4048:bma2x2.c      ****  *	@retval -1 -> Error
4049:bma2x2.c      ****  *
4050:bma2x2.c      ****  *
4051:bma2x2.c      **** */
4052:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_intr1_fifo_wm(u8 *intr1_fifo_wm_u8)
4053:bma2x2.c      **** {
 10013              		.loc 1 4053 0
 10014              		.cfi_startproc
 10015              		@ args = 0, pretend = 0, frame = 16
 10016              		@ frame_needed = 1, uses_anonymous_args = 0
 10017 0000 B0B5     		push	{r4, r5, r7, lr}
 10018              		.cfi_def_cfa_offset 16
 10019              		.cfi_offset 4, -16
 10020              		.cfi_offset 5, -12
 10021              		.cfi_offset 7, -8
 10022              		.cfi_offset 14, -4
 10023 0002 84B0     		sub	sp, sp, #16
 10024              		.cfi_def_cfa_offset 32
 10025 0004 00AF     		add	r7, sp, #0
 10026              		.cfi_def_cfa_register 7
 10027 0006 7860     		str	r0, [r7, #4]
4054:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 10028              		.loc 1 4054 0
 10029 0008 0E23     		movs	r3, #14
 10030 000a FB18     		adds	r3, r7, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 251


 10031 000c 0022     		movs	r2, #0
 10032 000e 1A70     		strb	r2, [r3]
4055:bma2x2.c      **** 		/*  Variable used to return value of
4056:bma2x2.c      **** 	communication routine*/
4057:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 10033              		.loc 1 4057 0
 10034 0010 0F23     		movs	r3, #15
 10035 0012 FB18     		adds	r3, r7, r3
 10036 0014 FF22     		movs	r2, #255
 10037 0016 1A70     		strb	r2, [r3]
4058:bma2x2.c      **** 
4059:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 10038              		.loc 1 4059 0
 10039 0018 134B     		ldr	r3, .L597
 10040 001a 1B68     		ldr	r3, [r3]
 10041 001c 002B     		cmp	r3, #0
 10042 001e 02D1     		bne	.L594
4060:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
4061:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 10043              		.loc 1 4061 0
 10044 0020 7F23     		movs	r3, #127
 10045 0022 5B42     		rsbs	r3, r3, #0
 10046 0024 1CE0     		b	.L596
 10047              	.L594:
4062:bma2x2.c      **** 		} else {
4063:bma2x2.c      **** 			/* read the fifo watermark interrupt */
4064:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 10048              		.loc 1 4064 0
 10049 0026 104B     		ldr	r3, .L597
 10050 0028 1B68     		ldr	r3, [r3]
 10051 002a DD68     		ldr	r5, [r3, #12]
 10052 002c 0E4B     		ldr	r3, .L597
 10053 002e 1B68     		ldr	r3, [r3]
 10054 0030 1879     		ldrb	r0, [r3, #4]
 10055 0032 0F23     		movs	r3, #15
 10056 0034 FC18     		adds	r4, r7, r3
 10057 0036 0E23     		movs	r3, #14
 10058 0038 FA18     		adds	r2, r7, r3
 10059 003a 0123     		movs	r3, #1
 10060 003c 1A21     		movs	r1, #26
 10061 003e A847     		blx	r5
 10062 0040 0300     		movs	r3, r0
 10063 0042 2370     		strb	r3, [r4]
4065:bma2x2.c      **** 			(p_bma2x2->dev_addr,
4066:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_FIFO_WM_REG,
4067:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4068:bma2x2.c      **** 			*intr1_fifo_wm_u8 = BMA2x2_GET_BITSLICE
 10064              		.loc 1 4068 0
 10065 0044 0E23     		movs	r3, #14
 10066 0046 FB18     		adds	r3, r7, r3
 10067 0048 1B78     		ldrb	r3, [r3]
 10068 004a 5B10     		asrs	r3, r3, #1
 10069 004c DBB2     		uxtb	r3, r3
 10070 004e 0122     		movs	r2, #1
 10071 0050 1340     		ands	r3, r2
 10072 0052 DAB2     		uxtb	r2, r3
 10073 0054 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 252


 10074 0056 1A70     		strb	r2, [r3]
4069:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_INTR1_PAD_FIFO_WM);
4070:bma2x2.c      **** 		}
4071:bma2x2.c      **** 	return com_rslt;
 10075              		.loc 1 4071 0
 10076 0058 0F23     		movs	r3, #15
 10077 005a FB18     		adds	r3, r7, r3
 10078 005c 1B78     		ldrb	r3, [r3]
 10079 005e 5BB2     		sxtb	r3, r3
 10080              	.L596:
4072:bma2x2.c      **** }
 10081              		.loc 1 4072 0 discriminator 1
 10082 0060 1800     		movs	r0, r3
 10083 0062 BD46     		mov	sp, r7
 10084 0064 04B0     		add	sp, sp, #16
 10085              		@ sp needed
 10086 0066 B0BD     		pop	{r4, r5, r7, pc}
 10087              	.L598:
 10088              		.align	2
 10089              	.L597:
 10090 0068 00000000 		.word	p_bma2x2
 10091              		.cfi_endproc
 10092              	.LFE61:
 10093              		.size	bma2x2_get_intr1_fifo_wm, .-bma2x2_get_intr1_fifo_wm
 10094              		.section	.text.bma2x2_set_intr1_fifo_wm,"ax",%progbits
 10095              		.align	2
 10096              		.global	bma2x2_set_intr1_fifo_wm
 10097              		.code	16
 10098              		.thumb_func
 10099              		.type	bma2x2_set_intr1_fifo_wm, %function
 10100              	bma2x2_set_intr1_fifo_wm:
 10101              	.LFB62:
4073:bma2x2.c      **** /*!
4074:bma2x2.c      ****  * @brief This API is used to set the fifo watermark interrupt1 data
4075:bma2x2.c      ****  * in the register 0x1A bit 1
4076:bma2x2.c      ****  *
4077:bma2x2.c      ****  *  @param  intr1_fifo_wm_u8 : The value of interrupt1 FIFO watermark enable
4078:bma2x2.c      ****  *       intr1_fifo_wm_u8       |    result
4079:bma2x2.c      ****  *       ------------------------ | ------------------
4080:bma2x2.c      ****  *              0x00              | INTR_DISABLE
4081:bma2x2.c      ****  *              0x01              | INTR_ENABLE
4082:bma2x2.c      ****  *
4083:bma2x2.c      ****  *
4084:bma2x2.c      ****  *
4085:bma2x2.c      ****  *	@return results of bus communication function
4086:bma2x2.c      ****  *	@retval 0 -> Success
4087:bma2x2.c      ****  *	@retval -1 -> Error
4088:bma2x2.c      ****  *
4089:bma2x2.c      ****  *
4090:bma2x2.c      **** */
4091:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_intr1_fifo_wm(u8 intr1_fifo_wm_u8)
4092:bma2x2.c      **** {
 10102              		.loc 1 4092 0
 10103              		.cfi_startproc
 10104              		@ args = 0, pretend = 0, frame = 16
 10105              		@ frame_needed = 1, uses_anonymous_args = 0
 10106 0000 B0B5     		push	{r4, r5, r7, lr}
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 253


 10107              		.cfi_def_cfa_offset 16
 10108              		.cfi_offset 4, -16
 10109              		.cfi_offset 5, -12
 10110              		.cfi_offset 7, -8
 10111              		.cfi_offset 14, -4
 10112 0002 84B0     		sub	sp, sp, #16
 10113              		.cfi_def_cfa_offset 32
 10114 0004 00AF     		add	r7, sp, #0
 10115              		.cfi_def_cfa_register 7
 10116 0006 0200     		movs	r2, r0
 10117 0008 FB1D     		adds	r3, r7, #7
 10118 000a 1A70     		strb	r2, [r3]
4093:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 10119              		.loc 1 4093 0
 10120 000c 0E23     		movs	r3, #14
 10121 000e FB18     		adds	r3, r7, r3
 10122 0010 0022     		movs	r2, #0
 10123 0012 1A70     		strb	r2, [r3]
4094:bma2x2.c      **** 	/*  Variable used to return value of
4095:bma2x2.c      **** 	communication routine*/
4096:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 10124              		.loc 1 4096 0
 10125 0014 0F23     		movs	r3, #15
 10126 0016 FB18     		adds	r3, r7, r3
 10127 0018 FF22     		movs	r2, #255
 10128 001a 1A70     		strb	r2, [r3]
4097:bma2x2.c      **** 
4098:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 10129              		.loc 1 4098 0
 10130 001c 254B     		ldr	r3, .L605
 10131 001e 1B68     		ldr	r3, [r3]
 10132 0020 002B     		cmp	r3, #0
 10133 0022 02D1     		bne	.L600
4099:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
4100:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 10134              		.loc 1 4100 0
 10135 0024 7F23     		movs	r3, #127
 10136 0026 5B42     		rsbs	r3, r3, #0
 10137 0028 40E0     		b	.L604
 10138              	.L600:
4101:bma2x2.c      **** 		} else {
4102:bma2x2.c      **** 		if (intr1_fifo_wm_u8 <
 10139              		.loc 1 4102 0
 10140 002a FB1D     		adds	r3, r7, #7
 10141 002c 1B78     		ldrb	r3, [r3]
 10142 002e 012B     		cmp	r3, #1
 10143 0030 34D8     		bhi	.L602
4103:bma2x2.c      **** 		BMA2x2_FIFO_MODE_STATUS_RANGE) {
4104:bma2x2.c      **** 			/* write the fifo watermark interrupt */
4105:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 10144              		.loc 1 4105 0
 10145 0032 204B     		ldr	r3, .L605
 10146 0034 1B68     		ldr	r3, [r3]
 10147 0036 DD68     		ldr	r5, [r3, #12]
 10148 0038 1E4B     		ldr	r3, .L605
 10149 003a 1B68     		ldr	r3, [r3]
 10150 003c 1879     		ldrb	r0, [r3, #4]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 254


 10151 003e 0F23     		movs	r3, #15
 10152 0040 FC18     		adds	r4, r7, r3
 10153 0042 0E23     		movs	r3, #14
 10154 0044 FA18     		adds	r2, r7, r3
 10155 0046 0123     		movs	r3, #1
 10156 0048 1A21     		movs	r1, #26
 10157 004a A847     		blx	r5
 10158 004c 0300     		movs	r3, r0
 10159 004e 2370     		strb	r3, [r4]
4106:bma2x2.c      **** 			(p_bma2x2->dev_addr,
4107:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_FIFO_WM_REG,
4108:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4109:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 10160              		.loc 1 4109 0
 10161 0050 0E23     		movs	r3, #14
 10162 0052 FB18     		adds	r3, r7, r3
 10163 0054 1B78     		ldrb	r3, [r3]
 10164 0056 5BB2     		sxtb	r3, r3
 10165 0058 0222     		movs	r2, #2
 10166 005a 9343     		bics	r3, r2
 10167 005c 5AB2     		sxtb	r2, r3
 10168 005e FB1D     		adds	r3, r7, #7
 10169 0060 1B78     		ldrb	r3, [r3]
 10170 0062 5B00     		lsls	r3, r3, #1
 10171 0064 5BB2     		sxtb	r3, r3
 10172 0066 0221     		movs	r1, #2
 10173 0068 0B40     		ands	r3, r1
 10174 006a 5BB2     		sxtb	r3, r3
 10175 006c 1343     		orrs	r3, r2
 10176 006e 5BB2     		sxtb	r3, r3
 10177 0070 DAB2     		uxtb	r2, r3
 10178 0072 0E23     		movs	r3, #14
 10179 0074 FB18     		adds	r3, r7, r3
 10180 0076 1A70     		strb	r2, [r3]
4110:bma2x2.c      **** 			(data_u8,
4111:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_FIFO_WM, intr1_fifo_wm_u8);
4112:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 10181              		.loc 1 4112 0
 10182 0078 0E23     		movs	r3, #14
 10183 007a FB18     		adds	r3, r7, r3
 10184 007c 0122     		movs	r2, #1
 10185 007e 1900     		movs	r1, r3
 10186 0080 1A20     		movs	r0, #26
 10187 0082 FFF7FEFF 		bl	bma2x2_write_reg
 10188 0086 0300     		movs	r3, r0
 10189 0088 DAB2     		uxtb	r2, r3
 10190 008a 0F23     		movs	r3, #15
 10191 008c FB18     		adds	r3, r7, r3
 10192 008e 1B78     		ldrb	r3, [r3]
 10193 0090 D318     		adds	r3, r2, r3
 10194 0092 DAB2     		uxtb	r2, r3
 10195 0094 0F23     		movs	r3, #15
 10196 0096 FB18     		adds	r3, r7, r3
 10197 0098 1A70     		strb	r2, [r3]
 10198 009a 03E0     		b	.L603
 10199              	.L602:
4113:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_FIFO_WM_REG,
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 255


4114:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4115:bma2x2.c      **** 		} else {
4116:bma2x2.c      **** 		com_rslt = E_OUT_OF_RANGE;
 10200              		.loc 1 4116 0
 10201 009c 0F23     		movs	r3, #15
 10202 009e FB18     		adds	r3, r7, r3
 10203 00a0 FE22     		movs	r2, #254
 10204 00a2 1A70     		strb	r2, [r3]
 10205              	.L603:
4117:bma2x2.c      **** 		}
4118:bma2x2.c      **** 	}
4119:bma2x2.c      **** 	return com_rslt;
 10206              		.loc 1 4119 0
 10207 00a4 0F23     		movs	r3, #15
 10208 00a6 FB18     		adds	r3, r7, r3
 10209 00a8 1B78     		ldrb	r3, [r3]
 10210 00aa 5BB2     		sxtb	r3, r3
 10211              	.L604:
4120:bma2x2.c      **** }
 10212              		.loc 1 4120 0 discriminator 1
 10213 00ac 1800     		movs	r0, r3
 10214 00ae BD46     		mov	sp, r7
 10215 00b0 04B0     		add	sp, sp, #16
 10216              		@ sp needed
 10217 00b2 B0BD     		pop	{r4, r5, r7, pc}
 10218              	.L606:
 10219              		.align	2
 10220              	.L605:
 10221 00b4 00000000 		.word	p_bma2x2
 10222              		.cfi_endproc
 10223              	.LFE62:
 10224              		.size	bma2x2_set_intr1_fifo_wm, .-bma2x2_set_intr1_fifo_wm
 10225              		.section	.text.bma2x2_get_intr2_fifo_wm,"ax",%progbits
 10226              		.align	2
 10227              		.global	bma2x2_get_intr2_fifo_wm
 10228              		.code	16
 10229              		.thumb_func
 10230              		.type	bma2x2_get_intr2_fifo_wm, %function
 10231              	bma2x2_get_intr2_fifo_wm:
 10232              	.LFB63:
4121:bma2x2.c      **** /*!
4122:bma2x2.c      ****  * @brief This API is used to get the fifo watermark interrupt2 data
4123:bma2x2.c      ****  * in the register 0x1A bit 6
4124:bma2x2.c      ****  *
4125:bma2x2.c      ****  *  @param  intr2_fifo_wm_u8 : The value of interrupt1 FIFO watermark enable
4126:bma2x2.c      ****  *       intr2_fifo_wm_u8       |    result
4127:bma2x2.c      ****  *       ------------------------ | ------------------
4128:bma2x2.c      ****  *              0x00              | INTR_DISABLE
4129:bma2x2.c      ****  *              0x01              | INTR_ENABLE
4130:bma2x2.c      ****  *
4131:bma2x2.c      ****  *
4132:bma2x2.c      ****  *
4133:bma2x2.c      ****  *	@return results of bus communication function
4134:bma2x2.c      ****  *	@retval 0 -> Success
4135:bma2x2.c      ****  *	@retval -1 -> Error
4136:bma2x2.c      ****  *
4137:bma2x2.c      ****  *
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 256


4138:bma2x2.c      ****  */
4139:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_intr2_fifo_wm(u8 *intr2_fifo_wm_u8)
4140:bma2x2.c      **** {
 10233              		.loc 1 4140 0
 10234              		.cfi_startproc
 10235              		@ args = 0, pretend = 0, frame = 16
 10236              		@ frame_needed = 1, uses_anonymous_args = 0
 10237 0000 B0B5     		push	{r4, r5, r7, lr}
 10238              		.cfi_def_cfa_offset 16
 10239              		.cfi_offset 4, -16
 10240              		.cfi_offset 5, -12
 10241              		.cfi_offset 7, -8
 10242              		.cfi_offset 14, -4
 10243 0002 84B0     		sub	sp, sp, #16
 10244              		.cfi_def_cfa_offset 32
 10245 0004 00AF     		add	r7, sp, #0
 10246              		.cfi_def_cfa_register 7
 10247 0006 7860     		str	r0, [r7, #4]
4141:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 10248              		.loc 1 4141 0
 10249 0008 0E23     		movs	r3, #14
 10250 000a FB18     		adds	r3, r7, r3
 10251 000c 0022     		movs	r2, #0
 10252 000e 1A70     		strb	r2, [r3]
4142:bma2x2.c      **** 		/*  Variable used to return value of
4143:bma2x2.c      **** 	communication routine*/
4144:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 10253              		.loc 1 4144 0
 10254 0010 0F23     		movs	r3, #15
 10255 0012 FB18     		adds	r3, r7, r3
 10256 0014 FF22     		movs	r2, #255
 10257 0016 1A70     		strb	r2, [r3]
4145:bma2x2.c      **** 
4146:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 10258              		.loc 1 4146 0
 10259 0018 134B     		ldr	r3, .L611
 10260 001a 1B68     		ldr	r3, [r3]
 10261 001c 002B     		cmp	r3, #0
 10262 001e 02D1     		bne	.L608
4147:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
4148:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 10263              		.loc 1 4148 0
 10264 0020 7F23     		movs	r3, #127
 10265 0022 5B42     		rsbs	r3, r3, #0
 10266 0024 1CE0     		b	.L610
 10267              	.L608:
4149:bma2x2.c      **** 		} else {
4150:bma2x2.c      **** 			/* read the fifo watermark interrupt2*/
4151:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 10268              		.loc 1 4151 0
 10269 0026 104B     		ldr	r3, .L611
 10270 0028 1B68     		ldr	r3, [r3]
 10271 002a DD68     		ldr	r5, [r3, #12]
 10272 002c 0E4B     		ldr	r3, .L611
 10273 002e 1B68     		ldr	r3, [r3]
 10274 0030 1879     		ldrb	r0, [r3, #4]
 10275 0032 0F23     		movs	r3, #15
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 257


 10276 0034 FC18     		adds	r4, r7, r3
 10277 0036 0E23     		movs	r3, #14
 10278 0038 FA18     		adds	r2, r7, r3
 10279 003a 0123     		movs	r3, #1
 10280 003c 1A21     		movs	r1, #26
 10281 003e A847     		blx	r5
 10282 0040 0300     		movs	r3, r0
 10283 0042 2370     		strb	r3, [r4]
4152:bma2x2.c      **** 			(p_bma2x2->dev_addr,
4153:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_FIFO_WM_REG,
4154:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4155:bma2x2.c      **** 			*intr2_fifo_wm_u8 = BMA2x2_GET_BITSLICE
 10284              		.loc 1 4155 0
 10285 0044 0E23     		movs	r3, #14
 10286 0046 FB18     		adds	r3, r7, r3
 10287 0048 1B78     		ldrb	r3, [r3]
 10288 004a 9B11     		asrs	r3, r3, #6
 10289 004c DBB2     		uxtb	r3, r3
 10290 004e 0122     		movs	r2, #1
 10291 0050 1340     		ands	r3, r2
 10292 0052 DAB2     		uxtb	r2, r3
 10293 0054 7B68     		ldr	r3, [r7, #4]
 10294 0056 1A70     		strb	r2, [r3]
4156:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_INTR2_PAD_FIFO_WM);
4157:bma2x2.c      **** 		}
4158:bma2x2.c      **** 	return com_rslt;
 10295              		.loc 1 4158 0
 10296 0058 0F23     		movs	r3, #15
 10297 005a FB18     		adds	r3, r7, r3
 10298 005c 1B78     		ldrb	r3, [r3]
 10299 005e 5BB2     		sxtb	r3, r3
 10300              	.L610:
4159:bma2x2.c      **** }
 10301              		.loc 1 4159 0 discriminator 1
 10302 0060 1800     		movs	r0, r3
 10303 0062 BD46     		mov	sp, r7
 10304 0064 04B0     		add	sp, sp, #16
 10305              		@ sp needed
 10306 0066 B0BD     		pop	{r4, r5, r7, pc}
 10307              	.L612:
 10308              		.align	2
 10309              	.L611:
 10310 0068 00000000 		.word	p_bma2x2
 10311              		.cfi_endproc
 10312              	.LFE63:
 10313              		.size	bma2x2_get_intr2_fifo_wm, .-bma2x2_get_intr2_fifo_wm
 10314              		.section	.text.bma2x2_set_intr2_fifo_wm,"ax",%progbits
 10315              		.align	2
 10316              		.global	bma2x2_set_intr2_fifo_wm
 10317              		.code	16
 10318              		.thumb_func
 10319              		.type	bma2x2_set_intr2_fifo_wm, %function
 10320              	bma2x2_set_intr2_fifo_wm:
 10321              	.LFB64:
4160:bma2x2.c      **** /*!
4161:bma2x2.c      ****  * @brief This API is used to set the fifo watermark interrupt2 data
4162:bma2x2.c      ****  * in the register 0x1A bit 6
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 258


4163:bma2x2.c      ****  *
4164:bma2x2.c      ****  *  @param  intr2_fifo_wm_u8 : The value of interrupt1 FIFO watermark enable
4165:bma2x2.c      ****  *       intr2_fifo_wm_u8       |    result
4166:bma2x2.c      ****  *       ------------------------ | ------------------
4167:bma2x2.c      ****  *              0x00              | INTR_DISABLE
4168:bma2x2.c      ****  *              0x01              | INTR_ENABLE
4169:bma2x2.c      ****  *
4170:bma2x2.c      ****  *
4171:bma2x2.c      ****  *
4172:bma2x2.c      ****  *	@return results of bus communication function
4173:bma2x2.c      ****  *	@retval 0 -> Success
4174:bma2x2.c      ****  *	@retval -1 -> Error
4175:bma2x2.c      ****  *
4176:bma2x2.c      ****  *
4177:bma2x2.c      ****  */
4178:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_intr2_fifo_wm(u8 intr2_fifo_wm_u8)
4179:bma2x2.c      **** {
 10322              		.loc 1 4179 0
 10323              		.cfi_startproc
 10324              		@ args = 0, pretend = 0, frame = 16
 10325              		@ frame_needed = 1, uses_anonymous_args = 0
 10326 0000 B0B5     		push	{r4, r5, r7, lr}
 10327              		.cfi_def_cfa_offset 16
 10328              		.cfi_offset 4, -16
 10329              		.cfi_offset 5, -12
 10330              		.cfi_offset 7, -8
 10331              		.cfi_offset 14, -4
 10332 0002 84B0     		sub	sp, sp, #16
 10333              		.cfi_def_cfa_offset 32
 10334 0004 00AF     		add	r7, sp, #0
 10335              		.cfi_def_cfa_register 7
 10336 0006 0200     		movs	r2, r0
 10337 0008 FB1D     		adds	r3, r7, #7
 10338 000a 1A70     		strb	r2, [r3]
4180:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 10339              		.loc 1 4180 0
 10340 000c 0E23     		movs	r3, #14
 10341 000e FB18     		adds	r3, r7, r3
 10342 0010 0022     		movs	r2, #0
 10343 0012 1A70     		strb	r2, [r3]
4181:bma2x2.c      **** 	/*  Variable used to return value of
4182:bma2x2.c      **** 	communication routine*/
4183:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 10344              		.loc 1 4183 0
 10345 0014 0F23     		movs	r3, #15
 10346 0016 FB18     		adds	r3, r7, r3
 10347 0018 FF22     		movs	r2, #255
 10348 001a 1A70     		strb	r2, [r3]
4184:bma2x2.c      **** 
4185:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 10349              		.loc 1 4185 0
 10350 001c 254B     		ldr	r3, .L619
 10351 001e 1B68     		ldr	r3, [r3]
 10352 0020 002B     		cmp	r3, #0
 10353 0022 02D1     		bne	.L614
4186:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
4187:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 259


 10354              		.loc 1 4187 0
 10355 0024 7F23     		movs	r3, #127
 10356 0026 5B42     		rsbs	r3, r3, #0
 10357 0028 40E0     		b	.L618
 10358              	.L614:
4188:bma2x2.c      **** 		} else {
4189:bma2x2.c      **** 		if (intr2_fifo_wm_u8 <
 10359              		.loc 1 4189 0
 10360 002a FB1D     		adds	r3, r7, #7
 10361 002c 1B78     		ldrb	r3, [r3]
 10362 002e 012B     		cmp	r3, #1
 10363 0030 34D8     		bhi	.L616
4190:bma2x2.c      **** 		BMA2x2_FIFO_MODE_STATUS_RANGE) {
4191:bma2x2.c      **** 			/* write the fifo watermark interrupt2*/
4192:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 10364              		.loc 1 4192 0
 10365 0032 204B     		ldr	r3, .L619
 10366 0034 1B68     		ldr	r3, [r3]
 10367 0036 DD68     		ldr	r5, [r3, #12]
 10368 0038 1E4B     		ldr	r3, .L619
 10369 003a 1B68     		ldr	r3, [r3]
 10370 003c 1879     		ldrb	r0, [r3, #4]
 10371 003e 0F23     		movs	r3, #15
 10372 0040 FC18     		adds	r4, r7, r3
 10373 0042 0E23     		movs	r3, #14
 10374 0044 FA18     		adds	r2, r7, r3
 10375 0046 0123     		movs	r3, #1
 10376 0048 1A21     		movs	r1, #26
 10377 004a A847     		blx	r5
 10378 004c 0300     		movs	r3, r0
 10379 004e 2370     		strb	r3, [r4]
4193:bma2x2.c      **** 			(p_bma2x2->dev_addr,
4194:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_FIFO_WM_REG,
4195:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4196:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 10380              		.loc 1 4196 0
 10381 0050 0E23     		movs	r3, #14
 10382 0052 FB18     		adds	r3, r7, r3
 10383 0054 1B78     		ldrb	r3, [r3]
 10384 0056 5BB2     		sxtb	r3, r3
 10385 0058 4022     		movs	r2, #64
 10386 005a 9343     		bics	r3, r2
 10387 005c 5AB2     		sxtb	r2, r3
 10388 005e FB1D     		adds	r3, r7, #7
 10389 0060 1B78     		ldrb	r3, [r3]
 10390 0062 9B01     		lsls	r3, r3, #6
 10391 0064 5BB2     		sxtb	r3, r3
 10392 0066 4021     		movs	r1, #64
 10393 0068 0B40     		ands	r3, r1
 10394 006a 5BB2     		sxtb	r3, r3
 10395 006c 1343     		orrs	r3, r2
 10396 006e 5BB2     		sxtb	r3, r3
 10397 0070 DAB2     		uxtb	r2, r3
 10398 0072 0E23     		movs	r3, #14
 10399 0074 FB18     		adds	r3, r7, r3
 10400 0076 1A70     		strb	r2, [r3]
4197:bma2x2.c      **** 			(data_u8,
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 260


4198:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_FIFO_WM, intr2_fifo_wm_u8);
4199:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 10401              		.loc 1 4199 0
 10402 0078 0E23     		movs	r3, #14
 10403 007a FB18     		adds	r3, r7, r3
 10404 007c 0122     		movs	r2, #1
 10405 007e 1900     		movs	r1, r3
 10406 0080 1A20     		movs	r0, #26
 10407 0082 FFF7FEFF 		bl	bma2x2_write_reg
 10408 0086 0300     		movs	r3, r0
 10409 0088 DAB2     		uxtb	r2, r3
 10410 008a 0F23     		movs	r3, #15
 10411 008c FB18     		adds	r3, r7, r3
 10412 008e 1B78     		ldrb	r3, [r3]
 10413 0090 D318     		adds	r3, r2, r3
 10414 0092 DAB2     		uxtb	r2, r3
 10415 0094 0F23     		movs	r3, #15
 10416 0096 FB18     		adds	r3, r7, r3
 10417 0098 1A70     		strb	r2, [r3]
 10418 009a 03E0     		b	.L617
 10419              	.L616:
4200:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_FIFO_WM_REG,
4201:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4202:bma2x2.c      **** 		} else {
4203:bma2x2.c      **** 		com_rslt = E_OUT_OF_RANGE;
 10420              		.loc 1 4203 0
 10421 009c 0F23     		movs	r3, #15
 10422 009e FB18     		adds	r3, r7, r3
 10423 00a0 FE22     		movs	r2, #254
 10424 00a2 1A70     		strb	r2, [r3]
 10425              	.L617:
4204:bma2x2.c      **** 		}
4205:bma2x2.c      **** 	}
4206:bma2x2.c      **** 	return com_rslt;
 10426              		.loc 1 4206 0
 10427 00a4 0F23     		movs	r3, #15
 10428 00a6 FB18     		adds	r3, r7, r3
 10429 00a8 1B78     		ldrb	r3, [r3]
 10430 00aa 5BB2     		sxtb	r3, r3
 10431              	.L618:
4207:bma2x2.c      **** }
 10432              		.loc 1 4207 0 discriminator 1
 10433 00ac 1800     		movs	r0, r3
 10434 00ae BD46     		mov	sp, r7
 10435 00b0 04B0     		add	sp, sp, #16
 10436              		@ sp needed
 10437 00b2 B0BD     		pop	{r4, r5, r7, pc}
 10438              	.L620:
 10439              		.align	2
 10440              	.L619:
 10441 00b4 00000000 		.word	p_bma2x2
 10442              		.cfi_endproc
 10443              	.LFE64:
 10444              		.size	bma2x2_set_intr2_fifo_wm, .-bma2x2_set_intr2_fifo_wm
 10445              		.section	.text.bma2x2_get_intr1_fifo_full,"ax",%progbits
 10446              		.align	2
 10447              		.global	bma2x2_get_intr1_fifo_full
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 261


 10448              		.code	16
 10449              		.thumb_func
 10450              		.type	bma2x2_get_intr1_fifo_full, %function
 10451              	bma2x2_get_intr1_fifo_full:
 10452              	.LFB65:
4208:bma2x2.c      **** /*!
4209:bma2x2.c      ****  *	@brief This API is used to get
4210:bma2x2.c      ****  *	the fifo full interrupt1 in the register 0x1A bit 2
4211:bma2x2.c      ****  *
4212:bma2x2.c      ****  *
4213:bma2x2.c      ****  *
4214:bma2x2.c      ****  *  @param intr1_fifo_full_u8 : The value of fifo full interrupt enable
4215:bma2x2.c      ****  *       intr1_fifo_full_u8     |    result
4216:bma2x2.c      ****  *       ------------------------ | ------------------
4217:bma2x2.c      ****  *              0x00              | INTR_DISABLE
4218:bma2x2.c      ****  *              0x01              | INTR_ENABLE
4219:bma2x2.c      ****  *
4220:bma2x2.c      ****  *
4221:bma2x2.c      ****  *
4222:bma2x2.c      ****  *	@return results of bus communication function
4223:bma2x2.c      ****  *	@retval 0 -> Success
4224:bma2x2.c      ****  *	@retval -1 -> Error
4225:bma2x2.c      ****  *
4226:bma2x2.c      ****  *
4227:bma2x2.c      ****  */
4228:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_intr1_fifo_full(u8 *intr1_fifo_full_u8)
4229:bma2x2.c      **** {
 10453              		.loc 1 4229 0
 10454              		.cfi_startproc
 10455              		@ args = 0, pretend = 0, frame = 16
 10456              		@ frame_needed = 1, uses_anonymous_args = 0
 10457 0000 B0B5     		push	{r4, r5, r7, lr}
 10458              		.cfi_def_cfa_offset 16
 10459              		.cfi_offset 4, -16
 10460              		.cfi_offset 5, -12
 10461              		.cfi_offset 7, -8
 10462              		.cfi_offset 14, -4
 10463 0002 84B0     		sub	sp, sp, #16
 10464              		.cfi_def_cfa_offset 32
 10465 0004 00AF     		add	r7, sp, #0
 10466              		.cfi_def_cfa_register 7
 10467 0006 7860     		str	r0, [r7, #4]
4230:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 10468              		.loc 1 4230 0
 10469 0008 0E23     		movs	r3, #14
 10470 000a FB18     		adds	r3, r7, r3
 10471 000c 0022     		movs	r2, #0
 10472 000e 1A70     		strb	r2, [r3]
4231:bma2x2.c      **** 		/*  Variable used to return value of
4232:bma2x2.c      **** 	communication routine*/
4233:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 10473              		.loc 1 4233 0
 10474 0010 0F23     		movs	r3, #15
 10475 0012 FB18     		adds	r3, r7, r3
 10476 0014 FF22     		movs	r2, #255
 10477 0016 1A70     		strb	r2, [r3]
4234:bma2x2.c      **** 
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 262


4235:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 10478              		.loc 1 4235 0
 10479 0018 134B     		ldr	r3, .L625
 10480 001a 1B68     		ldr	r3, [r3]
 10481 001c 002B     		cmp	r3, #0
 10482 001e 02D1     		bne	.L622
4236:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
4237:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 10483              		.loc 1 4237 0
 10484 0020 7F23     		movs	r3, #127
 10485 0022 5B42     		rsbs	r3, r3, #0
 10486 0024 1CE0     		b	.L624
 10487              	.L622:
4238:bma2x2.c      **** 		} else {
4239:bma2x2.c      **** 			/* read the fifo full interrupt1*/
4240:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 10488              		.loc 1 4240 0
 10489 0026 104B     		ldr	r3, .L625
 10490 0028 1B68     		ldr	r3, [r3]
 10491 002a DD68     		ldr	r5, [r3, #12]
 10492 002c 0E4B     		ldr	r3, .L625
 10493 002e 1B68     		ldr	r3, [r3]
 10494 0030 1879     		ldrb	r0, [r3, #4]
 10495 0032 0F23     		movs	r3, #15
 10496 0034 FC18     		adds	r4, r7, r3
 10497 0036 0E23     		movs	r3, #14
 10498 0038 FA18     		adds	r2, r7, r3
 10499 003a 0123     		movs	r3, #1
 10500 003c 1A21     		movs	r1, #26
 10501 003e A847     		blx	r5
 10502 0040 0300     		movs	r3, r0
 10503 0042 2370     		strb	r3, [r4]
4241:bma2x2.c      **** 			(p_bma2x2->dev_addr,
4242:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_FIFO_FULL_REG,
4243:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4244:bma2x2.c      **** 			*intr1_fifo_full_u8 = BMA2x2_GET_BITSLICE
 10504              		.loc 1 4244 0
 10505 0044 0E23     		movs	r3, #14
 10506 0046 FB18     		adds	r3, r7, r3
 10507 0048 1B78     		ldrb	r3, [r3]
 10508 004a 9B10     		asrs	r3, r3, #2
 10509 004c DBB2     		uxtb	r3, r3
 10510 004e 0122     		movs	r2, #1
 10511 0050 1340     		ands	r3, r2
 10512 0052 DAB2     		uxtb	r2, r3
 10513 0054 7B68     		ldr	r3, [r7, #4]
 10514 0056 1A70     		strb	r2, [r3]
4245:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_INTR1_PAD_FIFO_FULL);
4246:bma2x2.c      **** 		}
4247:bma2x2.c      **** 	return com_rslt;
 10515              		.loc 1 4247 0
 10516 0058 0F23     		movs	r3, #15
 10517 005a FB18     		adds	r3, r7, r3
 10518 005c 1B78     		ldrb	r3, [r3]
 10519 005e 5BB2     		sxtb	r3, r3
 10520              	.L624:
4248:bma2x2.c      **** }
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 263


 10521              		.loc 1 4248 0 discriminator 1
 10522 0060 1800     		movs	r0, r3
 10523 0062 BD46     		mov	sp, r7
 10524 0064 04B0     		add	sp, sp, #16
 10525              		@ sp needed
 10526 0066 B0BD     		pop	{r4, r5, r7, pc}
 10527              	.L626:
 10528              		.align	2
 10529              	.L625:
 10530 0068 00000000 		.word	p_bma2x2
 10531              		.cfi_endproc
 10532              	.LFE65:
 10533              		.size	bma2x2_get_intr1_fifo_full, .-bma2x2_get_intr1_fifo_full
 10534              		.section	.text.bma2x2_set_intr1_fifo_full,"ax",%progbits
 10535              		.align	2
 10536              		.global	bma2x2_set_intr1_fifo_full
 10537              		.code	16
 10538              		.thumb_func
 10539              		.type	bma2x2_set_intr1_fifo_full, %function
 10540              	bma2x2_set_intr1_fifo_full:
 10541              	.LFB66:
4249:bma2x2.c      **** /*!
4250:bma2x2.c      ****  *	@brief This API is used to set
4251:bma2x2.c      ****  *	the fifo full interrupt1 in the register 0x1A bit 2
4252:bma2x2.c      ****  *
4253:bma2x2.c      ****  *
4254:bma2x2.c      ****  *
4255:bma2x2.c      ****  *  @param intr1_fifo_full_u8 : The value of fifo full interrupt enable
4256:bma2x2.c      ****  *       intr1_fifo_full_u8     |    result
4257:bma2x2.c      ****  *       ------------------------ | ------------------
4258:bma2x2.c      ****  *              0x00              | INTR_DISABLE
4259:bma2x2.c      ****  *              0x01              | INTR_ENABLE
4260:bma2x2.c      ****  *
4261:bma2x2.c      ****  *
4262:bma2x2.c      ****  *
4263:bma2x2.c      ****  *	@return results of bus communication function
4264:bma2x2.c      ****  *	@retval 0 -> Success
4265:bma2x2.c      ****  *	@retval -1 -> Error
4266:bma2x2.c      ****  *
4267:bma2x2.c      ****  *
4268:bma2x2.c      ****  */
4269:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_intr1_fifo_full(u8 intr1_fifo_full_u8)
4270:bma2x2.c      **** {
 10542              		.loc 1 4270 0
 10543              		.cfi_startproc
 10544              		@ args = 0, pretend = 0, frame = 16
 10545              		@ frame_needed = 1, uses_anonymous_args = 0
 10546 0000 B0B5     		push	{r4, r5, r7, lr}
 10547              		.cfi_def_cfa_offset 16
 10548              		.cfi_offset 4, -16
 10549              		.cfi_offset 5, -12
 10550              		.cfi_offset 7, -8
 10551              		.cfi_offset 14, -4
 10552 0002 84B0     		sub	sp, sp, #16
 10553              		.cfi_def_cfa_offset 32
 10554 0004 00AF     		add	r7, sp, #0
 10555              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 264


 10556 0006 0200     		movs	r2, r0
 10557 0008 FB1D     		adds	r3, r7, #7
 10558 000a 1A70     		strb	r2, [r3]
4271:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 10559              		.loc 1 4271 0
 10560 000c 0E23     		movs	r3, #14
 10561 000e FB18     		adds	r3, r7, r3
 10562 0010 0022     		movs	r2, #0
 10563 0012 1A70     		strb	r2, [r3]
4272:bma2x2.c      **** 		/*  Variable used to return value of
4273:bma2x2.c      **** 	communication routine*/
4274:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 10564              		.loc 1 4274 0
 10565 0014 0F23     		movs	r3, #15
 10566 0016 FB18     		adds	r3, r7, r3
 10567 0018 FF22     		movs	r2, #255
 10568 001a 1A70     		strb	r2, [r3]
4275:bma2x2.c      **** 
4276:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 10569              		.loc 1 4276 0
 10570 001c 254B     		ldr	r3, .L633
 10571 001e 1B68     		ldr	r3, [r3]
 10572 0020 002B     		cmp	r3, #0
 10573 0022 02D1     		bne	.L628
4277:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
4278:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 10574              		.loc 1 4278 0
 10575 0024 7F23     		movs	r3, #127
 10576 0026 5B42     		rsbs	r3, r3, #0
 10577 0028 40E0     		b	.L632
 10578              	.L628:
4279:bma2x2.c      **** 		} else {
4280:bma2x2.c      **** 		if (intr1_fifo_full_u8 <
 10579              		.loc 1 4280 0
 10580 002a FB1D     		adds	r3, r7, #7
 10581 002c 1B78     		ldrb	r3, [r3]
 10582 002e 012B     		cmp	r3, #1
 10583 0030 34D8     		bhi	.L630
4281:bma2x2.c      **** 		BMA2x2_FIFO_MODE_STATUS_RANGE) {
4282:bma2x2.c      **** 			/* write the fifo full interrupt1*/
4283:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 10584              		.loc 1 4283 0
 10585 0032 204B     		ldr	r3, .L633
 10586 0034 1B68     		ldr	r3, [r3]
 10587 0036 DD68     		ldr	r5, [r3, #12]
 10588 0038 1E4B     		ldr	r3, .L633
 10589 003a 1B68     		ldr	r3, [r3]
 10590 003c 1879     		ldrb	r0, [r3, #4]
 10591 003e 0F23     		movs	r3, #15
 10592 0040 FC18     		adds	r4, r7, r3
 10593 0042 0E23     		movs	r3, #14
 10594 0044 FA18     		adds	r2, r7, r3
 10595 0046 0123     		movs	r3, #1
 10596 0048 1A21     		movs	r1, #26
 10597 004a A847     		blx	r5
 10598 004c 0300     		movs	r3, r0
 10599 004e 2370     		strb	r3, [r4]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 265


4284:bma2x2.c      **** 			(p_bma2x2->dev_addr,
4285:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_FIFO_FULL_REG,
4286:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4287:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 10600              		.loc 1 4287 0
 10601 0050 0E23     		movs	r3, #14
 10602 0052 FB18     		adds	r3, r7, r3
 10603 0054 1B78     		ldrb	r3, [r3]
 10604 0056 5BB2     		sxtb	r3, r3
 10605 0058 0422     		movs	r2, #4
 10606 005a 9343     		bics	r3, r2
 10607 005c 5AB2     		sxtb	r2, r3
 10608 005e FB1D     		adds	r3, r7, #7
 10609 0060 1B78     		ldrb	r3, [r3]
 10610 0062 9B00     		lsls	r3, r3, #2
 10611 0064 5BB2     		sxtb	r3, r3
 10612 0066 0421     		movs	r1, #4
 10613 0068 0B40     		ands	r3, r1
 10614 006a 5BB2     		sxtb	r3, r3
 10615 006c 1343     		orrs	r3, r2
 10616 006e 5BB2     		sxtb	r3, r3
 10617 0070 DAB2     		uxtb	r2, r3
 10618 0072 0E23     		movs	r3, #14
 10619 0074 FB18     		adds	r3, r7, r3
 10620 0076 1A70     		strb	r2, [r3]
4288:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_INTR1_PAD_FIFO_FULL,
4289:bma2x2.c      **** 			intr1_fifo_full_u8);
4290:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 10621              		.loc 1 4290 0
 10622 0078 0E23     		movs	r3, #14
 10623 007a FB18     		adds	r3, r7, r3
 10624 007c 0122     		movs	r2, #1
 10625 007e 1900     		movs	r1, r3
 10626 0080 1A20     		movs	r0, #26
 10627 0082 FFF7FEFF 		bl	bma2x2_write_reg
 10628 0086 0300     		movs	r3, r0
 10629 0088 DAB2     		uxtb	r2, r3
 10630 008a 0F23     		movs	r3, #15
 10631 008c FB18     		adds	r3, r7, r3
 10632 008e 1B78     		ldrb	r3, [r3]
 10633 0090 D318     		adds	r3, r2, r3
 10634 0092 DAB2     		uxtb	r2, r3
 10635 0094 0F23     		movs	r3, #15
 10636 0096 FB18     		adds	r3, r7, r3
 10637 0098 1A70     		strb	r2, [r3]
 10638 009a 03E0     		b	.L631
 10639              	.L630:
4291:bma2x2.c      **** 			BMA2x2_ENABLE_INTR1_PAD_FIFO_FULL_REG,
4292:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4293:bma2x2.c      **** 			} else {
4294:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 10640              		.loc 1 4294 0
 10641 009c 0F23     		movs	r3, #15
 10642 009e FB18     		adds	r3, r7, r3
 10643 00a0 FE22     		movs	r2, #254
 10644 00a2 1A70     		strb	r2, [r3]
 10645              	.L631:
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 266


4295:bma2x2.c      **** 		}
4296:bma2x2.c      **** 	}
4297:bma2x2.c      **** 	return com_rslt;
 10646              		.loc 1 4297 0
 10647 00a4 0F23     		movs	r3, #15
 10648 00a6 FB18     		adds	r3, r7, r3
 10649 00a8 1B78     		ldrb	r3, [r3]
 10650 00aa 5BB2     		sxtb	r3, r3
 10651              	.L632:
4298:bma2x2.c      **** }
 10652              		.loc 1 4298 0 discriminator 1
 10653 00ac 1800     		movs	r0, r3
 10654 00ae BD46     		mov	sp, r7
 10655 00b0 04B0     		add	sp, sp, #16
 10656              		@ sp needed
 10657 00b2 B0BD     		pop	{r4, r5, r7, pc}
 10658              	.L634:
 10659              		.align	2
 10660              	.L633:
 10661 00b4 00000000 		.word	p_bma2x2
 10662              		.cfi_endproc
 10663              	.LFE66:
 10664              		.size	bma2x2_set_intr1_fifo_full, .-bma2x2_set_intr1_fifo_full
 10665              		.section	.text.bma2x2_get_intr2_fifo_full,"ax",%progbits
 10666              		.align	2
 10667              		.global	bma2x2_get_intr2_fifo_full
 10668              		.code	16
 10669              		.thumb_func
 10670              		.type	bma2x2_get_intr2_fifo_full, %function
 10671              	bma2x2_get_intr2_fifo_full:
 10672              	.LFB67:
4299:bma2x2.c      **** /*!
4300:bma2x2.c      ****  *	@brief This API is used to get
4301:bma2x2.c      ****  *	the fifo full interrupt2 in the register 0x1A bit 5
4302:bma2x2.c      ****  *
4303:bma2x2.c      ****  *
4304:bma2x2.c      ****  *
4305:bma2x2.c      ****  *  @param intr2_fifo_full_u8 : Thee vale of fifo full enable
4306:bma2x2.c      ****  *       intr2_fifo_full_u8     |    result
4307:bma2x2.c      ****  *       ------------------------ | ------------------
4308:bma2x2.c      ****  *              0x00              | INTR_DISABLE
4309:bma2x2.c      ****  *              0x01              | INTR_ENABLE
4310:bma2x2.c      ****  *
4311:bma2x2.c      ****  *
4312:bma2x2.c      ****  *
4313:bma2x2.c      ****  *	@return results of bus communication function
4314:bma2x2.c      ****  *	@retval 0 -> Success
4315:bma2x2.c      ****  *	@retval -1 -> Error
4316:bma2x2.c      ****  *
4317:bma2x2.c      ****  *
4318:bma2x2.c      ****  *
4319:bma2x2.c      ****  */
4320:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_intr2_fifo_full(u8 *intr2_fifo_full_u8)
4321:bma2x2.c      **** {
 10673              		.loc 1 4321 0
 10674              		.cfi_startproc
 10675              		@ args = 0, pretend = 0, frame = 16
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 267


 10676              		@ frame_needed = 1, uses_anonymous_args = 0
 10677 0000 B0B5     		push	{r4, r5, r7, lr}
 10678              		.cfi_def_cfa_offset 16
 10679              		.cfi_offset 4, -16
 10680              		.cfi_offset 5, -12
 10681              		.cfi_offset 7, -8
 10682              		.cfi_offset 14, -4
 10683 0002 84B0     		sub	sp, sp, #16
 10684              		.cfi_def_cfa_offset 32
 10685 0004 00AF     		add	r7, sp, #0
 10686              		.cfi_def_cfa_register 7
 10687 0006 7860     		str	r0, [r7, #4]
4322:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 10688              		.loc 1 4322 0
 10689 0008 0E23     		movs	r3, #14
 10690 000a FB18     		adds	r3, r7, r3
 10691 000c 0022     		movs	r2, #0
 10692 000e 1A70     		strb	r2, [r3]
4323:bma2x2.c      **** 		/*  Variable used to return value of
4324:bma2x2.c      **** 	communication routine*/
4325:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 10693              		.loc 1 4325 0
 10694 0010 0F23     		movs	r3, #15
 10695 0012 FB18     		adds	r3, r7, r3
 10696 0014 FF22     		movs	r2, #255
 10697 0016 1A70     		strb	r2, [r3]
4326:bma2x2.c      **** 
4327:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 10698              		.loc 1 4327 0
 10699 0018 134B     		ldr	r3, .L639
 10700 001a 1B68     		ldr	r3, [r3]
 10701 001c 002B     		cmp	r3, #0
 10702 001e 02D1     		bne	.L636
4328:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
4329:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 10703              		.loc 1 4329 0
 10704 0020 7F23     		movs	r3, #127
 10705 0022 5B42     		rsbs	r3, r3, #0
 10706 0024 1CE0     		b	.L638
 10707              	.L636:
4330:bma2x2.c      **** 		} else {
4331:bma2x2.c      **** 			/* read the fifo full interrupt2*/
4332:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 10708              		.loc 1 4332 0
 10709 0026 104B     		ldr	r3, .L639
 10710 0028 1B68     		ldr	r3, [r3]
 10711 002a DD68     		ldr	r5, [r3, #12]
 10712 002c 0E4B     		ldr	r3, .L639
 10713 002e 1B68     		ldr	r3, [r3]
 10714 0030 1879     		ldrb	r0, [r3, #4]
 10715 0032 0F23     		movs	r3, #15
 10716 0034 FC18     		adds	r4, r7, r3
 10717 0036 0E23     		movs	r3, #14
 10718 0038 FA18     		adds	r2, r7, r3
 10719 003a 0123     		movs	r3, #1
 10720 003c 1A21     		movs	r1, #26
 10721 003e A847     		blx	r5
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 268


 10722 0040 0300     		movs	r3, r0
 10723 0042 2370     		strb	r3, [r4]
4333:bma2x2.c      **** 			(p_bma2x2->dev_addr,
4334:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_FIFO_FULL_REG,
4335:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4336:bma2x2.c      **** 			*intr2_fifo_full_u8 = BMA2x2_GET_BITSLICE
 10724              		.loc 1 4336 0
 10725 0044 0E23     		movs	r3, #14
 10726 0046 FB18     		adds	r3, r7, r3
 10727 0048 1B78     		ldrb	r3, [r3]
 10728 004a 5B11     		asrs	r3, r3, #5
 10729 004c DBB2     		uxtb	r3, r3
 10730 004e 0122     		movs	r2, #1
 10731 0050 1340     		ands	r3, r2
 10732 0052 DAB2     		uxtb	r2, r3
 10733 0054 7B68     		ldr	r3, [r7, #4]
 10734 0056 1A70     		strb	r2, [r3]
4337:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_INTR2_PAD_FIFO_FULL);
4338:bma2x2.c      **** 		}
4339:bma2x2.c      **** 	return com_rslt;
 10735              		.loc 1 4339 0
 10736 0058 0F23     		movs	r3, #15
 10737 005a FB18     		adds	r3, r7, r3
 10738 005c 1B78     		ldrb	r3, [r3]
 10739 005e 5BB2     		sxtb	r3, r3
 10740              	.L638:
4340:bma2x2.c      **** }
 10741              		.loc 1 4340 0 discriminator 1
 10742 0060 1800     		movs	r0, r3
 10743 0062 BD46     		mov	sp, r7
 10744 0064 04B0     		add	sp, sp, #16
 10745              		@ sp needed
 10746 0066 B0BD     		pop	{r4, r5, r7, pc}
 10747              	.L640:
 10748              		.align	2
 10749              	.L639:
 10750 0068 00000000 		.word	p_bma2x2
 10751              		.cfi_endproc
 10752              	.LFE67:
 10753              		.size	bma2x2_get_intr2_fifo_full, .-bma2x2_get_intr2_fifo_full
 10754              		.section	.text.bma2x2_set_intr2_fifo_full,"ax",%progbits
 10755              		.align	2
 10756              		.global	bma2x2_set_intr2_fifo_full
 10757              		.code	16
 10758              		.thumb_func
 10759              		.type	bma2x2_set_intr2_fifo_full, %function
 10760              	bma2x2_set_intr2_fifo_full:
 10761              	.LFB68:
4341:bma2x2.c      **** /*!
4342:bma2x2.c      ****  *	@brief This API is used to set
4343:bma2x2.c      ****  *	the fifo full interrupt2 in the register 0x1A bit 5
4344:bma2x2.c      ****  *
4345:bma2x2.c      ****  *
4346:bma2x2.c      ****  *
4347:bma2x2.c      ****  *  @param intr2_fifo_full_u8 : Thee vale of fifo full enable
4348:bma2x2.c      ****  *       intr2_fifo_full_u8     |    result
4349:bma2x2.c      ****  *       ------------------------ | ------------------
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 269


4350:bma2x2.c      ****  *              0x00              | INTR_DISABLE
4351:bma2x2.c      ****  *              0x01              | INTR_ENABLE
4352:bma2x2.c      ****  *
4353:bma2x2.c      ****  *
4354:bma2x2.c      ****  *
4355:bma2x2.c      ****  *	@return results of bus communication function
4356:bma2x2.c      ****  *	@retval 0 -> Success
4357:bma2x2.c      ****  *	@retval -1 -> Error
4358:bma2x2.c      ****  *
4359:bma2x2.c      ****  *
4360:bma2x2.c      ****  *
4361:bma2x2.c      ****  */
4362:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_intr2_fifo_full(u8 intr2_fifo_full_u8)
4363:bma2x2.c      **** {
 10762              		.loc 1 4363 0
 10763              		.cfi_startproc
 10764              		@ args = 0, pretend = 0, frame = 16
 10765              		@ frame_needed = 1, uses_anonymous_args = 0
 10766 0000 B0B5     		push	{r4, r5, r7, lr}
 10767              		.cfi_def_cfa_offset 16
 10768              		.cfi_offset 4, -16
 10769              		.cfi_offset 5, -12
 10770              		.cfi_offset 7, -8
 10771              		.cfi_offset 14, -4
 10772 0002 84B0     		sub	sp, sp, #16
 10773              		.cfi_def_cfa_offset 32
 10774 0004 00AF     		add	r7, sp, #0
 10775              		.cfi_def_cfa_register 7
 10776 0006 0200     		movs	r2, r0
 10777 0008 FB1D     		adds	r3, r7, #7
 10778 000a 1A70     		strb	r2, [r3]
4364:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 10779              		.loc 1 4364 0
 10780 000c 0E23     		movs	r3, #14
 10781 000e FB18     		adds	r3, r7, r3
 10782 0010 0022     		movs	r2, #0
 10783 0012 1A70     		strb	r2, [r3]
4365:bma2x2.c      **** 	/*  Variable used to return value of
4366:bma2x2.c      **** 	communication routine*/
4367:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 10784              		.loc 1 4367 0
 10785 0014 0F23     		movs	r3, #15
 10786 0016 FB18     		adds	r3, r7, r3
 10787 0018 FF22     		movs	r2, #255
 10788 001a 1A70     		strb	r2, [r3]
4368:bma2x2.c      **** 
4369:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 10789              		.loc 1 4369 0
 10790 001c 254B     		ldr	r3, .L647
 10791 001e 1B68     		ldr	r3, [r3]
 10792 0020 002B     		cmp	r3, #0
 10793 0022 02D1     		bne	.L642
4370:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
4371:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 10794              		.loc 1 4371 0
 10795 0024 7F23     		movs	r3, #127
 10796 0026 5B42     		rsbs	r3, r3, #0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 270


 10797 0028 40E0     		b	.L646
 10798              	.L642:
4372:bma2x2.c      **** 		} else {
4373:bma2x2.c      **** 		if (intr2_fifo_full_u8 <
 10799              		.loc 1 4373 0
 10800 002a FB1D     		adds	r3, r7, #7
 10801 002c 1B78     		ldrb	r3, [r3]
 10802 002e 012B     		cmp	r3, #1
 10803 0030 34D8     		bhi	.L644
4374:bma2x2.c      **** 		BMA2x2_FIFO_MODE_STATUS_RANGE) {
4375:bma2x2.c      **** 			/* write the fifo full interrupt2*/
4376:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 10804              		.loc 1 4376 0
 10805 0032 204B     		ldr	r3, .L647
 10806 0034 1B68     		ldr	r3, [r3]
 10807 0036 DD68     		ldr	r5, [r3, #12]
 10808 0038 1E4B     		ldr	r3, .L647
 10809 003a 1B68     		ldr	r3, [r3]
 10810 003c 1879     		ldrb	r0, [r3, #4]
 10811 003e 0F23     		movs	r3, #15
 10812 0040 FC18     		adds	r4, r7, r3
 10813 0042 0E23     		movs	r3, #14
 10814 0044 FA18     		adds	r2, r7, r3
 10815 0046 0123     		movs	r3, #1
 10816 0048 1A21     		movs	r1, #26
 10817 004a A847     		blx	r5
 10818 004c 0300     		movs	r3, r0
 10819 004e 2370     		strb	r3, [r4]
4377:bma2x2.c      **** 			(p_bma2x2->dev_addr,
4378:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_FIFO_FULL_REG,
4379:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4380:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 10820              		.loc 1 4380 0
 10821 0050 0E23     		movs	r3, #14
 10822 0052 FB18     		adds	r3, r7, r3
 10823 0054 1B78     		ldrb	r3, [r3]
 10824 0056 5BB2     		sxtb	r3, r3
 10825 0058 2022     		movs	r2, #32
 10826 005a 9343     		bics	r3, r2
 10827 005c 5AB2     		sxtb	r2, r3
 10828 005e FB1D     		adds	r3, r7, #7
 10829 0060 1B78     		ldrb	r3, [r3]
 10830 0062 5B01     		lsls	r3, r3, #5
 10831 0064 5BB2     		sxtb	r3, r3
 10832 0066 2021     		movs	r1, #32
 10833 0068 0B40     		ands	r3, r1
 10834 006a 5BB2     		sxtb	r3, r3
 10835 006c 1343     		orrs	r3, r2
 10836 006e 5BB2     		sxtb	r3, r3
 10837 0070 DAB2     		uxtb	r2, r3
 10838 0072 0E23     		movs	r3, #14
 10839 0074 FB18     		adds	r3, r7, r3
 10840 0076 1A70     		strb	r2, [r3]
4381:bma2x2.c      **** 			(data_u8,
4382:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_FIFO_FULL,
4383:bma2x2.c      **** 			intr2_fifo_full_u8);
4384:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 271


 10841              		.loc 1 4384 0
 10842 0078 0E23     		movs	r3, #14
 10843 007a FB18     		adds	r3, r7, r3
 10844 007c 0122     		movs	r2, #1
 10845 007e 1900     		movs	r1, r3
 10846 0080 1A20     		movs	r0, #26
 10847 0082 FFF7FEFF 		bl	bma2x2_write_reg
 10848 0086 0300     		movs	r3, r0
 10849 0088 DAB2     		uxtb	r2, r3
 10850 008a 0F23     		movs	r3, #15
 10851 008c FB18     		adds	r3, r7, r3
 10852 008e 1B78     		ldrb	r3, [r3]
 10853 0090 D318     		adds	r3, r2, r3
 10854 0092 DAB2     		uxtb	r2, r3
 10855 0094 0F23     		movs	r3, #15
 10856 0096 FB18     		adds	r3, r7, r3
 10857 0098 1A70     		strb	r2, [r3]
 10858 009a 03E0     		b	.L645
 10859              	.L644:
4385:bma2x2.c      **** 			BMA2x2_ENABLE_INTR2_PAD_FIFO_FULL_REG,
4386:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4387:bma2x2.c      **** 			} else {
4388:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 10860              		.loc 1 4388 0
 10861 009c 0F23     		movs	r3, #15
 10862 009e FB18     		adds	r3, r7, r3
 10863 00a0 FE22     		movs	r2, #254
 10864 00a2 1A70     		strb	r2, [r3]
 10865              	.L645:
4389:bma2x2.c      **** 			}
4390:bma2x2.c      **** 		}
4391:bma2x2.c      **** 	return com_rslt;
 10866              		.loc 1 4391 0
 10867 00a4 0F23     		movs	r3, #15
 10868 00a6 FB18     		adds	r3, r7, r3
 10869 00a8 1B78     		ldrb	r3, [r3]
 10870 00aa 5BB2     		sxtb	r3, r3
 10871              	.L646:
4392:bma2x2.c      **** }
 10872              		.loc 1 4392 0 discriminator 1
 10873 00ac 1800     		movs	r0, r3
 10874 00ae BD46     		mov	sp, r7
 10875 00b0 04B0     		add	sp, sp, #16
 10876              		@ sp needed
 10877 00b2 B0BD     		pop	{r4, r5, r7, pc}
 10878              	.L648:
 10879              		.align	2
 10880              	.L647:
 10881 00b4 00000000 		.word	p_bma2x2
 10882              		.cfi_endproc
 10883              	.LFE68:
 10884              		.size	bma2x2_set_intr2_fifo_full, .-bma2x2_set_intr2_fifo_full
 10885              		.section	.text.bma2x2_get_source,"ax",%progbits
 10886              		.align	2
 10887              		.global	bma2x2_get_source
 10888              		.code	16
 10889              		.thumb_func
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 272


 10890              		.type	bma2x2_get_source, %function
 10891              	bma2x2_get_source:
 10892              	.LFB69:
4393:bma2x2.c      **** /*!
4394:bma2x2.c      ****  *	@brief This API is used to get
4395:bma2x2.c      ****  *	the source data status of source data,
4396:bma2x2.c      ****  *	source slow no motion, source slope, source high
4397:bma2x2.c      ****  *	and source low in the register 0x1E bit from 0 to 5
4398:bma2x2.c      ****  *
4399:bma2x2.c      ****  *
4400:bma2x2.c      ****  *
4401:bma2x2.c      ****  *  @param channel_u8 : The value of source select
4402:bma2x2.c      ****  *       channel_u8     |    result
4403:bma2x2.c      ****  *       -----------------| ------------------
4404:bma2x2.c      ****  *               0        | BMA2x2_ACCEL_SOURCE_LOW_G
4405:bma2x2.c      ****  *               1        | BMA2x2_ACCEL_SOURCE_HIGH_G
4406:bma2x2.c      ****  *               2        | BMA2x2_ACCEL_SOURCE_SLOPE
4407:bma2x2.c      ****  *               3        | BMA2x2_ACCEL_SOURCE_SLOW_NO_MOTION
4408:bma2x2.c      ****  *               4        | BMA2x2_ACCEL_SOURCE_TAP
4409:bma2x2.c      ****  *               5        | BMA2x2_ACCEL_SOURCE_DATA
4410:bma2x2.c      ****  *
4411:bma2x2.c      ****  *	@param intr_source_u8: The source status enable value
4412:bma2x2.c      ****  *       intr_source_u8         |    result
4413:bma2x2.c      ****  *       ------------------------ | ------------------
4414:bma2x2.c      ****  *              0x00              | INTR_DISABLE
4415:bma2x2.c      ****  *              0x01              | INTR_ENABLE
4416:bma2x2.c      ****  *
4417:bma2x2.c      ****  *	@return results of bus communication function
4418:bma2x2.c      ****  *	@retval 0 -> Success
4419:bma2x2.c      ****  *	@retval -1 -> Error
4420:bma2x2.c      ****  *
4421:bma2x2.c      ****  */
4422:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_source(u8 channel_u8,
4423:bma2x2.c      **** u8 *intr_source_u8)
4424:bma2x2.c      **** {
 10893              		.loc 1 4424 0
 10894              		.cfi_startproc
 10895              		@ args = 0, pretend = 0, frame = 16
 10896              		@ frame_needed = 1, uses_anonymous_args = 0
 10897 0000 B0B5     		push	{r4, r5, r7, lr}
 10898              		.cfi_def_cfa_offset 16
 10899              		.cfi_offset 4, -16
 10900              		.cfi_offset 5, -12
 10901              		.cfi_offset 7, -8
 10902              		.cfi_offset 14, -4
 10903 0002 84B0     		sub	sp, sp, #16
 10904              		.cfi_def_cfa_offset 32
 10905 0004 00AF     		add	r7, sp, #0
 10906              		.cfi_def_cfa_register 7
 10907 0006 0200     		movs	r2, r0
 10908 0008 3960     		str	r1, [r7]
 10909 000a FB1D     		adds	r3, r7, #7
 10910 000c 1A70     		strb	r2, [r3]
4425:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 10911              		.loc 1 4425 0
 10912 000e 0E23     		movs	r3, #14
 10913 0010 FB18     		adds	r3, r7, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 273


 10914 0012 0022     		movs	r2, #0
 10915 0014 1A70     		strb	r2, [r3]
4426:bma2x2.c      **** 	/*  Variable used to return value of
4427:bma2x2.c      **** 	communication routine*/
4428:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 10916              		.loc 1 4428 0
 10917 0016 0F23     		movs	r3, #15
 10918 0018 FB18     		adds	r3, r7, r3
 10919 001a FF22     		movs	r2, #255
 10920 001c 1A70     		strb	r2, [r3]
4429:bma2x2.c      **** 
4430:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 10921              		.loc 1 4430 0
 10922 001e 5C4B     		ldr	r3, .L662
 10923 0020 1B68     		ldr	r3, [r3]
 10924 0022 002B     		cmp	r3, #0
 10925 0024 02D1     		bne	.L650
4431:bma2x2.c      **** 		return  E_BMA2x2_NULL_PTR;
 10926              		.loc 1 4431 0
 10927 0026 7F23     		movs	r3, #127
 10928 0028 5B42     		rsbs	r3, r3, #0
 10929 002a ACE0     		b	.L661
 10930              	.L650:
4432:bma2x2.c      **** 		} else {
4433:bma2x2.c      **** 		/* read the source interrupt register */
4434:bma2x2.c      **** 		switch (channel_u8) {
 10931              		.loc 1 4434 0
 10932 002c FB1D     		adds	r3, r7, #7
 10933 002e 1B78     		ldrb	r3, [r3]
 10934 0030 052B     		cmp	r3, #5
 10935 0032 00D9     		bls	.LCB10181
 10936 0034 9EE0     		b	.L652	@long jump
 10937              	.LCB10181:
 10938 0036 9A00     		lsls	r2, r3, #2
 10939 0038 564B     		ldr	r3, .L662+4
 10940 003a D318     		adds	r3, r2, r3
 10941 003c 1B68     		ldr	r3, [r3]
 10942 003e 9F46     		mov	pc, r3
 10943              		.section	.rodata
 10944              		.align	2
 10945              	.L654:
 10946 00e0 40000000 		.word	.L653
 10947 00e4 70000000 		.word	.L655
 10948 00e8 A4000000 		.word	.L656
 10949 00ec D8000000 		.word	.L657
 10950 00f0 0C010000 		.word	.L658
 10951 00f4 40010000 		.word	.L659
 10952              		.section	.text.bma2x2_get_source
 10953              	.L653:
4435:bma2x2.c      **** 		case BMA2x2_SOURCE_LOW_G:
4436:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 10954              		.loc 1 4436 0
 10955 0040 534B     		ldr	r3, .L662
 10956 0042 1B68     		ldr	r3, [r3]
 10957 0044 DD68     		ldr	r5, [r3, #12]
 10958 0046 524B     		ldr	r3, .L662
 10959 0048 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 274


 10960 004a 1879     		ldrb	r0, [r3, #4]
 10961 004c 0F23     		movs	r3, #15
 10962 004e FC18     		adds	r4, r7, r3
 10963 0050 0E23     		movs	r3, #14
 10964 0052 FA18     		adds	r2, r7, r3
 10965 0054 0123     		movs	r3, #1
 10966 0056 1E21     		movs	r1, #30
 10967 0058 A847     		blx	r5
 10968 005a 0300     		movs	r3, r0
 10969 005c 2370     		strb	r3, [r4]
4437:bma2x2.c      **** 			(p_bma2x2->dev_addr,
4438:bma2x2.c      **** 			BMA2x2_UNFILT_INTR_SOURCE_LOW_G_REG,
4439:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4440:bma2x2.c      **** 			*intr_source_u8 = BMA2x2_GET_BITSLICE
 10970              		.loc 1 4440 0
 10971 005e 0E23     		movs	r3, #14
 10972 0060 FB18     		adds	r3, r7, r3
 10973 0062 1B78     		ldrb	r3, [r3]
 10974 0064 0122     		movs	r2, #1
 10975 0066 1340     		ands	r3, r2
 10976 0068 DAB2     		uxtb	r2, r3
 10977 006a 3B68     		ldr	r3, [r7]
 10978 006c 1A70     		strb	r2, [r3]
4441:bma2x2.c      **** 			(data_u8, BMA2x2_UNFILT_INTR_SOURCE_LOW_G);
4442:bma2x2.c      **** 		break;
 10979              		.loc 1 4442 0
 10980 006e 86E0     		b	.L660
 10981              	.L655:
4443:bma2x2.c      **** 		case BMA2x2_SOURCE_HIGH_G:
4444:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 10982              		.loc 1 4444 0
 10983 0070 474B     		ldr	r3, .L662
 10984 0072 1B68     		ldr	r3, [r3]
 10985 0074 DD68     		ldr	r5, [r3, #12]
 10986 0076 464B     		ldr	r3, .L662
 10987 0078 1B68     		ldr	r3, [r3]
 10988 007a 1879     		ldrb	r0, [r3, #4]
 10989 007c 0F23     		movs	r3, #15
 10990 007e FC18     		adds	r4, r7, r3
 10991 0080 0E23     		movs	r3, #14
 10992 0082 FA18     		adds	r2, r7, r3
 10993 0084 0123     		movs	r3, #1
 10994 0086 1E21     		movs	r1, #30
 10995 0088 A847     		blx	r5
 10996 008a 0300     		movs	r3, r0
 10997 008c 2370     		strb	r3, [r4]
4445:bma2x2.c      **** 			(p_bma2x2->dev_addr,
4446:bma2x2.c      **** 			BMA2x2_UNFILT_INTR_SOURCE_HIGH_G_REG,
4447:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4448:bma2x2.c      **** 			*intr_source_u8 = BMA2x2_GET_BITSLICE
 10998              		.loc 1 4448 0
 10999 008e 0E23     		movs	r3, #14
 11000 0090 FB18     		adds	r3, r7, r3
 11001 0092 1B78     		ldrb	r3, [r3]
 11002 0094 5B10     		asrs	r3, r3, #1
 11003 0096 DBB2     		uxtb	r3, r3
 11004 0098 0122     		movs	r2, #1
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 275


 11005 009a 1340     		ands	r3, r2
 11006 009c DAB2     		uxtb	r2, r3
 11007 009e 3B68     		ldr	r3, [r7]
 11008 00a0 1A70     		strb	r2, [r3]
4449:bma2x2.c      **** 			(data_u8, BMA2x2_UNFILT_INTR_SOURCE_HIGH_G);
4450:bma2x2.c      **** 		break;
 11009              		.loc 1 4450 0
 11010 00a2 6CE0     		b	.L660
 11011              	.L656:
4451:bma2x2.c      **** 		case BMA2x2_SOURCE_SLOPE:
4452:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 11012              		.loc 1 4452 0
 11013 00a4 3A4B     		ldr	r3, .L662
 11014 00a6 1B68     		ldr	r3, [r3]
 11015 00a8 DD68     		ldr	r5, [r3, #12]
 11016 00aa 394B     		ldr	r3, .L662
 11017 00ac 1B68     		ldr	r3, [r3]
 11018 00ae 1879     		ldrb	r0, [r3, #4]
 11019 00b0 0F23     		movs	r3, #15
 11020 00b2 FC18     		adds	r4, r7, r3
 11021 00b4 0E23     		movs	r3, #14
 11022 00b6 FA18     		adds	r2, r7, r3
 11023 00b8 0123     		movs	r3, #1
 11024 00ba 1E21     		movs	r1, #30
 11025 00bc A847     		blx	r5
 11026 00be 0300     		movs	r3, r0
 11027 00c0 2370     		strb	r3, [r4]
4453:bma2x2.c      **** 			(p_bma2x2->dev_addr,
4454:bma2x2.c      **** 			BMA2x2_UNFILT_INTR_SOURCE_SLOPE_REG,
4455:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4456:bma2x2.c      **** 			*intr_source_u8 = BMA2x2_GET_BITSLICE
 11028              		.loc 1 4456 0
 11029 00c2 0E23     		movs	r3, #14
 11030 00c4 FB18     		adds	r3, r7, r3
 11031 00c6 1B78     		ldrb	r3, [r3]
 11032 00c8 9B10     		asrs	r3, r3, #2
 11033 00ca DBB2     		uxtb	r3, r3
 11034 00cc 0122     		movs	r2, #1
 11035 00ce 1340     		ands	r3, r2
 11036 00d0 DAB2     		uxtb	r2, r3
 11037 00d2 3B68     		ldr	r3, [r7]
 11038 00d4 1A70     		strb	r2, [r3]
4457:bma2x2.c      **** 			(data_u8, BMA2x2_UNFILT_INTR_SOURCE_SLOPE);
4458:bma2x2.c      **** 		break;
 11039              		.loc 1 4458 0
 11040 00d6 52E0     		b	.L660
 11041              	.L657:
4459:bma2x2.c      **** 		case BMA2x2_SOURCE_SLOW_NO_MOTION:
4460:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 11042              		.loc 1 4460 0
 11043 00d8 2D4B     		ldr	r3, .L662
 11044 00da 1B68     		ldr	r3, [r3]
 11045 00dc DD68     		ldr	r5, [r3, #12]
 11046 00de 2C4B     		ldr	r3, .L662
 11047 00e0 1B68     		ldr	r3, [r3]
 11048 00e2 1879     		ldrb	r0, [r3, #4]
 11049 00e4 0F23     		movs	r3, #15
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 276


 11050 00e6 FC18     		adds	r4, r7, r3
 11051 00e8 0E23     		movs	r3, #14
 11052 00ea FA18     		adds	r2, r7, r3
 11053 00ec 0123     		movs	r3, #1
 11054 00ee 1E21     		movs	r1, #30
 11055 00f0 A847     		blx	r5
 11056 00f2 0300     		movs	r3, r0
 11057 00f4 2370     		strb	r3, [r4]
4461:bma2x2.c      **** 			(p_bma2x2->dev_addr,
4462:bma2x2.c      **** 			BMA2x2_UNFILT_INTR_SOURCE_SLOW_NO_MOTION_REG,
4463:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4464:bma2x2.c      **** 			*intr_source_u8 = BMA2x2_GET_BITSLICE
 11058              		.loc 1 4464 0
 11059 00f6 0E23     		movs	r3, #14
 11060 00f8 FB18     		adds	r3, r7, r3
 11061 00fa 1B78     		ldrb	r3, [r3]
 11062 00fc DB10     		asrs	r3, r3, #3
 11063 00fe DBB2     		uxtb	r3, r3
 11064 0100 0122     		movs	r2, #1
 11065 0102 1340     		ands	r3, r2
 11066 0104 DAB2     		uxtb	r2, r3
 11067 0106 3B68     		ldr	r3, [r7]
 11068 0108 1A70     		strb	r2, [r3]
4465:bma2x2.c      **** 			(data_u8, BMA2x2_UNFILT_INTR_SOURCE_SLOW_NO_MOTION);
4466:bma2x2.c      **** 		break;
 11069              		.loc 1 4466 0
 11070 010a 38E0     		b	.L660
 11071              	.L658:
4467:bma2x2.c      **** 		case BMA2x2_SOURCE_TAP:
4468:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 11072              		.loc 1 4468 0
 11073 010c 204B     		ldr	r3, .L662
 11074 010e 1B68     		ldr	r3, [r3]
 11075 0110 DD68     		ldr	r5, [r3, #12]
 11076 0112 1F4B     		ldr	r3, .L662
 11077 0114 1B68     		ldr	r3, [r3]
 11078 0116 1879     		ldrb	r0, [r3, #4]
 11079 0118 0F23     		movs	r3, #15
 11080 011a FC18     		adds	r4, r7, r3
 11081 011c 0E23     		movs	r3, #14
 11082 011e FA18     		adds	r2, r7, r3
 11083 0120 0123     		movs	r3, #1
 11084 0122 1E21     		movs	r1, #30
 11085 0124 A847     		blx	r5
 11086 0126 0300     		movs	r3, r0
 11087 0128 2370     		strb	r3, [r4]
4469:bma2x2.c      **** 			(p_bma2x2->dev_addr,
4470:bma2x2.c      **** 			BMA2x2_UNFILT_INTR_SOURCE_TAP_REG,
4471:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4472:bma2x2.c      **** 			*intr_source_u8 = BMA2x2_GET_BITSLICE
 11088              		.loc 1 4472 0
 11089 012a 0E23     		movs	r3, #14
 11090 012c FB18     		adds	r3, r7, r3
 11091 012e 1B78     		ldrb	r3, [r3]
 11092 0130 1B11     		asrs	r3, r3, #4
 11093 0132 DBB2     		uxtb	r3, r3
 11094 0134 0122     		movs	r2, #1
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 277


 11095 0136 1340     		ands	r3, r2
 11096 0138 DAB2     		uxtb	r2, r3
 11097 013a 3B68     		ldr	r3, [r7]
 11098 013c 1A70     		strb	r2, [r3]
4473:bma2x2.c      **** 			(data_u8, BMA2x2_UNFILT_INTR_SOURCE_TAP);
4474:bma2x2.c      **** 		break;
 11099              		.loc 1 4474 0
 11100 013e 1EE0     		b	.L660
 11101              	.L659:
4475:bma2x2.c      **** 		case BMA2x2_SOURCE_DATA:
4476:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 11102              		.loc 1 4476 0
 11103 0140 134B     		ldr	r3, .L662
 11104 0142 1B68     		ldr	r3, [r3]
 11105 0144 DD68     		ldr	r5, [r3, #12]
 11106 0146 124B     		ldr	r3, .L662
 11107 0148 1B68     		ldr	r3, [r3]
 11108 014a 1879     		ldrb	r0, [r3, #4]
 11109 014c 0F23     		movs	r3, #15
 11110 014e FC18     		adds	r4, r7, r3
 11111 0150 0E23     		movs	r3, #14
 11112 0152 FA18     		adds	r2, r7, r3
 11113 0154 0123     		movs	r3, #1
 11114 0156 1E21     		movs	r1, #30
 11115 0158 A847     		blx	r5
 11116 015a 0300     		movs	r3, r0
 11117 015c 2370     		strb	r3, [r4]
4477:bma2x2.c      **** 			(p_bma2x2->dev_addr,
4478:bma2x2.c      **** 			BMA2x2_UNFILT_INTR_SOURCE_DATA_REG,
4479:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4480:bma2x2.c      **** 			*intr_source_u8 = BMA2x2_GET_BITSLICE
 11118              		.loc 1 4480 0
 11119 015e 0E23     		movs	r3, #14
 11120 0160 FB18     		adds	r3, r7, r3
 11121 0162 1B78     		ldrb	r3, [r3]
 11122 0164 5B11     		asrs	r3, r3, #5
 11123 0166 DBB2     		uxtb	r3, r3
 11124 0168 0122     		movs	r2, #1
 11125 016a 1340     		ands	r3, r2
 11126 016c DAB2     		uxtb	r2, r3
 11127 016e 3B68     		ldr	r3, [r7]
 11128 0170 1A70     		strb	r2, [r3]
4481:bma2x2.c      **** 			(data_u8, BMA2x2_UNFILT_INTR_SOURCE_DATA);
4482:bma2x2.c      **** 		break;
 11129              		.loc 1 4482 0
 11130 0172 04E0     		b	.L660
 11131              	.L652:
4483:bma2x2.c      **** 		default:
4484:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 11132              		.loc 1 4484 0
 11133 0174 0F23     		movs	r3, #15
 11134 0176 FB18     		adds	r3, r7, r3
 11135 0178 FE22     		movs	r2, #254
 11136 017a 1A70     		strb	r2, [r3]
4485:bma2x2.c      **** 		break;
 11137              		.loc 1 4485 0
 11138 017c C046     		nop
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 278


 11139              	.L660:
4486:bma2x2.c      **** 			}
4487:bma2x2.c      **** 		}
4488:bma2x2.c      **** 	return com_rslt;
 11140              		.loc 1 4488 0
 11141 017e 0F23     		movs	r3, #15
 11142 0180 FB18     		adds	r3, r7, r3
 11143 0182 1B78     		ldrb	r3, [r3]
 11144 0184 5BB2     		sxtb	r3, r3
 11145              	.L661:
4489:bma2x2.c      **** }
 11146              		.loc 1 4489 0 discriminator 1
 11147 0186 1800     		movs	r0, r3
 11148 0188 BD46     		mov	sp, r7
 11149 018a 04B0     		add	sp, sp, #16
 11150              		@ sp needed
 11151 018c B0BD     		pop	{r4, r5, r7, pc}
 11152              	.L663:
 11153 018e C046     		.align	2
 11154              	.L662:
 11155 0190 00000000 		.word	p_bma2x2
 11156 0194 E0000000 		.word	.L654
 11157              		.cfi_endproc
 11158              	.LFE69:
 11159              		.size	bma2x2_get_source, .-bma2x2_get_source
 11160              		.section	.text.bma2x2_set_source,"ax",%progbits
 11161              		.align	2
 11162              		.global	bma2x2_set_source
 11163              		.code	16
 11164              		.thumb_func
 11165              		.type	bma2x2_set_source, %function
 11166              	bma2x2_set_source:
 11167              	.LFB70:
4490:bma2x2.c      **** /*!
4491:bma2x2.c      ****  *	@brief This API is used to set
4492:bma2x2.c      ****  *	the source data status of source data,
4493:bma2x2.c      ****  *	source slow no motion, source slope, source high
4494:bma2x2.c      ****  *	and source low in the register 0x1E bit from 0 to 5
4495:bma2x2.c      ****  *
4496:bma2x2.c      ****  *
4497:bma2x2.c      ****  *
4498:bma2x2.c      ****  *  @param channel_u8 : The value of source select
4499:bma2x2.c      ****  *       channel_u8     |    result
4500:bma2x2.c      ****  *       -----------------| ------------------
4501:bma2x2.c      ****  *               0        | BMA2x2_ACCEL_SOURCE_LOW_G
4502:bma2x2.c      ****  *               1        | BMA2x2_ACCEL_SOURCE_HIGH_G
4503:bma2x2.c      ****  *               2        | BMA2x2_ACCEL_SOURCE_SLOPE
4504:bma2x2.c      ****  *               3        | BMA2x2_ACCEL_SOURCE_SLOW_NO_MOTION
4505:bma2x2.c      ****  *               4        | BMA2x2_ACCEL_SOURCE_TAP
4506:bma2x2.c      ****  *               5        | BMA2x2_ACCEL_SOURCE_DATA
4507:bma2x2.c      ****  *
4508:bma2x2.c      ****  *	@param intr_source_u8: The source status enable value
4509:bma2x2.c      ****  *       intr_source_u8         |    result
4510:bma2x2.c      ****  *       ------------------------ | ------------------
4511:bma2x2.c      ****  *              0x00              | INTR_DISABLE
4512:bma2x2.c      ****  *              0x01              | INTR_ENABLE
4513:bma2x2.c      ****  *
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 279


4514:bma2x2.c      ****  *	@return results of bus communication function
4515:bma2x2.c      ****  *	@retval 0 -> Success
4516:bma2x2.c      ****  *	@retval -1 -> Error
4517:bma2x2.c      ****  *
4518:bma2x2.c      ****  */
4519:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_source(u8 channel_u8,
4520:bma2x2.c      **** u8 intr_source_u8)
4521:bma2x2.c      **** {
 11168              		.loc 1 4521 0
 11169              		.cfi_startproc
 11170              		@ args = 0, pretend = 0, frame = 16
 11171              		@ frame_needed = 1, uses_anonymous_args = 0
 11172 0000 B0B5     		push	{r4, r5, r7, lr}
 11173              		.cfi_def_cfa_offset 16
 11174              		.cfi_offset 4, -16
 11175              		.cfi_offset 5, -12
 11176              		.cfi_offset 7, -8
 11177              		.cfi_offset 14, -4
 11178 0002 84B0     		sub	sp, sp, #16
 11179              		.cfi_def_cfa_offset 32
 11180 0004 00AF     		add	r7, sp, #0
 11181              		.cfi_def_cfa_register 7
 11182 0006 0200     		movs	r2, r0
 11183 0008 FB1D     		adds	r3, r7, #7
 11184 000a 1A70     		strb	r2, [r3]
 11185 000c BB1D     		adds	r3, r7, #6
 11186 000e 0A1C     		adds	r2, r1, #0
 11187 0010 1A70     		strb	r2, [r3]
4522:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 11188              		.loc 1 4522 0
 11189 0012 0E23     		movs	r3, #14
 11190 0014 FB18     		adds	r3, r7, r3
 11191 0016 0022     		movs	r2, #0
 11192 0018 1A70     		strb	r2, [r3]
4523:bma2x2.c      **** 	/*  Variable used to return value of
4524:bma2x2.c      **** 	communication routine*/
4525:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 11193              		.loc 1 4525 0
 11194 001a 0F23     		movs	r3, #15
 11195 001c FB18     		adds	r3, r7, r3
 11196 001e FF22     		movs	r2, #255
 11197 0020 1A70     		strb	r2, [r3]
4526:bma2x2.c      **** 		if (p_bma2x2 == BMA2x2_NULL) {
 11198              		.loc 1 4526 0
 11199 0022 AE4B     		ldr	r3, .L676
 11200 0024 1B68     		ldr	r3, [r3]
 11201 0026 002B     		cmp	r3, #0
 11202 0028 04D1     		bne	.L665
4527:bma2x2.c      **** 			com_rslt = E_BMA2x2_NULL_PTR;
 11203              		.loc 1 4527 0
 11204 002a 0F23     		movs	r3, #15
 11205 002c FB18     		adds	r3, r7, r3
 11206 002e 8122     		movs	r2, #129
 11207 0030 1A70     		strb	r2, [r3]
 11208 0032 4BE1     		b	.L666
 11209              	.L665:
4528:bma2x2.c      **** 		} else {
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 280


4529:bma2x2.c      **** 		switch (channel_u8) {
 11210              		.loc 1 4529 0
 11211 0034 FB1D     		adds	r3, r7, #7
 11212 0036 1B78     		ldrb	r3, [r3]
 11213 0038 052B     		cmp	r3, #5
 11214 003a 00D9     		bls	.LCB10441
 11215 003c 41E1     		b	.L667	@long jump
 11216              	.LCB10441:
 11217 003e 9A00     		lsls	r2, r3, #2
 11218 0040 A74B     		ldr	r3, .L676+4
 11219 0042 D318     		adds	r3, r2, r3
 11220 0044 1B68     		ldr	r3, [r3]
 11221 0046 9F46     		mov	pc, r3
 11222              		.section	.rodata
 11223              		.align	2
 11224              	.L669:
 11225 00f8 48000000 		.word	.L668
 11226 00fc B0000000 		.word	.L670
 11227 0100 1A010000 		.word	.L671
 11228 0104 84010000 		.word	.L672
 11229 0108 EE010000 		.word	.L673
 11230 010c 58020000 		.word	.L674
 11231              		.section	.text.bma2x2_set_source
 11232              	.L668:
4530:bma2x2.c      **** 		/* write the source interrupt register*/
4531:bma2x2.c      **** 		case BMA2x2_SOURCE_LOW_G:
4532:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 11233              		.loc 1 4532 0
 11234 0048 A44B     		ldr	r3, .L676
 11235 004a 1B68     		ldr	r3, [r3]
 11236 004c DD68     		ldr	r5, [r3, #12]
 11237 004e A34B     		ldr	r3, .L676
 11238 0050 1B68     		ldr	r3, [r3]
 11239 0052 1879     		ldrb	r0, [r3, #4]
 11240 0054 0F23     		movs	r3, #15
 11241 0056 FC18     		adds	r4, r7, r3
 11242 0058 0E23     		movs	r3, #14
 11243 005a FA18     		adds	r2, r7, r3
 11244 005c 0123     		movs	r3, #1
 11245 005e 1E21     		movs	r1, #30
 11246 0060 A847     		blx	r5
 11247 0062 0300     		movs	r3, r0
 11248 0064 2370     		strb	r3, [r4]
4533:bma2x2.c      **** 			(p_bma2x2->dev_addr,
4534:bma2x2.c      **** 			BMA2x2_UNFILT_INTR_SOURCE_LOW_G_REG,
4535:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4536:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 11249              		.loc 1 4536 0
 11250 0066 0E23     		movs	r3, #14
 11251 0068 FB18     		adds	r3, r7, r3
 11252 006a 1B78     		ldrb	r3, [r3]
 11253 006c 5BB2     		sxtb	r3, r3
 11254 006e 0122     		movs	r2, #1
 11255 0070 9343     		bics	r3, r2
 11256 0072 5AB2     		sxtb	r2, r3
 11257 0074 BB1D     		adds	r3, r7, #6
 11258 0076 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 281


 11259 0078 5BB2     		sxtb	r3, r3
 11260 007a 0121     		movs	r1, #1
 11261 007c 0B40     		ands	r3, r1
 11262 007e 5BB2     		sxtb	r3, r3
 11263 0080 1343     		orrs	r3, r2
 11264 0082 5BB2     		sxtb	r3, r3
 11265 0084 DAB2     		uxtb	r2, r3
 11266 0086 0E23     		movs	r3, #14
 11267 0088 FB18     		adds	r3, r7, r3
 11268 008a 1A70     		strb	r2, [r3]
4537:bma2x2.c      **** 			(data_u8,
4538:bma2x2.c      **** 			BMA2x2_UNFILT_INTR_SOURCE_LOW_G, intr_source_u8);
4539:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 11269              		.loc 1 4539 0
 11270 008c 0E23     		movs	r3, #14
 11271 008e FB18     		adds	r3, r7, r3
 11272 0090 0122     		movs	r2, #1
 11273 0092 1900     		movs	r1, r3
 11274 0094 1E20     		movs	r0, #30
 11275 0096 FFF7FEFF 		bl	bma2x2_write_reg
 11276 009a 0300     		movs	r3, r0
 11277 009c DAB2     		uxtb	r2, r3
 11278 009e 0F23     		movs	r3, #15
 11279 00a0 FB18     		adds	r3, r7, r3
 11280 00a2 1B78     		ldrb	r3, [r3]
 11281 00a4 D318     		adds	r3, r2, r3
 11282 00a6 DAB2     		uxtb	r2, r3
 11283 00a8 0F23     		movs	r3, #15
 11284 00aa FB18     		adds	r3, r7, r3
 11285 00ac 1A70     		strb	r2, [r3]
4540:bma2x2.c      **** 			BMA2x2_UNFILT_INTR_SOURCE_LOW_G_REG,
4541:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4542:bma2x2.c      **** 		break;
 11286              		.loc 1 4542 0
 11287 00ae 0DE1     		b	.L666
 11288              	.L670:
4543:bma2x2.c      **** 		case BMA2x2_SOURCE_HIGH_G:
4544:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 11289              		.loc 1 4544 0
 11290 00b0 8A4B     		ldr	r3, .L676
 11291 00b2 1B68     		ldr	r3, [r3]
 11292 00b4 DD68     		ldr	r5, [r3, #12]
 11293 00b6 894B     		ldr	r3, .L676
 11294 00b8 1B68     		ldr	r3, [r3]
 11295 00ba 1879     		ldrb	r0, [r3, #4]
 11296 00bc 0F23     		movs	r3, #15
 11297 00be FC18     		adds	r4, r7, r3
 11298 00c0 0E23     		movs	r3, #14
 11299 00c2 FA18     		adds	r2, r7, r3
 11300 00c4 0123     		movs	r3, #1
 11301 00c6 1E21     		movs	r1, #30
 11302 00c8 A847     		blx	r5
 11303 00ca 0300     		movs	r3, r0
 11304 00cc 2370     		strb	r3, [r4]
4545:bma2x2.c      **** 			(p_bma2x2->dev_addr,
4546:bma2x2.c      **** 			BMA2x2_UNFILT_INTR_SOURCE_HIGH_G_REG,
4547:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 282


4548:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 11305              		.loc 1 4548 0
 11306 00ce 0E23     		movs	r3, #14
 11307 00d0 FB18     		adds	r3, r7, r3
 11308 00d2 1B78     		ldrb	r3, [r3]
 11309 00d4 5BB2     		sxtb	r3, r3
 11310 00d6 0222     		movs	r2, #2
 11311 00d8 9343     		bics	r3, r2
 11312 00da 5AB2     		sxtb	r2, r3
 11313 00dc BB1D     		adds	r3, r7, #6
 11314 00de 1B78     		ldrb	r3, [r3]
 11315 00e0 5B00     		lsls	r3, r3, #1
 11316 00e2 5BB2     		sxtb	r3, r3
 11317 00e4 0221     		movs	r1, #2
 11318 00e6 0B40     		ands	r3, r1
 11319 00e8 5BB2     		sxtb	r3, r3
 11320 00ea 1343     		orrs	r3, r2
 11321 00ec 5BB2     		sxtb	r3, r3
 11322 00ee DAB2     		uxtb	r2, r3
 11323 00f0 0E23     		movs	r3, #14
 11324 00f2 FB18     		adds	r3, r7, r3
 11325 00f4 1A70     		strb	r2, [r3]
4549:bma2x2.c      **** 			(data_u8,
4550:bma2x2.c      **** 			BMA2x2_UNFILT_INTR_SOURCE_HIGH_G, intr_source_u8);
4551:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 11326              		.loc 1 4551 0
 11327 00f6 0E23     		movs	r3, #14
 11328 00f8 FB18     		adds	r3, r7, r3
 11329 00fa 0122     		movs	r2, #1
 11330 00fc 1900     		movs	r1, r3
 11331 00fe 1E20     		movs	r0, #30
 11332 0100 FFF7FEFF 		bl	bma2x2_write_reg
 11333 0104 0300     		movs	r3, r0
 11334 0106 DAB2     		uxtb	r2, r3
 11335 0108 0F23     		movs	r3, #15
 11336 010a FB18     		adds	r3, r7, r3
 11337 010c 1B78     		ldrb	r3, [r3]
 11338 010e D318     		adds	r3, r2, r3
 11339 0110 DAB2     		uxtb	r2, r3
 11340 0112 0F23     		movs	r3, #15
 11341 0114 FB18     		adds	r3, r7, r3
 11342 0116 1A70     		strb	r2, [r3]
4552:bma2x2.c      **** 			BMA2x2_UNFILT_INTR_SOURCE_HIGH_G_REG,
4553:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4554:bma2x2.c      **** 		break;
 11343              		.loc 1 4554 0
 11344 0118 D8E0     		b	.L666
 11345              	.L671:
4555:bma2x2.c      **** 		case BMA2x2_SOURCE_SLOPE:
4556:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 11346              		.loc 1 4556 0
 11347 011a 704B     		ldr	r3, .L676
 11348 011c 1B68     		ldr	r3, [r3]
 11349 011e DD68     		ldr	r5, [r3, #12]
 11350 0120 6E4B     		ldr	r3, .L676
 11351 0122 1B68     		ldr	r3, [r3]
 11352 0124 1879     		ldrb	r0, [r3, #4]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 283


 11353 0126 0F23     		movs	r3, #15
 11354 0128 FC18     		adds	r4, r7, r3
 11355 012a 0E23     		movs	r3, #14
 11356 012c FA18     		adds	r2, r7, r3
 11357 012e 0123     		movs	r3, #1
 11358 0130 1E21     		movs	r1, #30
 11359 0132 A847     		blx	r5
 11360 0134 0300     		movs	r3, r0
 11361 0136 2370     		strb	r3, [r4]
4557:bma2x2.c      **** 			(p_bma2x2->dev_addr,
4558:bma2x2.c      **** 			BMA2x2_UNFILT_INTR_SOURCE_SLOPE_REG,
4559:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4560:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 11362              		.loc 1 4560 0
 11363 0138 0E23     		movs	r3, #14
 11364 013a FB18     		adds	r3, r7, r3
 11365 013c 1B78     		ldrb	r3, [r3]
 11366 013e 5BB2     		sxtb	r3, r3
 11367 0140 0422     		movs	r2, #4
 11368 0142 9343     		bics	r3, r2
 11369 0144 5AB2     		sxtb	r2, r3
 11370 0146 BB1D     		adds	r3, r7, #6
 11371 0148 1B78     		ldrb	r3, [r3]
 11372 014a 9B00     		lsls	r3, r3, #2
 11373 014c 5BB2     		sxtb	r3, r3
 11374 014e 0421     		movs	r1, #4
 11375 0150 0B40     		ands	r3, r1
 11376 0152 5BB2     		sxtb	r3, r3
 11377 0154 1343     		orrs	r3, r2
 11378 0156 5BB2     		sxtb	r3, r3
 11379 0158 DAB2     		uxtb	r2, r3
 11380 015a 0E23     		movs	r3, #14
 11381 015c FB18     		adds	r3, r7, r3
 11382 015e 1A70     		strb	r2, [r3]
4561:bma2x2.c      **** 			(data_u8,
4562:bma2x2.c      **** 			BMA2x2_UNFILT_INTR_SOURCE_SLOPE, intr_source_u8);
4563:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 11383              		.loc 1 4563 0
 11384 0160 0E23     		movs	r3, #14
 11385 0162 FB18     		adds	r3, r7, r3
 11386 0164 0122     		movs	r2, #1
 11387 0166 1900     		movs	r1, r3
 11388 0168 1E20     		movs	r0, #30
 11389 016a FFF7FEFF 		bl	bma2x2_write_reg
 11390 016e 0300     		movs	r3, r0
 11391 0170 DAB2     		uxtb	r2, r3
 11392 0172 0F23     		movs	r3, #15
 11393 0174 FB18     		adds	r3, r7, r3
 11394 0176 1B78     		ldrb	r3, [r3]
 11395 0178 D318     		adds	r3, r2, r3
 11396 017a DAB2     		uxtb	r2, r3
 11397 017c 0F23     		movs	r3, #15
 11398 017e FB18     		adds	r3, r7, r3
 11399 0180 1A70     		strb	r2, [r3]
4564:bma2x2.c      **** 			BMA2x2_UNFILT_INTR_SOURCE_SLOPE_REG,
4565:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4566:bma2x2.c      **** 		break;
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 284


 11400              		.loc 1 4566 0
 11401 0182 A3E0     		b	.L666
 11402              	.L672:
4567:bma2x2.c      **** 		case BMA2x2_SOURCE_SLOW_NO_MOTION:
4568:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 11403              		.loc 1 4568 0
 11404 0184 554B     		ldr	r3, .L676
 11405 0186 1B68     		ldr	r3, [r3]
 11406 0188 DD68     		ldr	r5, [r3, #12]
 11407 018a 544B     		ldr	r3, .L676
 11408 018c 1B68     		ldr	r3, [r3]
 11409 018e 1879     		ldrb	r0, [r3, #4]
 11410 0190 0F23     		movs	r3, #15
 11411 0192 FC18     		adds	r4, r7, r3
 11412 0194 0E23     		movs	r3, #14
 11413 0196 FA18     		adds	r2, r7, r3
 11414 0198 0123     		movs	r3, #1
 11415 019a 1E21     		movs	r1, #30
 11416 019c A847     		blx	r5
 11417 019e 0300     		movs	r3, r0
 11418 01a0 2370     		strb	r3, [r4]
4569:bma2x2.c      **** 			(p_bma2x2->dev_addr,
4570:bma2x2.c      **** 			BMA2x2_UNFILT_INTR_SOURCE_SLOW_NO_MOTION_REG,
4571:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4572:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 11419              		.loc 1 4572 0
 11420 01a2 0E23     		movs	r3, #14
 11421 01a4 FB18     		adds	r3, r7, r3
 11422 01a6 1B78     		ldrb	r3, [r3]
 11423 01a8 5BB2     		sxtb	r3, r3
 11424 01aa 0822     		movs	r2, #8
 11425 01ac 9343     		bics	r3, r2
 11426 01ae 5AB2     		sxtb	r2, r3
 11427 01b0 BB1D     		adds	r3, r7, #6
 11428 01b2 1B78     		ldrb	r3, [r3]
 11429 01b4 DB00     		lsls	r3, r3, #3
 11430 01b6 5BB2     		sxtb	r3, r3
 11431 01b8 0821     		movs	r1, #8
 11432 01ba 0B40     		ands	r3, r1
 11433 01bc 5BB2     		sxtb	r3, r3
 11434 01be 1343     		orrs	r3, r2
 11435 01c0 5BB2     		sxtb	r3, r3
 11436 01c2 DAB2     		uxtb	r2, r3
 11437 01c4 0E23     		movs	r3, #14
 11438 01c6 FB18     		adds	r3, r7, r3
 11439 01c8 1A70     		strb	r2, [r3]
4573:bma2x2.c      **** 			(data_u8,
4574:bma2x2.c      **** 			BMA2x2_UNFILT_INTR_SOURCE_SLOW_NO_MOTION,
4575:bma2x2.c      **** 			intr_source_u8);
4576:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 11440              		.loc 1 4576 0
 11441 01ca 0E23     		movs	r3, #14
 11442 01cc FB18     		adds	r3, r7, r3
 11443 01ce 0122     		movs	r2, #1
 11444 01d0 1900     		movs	r1, r3
 11445 01d2 1E20     		movs	r0, #30
 11446 01d4 FFF7FEFF 		bl	bma2x2_write_reg
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 285


 11447 01d8 0300     		movs	r3, r0
 11448 01da DAB2     		uxtb	r2, r3
 11449 01dc 0F23     		movs	r3, #15
 11450 01de FB18     		adds	r3, r7, r3
 11451 01e0 1B78     		ldrb	r3, [r3]
 11452 01e2 D318     		adds	r3, r2, r3
 11453 01e4 DAB2     		uxtb	r2, r3
 11454 01e6 0F23     		movs	r3, #15
 11455 01e8 FB18     		adds	r3, r7, r3
 11456 01ea 1A70     		strb	r2, [r3]
4577:bma2x2.c      **** 			BMA2x2_UNFILT_INTR_SOURCE_SLOW_NO_MOTION_REG,
4578:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4579:bma2x2.c      **** 		break;
 11457              		.loc 1 4579 0
 11458 01ec 6EE0     		b	.L666
 11459              	.L673:
4580:bma2x2.c      **** 		case BMA2x2_SOURCE_TAP:
4581:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 11460              		.loc 1 4581 0
 11461 01ee 3B4B     		ldr	r3, .L676
 11462 01f0 1B68     		ldr	r3, [r3]
 11463 01f2 DD68     		ldr	r5, [r3, #12]
 11464 01f4 394B     		ldr	r3, .L676
 11465 01f6 1B68     		ldr	r3, [r3]
 11466 01f8 1879     		ldrb	r0, [r3, #4]
 11467 01fa 0F23     		movs	r3, #15
 11468 01fc FC18     		adds	r4, r7, r3
 11469 01fe 0E23     		movs	r3, #14
 11470 0200 FA18     		adds	r2, r7, r3
 11471 0202 0123     		movs	r3, #1
 11472 0204 1E21     		movs	r1, #30
 11473 0206 A847     		blx	r5
 11474 0208 0300     		movs	r3, r0
 11475 020a 2370     		strb	r3, [r4]
4582:bma2x2.c      **** 			(p_bma2x2->dev_addr,
4583:bma2x2.c      **** 			BMA2x2_UNFILT_INTR_SOURCE_TAP_REG,
4584:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4585:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 11476              		.loc 1 4585 0
 11477 020c 0E23     		movs	r3, #14
 11478 020e FB18     		adds	r3, r7, r3
 11479 0210 1B78     		ldrb	r3, [r3]
 11480 0212 5BB2     		sxtb	r3, r3
 11481 0214 1022     		movs	r2, #16
 11482 0216 9343     		bics	r3, r2
 11483 0218 5AB2     		sxtb	r2, r3
 11484 021a BB1D     		adds	r3, r7, #6
 11485 021c 1B78     		ldrb	r3, [r3]
 11486 021e 1B01     		lsls	r3, r3, #4
 11487 0220 5BB2     		sxtb	r3, r3
 11488 0222 1021     		movs	r1, #16
 11489 0224 0B40     		ands	r3, r1
 11490 0226 5BB2     		sxtb	r3, r3
 11491 0228 1343     		orrs	r3, r2
 11492 022a 5BB2     		sxtb	r3, r3
 11493 022c DAB2     		uxtb	r2, r3
 11494 022e 0E23     		movs	r3, #14
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 286


 11495 0230 FB18     		adds	r3, r7, r3
 11496 0232 1A70     		strb	r2, [r3]
4586:bma2x2.c      **** 			(data_u8, BMA2x2_UNFILT_INTR_SOURCE_TAP,
4587:bma2x2.c      **** 			intr_source_u8);
4588:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 11497              		.loc 1 4588 0
 11498 0234 0E23     		movs	r3, #14
 11499 0236 FB18     		adds	r3, r7, r3
 11500 0238 0122     		movs	r2, #1
 11501 023a 1900     		movs	r1, r3
 11502 023c 1E20     		movs	r0, #30
 11503 023e FFF7FEFF 		bl	bma2x2_write_reg
 11504 0242 0300     		movs	r3, r0
 11505 0244 DAB2     		uxtb	r2, r3
 11506 0246 0F23     		movs	r3, #15
 11507 0248 FB18     		adds	r3, r7, r3
 11508 024a 1B78     		ldrb	r3, [r3]
 11509 024c D318     		adds	r3, r2, r3
 11510 024e DAB2     		uxtb	r2, r3
 11511 0250 0F23     		movs	r3, #15
 11512 0252 FB18     		adds	r3, r7, r3
 11513 0254 1A70     		strb	r2, [r3]
4589:bma2x2.c      **** 			BMA2x2_UNFILT_INTR_SOURCE_TAP_REG,
4590:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4591:bma2x2.c      **** 		break;
 11514              		.loc 1 4591 0
 11515 0256 39E0     		b	.L666
 11516              	.L674:
4592:bma2x2.c      **** 		case BMA2x2_SOURCE_DATA:
4593:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 11517              		.loc 1 4593 0
 11518 0258 204B     		ldr	r3, .L676
 11519 025a 1B68     		ldr	r3, [r3]
 11520 025c DD68     		ldr	r5, [r3, #12]
 11521 025e 1F4B     		ldr	r3, .L676
 11522 0260 1B68     		ldr	r3, [r3]
 11523 0262 1879     		ldrb	r0, [r3, #4]
 11524 0264 0F23     		movs	r3, #15
 11525 0266 FC18     		adds	r4, r7, r3
 11526 0268 0E23     		movs	r3, #14
 11527 026a FA18     		adds	r2, r7, r3
 11528 026c 0123     		movs	r3, #1
 11529 026e 1E21     		movs	r1, #30
 11530 0270 A847     		blx	r5
 11531 0272 0300     		movs	r3, r0
 11532 0274 2370     		strb	r3, [r4]
4594:bma2x2.c      **** 			(p_bma2x2->dev_addr,
4595:bma2x2.c      **** 			BMA2x2_UNFILT_INTR_SOURCE_DATA_REG,
4596:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4597:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 11533              		.loc 1 4597 0
 11534 0276 0E23     		movs	r3, #14
 11535 0278 FB18     		adds	r3, r7, r3
 11536 027a 1B78     		ldrb	r3, [r3]
 11537 027c 5BB2     		sxtb	r3, r3
 11538 027e 2022     		movs	r2, #32
 11539 0280 9343     		bics	r3, r2
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 287


 11540 0282 5AB2     		sxtb	r2, r3
 11541 0284 BB1D     		adds	r3, r7, #6
 11542 0286 1B78     		ldrb	r3, [r3]
 11543 0288 5B01     		lsls	r3, r3, #5
 11544 028a 5BB2     		sxtb	r3, r3
 11545 028c 2021     		movs	r1, #32
 11546 028e 0B40     		ands	r3, r1
 11547 0290 5BB2     		sxtb	r3, r3
 11548 0292 1343     		orrs	r3, r2
 11549 0294 5BB2     		sxtb	r3, r3
 11550 0296 DAB2     		uxtb	r2, r3
 11551 0298 0E23     		movs	r3, #14
 11552 029a FB18     		adds	r3, r7, r3
 11553 029c 1A70     		strb	r2, [r3]
4598:bma2x2.c      **** 			(data_u8, BMA2x2_UNFILT_INTR_SOURCE_DATA,
4599:bma2x2.c      **** 			intr_source_u8);
4600:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 11554              		.loc 1 4600 0
 11555 029e 0E23     		movs	r3, #14
 11556 02a0 FB18     		adds	r3, r7, r3
 11557 02a2 0122     		movs	r2, #1
 11558 02a4 1900     		movs	r1, r3
 11559 02a6 1E20     		movs	r0, #30
 11560 02a8 FFF7FEFF 		bl	bma2x2_write_reg
 11561 02ac 0300     		movs	r3, r0
 11562 02ae DAB2     		uxtb	r2, r3
 11563 02b0 0F23     		movs	r3, #15
 11564 02b2 FB18     		adds	r3, r7, r3
 11565 02b4 1B78     		ldrb	r3, [r3]
 11566 02b6 D318     		adds	r3, r2, r3
 11567 02b8 DAB2     		uxtb	r2, r3
 11568 02ba 0F23     		movs	r3, #15
 11569 02bc FB18     		adds	r3, r7, r3
 11570 02be 1A70     		strb	r2, [r3]
4601:bma2x2.c      **** 			BMA2x2_UNFILT_INTR_SOURCE_DATA_REG,
4602:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4603:bma2x2.c      **** 		break;
 11571              		.loc 1 4603 0
 11572 02c0 04E0     		b	.L666
 11573              	.L667:
4604:bma2x2.c      **** 		default:
4605:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 11574              		.loc 1 4605 0
 11575 02c2 0F23     		movs	r3, #15
 11576 02c4 FB18     		adds	r3, r7, r3
 11577 02c6 FE22     		movs	r2, #254
 11578 02c8 1A70     		strb	r2, [r3]
4606:bma2x2.c      **** 		break;
 11579              		.loc 1 4606 0
 11580 02ca C046     		nop
 11581              	.L666:
4607:bma2x2.c      **** 		}
4608:bma2x2.c      **** 	}
4609:bma2x2.c      **** 	return com_rslt;
 11582              		.loc 1 4609 0
 11583 02cc 0F23     		movs	r3, #15
 11584 02ce FB18     		adds	r3, r7, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 288


 11585 02d0 1B78     		ldrb	r3, [r3]
 11586 02d2 5BB2     		sxtb	r3, r3
4610:bma2x2.c      **** }
 11587              		.loc 1 4610 0
 11588 02d4 1800     		movs	r0, r3
 11589 02d6 BD46     		mov	sp, r7
 11590 02d8 04B0     		add	sp, sp, #16
 11591              		@ sp needed
 11592 02da B0BD     		pop	{r4, r5, r7, pc}
 11593              	.L677:
 11594              		.align	2
 11595              	.L676:
 11596 02dc 00000000 		.word	p_bma2x2
 11597 02e0 F8000000 		.word	.L669
 11598              		.cfi_endproc
 11599              	.LFE70:
 11600              		.size	bma2x2_set_source, .-bma2x2_set_source
 11601              		.section	.text.bma2x2_get_intr_output_type,"ax",%progbits
 11602              		.align	2
 11603              		.global	bma2x2_get_intr_output_type
 11604              		.code	16
 11605              		.thumb_func
 11606              		.type	bma2x2_get_intr_output_type, %function
 11607              	bma2x2_get_intr_output_type:
 11608              	.LFB71:
4611:bma2x2.c      **** /*!
4612:bma2x2.c      ****  *	@brief This API is used to get
4613:bma2x2.c      ****  *	the interrupt output type in the register 0x20.
4614:bma2x2.c      ****  *	@note INTR1 -> bit 1
4615:bma2x2.c      ****  *	@note INTR2 -> bit 3
4616:bma2x2.c      ****  *
4617:bma2x2.c      ****  *  @param channel_u8: The value of output type select
4618:bma2x2.c      ****  *       channel_u8     |    result
4619:bma2x2.c      ****  *       -----------------| ------------------
4620:bma2x2.c      ****  *               0        | BMA2x2_ACCEL_INTR1_OUTPUT
4621:bma2x2.c      ****  *               1        | BMA2x2_ACCEL_INTR2_OUTPUT
4622:bma2x2.c      ****  *
4623:bma2x2.c      ****  *	@param intr_output_type_u8: The value of output type select
4624:bma2x2.c      ****  *       intr_source_u8         |    result
4625:bma2x2.c      ****  *       ------------------------ | ------------------
4626:bma2x2.c      ****  *              0x01              | OPEN_DRAIN
4627:bma2x2.c      ****  *              0x00              | PUSS_PULL
4628:bma2x2.c      ****  *
4629:bma2x2.c      ****  *
4630:bma2x2.c      ****  *
4631:bma2x2.c      ****  *	@return results of bus communication function
4632:bma2x2.c      ****  *	@retval 0 -> Success
4633:bma2x2.c      ****  *	@retval -1 -> Error
4634:bma2x2.c      ****  *
4635:bma2x2.c      ****  *
4636:bma2x2.c      ****  */
4637:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_intr_output_type(u8 channel_u8,
4638:bma2x2.c      **** u8 *intr_output_type_u8)
4639:bma2x2.c      **** {
 11609              		.loc 1 4639 0
 11610              		.cfi_startproc
 11611              		@ args = 0, pretend = 0, frame = 16
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 289


 11612              		@ frame_needed = 1, uses_anonymous_args = 0
 11613 0000 B0B5     		push	{r4, r5, r7, lr}
 11614              		.cfi_def_cfa_offset 16
 11615              		.cfi_offset 4, -16
 11616              		.cfi_offset 5, -12
 11617              		.cfi_offset 7, -8
 11618              		.cfi_offset 14, -4
 11619 0002 84B0     		sub	sp, sp, #16
 11620              		.cfi_def_cfa_offset 32
 11621 0004 00AF     		add	r7, sp, #0
 11622              		.cfi_def_cfa_register 7
 11623 0006 0200     		movs	r2, r0
 11624 0008 3960     		str	r1, [r7]
 11625 000a FB1D     		adds	r3, r7, #7
 11626 000c 1A70     		strb	r2, [r3]
4640:bma2x2.c      **** 		u8 data_u8 = BMA2x2_INIT_VALUE;
 11627              		.loc 1 4640 0
 11628 000e 0E23     		movs	r3, #14
 11629 0010 FB18     		adds	r3, r7, r3
 11630 0012 0022     		movs	r2, #0
 11631 0014 1A70     		strb	r2, [r3]
4641:bma2x2.c      **** 		/*  Variable used to return value of
4642:bma2x2.c      **** 		communication routine*/
4643:bma2x2.c      **** 		BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 11632              		.loc 1 4643 0
 11633 0016 0F23     		movs	r3, #15
 11634 0018 FB18     		adds	r3, r7, r3
 11635 001a FF22     		movs	r2, #255
 11636 001c 1A70     		strb	r2, [r3]
4644:bma2x2.c      **** 
4645:bma2x2.c      **** 		if (p_bma2x2 == BMA2x2_NULL) {
 11637              		.loc 1 4645 0
 11638 001e 284B     		ldr	r3, .L686
 11639 0020 1B68     		ldr	r3, [r3]
 11640 0022 002B     		cmp	r3, #0
 11641 0024 04D1     		bne	.L679
4646:bma2x2.c      **** 			com_rslt = E_BMA2x2_NULL_PTR;
 11642              		.loc 1 4646 0
 11643 0026 0F23     		movs	r3, #15
 11644 0028 FB18     		adds	r3, r7, r3
 11645 002a 8122     		movs	r2, #129
 11646 002c 1A70     		strb	r2, [r3]
 11647 002e 3FE0     		b	.L680
 11648              	.L679:
4647:bma2x2.c      **** 		} else {
4648:bma2x2.c      **** 		switch (channel_u8) {
 11649              		.loc 1 4648 0
 11650 0030 FB1D     		adds	r3, r7, #7
 11651 0032 1B78     		ldrb	r3, [r3]
 11652 0034 002B     		cmp	r3, #0
 11653 0036 02D0     		beq	.L682
 11654 0038 012B     		cmp	r3, #1
 11655 003a 1AD0     		beq	.L683
 11656 003c 33E0     		b	.L685
 11657              	.L682:
4649:bma2x2.c      **** 		/* read the output type */
4650:bma2x2.c      **** 		case BMA2x2_INTR1_OUTPUT:
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 290


4651:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 11658              		.loc 1 4651 0
 11659 003e 204B     		ldr	r3, .L686
 11660 0040 1B68     		ldr	r3, [r3]
 11661 0042 DD68     		ldr	r5, [r3, #12]
 11662 0044 1E4B     		ldr	r3, .L686
 11663 0046 1B68     		ldr	r3, [r3]
 11664 0048 1879     		ldrb	r0, [r3, #4]
 11665 004a 0F23     		movs	r3, #15
 11666 004c FC18     		adds	r4, r7, r3
 11667 004e 0E23     		movs	r3, #14
 11668 0050 FA18     		adds	r2, r7, r3
 11669 0052 0123     		movs	r3, #1
 11670 0054 2021     		movs	r1, #32
 11671 0056 A847     		blx	r5
 11672 0058 0300     		movs	r3, r0
 11673 005a 2370     		strb	r3, [r4]
4652:bma2x2.c      **** 			(p_bma2x2->dev_addr,
4653:bma2x2.c      **** 			BMA2x2_INTR1_PAD_OUTPUT_TYPE_REG,
4654:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4655:bma2x2.c      **** 			*intr_output_type_u8 = BMA2x2_GET_BITSLICE
 11674              		.loc 1 4655 0
 11675 005c 0E23     		movs	r3, #14
 11676 005e FB18     		adds	r3, r7, r3
 11677 0060 1B78     		ldrb	r3, [r3]
 11678 0062 5B10     		asrs	r3, r3, #1
 11679 0064 DBB2     		uxtb	r3, r3
 11680 0066 0122     		movs	r2, #1
 11681 0068 1340     		ands	r3, r2
 11682 006a DAB2     		uxtb	r2, r3
 11683 006c 3B68     		ldr	r3, [r7]
 11684 006e 1A70     		strb	r2, [r3]
4656:bma2x2.c      **** 			(data_u8, BMA2x2_INTR1_PAD_OUTPUT_TYPE);
4657:bma2x2.c      **** 		break;
 11685              		.loc 1 4657 0
 11686 0070 1EE0     		b	.L680
 11687              	.L683:
4658:bma2x2.c      **** 		case BMA2x2_INTR2_OUTPUT:
4659:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 11688              		.loc 1 4659 0
 11689 0072 134B     		ldr	r3, .L686
 11690 0074 1B68     		ldr	r3, [r3]
 11691 0076 DD68     		ldr	r5, [r3, #12]
 11692 0078 114B     		ldr	r3, .L686
 11693 007a 1B68     		ldr	r3, [r3]
 11694 007c 1879     		ldrb	r0, [r3, #4]
 11695 007e 0F23     		movs	r3, #15
 11696 0080 FC18     		adds	r4, r7, r3
 11697 0082 0E23     		movs	r3, #14
 11698 0084 FA18     		adds	r2, r7, r3
 11699 0086 0123     		movs	r3, #1
 11700 0088 2021     		movs	r1, #32
 11701 008a A847     		blx	r5
 11702 008c 0300     		movs	r3, r0
 11703 008e 2370     		strb	r3, [r4]
4660:bma2x2.c      **** 			(p_bma2x2->dev_addr,
4661:bma2x2.c      **** 			BMA2x2_INTR2_PAD_OUTPUT_TYPE_REG,
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 291


4662:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4663:bma2x2.c      **** 			*intr_output_type_u8 = BMA2x2_GET_BITSLICE
 11704              		.loc 1 4663 0
 11705 0090 0E23     		movs	r3, #14
 11706 0092 FB18     		adds	r3, r7, r3
 11707 0094 1B78     		ldrb	r3, [r3]
 11708 0096 DB10     		asrs	r3, r3, #3
 11709 0098 DBB2     		uxtb	r3, r3
 11710 009a 0122     		movs	r2, #1
 11711 009c 1340     		ands	r3, r2
 11712 009e DAB2     		uxtb	r2, r3
 11713 00a0 3B68     		ldr	r3, [r7]
 11714 00a2 1A70     		strb	r2, [r3]
4664:bma2x2.c      **** 			(data_u8, BMA2x2_INTR2_PAD_OUTPUT_TYPE);
4665:bma2x2.c      **** 		break;
 11715              		.loc 1 4665 0
 11716 00a4 04E0     		b	.L680
 11717              	.L685:
4666:bma2x2.c      **** 		default:
4667:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 11718              		.loc 1 4667 0
 11719 00a6 0F23     		movs	r3, #15
 11720 00a8 FB18     		adds	r3, r7, r3
 11721 00aa FE22     		movs	r2, #254
 11722 00ac 1A70     		strb	r2, [r3]
4668:bma2x2.c      **** 		break;
 11723              		.loc 1 4668 0
 11724 00ae C046     		nop
 11725              	.L680:
4669:bma2x2.c      **** 		}
4670:bma2x2.c      **** 	}
4671:bma2x2.c      **** 	return com_rslt;
 11726              		.loc 1 4671 0
 11727 00b0 0F23     		movs	r3, #15
 11728 00b2 FB18     		adds	r3, r7, r3
 11729 00b4 1B78     		ldrb	r3, [r3]
 11730 00b6 5BB2     		sxtb	r3, r3
4672:bma2x2.c      **** }
 11731              		.loc 1 4672 0
 11732 00b8 1800     		movs	r0, r3
 11733 00ba BD46     		mov	sp, r7
 11734 00bc 04B0     		add	sp, sp, #16
 11735              		@ sp needed
 11736 00be B0BD     		pop	{r4, r5, r7, pc}
 11737              	.L687:
 11738              		.align	2
 11739              	.L686:
 11740 00c0 00000000 		.word	p_bma2x2
 11741              		.cfi_endproc
 11742              	.LFE71:
 11743              		.size	bma2x2_get_intr_output_type, .-bma2x2_get_intr_output_type
 11744              		.section	.text.bma2x2_set_intr_output_type,"ax",%progbits
 11745              		.align	2
 11746              		.global	bma2x2_set_intr_output_type
 11747              		.code	16
 11748              		.thumb_func
 11749              		.type	bma2x2_set_intr_output_type, %function
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 292


 11750              	bma2x2_set_intr_output_type:
 11751              	.LFB72:
4673:bma2x2.c      **** /*!
4674:bma2x2.c      ****  *	@brief This API is used to set
4675:bma2x2.c      ****  *	the interrupt output type in the register 0x20.
4676:bma2x2.c      ****  *	@note INTR1 -> bit 1
4677:bma2x2.c      ****  *	@note INTR2 -> bit 3
4678:bma2x2.c      ****  *
4679:bma2x2.c      ****  *  @param channel_u8: The value of output type select
4680:bma2x2.c      ****  *         channel_u8   |    result
4681:bma2x2.c      ****  *       -----------------| ------------------
4682:bma2x2.c      ****  *               0        | BMA2x2_ACCEL_INTR1_OUTPUT
4683:bma2x2.c      ****  *               1        | BMA2x2_ACCEL_INTR2_OUTPUT
4684:bma2x2.c      ****  *
4685:bma2x2.c      ****  *	@param intr_output_type_u8: The value of output type select
4686:bma2x2.c      ****  *       intr_source_u8         |    result
4687:bma2x2.c      ****  *       ------------------------ | ------------------
4688:bma2x2.c      ****  *              0x01              | OPEN_DRAIN
4689:bma2x2.c      ****  *              0x00              | PUSS_PULL
4690:bma2x2.c      ****  *
4691:bma2x2.c      ****  *
4692:bma2x2.c      ****  *
4693:bma2x2.c      ****  *	@return results of bus communication function
4694:bma2x2.c      ****  *	@retval 0 -> Success
4695:bma2x2.c      ****  *	@retval -1 -> Error
4696:bma2x2.c      ****  *
4697:bma2x2.c      ****  *
4698:bma2x2.c      ****  */
4699:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_intr_output_type(u8 channel_u8,
4700:bma2x2.c      **** u8 intr_output_type_u8)
4701:bma2x2.c      **** {
 11752              		.loc 1 4701 0
 11753              		.cfi_startproc
 11754              		@ args = 0, pretend = 0, frame = 16
 11755              		@ frame_needed = 1, uses_anonymous_args = 0
 11756 0000 B0B5     		push	{r4, r5, r7, lr}
 11757              		.cfi_def_cfa_offset 16
 11758              		.cfi_offset 4, -16
 11759              		.cfi_offset 5, -12
 11760              		.cfi_offset 7, -8
 11761              		.cfi_offset 14, -4
 11762 0002 84B0     		sub	sp, sp, #16
 11763              		.cfi_def_cfa_offset 32
 11764 0004 00AF     		add	r7, sp, #0
 11765              		.cfi_def_cfa_register 7
 11766 0006 0200     		movs	r2, r0
 11767 0008 FB1D     		adds	r3, r7, #7
 11768 000a 1A70     		strb	r2, [r3]
 11769 000c BB1D     		adds	r3, r7, #6
 11770 000e 0A1C     		adds	r2, r1, #0
 11771 0010 1A70     		strb	r2, [r3]
4702:bma2x2.c      **** 		u8 data_u8 = BMA2x2_INIT_VALUE;
 11772              		.loc 1 4702 0
 11773 0012 0E23     		movs	r3, #14
 11774 0014 FB18     		adds	r3, r7, r3
 11775 0016 0022     		movs	r2, #0
 11776 0018 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 293


4703:bma2x2.c      **** 		/*  Variable used to return value of
4704:bma2x2.c      **** 		communication routine*/
4705:bma2x2.c      **** 		BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 11777              		.loc 1 4705 0
 11778 001a 0F23     		movs	r3, #15
 11779 001c FB18     		adds	r3, r7, r3
 11780 001e FF22     		movs	r2, #255
 11781 0020 1A70     		strb	r2, [r3]
4706:bma2x2.c      **** 
4707:bma2x2.c      **** 		if (p_bma2x2 == BMA2x2_NULL) {
 11782              		.loc 1 4707 0
 11783 0022 434B     		ldr	r3, .L696
 11784 0024 1B68     		ldr	r3, [r3]
 11785 0026 002B     		cmp	r3, #0
 11786 0028 04D1     		bne	.L689
4708:bma2x2.c      **** 			com_rslt = E_BMA2x2_NULL_PTR;
 11787              		.loc 1 4708 0
 11788 002a 0F23     		movs	r3, #15
 11789 002c FB18     		adds	r3, r7, r3
 11790 002e 8122     		movs	r2, #129
 11791 0030 1A70     		strb	r2, [r3]
 11792 0032 75E0     		b	.L690
 11793              	.L689:
4709:bma2x2.c      **** 		}  else {
4710:bma2x2.c      **** 		switch (channel_u8) {
 11794              		.loc 1 4710 0
 11795 0034 FB1D     		adds	r3, r7, #7
 11796 0036 1B78     		ldrb	r3, [r3]
 11797 0038 002B     		cmp	r3, #0
 11798 003a 02D0     		beq	.L692
 11799 003c 012B     		cmp	r3, #1
 11800 003e 35D0     		beq	.L693
 11801 0040 69E0     		b	.L695
 11802              	.L692:
4711:bma2x2.c      **** 		/* write the output type*/
4712:bma2x2.c      **** 		case BMA2x2_INTR1_OUTPUT:
4713:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 11803              		.loc 1 4713 0
 11804 0042 3B4B     		ldr	r3, .L696
 11805 0044 1B68     		ldr	r3, [r3]
 11806 0046 DD68     		ldr	r5, [r3, #12]
 11807 0048 394B     		ldr	r3, .L696
 11808 004a 1B68     		ldr	r3, [r3]
 11809 004c 1879     		ldrb	r0, [r3, #4]
 11810 004e 0F23     		movs	r3, #15
 11811 0050 FC18     		adds	r4, r7, r3
 11812 0052 0E23     		movs	r3, #14
 11813 0054 FA18     		adds	r2, r7, r3
 11814 0056 0123     		movs	r3, #1
 11815 0058 2021     		movs	r1, #32
 11816 005a A847     		blx	r5
 11817 005c 0300     		movs	r3, r0
 11818 005e 2370     		strb	r3, [r4]
4714:bma2x2.c      **** 			(p_bma2x2->dev_addr,
4715:bma2x2.c      **** 			BMA2x2_INTR1_PAD_OUTPUT_TYPE_REG,
4716:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4717:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 294


 11819              		.loc 1 4717 0
 11820 0060 0E23     		movs	r3, #14
 11821 0062 FB18     		adds	r3, r7, r3
 11822 0064 1B78     		ldrb	r3, [r3]
 11823 0066 5BB2     		sxtb	r3, r3
 11824 0068 0222     		movs	r2, #2
 11825 006a 9343     		bics	r3, r2
 11826 006c 5AB2     		sxtb	r2, r3
 11827 006e BB1D     		adds	r3, r7, #6
 11828 0070 1B78     		ldrb	r3, [r3]
 11829 0072 5B00     		lsls	r3, r3, #1
 11830 0074 5BB2     		sxtb	r3, r3
 11831 0076 0221     		movs	r1, #2
 11832 0078 0B40     		ands	r3, r1
 11833 007a 5BB2     		sxtb	r3, r3
 11834 007c 1343     		orrs	r3, r2
 11835 007e 5BB2     		sxtb	r3, r3
 11836 0080 DAB2     		uxtb	r2, r3
 11837 0082 0E23     		movs	r3, #14
 11838 0084 FB18     		adds	r3, r7, r3
 11839 0086 1A70     		strb	r2, [r3]
4718:bma2x2.c      **** 			(data_u8,
4719:bma2x2.c      **** 			BMA2x2_INTR1_PAD_OUTPUT_TYPE, intr_output_type_u8);
4720:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 11840              		.loc 1 4720 0
 11841 0088 0E23     		movs	r3, #14
 11842 008a FB18     		adds	r3, r7, r3
 11843 008c 0122     		movs	r2, #1
 11844 008e 1900     		movs	r1, r3
 11845 0090 2020     		movs	r0, #32
 11846 0092 FFF7FEFF 		bl	bma2x2_write_reg
 11847 0096 0300     		movs	r3, r0
 11848 0098 DAB2     		uxtb	r2, r3
 11849 009a 0F23     		movs	r3, #15
 11850 009c FB18     		adds	r3, r7, r3
 11851 009e 1B78     		ldrb	r3, [r3]
 11852 00a0 D318     		adds	r3, r2, r3
 11853 00a2 DAB2     		uxtb	r2, r3
 11854 00a4 0F23     		movs	r3, #15
 11855 00a6 FB18     		adds	r3, r7, r3
 11856 00a8 1A70     		strb	r2, [r3]
4721:bma2x2.c      **** 			BMA2x2_INTR1_PAD_OUTPUT_TYPE_REG,
4722:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4723:bma2x2.c      **** 		break;
 11857              		.loc 1 4723 0
 11858 00aa 39E0     		b	.L690
 11859              	.L693:
4724:bma2x2.c      **** 		case BMA2x2_INTR2_OUTPUT:
4725:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 11860              		.loc 1 4725 0
 11861 00ac 204B     		ldr	r3, .L696
 11862 00ae 1B68     		ldr	r3, [r3]
 11863 00b0 DD68     		ldr	r5, [r3, #12]
 11864 00b2 1F4B     		ldr	r3, .L696
 11865 00b4 1B68     		ldr	r3, [r3]
 11866 00b6 1879     		ldrb	r0, [r3, #4]
 11867 00b8 0F23     		movs	r3, #15
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 295


 11868 00ba FC18     		adds	r4, r7, r3
 11869 00bc 0E23     		movs	r3, #14
 11870 00be FA18     		adds	r2, r7, r3
 11871 00c0 0123     		movs	r3, #1
 11872 00c2 2021     		movs	r1, #32
 11873 00c4 A847     		blx	r5
 11874 00c6 0300     		movs	r3, r0
 11875 00c8 2370     		strb	r3, [r4]
4726:bma2x2.c      **** 			(p_bma2x2->dev_addr,
4727:bma2x2.c      **** 			BMA2x2_INTR2_PAD_OUTPUT_TYPE_REG,
4728:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4729:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 11876              		.loc 1 4729 0
 11877 00ca 0E23     		movs	r3, #14
 11878 00cc FB18     		adds	r3, r7, r3
 11879 00ce 1B78     		ldrb	r3, [r3]
 11880 00d0 5BB2     		sxtb	r3, r3
 11881 00d2 0822     		movs	r2, #8
 11882 00d4 9343     		bics	r3, r2
 11883 00d6 5AB2     		sxtb	r2, r3
 11884 00d8 BB1D     		adds	r3, r7, #6
 11885 00da 1B78     		ldrb	r3, [r3]
 11886 00dc DB00     		lsls	r3, r3, #3
 11887 00de 5BB2     		sxtb	r3, r3
 11888 00e0 0821     		movs	r1, #8
 11889 00e2 0B40     		ands	r3, r1
 11890 00e4 5BB2     		sxtb	r3, r3
 11891 00e6 1343     		orrs	r3, r2
 11892 00e8 5BB2     		sxtb	r3, r3
 11893 00ea DAB2     		uxtb	r2, r3
 11894 00ec 0E23     		movs	r3, #14
 11895 00ee FB18     		adds	r3, r7, r3
 11896 00f0 1A70     		strb	r2, [r3]
4730:bma2x2.c      **** 			(data_u8,
4731:bma2x2.c      **** 			BMA2x2_INTR2_PAD_OUTPUT_TYPE, intr_output_type_u8);
4732:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 11897              		.loc 1 4732 0
 11898 00f2 0E23     		movs	r3, #14
 11899 00f4 FB18     		adds	r3, r7, r3
 11900 00f6 0122     		movs	r2, #1
 11901 00f8 1900     		movs	r1, r3
 11902 00fa 2020     		movs	r0, #32
 11903 00fc FFF7FEFF 		bl	bma2x2_write_reg
 11904 0100 0300     		movs	r3, r0
 11905 0102 DAB2     		uxtb	r2, r3
 11906 0104 0F23     		movs	r3, #15
 11907 0106 FB18     		adds	r3, r7, r3
 11908 0108 1B78     		ldrb	r3, [r3]
 11909 010a D318     		adds	r3, r2, r3
 11910 010c DAB2     		uxtb	r2, r3
 11911 010e 0F23     		movs	r3, #15
 11912 0110 FB18     		adds	r3, r7, r3
 11913 0112 1A70     		strb	r2, [r3]
4733:bma2x2.c      **** 			BMA2x2_INTR2_PAD_OUTPUT_TYPE_REG,
4734:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4735:bma2x2.c      **** 		break;
 11914              		.loc 1 4735 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 296


 11915 0114 04E0     		b	.L690
 11916              	.L695:
4736:bma2x2.c      **** 		default:
4737:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 11917              		.loc 1 4737 0
 11918 0116 0F23     		movs	r3, #15
 11919 0118 FB18     		adds	r3, r7, r3
 11920 011a FE22     		movs	r2, #254
 11921 011c 1A70     		strb	r2, [r3]
4738:bma2x2.c      **** 		break;
 11922              		.loc 1 4738 0
 11923 011e C046     		nop
 11924              	.L690:
4739:bma2x2.c      **** 		}
4740:bma2x2.c      **** 	}
4741:bma2x2.c      **** 	return com_rslt;
 11925              		.loc 1 4741 0
 11926 0120 0F23     		movs	r3, #15
 11927 0122 FB18     		adds	r3, r7, r3
 11928 0124 1B78     		ldrb	r3, [r3]
 11929 0126 5BB2     		sxtb	r3, r3
4742:bma2x2.c      **** }
 11930              		.loc 1 4742 0
 11931 0128 1800     		movs	r0, r3
 11932 012a BD46     		mov	sp, r7
 11933 012c 04B0     		add	sp, sp, #16
 11934              		@ sp needed
 11935 012e B0BD     		pop	{r4, r5, r7, pc}
 11936              	.L697:
 11937              		.align	2
 11938              	.L696:
 11939 0130 00000000 		.word	p_bma2x2
 11940              		.cfi_endproc
 11941              	.LFE72:
 11942              		.size	bma2x2_set_intr_output_type, .-bma2x2_set_intr_output_type
 11943              		.section	.text.bma2x2_get_intr_level,"ax",%progbits
 11944              		.align	2
 11945              		.global	bma2x2_get_intr_level
 11946              		.code	16
 11947              		.thumb_func
 11948              		.type	bma2x2_get_intr_level, %function
 11949              	bma2x2_get_intr_level:
 11950              	.LFB73:
4743:bma2x2.c      **** /*!
4744:bma2x2.c      ****  *	@brief This API is used to get
4745:bma2x2.c      ****  *	Active Level status in the register 0x20
4746:bma2x2.c      ****  *	@note INTR1 -> bit 0
4747:bma2x2.c      ****  *	@note INTR2 -> bit 2
4748:bma2x2.c      ****  *
4749:bma2x2.c      ****  *  @param channel_u8: The value of Active Level select
4750:bma2x2.c      ****  *       channel_u8     |    result
4751:bma2x2.c      ****  *       -----------------| ------------------
4752:bma2x2.c      ****  *               0        | BMA2x2_ACCEL_INTR1_LEVEL
4753:bma2x2.c      ****  *               1        | BMA2x2_ACCEL_INTR2_LEVEL
4754:bma2x2.c      ****  *
4755:bma2x2.c      ****  *  @param intr_level_u8: The Active Level status enable value
4756:bma2x2.c      ****  *        intr_level_u8         |    result
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 297


4757:bma2x2.c      ****  *       ------------------------ | ------------------
4758:bma2x2.c      ****  *              0x01              | ACTIVE_HIGH
4759:bma2x2.c      ****  *              0x00              | ACTIVE_LOW
4760:bma2x2.c      ****  *
4761:bma2x2.c      ****  *
4762:bma2x2.c      ****  *	@return results of bus communication function
4763:bma2x2.c      ****  *	@retval 0 -> Success
4764:bma2x2.c      ****  *	@retval -1 -> Error
4765:bma2x2.c      ****  *
4766:bma2x2.c      ****  *
4767:bma2x2.c      ****  */
4768:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_intr_level(u8 channel_u8,
4769:bma2x2.c      **** u8 *intr_level_u8)
4770:bma2x2.c      **** {
 11951              		.loc 1 4770 0
 11952              		.cfi_startproc
 11953              		@ args = 0, pretend = 0, frame = 16
 11954              		@ frame_needed = 1, uses_anonymous_args = 0
 11955 0000 B0B5     		push	{r4, r5, r7, lr}
 11956              		.cfi_def_cfa_offset 16
 11957              		.cfi_offset 4, -16
 11958              		.cfi_offset 5, -12
 11959              		.cfi_offset 7, -8
 11960              		.cfi_offset 14, -4
 11961 0002 84B0     		sub	sp, sp, #16
 11962              		.cfi_def_cfa_offset 32
 11963 0004 00AF     		add	r7, sp, #0
 11964              		.cfi_def_cfa_register 7
 11965 0006 0200     		movs	r2, r0
 11966 0008 3960     		str	r1, [r7]
 11967 000a FB1D     		adds	r3, r7, #7
 11968 000c 1A70     		strb	r2, [r3]
4771:bma2x2.c      **** 		u8 data_u8 = BMA2x2_INIT_VALUE;
 11969              		.loc 1 4771 0
 11970 000e 0E23     		movs	r3, #14
 11971 0010 FB18     		adds	r3, r7, r3
 11972 0012 0022     		movs	r2, #0
 11973 0014 1A70     		strb	r2, [r3]
4772:bma2x2.c      **** 		/*  Variable used to return value of
4773:bma2x2.c      **** 		communication routine*/
4774:bma2x2.c      **** 		BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 11974              		.loc 1 4774 0
 11975 0016 0F23     		movs	r3, #15
 11976 0018 FB18     		adds	r3, r7, r3
 11977 001a FF22     		movs	r2, #255
 11978 001c 1A70     		strb	r2, [r3]
4775:bma2x2.c      **** 
4776:bma2x2.c      **** 		if (p_bma2x2 == BMA2x2_NULL) {
 11979              		.loc 1 4776 0
 11980 001e 274B     		ldr	r3, .L706
 11981 0020 1B68     		ldr	r3, [r3]
 11982 0022 002B     		cmp	r3, #0
 11983 0024 04D1     		bne	.L699
4777:bma2x2.c      **** 			com_rslt = E_BMA2x2_NULL_PTR;
 11984              		.loc 1 4777 0
 11985 0026 0F23     		movs	r3, #15
 11986 0028 FB18     		adds	r3, r7, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 298


 11987 002a 8122     		movs	r2, #129
 11988 002c 1A70     		strb	r2, [r3]
 11989 002e 3DE0     		b	.L700
 11990              	.L699:
4778:bma2x2.c      **** 		} else {
4779:bma2x2.c      **** 		switch (channel_u8) {
 11991              		.loc 1 4779 0
 11992 0030 FB1D     		adds	r3, r7, #7
 11993 0032 1B78     		ldrb	r3, [r3]
 11994 0034 002B     		cmp	r3, #0
 11995 0036 02D0     		beq	.L702
 11996 0038 012B     		cmp	r3, #1
 11997 003a 18D0     		beq	.L703
 11998 003c 31E0     		b	.L705
 11999              	.L702:
4780:bma2x2.c      **** 		/* read the active level*/
4781:bma2x2.c      **** 		case BMA2x2_INTR1_LEVEL:
4782:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 12000              		.loc 1 4782 0
 12001 003e 1F4B     		ldr	r3, .L706
 12002 0040 1B68     		ldr	r3, [r3]
 12003 0042 DD68     		ldr	r5, [r3, #12]
 12004 0044 1D4B     		ldr	r3, .L706
 12005 0046 1B68     		ldr	r3, [r3]
 12006 0048 1879     		ldrb	r0, [r3, #4]
 12007 004a 0F23     		movs	r3, #15
 12008 004c FC18     		adds	r4, r7, r3
 12009 004e 0E23     		movs	r3, #14
 12010 0050 FA18     		adds	r2, r7, r3
 12011 0052 0123     		movs	r3, #1
 12012 0054 2021     		movs	r1, #32
 12013 0056 A847     		blx	r5
 12014 0058 0300     		movs	r3, r0
 12015 005a 2370     		strb	r3, [r4]
4783:bma2x2.c      **** 			(p_bma2x2->dev_addr,
4784:bma2x2.c      **** 			BMA2x2_INTR1_PAD_ACTIVE_LEVEL_REG,
4785:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4786:bma2x2.c      **** 			*intr_level_u8 = BMA2x2_GET_BITSLICE
 12016              		.loc 1 4786 0
 12017 005c 0E23     		movs	r3, #14
 12018 005e FB18     		adds	r3, r7, r3
 12019 0060 1B78     		ldrb	r3, [r3]
 12020 0062 0122     		movs	r2, #1
 12021 0064 1340     		ands	r3, r2
 12022 0066 DAB2     		uxtb	r2, r3
 12023 0068 3B68     		ldr	r3, [r7]
 12024 006a 1A70     		strb	r2, [r3]
4787:bma2x2.c      **** 			(data_u8, BMA2x2_INTR1_PAD_ACTIVE_LEVEL);
4788:bma2x2.c      **** 		break;
 12025              		.loc 1 4788 0
 12026 006c 1EE0     		b	.L700
 12027              	.L703:
4789:bma2x2.c      **** 		case BMA2x2_INTR2_LEVEL:
4790:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 12028              		.loc 1 4790 0
 12029 006e 134B     		ldr	r3, .L706
 12030 0070 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 299


 12031 0072 DD68     		ldr	r5, [r3, #12]
 12032 0074 114B     		ldr	r3, .L706
 12033 0076 1B68     		ldr	r3, [r3]
 12034 0078 1879     		ldrb	r0, [r3, #4]
 12035 007a 0F23     		movs	r3, #15
 12036 007c FC18     		adds	r4, r7, r3
 12037 007e 0E23     		movs	r3, #14
 12038 0080 FA18     		adds	r2, r7, r3
 12039 0082 0123     		movs	r3, #1
 12040 0084 2021     		movs	r1, #32
 12041 0086 A847     		blx	r5
 12042 0088 0300     		movs	r3, r0
 12043 008a 2370     		strb	r3, [r4]
4791:bma2x2.c      **** 			(p_bma2x2->dev_addr,
4792:bma2x2.c      **** 			BMA2x2_INTR2_PAD_ACTIVE_LEVEL_REG,
4793:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4794:bma2x2.c      **** 			*intr_level_u8 = BMA2x2_GET_BITSLICE
 12044              		.loc 1 4794 0
 12045 008c 0E23     		movs	r3, #14
 12046 008e FB18     		adds	r3, r7, r3
 12047 0090 1B78     		ldrb	r3, [r3]
 12048 0092 9B10     		asrs	r3, r3, #2
 12049 0094 DBB2     		uxtb	r3, r3
 12050 0096 0122     		movs	r2, #1
 12051 0098 1340     		ands	r3, r2
 12052 009a DAB2     		uxtb	r2, r3
 12053 009c 3B68     		ldr	r3, [r7]
 12054 009e 1A70     		strb	r2, [r3]
4795:bma2x2.c      **** 			(data_u8, BMA2x2_INTR2_PAD_ACTIVE_LEVEL);
4796:bma2x2.c      **** 		break;
 12055              		.loc 1 4796 0
 12056 00a0 04E0     		b	.L700
 12057              	.L705:
4797:bma2x2.c      **** 		default:
4798:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 12058              		.loc 1 4798 0
 12059 00a2 0F23     		movs	r3, #15
 12060 00a4 FB18     		adds	r3, r7, r3
 12061 00a6 FE22     		movs	r2, #254
 12062 00a8 1A70     		strb	r2, [r3]
4799:bma2x2.c      **** 		break;
 12063              		.loc 1 4799 0
 12064 00aa C046     		nop
 12065              	.L700:
4800:bma2x2.c      **** 		}
4801:bma2x2.c      **** 	}
4802:bma2x2.c      **** 	return com_rslt;
 12066              		.loc 1 4802 0
 12067 00ac 0F23     		movs	r3, #15
 12068 00ae FB18     		adds	r3, r7, r3
 12069 00b0 1B78     		ldrb	r3, [r3]
 12070 00b2 5BB2     		sxtb	r3, r3
4803:bma2x2.c      **** }
 12071              		.loc 1 4803 0
 12072 00b4 1800     		movs	r0, r3
 12073 00b6 BD46     		mov	sp, r7
 12074 00b8 04B0     		add	sp, sp, #16
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 300


 12075              		@ sp needed
 12076 00ba B0BD     		pop	{r4, r5, r7, pc}
 12077              	.L707:
 12078              		.align	2
 12079              	.L706:
 12080 00bc 00000000 		.word	p_bma2x2
 12081              		.cfi_endproc
 12082              	.LFE73:
 12083              		.size	bma2x2_get_intr_level, .-bma2x2_get_intr_level
 12084              		.section	.text.bma2x2_set_intr_level,"ax",%progbits
 12085              		.align	2
 12086              		.global	bma2x2_set_intr_level
 12087              		.code	16
 12088              		.thumb_func
 12089              		.type	bma2x2_set_intr_level, %function
 12090              	bma2x2_set_intr_level:
 12091              	.LFB74:
4804:bma2x2.c      **** /*!
4805:bma2x2.c      ****  *	@brief This API is used to set
4806:bma2x2.c      ****  *	Active Level status in the register 0x20
4807:bma2x2.c      ****  *	@note INTR1 -> bit 0
4808:bma2x2.c      ****  *	@note INTR2 -> bit 2
4809:bma2x2.c      ****  *
4810:bma2x2.c      ****  *  @param channel_u8: The value of Active Level select
4811:bma2x2.c      ****  *       channel_u8     |    result
4812:bma2x2.c      ****  *       -----------------| ------------------
4813:bma2x2.c      ****  *               0        | BMA2x2_ACCEL_INTR1_LEVEL
4814:bma2x2.c      ****  *               1        | BMA2x2_ACCEL_INTR2_LEVEL
4815:bma2x2.c      ****  *
4816:bma2x2.c      ****  *  @param intr_level_u8: The Active Level status enable value
4817:bma2x2.c      ****  *       intr_level_u8          |    result
4818:bma2x2.c      ****  *       ------------------------ | ------------------
4819:bma2x2.c      ****  *              0x01              | ACTIVE_HIGH
4820:bma2x2.c      ****  *              0x00              | ACTIVE_LOW
4821:bma2x2.c      ****  *
4822:bma2x2.c      ****  *
4823:bma2x2.c      ****  *	@return results of bus communication function
4824:bma2x2.c      ****  *	@retval 0 -> Success
4825:bma2x2.c      ****  *	@retval -1 -> Error
4826:bma2x2.c      ****  *
4827:bma2x2.c      ****  *
4828:bma2x2.c      ****  */
4829:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_intr_level(u8 channel_u8,
4830:bma2x2.c      **** u8 intr_level_u8)
4831:bma2x2.c      **** {
 12092              		.loc 1 4831 0
 12093              		.cfi_startproc
 12094              		@ args = 0, pretend = 0, frame = 16
 12095              		@ frame_needed = 1, uses_anonymous_args = 0
 12096 0000 B0B5     		push	{r4, r5, r7, lr}
 12097              		.cfi_def_cfa_offset 16
 12098              		.cfi_offset 4, -16
 12099              		.cfi_offset 5, -12
 12100              		.cfi_offset 7, -8
 12101              		.cfi_offset 14, -4
 12102 0002 84B0     		sub	sp, sp, #16
 12103              		.cfi_def_cfa_offset 32
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 301


 12104 0004 00AF     		add	r7, sp, #0
 12105              		.cfi_def_cfa_register 7
 12106 0006 0200     		movs	r2, r0
 12107 0008 FB1D     		adds	r3, r7, #7
 12108 000a 1A70     		strb	r2, [r3]
 12109 000c BB1D     		adds	r3, r7, #6
 12110 000e 0A1C     		adds	r2, r1, #0
 12111 0010 1A70     		strb	r2, [r3]
4832:bma2x2.c      **** 		u8 data_u8 = BMA2x2_INIT_VALUE;
 12112              		.loc 1 4832 0
 12113 0012 0E23     		movs	r3, #14
 12114 0014 FB18     		adds	r3, r7, r3
 12115 0016 0022     		movs	r2, #0
 12116 0018 1A70     		strb	r2, [r3]
4833:bma2x2.c      **** 		/*  Variable used to return value of
4834:bma2x2.c      **** 		communication routine*/
4835:bma2x2.c      **** 		BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 12117              		.loc 1 4835 0
 12118 001a 0F23     		movs	r3, #15
 12119 001c FB18     		adds	r3, r7, r3
 12120 001e FF22     		movs	r2, #255
 12121 0020 1A70     		strb	r2, [r3]
4836:bma2x2.c      **** 
4837:bma2x2.c      **** 		if (p_bma2x2 == BMA2x2_NULL) {
 12122              		.loc 1 4837 0
 12123 0022 434B     		ldr	r3, .L716
 12124 0024 1B68     		ldr	r3, [r3]
 12125 0026 002B     		cmp	r3, #0
 12126 0028 04D1     		bne	.L709
4838:bma2x2.c      **** 			com_rslt = E_BMA2x2_NULL_PTR;
 12127              		.loc 1 4838 0
 12128 002a 0F23     		movs	r3, #15
 12129 002c FB18     		adds	r3, r7, r3
 12130 002e 8122     		movs	r2, #129
 12131 0030 1A70     		strb	r2, [r3]
 12132 0032 74E0     		b	.L710
 12133              	.L709:
4839:bma2x2.c      **** 		} else {
4840:bma2x2.c      **** 		switch (channel_u8) {
 12134              		.loc 1 4840 0
 12135 0034 FB1D     		adds	r3, r7, #7
 12136 0036 1B78     		ldrb	r3, [r3]
 12137 0038 002B     		cmp	r3, #0
 12138 003a 02D0     		beq	.L712
 12139 003c 012B     		cmp	r3, #1
 12140 003e 34D0     		beq	.L713
 12141 0040 68E0     		b	.L715
 12142              	.L712:
4841:bma2x2.c      **** 		/* write the active level */
4842:bma2x2.c      **** 		case BMA2x2_INTR1_LEVEL:
4843:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 12143              		.loc 1 4843 0
 12144 0042 3B4B     		ldr	r3, .L716
 12145 0044 1B68     		ldr	r3, [r3]
 12146 0046 DD68     		ldr	r5, [r3, #12]
 12147 0048 394B     		ldr	r3, .L716
 12148 004a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 302


 12149 004c 1879     		ldrb	r0, [r3, #4]
 12150 004e 0F23     		movs	r3, #15
 12151 0050 FC18     		adds	r4, r7, r3
 12152 0052 0E23     		movs	r3, #14
 12153 0054 FA18     		adds	r2, r7, r3
 12154 0056 0123     		movs	r3, #1
 12155 0058 2021     		movs	r1, #32
 12156 005a A847     		blx	r5
 12157 005c 0300     		movs	r3, r0
 12158 005e 2370     		strb	r3, [r4]
4844:bma2x2.c      **** 			(p_bma2x2->dev_addr,
4845:bma2x2.c      **** 			BMA2x2_INTR1_PAD_ACTIVE_LEVEL_REG,
4846:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4847:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 12159              		.loc 1 4847 0
 12160 0060 0E23     		movs	r3, #14
 12161 0062 FB18     		adds	r3, r7, r3
 12162 0064 1B78     		ldrb	r3, [r3]
 12163 0066 5BB2     		sxtb	r3, r3
 12164 0068 0122     		movs	r2, #1
 12165 006a 9343     		bics	r3, r2
 12166 006c 5AB2     		sxtb	r2, r3
 12167 006e BB1D     		adds	r3, r7, #6
 12168 0070 1B78     		ldrb	r3, [r3]
 12169 0072 5BB2     		sxtb	r3, r3
 12170 0074 0121     		movs	r1, #1
 12171 0076 0B40     		ands	r3, r1
 12172 0078 5BB2     		sxtb	r3, r3
 12173 007a 1343     		orrs	r3, r2
 12174 007c 5BB2     		sxtb	r3, r3
 12175 007e DAB2     		uxtb	r2, r3
 12176 0080 0E23     		movs	r3, #14
 12177 0082 FB18     		adds	r3, r7, r3
 12178 0084 1A70     		strb	r2, [r3]
4848:bma2x2.c      **** 			(data_u8,
4849:bma2x2.c      **** 			BMA2x2_INTR1_PAD_ACTIVE_LEVEL, intr_level_u8);
4850:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 12179              		.loc 1 4850 0
 12180 0086 0E23     		movs	r3, #14
 12181 0088 FB18     		adds	r3, r7, r3
 12182 008a 0122     		movs	r2, #1
 12183 008c 1900     		movs	r1, r3
 12184 008e 2020     		movs	r0, #32
 12185 0090 FFF7FEFF 		bl	bma2x2_write_reg
 12186 0094 0300     		movs	r3, r0
 12187 0096 DAB2     		uxtb	r2, r3
 12188 0098 0F23     		movs	r3, #15
 12189 009a FB18     		adds	r3, r7, r3
 12190 009c 1B78     		ldrb	r3, [r3]
 12191 009e D318     		adds	r3, r2, r3
 12192 00a0 DAB2     		uxtb	r2, r3
 12193 00a2 0F23     		movs	r3, #15
 12194 00a4 FB18     		adds	r3, r7, r3
 12195 00a6 1A70     		strb	r2, [r3]
4851:bma2x2.c      **** 			BMA2x2_INTR1_PAD_ACTIVE_LEVEL_REG,
4852:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4853:bma2x2.c      **** 		break;
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 303


 12196              		.loc 1 4853 0
 12197 00a8 39E0     		b	.L710
 12198              	.L713:
4854:bma2x2.c      **** 		case BMA2x2_INTR2_LEVEL:
4855:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 12199              		.loc 1 4855 0
 12200 00aa 214B     		ldr	r3, .L716
 12201 00ac 1B68     		ldr	r3, [r3]
 12202 00ae DD68     		ldr	r5, [r3, #12]
 12203 00b0 1F4B     		ldr	r3, .L716
 12204 00b2 1B68     		ldr	r3, [r3]
 12205 00b4 1879     		ldrb	r0, [r3, #4]
 12206 00b6 0F23     		movs	r3, #15
 12207 00b8 FC18     		adds	r4, r7, r3
 12208 00ba 0E23     		movs	r3, #14
 12209 00bc FA18     		adds	r2, r7, r3
 12210 00be 0123     		movs	r3, #1
 12211 00c0 2021     		movs	r1, #32
 12212 00c2 A847     		blx	r5
 12213 00c4 0300     		movs	r3, r0
 12214 00c6 2370     		strb	r3, [r4]
4856:bma2x2.c      **** 			(p_bma2x2->dev_addr,
4857:bma2x2.c      **** 			BMA2x2_INTR2_PAD_ACTIVE_LEVEL_REG,
4858:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4859:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 12215              		.loc 1 4859 0
 12216 00c8 0E23     		movs	r3, #14
 12217 00ca FB18     		adds	r3, r7, r3
 12218 00cc 1B78     		ldrb	r3, [r3]
 12219 00ce 5BB2     		sxtb	r3, r3
 12220 00d0 0422     		movs	r2, #4
 12221 00d2 9343     		bics	r3, r2
 12222 00d4 5AB2     		sxtb	r2, r3
 12223 00d6 BB1D     		adds	r3, r7, #6
 12224 00d8 1B78     		ldrb	r3, [r3]
 12225 00da 9B00     		lsls	r3, r3, #2
 12226 00dc 5BB2     		sxtb	r3, r3
 12227 00de 0421     		movs	r1, #4
 12228 00e0 0B40     		ands	r3, r1
 12229 00e2 5BB2     		sxtb	r3, r3
 12230 00e4 1343     		orrs	r3, r2
 12231 00e6 5BB2     		sxtb	r3, r3
 12232 00e8 DAB2     		uxtb	r2, r3
 12233 00ea 0E23     		movs	r3, #14
 12234 00ec FB18     		adds	r3, r7, r3
 12235 00ee 1A70     		strb	r2, [r3]
4860:bma2x2.c      **** 			(data_u8,
4861:bma2x2.c      **** 			BMA2x2_INTR2_PAD_ACTIVE_LEVEL, intr_level_u8);
4862:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 12236              		.loc 1 4862 0
 12237 00f0 0E23     		movs	r3, #14
 12238 00f2 FB18     		adds	r3, r7, r3
 12239 00f4 0122     		movs	r2, #1
 12240 00f6 1900     		movs	r1, r3
 12241 00f8 2020     		movs	r0, #32
 12242 00fa FFF7FEFF 		bl	bma2x2_write_reg
 12243 00fe 0300     		movs	r3, r0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 304


 12244 0100 DAB2     		uxtb	r2, r3
 12245 0102 0F23     		movs	r3, #15
 12246 0104 FB18     		adds	r3, r7, r3
 12247 0106 1B78     		ldrb	r3, [r3]
 12248 0108 D318     		adds	r3, r2, r3
 12249 010a DAB2     		uxtb	r2, r3
 12250 010c 0F23     		movs	r3, #15
 12251 010e FB18     		adds	r3, r7, r3
 12252 0110 1A70     		strb	r2, [r3]
4863:bma2x2.c      **** 			BMA2x2_INTR2_PAD_ACTIVE_LEVEL_REG,
4864:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4865:bma2x2.c      **** 		break;
 12253              		.loc 1 4865 0
 12254 0112 04E0     		b	.L710
 12255              	.L715:
4866:bma2x2.c      **** 		default:
4867:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 12256              		.loc 1 4867 0
 12257 0114 0F23     		movs	r3, #15
 12258 0116 FB18     		adds	r3, r7, r3
 12259 0118 FE22     		movs	r2, #254
 12260 011a 1A70     		strb	r2, [r3]
4868:bma2x2.c      **** 		break;
 12261              		.loc 1 4868 0
 12262 011c C046     		nop
 12263              	.L710:
4869:bma2x2.c      **** 		}
4870:bma2x2.c      **** 	}
4871:bma2x2.c      **** 	return com_rslt;
 12264              		.loc 1 4871 0
 12265 011e 0F23     		movs	r3, #15
 12266 0120 FB18     		adds	r3, r7, r3
 12267 0122 1B78     		ldrb	r3, [r3]
 12268 0124 5BB2     		sxtb	r3, r3
4872:bma2x2.c      **** }
 12269              		.loc 1 4872 0
 12270 0126 1800     		movs	r0, r3
 12271 0128 BD46     		mov	sp, r7
 12272 012a 04B0     		add	sp, sp, #16
 12273              		@ sp needed
 12274 012c B0BD     		pop	{r4, r5, r7, pc}
 12275              	.L717:
 12276 012e C046     		.align	2
 12277              	.L716:
 12278 0130 00000000 		.word	p_bma2x2
 12279              		.cfi_endproc
 12280              	.LFE74:
 12281              		.size	bma2x2_set_intr_level, .-bma2x2_set_intr_level
 12282              		.section	.text.bma2x2_rst_intr,"ax",%progbits
 12283              		.align	2
 12284              		.global	bma2x2_rst_intr
 12285              		.code	16
 12286              		.thumb_func
 12287              		.type	bma2x2_rst_intr, %function
 12288              	bma2x2_rst_intr:
 12289              	.LFB75:
4873:bma2x2.c      **** /*!
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 305


4874:bma2x2.c      ****  *	@brief This API is used to set
4875:bma2x2.c      ****  *	the reset interrupt in the register 0x21 bit 7
4876:bma2x2.c      ****  *
4877:bma2x2.c      ****  *
4878:bma2x2.c      ****  *
4879:bma2x2.c      ****  *  @param  rst_intr_u8: The value of reset interrupt
4880:bma2x2.c      ****  *          rst_intr_u8         |  result
4881:bma2x2.c      ****  *       ------------------------ | ------------------
4882:bma2x2.c      ****  *              0x01              | clear any latch interrupt
4883:bma2x2.c      ****  *              0x00              | keep latch interrupt active
4884:bma2x2.c      ****  *
4885:bma2x2.c      ****  *
4886:bma2x2.c      ****  *	@return results of bus communication function
4887:bma2x2.c      ****  *	@retval 0 -> Success
4888:bma2x2.c      ****  *	@retval -1 -> Error
4889:bma2x2.c      ****  *
4890:bma2x2.c      ****  *
4891:bma2x2.c      ****  */
4892:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_rst_intr(u8 rst_intr_u8)
4893:bma2x2.c      **** {
 12290              		.loc 1 4893 0
 12291              		.cfi_startproc
 12292              		@ args = 0, pretend = 0, frame = 16
 12293              		@ frame_needed = 1, uses_anonymous_args = 0
 12294 0000 B0B5     		push	{r4, r5, r7, lr}
 12295              		.cfi_def_cfa_offset 16
 12296              		.cfi_offset 4, -16
 12297              		.cfi_offset 5, -12
 12298              		.cfi_offset 7, -8
 12299              		.cfi_offset 14, -4
 12300 0002 84B0     		sub	sp, sp, #16
 12301              		.cfi_def_cfa_offset 32
 12302 0004 00AF     		add	r7, sp, #0
 12303              		.cfi_def_cfa_register 7
 12304 0006 0200     		movs	r2, r0
 12305 0008 FB1D     		adds	r3, r7, #7
 12306 000a 1A70     		strb	r2, [r3]
4894:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 12307              		.loc 1 4894 0
 12308 000c 0E23     		movs	r3, #14
 12309 000e FB18     		adds	r3, r7, r3
 12310 0010 0022     		movs	r2, #0
 12311 0012 1A70     		strb	r2, [r3]
4895:bma2x2.c      **** 		/*  Variable used to return value of
4896:bma2x2.c      **** 	communication routine*/
4897:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 12312              		.loc 1 4897 0
 12313 0014 0F23     		movs	r3, #15
 12314 0016 FB18     		adds	r3, r7, r3
 12315 0018 FF22     		movs	r2, #255
 12316 001a 1A70     		strb	r2, [r3]
4898:bma2x2.c      **** 
4899:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 12317              		.loc 1 4899 0
 12318 001c 1F4B     		ldr	r3, .L722
 12319 001e 1B68     		ldr	r3, [r3]
 12320 0020 002B     		cmp	r3, #0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 306


 12321 0022 02D1     		bne	.L719
4900:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
4901:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 12322              		.loc 1 4901 0
 12323 0024 7F23     		movs	r3, #127
 12324 0026 5B42     		rsbs	r3, r3, #0
 12325 0028 34E0     		b	.L721
 12326              	.L719:
4902:bma2x2.c      **** 		} else {
4903:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 12327              		.loc 1 4903 0
 12328 002a 1C4B     		ldr	r3, .L722
 12329 002c 1B68     		ldr	r3, [r3]
 12330 002e DD68     		ldr	r5, [r3, #12]
 12331 0030 1A4B     		ldr	r3, .L722
 12332 0032 1B68     		ldr	r3, [r3]
 12333 0034 1879     		ldrb	r0, [r3, #4]
 12334 0036 0F23     		movs	r3, #15
 12335 0038 FC18     		adds	r4, r7, r3
 12336 003a 0E23     		movs	r3, #14
 12337 003c FA18     		adds	r2, r7, r3
 12338 003e 0123     		movs	r3, #1
 12339 0040 2121     		movs	r1, #33
 12340 0042 A847     		blx	r5
 12341 0044 0300     		movs	r3, r0
 12342 0046 2370     		strb	r3, [r4]
4904:bma2x2.c      **** 			(p_bma2x2->dev_addr, BMA2x2_RESET_INTR_REG,
4905:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4906:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 12343              		.loc 1 4906 0
 12344 0048 0E23     		movs	r3, #14
 12345 004a FB18     		adds	r3, r7, r3
 12346 004c 1B78     		ldrb	r3, [r3]
 12347 004e 5BB2     		sxtb	r3, r3
 12348 0050 7F22     		movs	r2, #127
 12349 0052 1340     		ands	r3, r2
 12350 0054 5AB2     		sxtb	r2, r3
 12351 0056 FB1D     		adds	r3, r7, #7
 12352 0058 1B78     		ldrb	r3, [r3]
 12353 005a DB01     		lsls	r3, r3, #7
 12354 005c 5BB2     		sxtb	r3, r3
 12355 005e 1343     		orrs	r3, r2
 12356 0060 5BB2     		sxtb	r3, r3
 12357 0062 DAB2     		uxtb	r2, r3
 12358 0064 0E23     		movs	r3, #14
 12359 0066 FB18     		adds	r3, r7, r3
 12360 0068 1A70     		strb	r2, [r3]
4907:bma2x2.c      **** 			(data_u8, BMA2x2_RESET_INTR, rst_intr_u8);
4908:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(BMA2x2_RESET_INTR_REG,
 12361              		.loc 1 4908 0
 12362 006a 0E23     		movs	r3, #14
 12363 006c FB18     		adds	r3, r7, r3
 12364 006e 0122     		movs	r2, #1
 12365 0070 1900     		movs	r1, r3
 12366 0072 2120     		movs	r0, #33
 12367 0074 FFF7FEFF 		bl	bma2x2_write_reg
 12368 0078 0300     		movs	r3, r0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 307


 12369 007a DAB2     		uxtb	r2, r3
 12370 007c 0F23     		movs	r3, #15
 12371 007e FB18     		adds	r3, r7, r3
 12372 0080 1B78     		ldrb	r3, [r3]
 12373 0082 D318     		adds	r3, r2, r3
 12374 0084 DAB2     		uxtb	r2, r3
 12375 0086 0F23     		movs	r3, #15
 12376 0088 FB18     		adds	r3, r7, r3
 12377 008a 1A70     		strb	r2, [r3]
4909:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4910:bma2x2.c      **** 		}
4911:bma2x2.c      **** 	return com_rslt;
 12378              		.loc 1 4911 0
 12379 008c 0F23     		movs	r3, #15
 12380 008e FB18     		adds	r3, r7, r3
 12381 0090 1B78     		ldrb	r3, [r3]
 12382 0092 5BB2     		sxtb	r3, r3
 12383              	.L721:
4912:bma2x2.c      **** }
 12384              		.loc 1 4912 0 discriminator 1
 12385 0094 1800     		movs	r0, r3
 12386 0096 BD46     		mov	sp, r7
 12387 0098 04B0     		add	sp, sp, #16
 12388              		@ sp needed
 12389 009a B0BD     		pop	{r4, r5, r7, pc}
 12390              	.L723:
 12391              		.align	2
 12392              	.L722:
 12393 009c 00000000 		.word	p_bma2x2
 12394              		.cfi_endproc
 12395              	.LFE75:
 12396              		.size	bma2x2_rst_intr, .-bma2x2_rst_intr
 12397              		.section	.text.bma2x2_get_latch_intr,"ax",%progbits
 12398              		.align	2
 12399              		.global	bma2x2_get_latch_intr
 12400              		.code	16
 12401              		.thumb_func
 12402              		.type	bma2x2_get_latch_intr, %function
 12403              	bma2x2_get_latch_intr:
 12404              	.LFB76:
4913:bma2x2.c      **** /*!
4914:bma2x2.c      ****  *	@brief This API is used to get
4915:bma2x2.c      ****  *	the latch duration in the register 0x21 bit from 0 to 3
4916:bma2x2.c      ****  *
4917:bma2x2.c      ****  *	@param latch_intr_u8: The value of latch duration
4918:bma2x2.c      ****  *        latch_intr_u8 |  result
4919:bma2x2.c      ****  *       -----------------| ------------------
4920:bma2x2.c      ****  *               0x00     | BMA2x2_LATCH_DURN_NON_LATCH
4921:bma2x2.c      ****  *               0x01     | BMA2x2_LATCH_DURN_250MS
4922:bma2x2.c      ****  *               0x02     | BMA2x2_LATCH_DURN_500MS
4923:bma2x2.c      ****  *               0x03     | BMA2x2_LATCH_DURN_1S
4924:bma2x2.c      ****  *               0x04     | BMA2x2_LATCH_DURN_2S
4925:bma2x2.c      ****  *               0x05     | BMA2x2_LATCH_DURN_4S
4926:bma2x2.c      ****  *               0x06     | BMA2x2_LATCH_DURN_8S
4927:bma2x2.c      ****  *               0x07     | BMA2x2_LATCH_DURN_LATCH
4928:bma2x2.c      ****  *               0x08     | BMA2x2_LATCH_DURN_NON_LATCH1
4929:bma2x2.c      ****  *               0x09     | BMA2x2_LATCH_DURN_250US
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 308


4930:bma2x2.c      ****  *               0x0A     | BMA2x2_LATCH_DURN_500US
4931:bma2x2.c      ****  *               0x0B     | BMA2x2_LATCH_DURN_1MS
4932:bma2x2.c      ****  *               0x0C     | BMA2x2_LATCH_DURN_12_5MS
4933:bma2x2.c      ****  *               0x0D     | BMA2x2_LATCH_DURN_25MS
4934:bma2x2.c      ****  *               0x0E     | BMA2x2_LATCH_DURN_50MS
4935:bma2x2.c      ****  *               0x0F     | BMA2x2_LATCH_DURN_LATCH1
4936:bma2x2.c      ****  *
4937:bma2x2.c      ****  *
4938:bma2x2.c      ****  *
4939:bma2x2.c      ****  *	@return results of bus communication function
4940:bma2x2.c      ****  *	@retval 0 -> Success
4941:bma2x2.c      ****  *	@retval -1 -> Error
4942:bma2x2.c      ****  *
4943:bma2x2.c      ****  *
4944:bma2x2.c      ****  */
4945:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_latch_intr(u8 *latch_intr_u8)
4946:bma2x2.c      **** {
 12405              		.loc 1 4946 0
 12406              		.cfi_startproc
 12407              		@ args = 0, pretend = 0, frame = 16
 12408              		@ frame_needed = 1, uses_anonymous_args = 0
 12409 0000 B0B5     		push	{r4, r5, r7, lr}
 12410              		.cfi_def_cfa_offset 16
 12411              		.cfi_offset 4, -16
 12412              		.cfi_offset 5, -12
 12413              		.cfi_offset 7, -8
 12414              		.cfi_offset 14, -4
 12415 0002 84B0     		sub	sp, sp, #16
 12416              		.cfi_def_cfa_offset 32
 12417 0004 00AF     		add	r7, sp, #0
 12418              		.cfi_def_cfa_register 7
 12419 0006 7860     		str	r0, [r7, #4]
4947:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 12420              		.loc 1 4947 0
 12421 0008 0E23     		movs	r3, #14
 12422 000a FB18     		adds	r3, r7, r3
 12423 000c 0022     		movs	r2, #0
 12424 000e 1A70     		strb	r2, [r3]
4948:bma2x2.c      **** 	/*  Variable used to return value of
4949:bma2x2.c      **** 	communication routine*/
4950:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 12425              		.loc 1 4950 0
 12426 0010 0F23     		movs	r3, #15
 12427 0012 FB18     		adds	r3, r7, r3
 12428 0014 FF22     		movs	r2, #255
 12429 0016 1A70     		strb	r2, [r3]
4951:bma2x2.c      **** 
4952:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 12430              		.loc 1 4952 0
 12431 0018 124B     		ldr	r3, .L728
 12432 001a 1B68     		ldr	r3, [r3]
 12433 001c 002B     		cmp	r3, #0
 12434 001e 02D1     		bne	.L725
4953:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
4954:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 12435              		.loc 1 4954 0
 12436 0020 7F23     		movs	r3, #127
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 309


 12437 0022 5B42     		rsbs	r3, r3, #0
 12438 0024 1AE0     		b	.L727
 12439              	.L725:
4955:bma2x2.c      **** 		} else {
4956:bma2x2.c      **** 			/* read the latch duration */
4957:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 12440              		.loc 1 4957 0
 12441 0026 0F4B     		ldr	r3, .L728
 12442 0028 1B68     		ldr	r3, [r3]
 12443 002a DD68     		ldr	r5, [r3, #12]
 12444 002c 0D4B     		ldr	r3, .L728
 12445 002e 1B68     		ldr	r3, [r3]
 12446 0030 1879     		ldrb	r0, [r3, #4]
 12447 0032 0F23     		movs	r3, #15
 12448 0034 FC18     		adds	r4, r7, r3
 12449 0036 0E23     		movs	r3, #14
 12450 0038 FA18     		adds	r2, r7, r3
 12451 003a 0123     		movs	r3, #1
 12452 003c 2121     		movs	r1, #33
 12453 003e A847     		blx	r5
 12454 0040 0300     		movs	r3, r0
 12455 0042 2370     		strb	r3, [r4]
4958:bma2x2.c      **** 			(p_bma2x2->dev_addr, BMA2x2_LATCH_INTR_REG,
4959:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
4960:bma2x2.c      **** 			*latch_intr_u8 = BMA2x2_GET_BITSLICE
 12456              		.loc 1 4960 0
 12457 0044 0E23     		movs	r3, #14
 12458 0046 FB18     		adds	r3, r7, r3
 12459 0048 1B78     		ldrb	r3, [r3]
 12460 004a 0F22     		movs	r2, #15
 12461 004c 1340     		ands	r3, r2
 12462 004e DAB2     		uxtb	r2, r3
 12463 0050 7B68     		ldr	r3, [r7, #4]
 12464 0052 1A70     		strb	r2, [r3]
4961:bma2x2.c      **** 			(data_u8, BMA2x2_LATCH_INTR);
4962:bma2x2.c      **** 		}
4963:bma2x2.c      **** 	return com_rslt;
 12465              		.loc 1 4963 0
 12466 0054 0F23     		movs	r3, #15
 12467 0056 FB18     		adds	r3, r7, r3
 12468 0058 1B78     		ldrb	r3, [r3]
 12469 005a 5BB2     		sxtb	r3, r3
 12470              	.L727:
4964:bma2x2.c      **** }
 12471              		.loc 1 4964 0 discriminator 1
 12472 005c 1800     		movs	r0, r3
 12473 005e BD46     		mov	sp, r7
 12474 0060 04B0     		add	sp, sp, #16
 12475              		@ sp needed
 12476 0062 B0BD     		pop	{r4, r5, r7, pc}
 12477              	.L729:
 12478              		.align	2
 12479              	.L728:
 12480 0064 00000000 		.word	p_bma2x2
 12481              		.cfi_endproc
 12482              	.LFE76:
 12483              		.size	bma2x2_get_latch_intr, .-bma2x2_get_latch_intr
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 310


 12484              		.section	.text.bma2x2_set_latch_intr,"ax",%progbits
 12485              		.align	2
 12486              		.global	bma2x2_set_latch_intr
 12487              		.code	16
 12488              		.thumb_func
 12489              		.type	bma2x2_set_latch_intr, %function
 12490              	bma2x2_set_latch_intr:
 12491              	.LFB77:
4965:bma2x2.c      **** /*!
4966:bma2x2.c      ****  *	@brief This API is used to set
4967:bma2x2.c      ****  *	the latch duration in the register 0x21 bit from 0 to 3
4968:bma2x2.c      ****  *
4969:bma2x2.c      ****  *	@param latch_intr_u8: The value of latch duration
4970:bma2x2.c      ****  *        latch_intr_u8 |  result
4971:bma2x2.c      ****  *       -----------------| ------------------
4972:bma2x2.c      ****  *               0x00     | BMA2x2_LATCH_DURN_NON_LATCH
4973:bma2x2.c      ****  *               0x01     | BMA2x2_LATCH_DURN_250MS
4974:bma2x2.c      ****  *               0x02     | BMA2x2_LATCH_DURN_500MS
4975:bma2x2.c      ****  *               0x03     | BMA2x2_LATCH_DURN_1S
4976:bma2x2.c      ****  *               0x04     | BMA2x2_LATCH_DURN_2S
4977:bma2x2.c      ****  *               0x05     | BMA2x2_LATCH_DURN_4S
4978:bma2x2.c      ****  *               0x06     | BMA2x2_LATCH_DURN_8S
4979:bma2x2.c      ****  *               0x07     | BMA2x2_LATCH_DURN_LATCH
4980:bma2x2.c      ****  *               0x08     | BMA2x2_LATCH_DURN_NON_LATCH1
4981:bma2x2.c      ****  *               0x09     | BMA2x2_LATCH_DURN_250US
4982:bma2x2.c      ****  *               0x0A     | BMA2x2_LATCH_DURN_500US
4983:bma2x2.c      ****  *               0x0B     | BMA2x2_LATCH_DURN_1MS
4984:bma2x2.c      ****  *               0x0C     | BMA2x2_LATCH_DURN_12_5MS
4985:bma2x2.c      ****  *               0x0D     | BMA2x2_LATCH_DURN_25MS
4986:bma2x2.c      ****  *               0x0E     | BMA2x2_LATCH_DURN_50MS
4987:bma2x2.c      ****  *               0x0F     | BMA2x2_LATCH_DURN_LATCH1
4988:bma2x2.c      ****  *
4989:bma2x2.c      ****  *
4990:bma2x2.c      ****  *
4991:bma2x2.c      ****  *	@return results of bus communication function
4992:bma2x2.c      ****  *	@retval 0 -> Success
4993:bma2x2.c      ****  *	@retval -1 -> Error
4994:bma2x2.c      ****  *
4995:bma2x2.c      ****  *
4996:bma2x2.c      ****  */
4997:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_latch_intr(u8 latch_intr_u8)
4998:bma2x2.c      **** {
 12492              		.loc 1 4998 0
 12493              		.cfi_startproc
 12494              		@ args = 0, pretend = 0, frame = 16
 12495              		@ frame_needed = 1, uses_anonymous_args = 0
 12496 0000 B0B5     		push	{r4, r5, r7, lr}
 12497              		.cfi_def_cfa_offset 16
 12498              		.cfi_offset 4, -16
 12499              		.cfi_offset 5, -12
 12500              		.cfi_offset 7, -8
 12501              		.cfi_offset 14, -4
 12502 0002 84B0     		sub	sp, sp, #16
 12503              		.cfi_def_cfa_offset 32
 12504 0004 00AF     		add	r7, sp, #0
 12505              		.cfi_def_cfa_register 7
 12506 0006 0200     		movs	r2, r0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 311


 12507 0008 FB1D     		adds	r3, r7, #7
 12508 000a 1A70     		strb	r2, [r3]
4999:bma2x2.c      **** u8 data_u8 = BMA2x2_INIT_VALUE;
 12509              		.loc 1 4999 0
 12510 000c 0D23     		movs	r3, #13
 12511 000e FB18     		adds	r3, r7, r3
 12512 0010 0022     		movs	r2, #0
 12513 0012 1A70     		strb	r2, [r3]
5000:bma2x2.c      **** /*  Variable used to return value of
5001:bma2x2.c      **** communication routine*/
5002:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 12514              		.loc 1 5002 0
 12515 0014 0F23     		movs	r3, #15
 12516 0016 FB18     		adds	r3, r7, r3
 12517 0018 FF22     		movs	r2, #255
 12518 001a 1A70     		strb	r2, [r3]
5003:bma2x2.c      **** u8 latch_durn_u8 = BMA2x2_INIT_VALUE;
 12519              		.loc 1 5003 0
 12520 001c 0E23     		movs	r3, #14
 12521 001e FB18     		adds	r3, r7, r3
 12522 0020 0022     		movs	r2, #0
 12523 0022 1A70     		strb	r2, [r3]
5004:bma2x2.c      **** if (p_bma2x2 == BMA2x2_NULL)  {
 12524              		.loc 1 5004 0
 12525 0024 534B     		ldr	r3, .L756
 12526 0026 1B68     		ldr	r3, [r3]
 12527 0028 002B     		cmp	r3, #0
 12528 002a 02D1     		bne	.L731
5005:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
5006:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 12529              		.loc 1 5006 0
 12530 002c 7F23     		movs	r3, #127
 12531 002e 5B42     		rsbs	r3, r3, #0
 12532 0030 9BE0     		b	.L754
 12533              	.L731:
5007:bma2x2.c      **** 		} else  {
5008:bma2x2.c      **** 		if (latch_intr_u8 < BMA2x2_ACCEL_BW_MAX_RANGE) {
 12534              		.loc 1 5008 0
 12535 0032 FB1D     		adds	r3, r7, #7
 12536 0034 1B78     		ldrb	r3, [r3]
 12537 0036 0F2B     		cmp	r3, #15
 12538 0038 00D9     		bls	.LCB11693
 12539 003a 8EE0     		b	.L733	@long jump
 12540              	.LCB11693:
5009:bma2x2.c      **** 			switch (latch_intr_u8) {
 12541              		.loc 1 5009 0
 12542 003c FB1D     		adds	r3, r7, #7
 12543 003e 1B78     		ldrb	r3, [r3]
 12544 0040 0F2B     		cmp	r3, #15
 12545 0042 54D8     		bhi	.L755
 12546 0044 9A00     		lsls	r2, r3, #2
 12547 0046 4C4B     		ldr	r3, .L756+4
 12548 0048 D318     		adds	r3, r2, r3
 12549 004a 1B68     		ldr	r3, [r3]
 12550 004c 9F46     		mov	pc, r3
 12551              		.section	.rodata
 12552              		.align	2
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 312


 12553              	.L736:
 12554 0110 4E000000 		.word	.L735
 12555 0114 58000000 		.word	.L737
 12556 0118 62000000 		.word	.L738
 12557 011c 6C000000 		.word	.L739
 12558 0120 76000000 		.word	.L740
 12559 0124 80000000 		.word	.L741
 12560 0128 8A000000 		.word	.L742
 12561 012c 94000000 		.word	.L743
 12562 0130 9E000000 		.word	.L744
 12563 0134 A8000000 		.word	.L745
 12564 0138 B2000000 		.word	.L746
 12565 013c BC000000 		.word	.L747
 12566 0140 C6000000 		.word	.L748
 12567 0144 D0000000 		.word	.L749
 12568 0148 DA000000 		.word	.L750
 12569 014c E4000000 		.word	.L751
 12570              		.section	.text.bma2x2_set_latch_intr
 12571              	.L735:
5010:bma2x2.c      **** 			case BMA2x2_LATCH_DURN_NON_LATCH:
5011:bma2x2.c      **** 				latch_durn_u8 = BMA2x2_LATCH_DURN_NON_LATCH;
 12572              		.loc 1 5011 0
 12573 004e 0E23     		movs	r3, #14
 12574 0050 FB18     		adds	r3, r7, r3
 12575 0052 0022     		movs	r2, #0
 12576 0054 1A70     		strb	r2, [r3]
5012:bma2x2.c      **** 
5013:bma2x2.c      **** 				/*  NON LATCH   */
5014:bma2x2.c      **** 			break;
 12577              		.loc 1 5014 0
 12578 0056 4BE0     		b	.L752
 12579              	.L737:
5015:bma2x2.c      **** 			case BMA2x2_LATCH_DURN_250MS:
5016:bma2x2.c      **** 				latch_durn_u8 = BMA2x2_LATCH_DURN_250MS;
 12580              		.loc 1 5016 0
 12581 0058 0E23     		movs	r3, #14
 12582 005a FB18     		adds	r3, r7, r3
 12583 005c 0122     		movs	r2, #1
 12584 005e 1A70     		strb	r2, [r3]
5017:bma2x2.c      **** 
5018:bma2x2.c      **** 				/*  250 MS  */
5019:bma2x2.c      **** 			break;
 12585              		.loc 1 5019 0
 12586 0060 46E0     		b	.L752
 12587              	.L738:
5020:bma2x2.c      **** 			case BMA2x2_LATCH_DURN_500MS:
5021:bma2x2.c      **** 				latch_durn_u8 = BMA2x2_LATCH_DURN_500MS;
 12588              		.loc 1 5021 0
 12589 0062 0E23     		movs	r3, #14
 12590 0064 FB18     		adds	r3, r7, r3
 12591 0066 0222     		movs	r2, #2
 12592 0068 1A70     		strb	r2, [r3]
5022:bma2x2.c      **** 
5023:bma2x2.c      **** 				/*  500 MS  */
5024:bma2x2.c      **** 			break;
 12593              		.loc 1 5024 0
 12594 006a 41E0     		b	.L752
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 313


 12595              	.L739:
5025:bma2x2.c      **** 			case BMA2x2_LATCH_DURN_1S:
5026:bma2x2.c      **** 				latch_durn_u8 = BMA2x2_LATCH_DURN_1S;
 12596              		.loc 1 5026 0
 12597 006c 0E23     		movs	r3, #14
 12598 006e FB18     		adds	r3, r7, r3
 12599 0070 0322     		movs	r2, #3
 12600 0072 1A70     		strb	r2, [r3]
5027:bma2x2.c      **** 
5028:bma2x2.c      **** 				/*  1 S   */
5029:bma2x2.c      **** 			break;
 12601              		.loc 1 5029 0
 12602 0074 3CE0     		b	.L752
 12603              	.L740:
5030:bma2x2.c      **** 			case BMA2x2_LATCH_DURN_2S:
5031:bma2x2.c      **** 				latch_durn_u8 = BMA2x2_LATCH_DURN_2S;
 12604              		.loc 1 5031 0
 12605 0076 0E23     		movs	r3, #14
 12606 0078 FB18     		adds	r3, r7, r3
 12607 007a 0422     		movs	r2, #4
 12608 007c 1A70     		strb	r2, [r3]
5032:bma2x2.c      **** 
5033:bma2x2.c      **** 				/*  2 S  */
5034:bma2x2.c      **** 			break;
 12609              		.loc 1 5034 0
 12610 007e 37E0     		b	.L752
 12611              	.L741:
5035:bma2x2.c      **** 			case BMA2x2_LATCH_DURN_4S:
5036:bma2x2.c      **** 				latch_durn_u8 = BMA2x2_LATCH_DURN_4S;
 12612              		.loc 1 5036 0
 12613 0080 0E23     		movs	r3, #14
 12614 0082 FB18     		adds	r3, r7, r3
 12615 0084 0522     		movs	r2, #5
 12616 0086 1A70     		strb	r2, [r3]
5037:bma2x2.c      **** 
5038:bma2x2.c      **** 				/*  4 S  */
5039:bma2x2.c      **** 			break;
 12617              		.loc 1 5039 0
 12618 0088 32E0     		b	.L752
 12619              	.L742:
5040:bma2x2.c      **** 			case BMA2x2_LATCH_DURN_8S:
5041:bma2x2.c      **** 				latch_durn_u8 = BMA2x2_LATCH_DURN_8S;
 12620              		.loc 1 5041 0
 12621 008a 0E23     		movs	r3, #14
 12622 008c FB18     		adds	r3, r7, r3
 12623 008e 0622     		movs	r2, #6
 12624 0090 1A70     		strb	r2, [r3]
5042:bma2x2.c      **** 
5043:bma2x2.c      **** 				/*  8 S  */
5044:bma2x2.c      **** 			break;
 12625              		.loc 1 5044 0
 12626 0092 2DE0     		b	.L752
 12627              	.L743:
5045:bma2x2.c      **** 			case BMA2x2_LATCH_DURN_LATCH:
5046:bma2x2.c      **** 				latch_durn_u8 = BMA2x2_LATCH_DURN_LATCH;
 12628              		.loc 1 5046 0
 12629 0094 0E23     		movs	r3, #14
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 314


 12630 0096 FB18     		adds	r3, r7, r3
 12631 0098 0722     		movs	r2, #7
 12632 009a 1A70     		strb	r2, [r3]
5047:bma2x2.c      **** 
5048:bma2x2.c      **** 				/*  LATCH  */
5049:bma2x2.c      **** 			break;
 12633              		.loc 1 5049 0
 12634 009c 28E0     		b	.L752
 12635              	.L744:
5050:bma2x2.c      **** 			case BMA2x2_LATCH_DURN_NON_LATCH1:
5051:bma2x2.c      **** 				latch_durn_u8 = BMA2x2_LATCH_DURN_NON_LATCH1;
 12636              		.loc 1 5051 0
 12637 009e 0E23     		movs	r3, #14
 12638 00a0 FB18     		adds	r3, r7, r3
 12639 00a2 0822     		movs	r2, #8
 12640 00a4 1A70     		strb	r2, [r3]
5052:bma2x2.c      **** 
5053:bma2x2.c      **** 				/*  NON LATCH1  */
5054:bma2x2.c      **** 			break;
 12641              		.loc 1 5054 0
 12642 00a6 23E0     		b	.L752
 12643              	.L745:
5055:bma2x2.c      **** 			case BMA2x2_LATCH_DURN_250US:
5056:bma2x2.c      **** 				latch_durn_u8 = BMA2x2_LATCH_DURN_250US;
 12644              		.loc 1 5056 0
 12645 00a8 0E23     		movs	r3, #14
 12646 00aa FB18     		adds	r3, r7, r3
 12647 00ac 0922     		movs	r2, #9
 12648 00ae 1A70     		strb	r2, [r3]
5057:bma2x2.c      **** 
5058:bma2x2.c      **** 				/*  250 US   */
5059:bma2x2.c      **** 			break;
 12649              		.loc 1 5059 0
 12650 00b0 1EE0     		b	.L752
 12651              	.L746:
5060:bma2x2.c      **** 			case BMA2x2_LATCH_DURN_500US:
5061:bma2x2.c      **** 				latch_durn_u8 = BMA2x2_LATCH_DURN_500US;
 12652              		.loc 1 5061 0
 12653 00b2 0E23     		movs	r3, #14
 12654 00b4 FB18     		adds	r3, r7, r3
 12655 00b6 0A22     		movs	r2, #10
 12656 00b8 1A70     		strb	r2, [r3]
5062:bma2x2.c      **** 
5063:bma2x2.c      **** 				/*  500 US   */
5064:bma2x2.c      **** 			break;
 12657              		.loc 1 5064 0
 12658 00ba 19E0     		b	.L752
 12659              	.L747:
5065:bma2x2.c      **** 			case BMA2x2_LATCH_DURN_1MS:
5066:bma2x2.c      **** 				latch_durn_u8 = BMA2x2_LATCH_DURN_1MS;
 12660              		.loc 1 5066 0
 12661 00bc 0E23     		movs	r3, #14
 12662 00be FB18     		adds	r3, r7, r3
 12663 00c0 0B22     		movs	r2, #11
 12664 00c2 1A70     		strb	r2, [r3]
5067:bma2x2.c      **** 
5068:bma2x2.c      **** 				/*  1 MS   */
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 315


5069:bma2x2.c      **** 			break;
 12665              		.loc 1 5069 0
 12666 00c4 14E0     		b	.L752
 12667              	.L748:
5070:bma2x2.c      **** 			case BMA2x2_LATCH_DURN_12_5MS:
5071:bma2x2.c      **** 				latch_durn_u8 = BMA2x2_LATCH_DURN_12_5MS;
 12668              		.loc 1 5071 0
 12669 00c6 0E23     		movs	r3, #14
 12670 00c8 FB18     		adds	r3, r7, r3
 12671 00ca 0C22     		movs	r2, #12
 12672 00cc 1A70     		strb	r2, [r3]
5072:bma2x2.c      **** 
5073:bma2x2.c      **** 				/*  12.5 MS   */
5074:bma2x2.c      **** 			break;
 12673              		.loc 1 5074 0
 12674 00ce 0FE0     		b	.L752
 12675              	.L749:
5075:bma2x2.c      **** 			case BMA2x2_LATCH_DURN_25MS:
5076:bma2x2.c      **** 				latch_durn_u8 = BMA2x2_LATCH_DURN_25MS;
 12676              		.loc 1 5076 0
 12677 00d0 0E23     		movs	r3, #14
 12678 00d2 FB18     		adds	r3, r7, r3
 12679 00d4 0D22     		movs	r2, #13
 12680 00d6 1A70     		strb	r2, [r3]
5077:bma2x2.c      **** 
5078:bma2x2.c      **** 				/*  25 MS   */
5079:bma2x2.c      **** 			break;
 12681              		.loc 1 5079 0
 12682 00d8 0AE0     		b	.L752
 12683              	.L750:
5080:bma2x2.c      **** 			case BMA2x2_LATCH_DURN_50MS:
5081:bma2x2.c      **** 				latch_durn_u8 = BMA2x2_LATCH_DURN_50MS;
 12684              		.loc 1 5081 0
 12685 00da 0E23     		movs	r3, #14
 12686 00dc FB18     		adds	r3, r7, r3
 12687 00de 0E22     		movs	r2, #14
 12688 00e0 1A70     		strb	r2, [r3]
5082:bma2x2.c      **** 
5083:bma2x2.c      **** 				/*  50 MS   */
5084:bma2x2.c      **** 			break;
 12689              		.loc 1 5084 0
 12690 00e2 05E0     		b	.L752
 12691              	.L751:
5085:bma2x2.c      **** 			case BMA2x2_LATCH_DURN_LATCH1:
5086:bma2x2.c      **** 				latch_durn_u8 = BMA2x2_LATCH_DURN_LATCH1;
 12692              		.loc 1 5086 0
 12693 00e4 0E23     		movs	r3, #14
 12694 00e6 FB18     		adds	r3, r7, r3
 12695 00e8 0F22     		movs	r2, #15
 12696 00ea 1A70     		strb	r2, [r3]
5087:bma2x2.c      **** 
5088:bma2x2.c      **** 				/*  LATCH1   */
5089:bma2x2.c      **** 			break;
 12697              		.loc 1 5089 0
 12698 00ec 00E0     		b	.L752
 12699              	.L755:
5090:bma2x2.c      **** 			default:
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 316


5091:bma2x2.c      **** 			break;
 12700              		.loc 1 5091 0
 12701 00ee C046     		nop
 12702              	.L752:
5092:bma2x2.c      **** 			}
5093:bma2x2.c      **** 			/* write the latch duration */
5094:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 12703              		.loc 1 5094 0
 12704 00f0 204B     		ldr	r3, .L756
 12705 00f2 1B68     		ldr	r3, [r3]
 12706 00f4 DD68     		ldr	r5, [r3, #12]
 12707 00f6 1F4B     		ldr	r3, .L756
 12708 00f8 1B68     		ldr	r3, [r3]
 12709 00fa 1879     		ldrb	r0, [r3, #4]
 12710 00fc 0F23     		movs	r3, #15
 12711 00fe FC18     		adds	r4, r7, r3
 12712 0100 0D23     		movs	r3, #13
 12713 0102 FA18     		adds	r2, r7, r3
 12714 0104 0123     		movs	r3, #1
 12715 0106 2121     		movs	r1, #33
 12716 0108 A847     		blx	r5
 12717 010a 0300     		movs	r3, r0
 12718 010c 2370     		strb	r3, [r4]
5095:bma2x2.c      **** 			(p_bma2x2->dev_addr, BMA2x2_LATCH_INTR_REG,
5096:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
5097:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 12719              		.loc 1 5097 0
 12720 010e 0D23     		movs	r3, #13
 12721 0110 FB18     		adds	r3, r7, r3
 12722 0112 1B78     		ldrb	r3, [r3]
 12723 0114 5BB2     		sxtb	r3, r3
 12724 0116 0F22     		movs	r2, #15
 12725 0118 9343     		bics	r3, r2
 12726 011a 5AB2     		sxtb	r2, r3
 12727 011c 0E23     		movs	r3, #14
 12728 011e FB18     		adds	r3, r7, r3
 12729 0120 1B78     		ldrb	r3, [r3]
 12730 0122 5BB2     		sxtb	r3, r3
 12731 0124 0F21     		movs	r1, #15
 12732 0126 0B40     		ands	r3, r1
 12733 0128 5BB2     		sxtb	r3, r3
 12734 012a 1343     		orrs	r3, r2
 12735 012c 5BB2     		sxtb	r3, r3
 12736 012e DAB2     		uxtb	r2, r3
 12737 0130 0D23     		movs	r3, #13
 12738 0132 FB18     		adds	r3, r7, r3
 12739 0134 1A70     		strb	r2, [r3]
5098:bma2x2.c      **** 			(data_u8, BMA2x2_LATCH_INTR, latch_durn_u8);
5099:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(BMA2x2_LATCH_INTR_REG,
 12740              		.loc 1 5099 0
 12741 0136 0D23     		movs	r3, #13
 12742 0138 FB18     		adds	r3, r7, r3
 12743 013a 0122     		movs	r2, #1
 12744 013c 1900     		movs	r1, r3
 12745 013e 2120     		movs	r0, #33
 12746 0140 FFF7FEFF 		bl	bma2x2_write_reg
 12747 0144 0300     		movs	r3, r0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 317


 12748 0146 DAB2     		uxtb	r2, r3
 12749 0148 0F23     		movs	r3, #15
 12750 014a FB18     		adds	r3, r7, r3
 12751 014c 1B78     		ldrb	r3, [r3]
 12752 014e D318     		adds	r3, r2, r3
 12753 0150 DAB2     		uxtb	r2, r3
 12754 0152 0F23     		movs	r3, #15
 12755 0154 FB18     		adds	r3, r7, r3
 12756 0156 1A70     		strb	r2, [r3]
 12757 0158 03E0     		b	.L753
 12758              	.L733:
5100:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
5101:bma2x2.c      **** 		} else {
5102:bma2x2.c      **** 		com_rslt = E_OUT_OF_RANGE;
 12759              		.loc 1 5102 0
 12760 015a 0F23     		movs	r3, #15
 12761 015c FB18     		adds	r3, r7, r3
 12762 015e FE22     		movs	r2, #254
 12763 0160 1A70     		strb	r2, [r3]
 12764              	.L753:
5103:bma2x2.c      **** 		}
5104:bma2x2.c      **** 	}
5105:bma2x2.c      **** 	return com_rslt;
 12765              		.loc 1 5105 0
 12766 0162 0F23     		movs	r3, #15
 12767 0164 FB18     		adds	r3, r7, r3
 12768 0166 1B78     		ldrb	r3, [r3]
 12769 0168 5BB2     		sxtb	r3, r3
 12770              	.L754:
5106:bma2x2.c      **** }
 12771              		.loc 1 5106 0 discriminator 1
 12772 016a 1800     		movs	r0, r3
 12773 016c BD46     		mov	sp, r7
 12774 016e 04B0     		add	sp, sp, #16
 12775              		@ sp needed
 12776 0170 B0BD     		pop	{r4, r5, r7, pc}
 12777              	.L757:
 12778 0172 C046     		.align	2
 12779              	.L756:
 12780 0174 00000000 		.word	p_bma2x2
 12781 0178 10010000 		.word	.L736
 12782              		.cfi_endproc
 12783              	.LFE77:
 12784              		.size	bma2x2_set_latch_intr, .-bma2x2_set_latch_intr
 12785              		.section	.text.bma2x2_get_durn,"ax",%progbits
 12786              		.align	2
 12787              		.global	bma2x2_get_durn
 12788              		.code	16
 12789              		.thumb_func
 12790              		.type	bma2x2_get_durn, %function
 12791              	bma2x2_get_durn:
 12792              	.LFB78:
5107:bma2x2.c      **** /*!
5108:bma2x2.c      ****  *	@brief This API is used to get the duration of
5109:bma2x2.c      ****  *	Low, High, Slope and slow no motion interrupts in the registers
5110:bma2x2.c      ****  *	@note LOW_DURN		-> register 0x22 bit form 0 to 7
5111:bma2x2.c      ****  *	@note HIGH_DURN		-> register 0x25 bit form 0 to 7
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 318


5112:bma2x2.c      ****  *	@note SLOPE_DURN		-> register 0x27 bit form 0 to 1
5113:bma2x2.c      ****  *	@note SLO_NO_MOT_DURN -> register 0x27 bit form 2 to 7
5114:bma2x2.c      ****  *
5115:bma2x2.c      ****  *  @param channel_u8: The value of duration select
5116:bma2x2.c      ****  *     channel_u8   | result
5117:bma2x2.c      ****  *   -----------------| ------------------
5118:bma2x2.c      ****  *               0    | BMA2x2_ACCEL_LOW_DURN
5119:bma2x2.c      ****  *               1    | BMA2x2_ACCEL_HIGH_DURN
5120:bma2x2.c      ****  *               2    | BMA2x2_ACCEL_SLOPE_DURN
5121:bma2x2.c      ****  *               3    | BMA2x2_ACCEL_SLOW_NO_MOTION_DURN
5122:bma2x2.c      ****  *
5123:bma2x2.c      ****  *	@param durn_u8: The value of duration
5124:bma2x2.c      ****  *
5125:bma2x2.c      ****  *	@note :
5126:bma2x2.c      ****  *     Duration           |    result
5127:bma2x2.c      ****  * -----------------------| ------------------
5128:bma2x2.c      ****  * BMA2x2_ACCEL_LOW_DURN  | Low-g interrupt trigger
5129:bma2x2.c      ****  *         -              | delay according to([durn_u8 +1]*2)ms
5130:bma2x2.c      ****  *         -              | range from 2ms to 512ms. default is 20ms
5131:bma2x2.c      ****  * BMA2x2_ACCEL_HIGH_DURN | high-g interrupt trigger
5132:bma2x2.c      ****  *         -              | delay according to([durn_u8 +1]*2)ms
5133:bma2x2.c      ****  *         -              | range from 2ms to 512ms. default is 32ms
5134:bma2x2.c      ****  * BMA2x2_ACCEL_SLOPE_DURN| slope interrupt trigger
5135:bma2x2.c      ****  *         -              | if[durn_u8<1:0>+1] consecutive data points
5136:bma2x2.c      ****  *         -              | are above the slope interrupt threshold
5137:bma2x2.c      ****  * SLO_NO_MOT_DURN        | Refer data sheet for clear information
5138:bma2x2.c      ****  *
5139:bma2x2.c      ****  *
5140:bma2x2.c      ****  *	@return results of bus communication function
5141:bma2x2.c      ****  *	@retval 0 -> Success
5142:bma2x2.c      ****  *	@retval -1 -> Error
5143:bma2x2.c      ****  *
5144:bma2x2.c      ****  *
5145:bma2x2.c      ****  */
5146:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_durn(u8 channel_u8,
5147:bma2x2.c      **** u8 *durn_u8)
5148:bma2x2.c      **** {
 12793              		.loc 1 5148 0
 12794              		.cfi_startproc
 12795              		@ args = 0, pretend = 0, frame = 16
 12796              		@ frame_needed = 1, uses_anonymous_args = 0
 12797 0000 B0B5     		push	{r4, r5, r7, lr}
 12798              		.cfi_def_cfa_offset 16
 12799              		.cfi_offset 4, -16
 12800              		.cfi_offset 5, -12
 12801              		.cfi_offset 7, -8
 12802              		.cfi_offset 14, -4
 12803 0002 84B0     		sub	sp, sp, #16
 12804              		.cfi_def_cfa_offset 32
 12805 0004 00AF     		add	r7, sp, #0
 12806              		.cfi_def_cfa_register 7
 12807 0006 0200     		movs	r2, r0
 12808 0008 3960     		str	r1, [r7]
 12809 000a FB1D     		adds	r3, r7, #7
 12810 000c 1A70     		strb	r2, [r3]
5149:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 12811              		.loc 1 5149 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 319


 12812 000e 0E23     		movs	r3, #14
 12813 0010 FB18     		adds	r3, r7, r3
 12814 0012 0022     		movs	r2, #0
 12815 0014 1A70     		strb	r2, [r3]
5150:bma2x2.c      **** 	/*  Variable used to return value of
5151:bma2x2.c      **** 	communication routine*/
5152:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 12816              		.loc 1 5152 0
 12817 0016 0F23     		movs	r3, #15
 12818 0018 FB18     		adds	r3, r7, r3
 12819 001a FF22     		movs	r2, #255
 12820 001c 1A70     		strb	r2, [r3]
5153:bma2x2.c      **** 
5154:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 12821              		.loc 1 5154 0
 12822 001e 3D4B     		ldr	r3, .L769
 12823 0020 1B68     		ldr	r3, [r3]
 12824 0022 002B     		cmp	r3, #0
 12825 0024 02D1     		bne	.L759
5155:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
5156:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 12826              		.loc 1 5156 0
 12827 0026 7F23     		movs	r3, #127
 12828 0028 5B42     		rsbs	r3, r3, #0
 12829 002a 6EE0     		b	.L768
 12830              	.L759:
5157:bma2x2.c      **** 		} else {
5158:bma2x2.c      **** 		/* write the duration data */
5159:bma2x2.c      **** 		switch (channel_u8) {
 12831              		.loc 1 5159 0
 12832 002c FB1D     		adds	r3, r7, #7
 12833 002e 1B78     		ldrb	r3, [r3]
 12834 0030 012B     		cmp	r3, #1
 12835 0032 1DD0     		beq	.L762
 12836 0034 02DC     		bgt	.L763
 12837 0036 002B     		cmp	r3, #0
 12838 0038 05D0     		beq	.L764
 12839 003a 5DE0     		b	.L761
 12840              	.L763:
 12841 003c 022B     		cmp	r3, #2
 12842 003e 2CD0     		beq	.L765
 12843 0040 032B     		cmp	r3, #3
 12844 0042 42D0     		beq	.L766
 12845 0044 58E0     		b	.L761
 12846              	.L764:
5160:bma2x2.c      **** 		case BMA2x2_LOW_DURN:
5161:bma2x2.c      **** 			/*LOW DURATION*/
5162:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 12847              		.loc 1 5162 0
 12848 0046 334B     		ldr	r3, .L769
 12849 0048 1B68     		ldr	r3, [r3]
 12850 004a DD68     		ldr	r5, [r3, #12]
 12851 004c 314B     		ldr	r3, .L769
 12852 004e 1B68     		ldr	r3, [r3]
 12853 0050 1879     		ldrb	r0, [r3, #4]
 12854 0052 0F23     		movs	r3, #15
 12855 0054 FC18     		adds	r4, r7, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 320


 12856 0056 0E23     		movs	r3, #14
 12857 0058 FA18     		adds	r2, r7, r3
 12858 005a 0123     		movs	r3, #1
 12859 005c 2221     		movs	r1, #34
 12860 005e A847     		blx	r5
 12861 0060 0300     		movs	r3, r0
 12862 0062 2370     		strb	r3, [r4]
5163:bma2x2.c      **** 			(p_bma2x2->dev_addr, BMA2x2_LOW_DURN_ADDR,
5164:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
5165:bma2x2.c      **** 			*durn_u8 = data_u8;
 12863              		.loc 1 5165 0
 12864 0064 0E23     		movs	r3, #14
 12865 0066 FB18     		adds	r3, r7, r3
 12866 0068 1A78     		ldrb	r2, [r3]
 12867 006a 3B68     		ldr	r3, [r7]
 12868 006c 1A70     		strb	r2, [r3]
5166:bma2x2.c      **** 		break;
 12869              		.loc 1 5166 0
 12870 006e 48E0     		b	.L767
 12871              	.L762:
5167:bma2x2.c      **** 		case BMA2x2_HIGH_DURN:
5168:bma2x2.c      **** 			/*HIGH DURATION*/
5169:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 12872              		.loc 1 5169 0
 12873 0070 284B     		ldr	r3, .L769
 12874 0072 1B68     		ldr	r3, [r3]
 12875 0074 DD68     		ldr	r5, [r3, #12]
 12876 0076 274B     		ldr	r3, .L769
 12877 0078 1B68     		ldr	r3, [r3]
 12878 007a 1879     		ldrb	r0, [r3, #4]
 12879 007c 0F23     		movs	r3, #15
 12880 007e FC18     		adds	r4, r7, r3
 12881 0080 0E23     		movs	r3, #14
 12882 0082 FA18     		adds	r2, r7, r3
 12883 0084 0123     		movs	r3, #1
 12884 0086 2521     		movs	r1, #37
 12885 0088 A847     		blx	r5
 12886 008a 0300     		movs	r3, r0
 12887 008c 2370     		strb	r3, [r4]
5170:bma2x2.c      **** 			(p_bma2x2->dev_addr, BMA2x2_HIGH_DURN_ADDR,
5171:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
5172:bma2x2.c      **** 			*durn_u8 = data_u8;
 12888              		.loc 1 5172 0
 12889 008e 0E23     		movs	r3, #14
 12890 0090 FB18     		adds	r3, r7, r3
 12891 0092 1A78     		ldrb	r2, [r3]
 12892 0094 3B68     		ldr	r3, [r7]
 12893 0096 1A70     		strb	r2, [r3]
5173:bma2x2.c      **** 		break;
 12894              		.loc 1 5173 0
 12895 0098 33E0     		b	.L767
 12896              	.L765:
5174:bma2x2.c      **** 		case BMA2x2_SLOPE_DURN:
5175:bma2x2.c      **** 			/*SLOPE DURATION*/
5176:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 12897              		.loc 1 5176 0
 12898 009a 1E4B     		ldr	r3, .L769
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 321


 12899 009c 1B68     		ldr	r3, [r3]
 12900 009e DD68     		ldr	r5, [r3, #12]
 12901 00a0 1C4B     		ldr	r3, .L769
 12902 00a2 1B68     		ldr	r3, [r3]
 12903 00a4 1879     		ldrb	r0, [r3, #4]
 12904 00a6 0F23     		movs	r3, #15
 12905 00a8 FC18     		adds	r4, r7, r3
 12906 00aa 0E23     		movs	r3, #14
 12907 00ac FA18     		adds	r2, r7, r3
 12908 00ae 0123     		movs	r3, #1
 12909 00b0 2721     		movs	r1, #39
 12910 00b2 A847     		blx	r5
 12911 00b4 0300     		movs	r3, r0
 12912 00b6 2370     		strb	r3, [r4]
5177:bma2x2.c      **** 			(p_bma2x2->dev_addr, BMA2x2_SLOPE_DURN_REG,
5178:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
5179:bma2x2.c      **** 			*durn_u8 = BMA2x2_GET_BITSLICE
 12913              		.loc 1 5179 0
 12914 00b8 0E23     		movs	r3, #14
 12915 00ba FB18     		adds	r3, r7, r3
 12916 00bc 1B78     		ldrb	r3, [r3]
 12917 00be 0322     		movs	r2, #3
 12918 00c0 1340     		ands	r3, r2
 12919 00c2 DAB2     		uxtb	r2, r3
 12920 00c4 3B68     		ldr	r3, [r7]
 12921 00c6 1A70     		strb	r2, [r3]
5180:bma2x2.c      **** 			(data_u8, BMA2x2_SLOPE_DURN);
5181:bma2x2.c      **** 		break;
 12922              		.loc 1 5181 0
 12923 00c8 1BE0     		b	.L767
 12924              	.L766:
5182:bma2x2.c      **** 		case BMA2x2_SLOW_NO_MOTION_DURN:
5183:bma2x2.c      **** 			/*SLO NO MOT DURATION*/
5184:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 12925              		.loc 1 5184 0
 12926 00ca 124B     		ldr	r3, .L769
 12927 00cc 1B68     		ldr	r3, [r3]
 12928 00ce DD68     		ldr	r5, [r3, #12]
 12929 00d0 104B     		ldr	r3, .L769
 12930 00d2 1B68     		ldr	r3, [r3]
 12931 00d4 1879     		ldrb	r0, [r3, #4]
 12932 00d6 0F23     		movs	r3, #15
 12933 00d8 FC18     		adds	r4, r7, r3
 12934 00da 0E23     		movs	r3, #14
 12935 00dc FA18     		adds	r2, r7, r3
 12936 00de 0123     		movs	r3, #1
 12937 00e0 2721     		movs	r1, #39
 12938 00e2 A847     		blx	r5
 12939 00e4 0300     		movs	r3, r0
 12940 00e6 2370     		strb	r3, [r4]
5185:bma2x2.c      **** 			(p_bma2x2->dev_addr,
5186:bma2x2.c      **** 			BMA2x2_SLOW_NO_MOTION_DURN_REG,
5187:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
5188:bma2x2.c      **** 			*durn_u8 = BMA2x2_GET_BITSLICE
 12941              		.loc 1 5188 0
 12942 00e8 0E23     		movs	r3, #14
 12943 00ea FB18     		adds	r3, r7, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 322


 12944 00ec 1B78     		ldrb	r3, [r3]
 12945 00ee 9B08     		lsrs	r3, r3, #2
 12946 00f0 DAB2     		uxtb	r2, r3
 12947 00f2 3B68     		ldr	r3, [r7]
 12948 00f4 1A70     		strb	r2, [r3]
5189:bma2x2.c      **** 			(data_u8, BMA2x2_SLOW_NO_MOTION_DURN);
5190:bma2x2.c      **** 		break;
 12949              		.loc 1 5190 0
 12950 00f6 04E0     		b	.L767
 12951              	.L761:
5191:bma2x2.c      **** 		default:
5192:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 12952              		.loc 1 5192 0
 12953 00f8 0F23     		movs	r3, #15
 12954 00fa FB18     		adds	r3, r7, r3
 12955 00fc FE22     		movs	r2, #254
 12956 00fe 1A70     		strb	r2, [r3]
5193:bma2x2.c      **** 		break;
 12957              		.loc 1 5193 0
 12958 0100 C046     		nop
 12959              	.L767:
5194:bma2x2.c      **** 		}
5195:bma2x2.c      **** 	}
5196:bma2x2.c      **** 	return com_rslt;
 12960              		.loc 1 5196 0
 12961 0102 0F23     		movs	r3, #15
 12962 0104 FB18     		adds	r3, r7, r3
 12963 0106 1B78     		ldrb	r3, [r3]
 12964 0108 5BB2     		sxtb	r3, r3
 12965              	.L768:
5197:bma2x2.c      **** }
 12966              		.loc 1 5197 0 discriminator 1
 12967 010a 1800     		movs	r0, r3
 12968 010c BD46     		mov	sp, r7
 12969 010e 04B0     		add	sp, sp, #16
 12970              		@ sp needed
 12971 0110 B0BD     		pop	{r4, r5, r7, pc}
 12972              	.L770:
 12973 0112 C046     		.align	2
 12974              	.L769:
 12975 0114 00000000 		.word	p_bma2x2
 12976              		.cfi_endproc
 12977              	.LFE78:
 12978              		.size	bma2x2_get_durn, .-bma2x2_get_durn
 12979              		.section	.text.bma2x2_set_durn,"ax",%progbits
 12980              		.align	2
 12981              		.global	bma2x2_set_durn
 12982              		.code	16
 12983              		.thumb_func
 12984              		.type	bma2x2_set_durn, %function
 12985              	bma2x2_set_durn:
 12986              	.LFB79:
5198:bma2x2.c      **** /*!
5199:bma2x2.c      ****  *	@brief This API is used to set the duration of
5200:bma2x2.c      ****  *	Low, High, Slope and slow no motion interrupts in the registers
5201:bma2x2.c      ****  *	@note LOW_DURN		-> register 0x22 bit form 0 to 7
5202:bma2x2.c      ****  *	@note HIGH_DURN		-> register 0x25 bit form 0 to 7
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 323


5203:bma2x2.c      ****  *	@note SLOPE_DURN		-> register 0x27 bit form 0 to 1
5204:bma2x2.c      ****  *	@note SLO_NO_MOT_DURN -> register 0x27 bit form 2 to 7
5205:bma2x2.c      ****  *
5206:bma2x2.c      ****  *  @param channel_u8: The value of duration select
5207:bma2x2.c      ****  *     channel_u8   | result
5208:bma2x2.c      ****  *   -----------------| ------------------
5209:bma2x2.c      ****  *               0    | BMA2x2_ACCEL_LOW_DURN
5210:bma2x2.c      ****  *               1    | BMA2x2_ACCEL_HIGH_DURN
5211:bma2x2.c      ****  *               2    | BMA2x2_ACCEL_SLOPE_DURN
5212:bma2x2.c      ****  *               3    | BMA2x2_ACCEL_SLOW_NO_MOTION_DURN
5213:bma2x2.c      ****  *
5214:bma2x2.c      ****  *	@param durn_u8: The value of duration
5215:bma2x2.c      ****  *
5216:bma2x2.c      ****  *	@note :
5217:bma2x2.c      ****  *     Duration           |    result
5218:bma2x2.c      ****  * -----------------------| ------------------
5219:bma2x2.c      ****  * BMA2x2_ACCEL_LOW_DURN  | Low-g interrupt trigger
5220:bma2x2.c      ****  *         -              | delay according to([durn_u8 +1]*2)ms
5221:bma2x2.c      ****  *         -              | range from 2ms to 512ms. default is 20ms
5222:bma2x2.c      ****  * BMA2x2_ACCEL_HIGH_DURN | high-g interrupt trigger
5223:bma2x2.c      ****  *         -              | delay according to([durn_u8 +1]*2)ms
5224:bma2x2.c      ****  *         -              | range from 2ms to 512ms. default is 32ms
5225:bma2x2.c      ****  * BMA2x2_ACCEL_SLOPE_DURN| slope interrupt trigger
5226:bma2x2.c      ****  *         -              | if[durn_u8<1:0>+1] consecutive data points
5227:bma2x2.c      ****  *         -              | are above the slope interrupt threshold
5228:bma2x2.c      ****  * SLO_NO_MOT_DURN        | Refer data sheet for clear information
5229:bma2x2.c      ****  *
5230:bma2x2.c      ****  *
5231:bma2x2.c      ****  *	@return results of bus communication function
5232:bma2x2.c      ****  *	@retval 0 -> Success
5233:bma2x2.c      ****  *	@retval -1 -> Error
5234:bma2x2.c      ****  *
5235:bma2x2.c      ****  *
5236:bma2x2.c      ****  */
5237:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_durn(u8 channel_u8,
5238:bma2x2.c      **** u8 durn_u8)
5239:bma2x2.c      **** {
 12987              		.loc 1 5239 0
 12988              		.cfi_startproc
 12989              		@ args = 0, pretend = 0, frame = 16
 12990              		@ frame_needed = 1, uses_anonymous_args = 0
 12991 0000 B0B5     		push	{r4, r5, r7, lr}
 12992              		.cfi_def_cfa_offset 16
 12993              		.cfi_offset 4, -16
 12994              		.cfi_offset 5, -12
 12995              		.cfi_offset 7, -8
 12996              		.cfi_offset 14, -4
 12997 0002 84B0     		sub	sp, sp, #16
 12998              		.cfi_def_cfa_offset 32
 12999 0004 00AF     		add	r7, sp, #0
 13000              		.cfi_def_cfa_register 7
 13001 0006 0200     		movs	r2, r0
 13002 0008 FB1D     		adds	r3, r7, #7
 13003 000a 1A70     		strb	r2, [r3]
 13004 000c BB1D     		adds	r3, r7, #6
 13005 000e 0A1C     		adds	r2, r1, #0
 13006 0010 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 324


5240:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 13007              		.loc 1 5240 0
 13008 0012 0E23     		movs	r3, #14
 13009 0014 FB18     		adds	r3, r7, r3
 13010 0016 0022     		movs	r2, #0
 13011 0018 1A70     		strb	r2, [r3]
5241:bma2x2.c      **** 		/*  Variable used to return value of
5242:bma2x2.c      **** 	communication routine*/
5243:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 13012              		.loc 1 5243 0
 13013 001a 0F23     		movs	r3, #15
 13014 001c FB18     		adds	r3, r7, r3
 13015 001e FF22     		movs	r2, #255
 13016 0020 1A70     		strb	r2, [r3]
5244:bma2x2.c      **** 
5245:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL)  {
 13017              		.loc 1 5245 0
 13018 0022 544B     		ldr	r3, .L782
 13019 0024 1B68     		ldr	r3, [r3]
 13020 0026 002B     		cmp	r3, #0
 13021 0028 02D1     		bne	.L772
5246:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
5247:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 13022              		.loc 1 5247 0
 13023 002a 7F23     		movs	r3, #127
 13024 002c 5B42     		rsbs	r3, r3, #0
 13025 002e 9DE0     		b	.L781
 13026              	.L772:
5248:bma2x2.c      **** 		}  else  {
5249:bma2x2.c      **** 		/* write duration data */
5250:bma2x2.c      **** 		switch (channel_u8)   {
 13027              		.loc 1 5250 0
 13028 0030 FB1D     		adds	r3, r7, #7
 13029 0032 1B78     		ldrb	r3, [r3]
 13030 0034 012B     		cmp	r3, #1
 13031 0036 19D0     		beq	.L775
 13032 0038 02DC     		bgt	.L776
 13033 003a 002B     		cmp	r3, #0
 13034 003c 05D0     		beq	.L777
 13035 003e 8CE0     		b	.L774
 13036              	.L776:
 13037 0040 022B     		cmp	r3, #2
 13038 0042 24D0     		beq	.L778
 13039 0044 032B     		cmp	r3, #3
 13040 0046 56D0     		beq	.L779
 13041 0048 87E0     		b	.L774
 13042              	.L777:
5251:bma2x2.c      **** 		case BMA2x2_LOW_DURN:
5252:bma2x2.c      **** 			/*LOW DURATION*/
5253:bma2x2.c      **** 			data_u8 = durn_u8;
 13043              		.loc 1 5253 0
 13044 004a 0E23     		movs	r3, #14
 13045 004c FB18     		adds	r3, r7, r3
 13046 004e BA1D     		adds	r2, r7, #6
 13047 0050 1278     		ldrb	r2, [r2]
 13048 0052 1A70     		strb	r2, [r3]
5254:bma2x2.c      **** 			com_rslt = bma2x2_write_reg(BMA2x2_LOW_DURN_ADDR,
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 325


 13049              		.loc 1 5254 0
 13050 0054 0F23     		movs	r3, #15
 13051 0056 FC18     		adds	r4, r7, r3
 13052 0058 0E23     		movs	r3, #14
 13053 005a FB18     		adds	r3, r7, r3
 13054 005c 0122     		movs	r2, #1
 13055 005e 1900     		movs	r1, r3
 13056 0060 2220     		movs	r0, #34
 13057 0062 FFF7FEFF 		bl	bma2x2_write_reg
 13058 0066 0300     		movs	r3, r0
 13059 0068 2370     		strb	r3, [r4]
5255:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
5256:bma2x2.c      **** 		break;
 13060              		.loc 1 5256 0
 13061 006a 7BE0     		b	.L780
 13062              	.L775:
5257:bma2x2.c      **** 		case BMA2x2_HIGH_DURN:
5258:bma2x2.c      **** 			/*HIGH DURATION*/
5259:bma2x2.c      **** 			data_u8 = durn_u8;
 13063              		.loc 1 5259 0
 13064 006c 0E23     		movs	r3, #14
 13065 006e FB18     		adds	r3, r7, r3
 13066 0070 BA1D     		adds	r2, r7, #6
 13067 0072 1278     		ldrb	r2, [r2]
 13068 0074 1A70     		strb	r2, [r3]
5260:bma2x2.c      **** 			com_rslt = bma2x2_write_reg(
 13069              		.loc 1 5260 0
 13070 0076 0F23     		movs	r3, #15
 13071 0078 FC18     		adds	r4, r7, r3
 13072 007a 0E23     		movs	r3, #14
 13073 007c FB18     		adds	r3, r7, r3
 13074 007e 0122     		movs	r2, #1
 13075 0080 1900     		movs	r1, r3
 13076 0082 2520     		movs	r0, #37
 13077 0084 FFF7FEFF 		bl	bma2x2_write_reg
 13078 0088 0300     		movs	r3, r0
 13079 008a 2370     		strb	r3, [r4]
5261:bma2x2.c      **** 			BMA2x2_HIGH_DURN_ADDR,
5262:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
5263:bma2x2.c      **** 		break;
 13080              		.loc 1 5263 0
 13081 008c 6AE0     		b	.L780
 13082              	.L778:
5264:bma2x2.c      **** 		case BMA2x2_SLOPE_DURN:
5265:bma2x2.c      **** 			/*SLOPE DURATION*/
5266:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 13083              		.loc 1 5266 0
 13084 008e 394B     		ldr	r3, .L782
 13085 0090 1B68     		ldr	r3, [r3]
 13086 0092 DD68     		ldr	r5, [r3, #12]
 13087 0094 374B     		ldr	r3, .L782
 13088 0096 1B68     		ldr	r3, [r3]
 13089 0098 1879     		ldrb	r0, [r3, #4]
 13090 009a 0F23     		movs	r3, #15
 13091 009c FC18     		adds	r4, r7, r3
 13092 009e 0E23     		movs	r3, #14
 13093 00a0 FA18     		adds	r2, r7, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 326


 13094 00a2 0123     		movs	r3, #1
 13095 00a4 2721     		movs	r1, #39
 13096 00a6 A847     		blx	r5
 13097 00a8 0300     		movs	r3, r0
 13098 00aa 2370     		strb	r3, [r4]
5267:bma2x2.c      **** 			(p_bma2x2->dev_addr,
5268:bma2x2.c      **** 			BMA2x2_SLOPE_DURN_REG,
5269:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
5270:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 13099              		.loc 1 5270 0
 13100 00ac 0E23     		movs	r3, #14
 13101 00ae FB18     		adds	r3, r7, r3
 13102 00b0 1B78     		ldrb	r3, [r3]
 13103 00b2 5BB2     		sxtb	r3, r3
 13104 00b4 0322     		movs	r2, #3
 13105 00b6 9343     		bics	r3, r2
 13106 00b8 5AB2     		sxtb	r2, r3
 13107 00ba BB1D     		adds	r3, r7, #6
 13108 00bc 1B78     		ldrb	r3, [r3]
 13109 00be 5BB2     		sxtb	r3, r3
 13110 00c0 0321     		movs	r1, #3
 13111 00c2 0B40     		ands	r3, r1
 13112 00c4 5BB2     		sxtb	r3, r3
 13113 00c6 1343     		orrs	r3, r2
 13114 00c8 5BB2     		sxtb	r3, r3
 13115 00ca DAB2     		uxtb	r2, r3
 13116 00cc 0E23     		movs	r3, #14
 13117 00ce FB18     		adds	r3, r7, r3
 13118 00d0 1A70     		strb	r2, [r3]
5271:bma2x2.c      **** 			(data_u8, BMA2x2_SLOPE_DURN, durn_u8);
5272:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 13119              		.loc 1 5272 0
 13120 00d2 0E23     		movs	r3, #14
 13121 00d4 FB18     		adds	r3, r7, r3
 13122 00d6 0122     		movs	r2, #1
 13123 00d8 1900     		movs	r1, r3
 13124 00da 2720     		movs	r0, #39
 13125 00dc FFF7FEFF 		bl	bma2x2_write_reg
 13126 00e0 0300     		movs	r3, r0
 13127 00e2 DAB2     		uxtb	r2, r3
 13128 00e4 0F23     		movs	r3, #15
 13129 00e6 FB18     		adds	r3, r7, r3
 13130 00e8 1B78     		ldrb	r3, [r3]
 13131 00ea D318     		adds	r3, r2, r3
 13132 00ec DAB2     		uxtb	r2, r3
 13133 00ee 0F23     		movs	r3, #15
 13134 00f0 FB18     		adds	r3, r7, r3
 13135 00f2 1A70     		strb	r2, [r3]
5273:bma2x2.c      **** 			BMA2x2_SLOPE_DURN_REG,
5274:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
5275:bma2x2.c      **** 		break;
 13136              		.loc 1 5275 0
 13137 00f4 36E0     		b	.L780
 13138              	.L779:
5276:bma2x2.c      **** 		case BMA2x2_SLOW_NO_MOTION_DURN:
5277:bma2x2.c      **** 			/*SLO NO MOT DURATION*/
5278:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 327


 13139              		.loc 1 5278 0
 13140 00f6 1F4B     		ldr	r3, .L782
 13141 00f8 1B68     		ldr	r3, [r3]
 13142 00fa DD68     		ldr	r5, [r3, #12]
 13143 00fc 1D4B     		ldr	r3, .L782
 13144 00fe 1B68     		ldr	r3, [r3]
 13145 0100 1879     		ldrb	r0, [r3, #4]
 13146 0102 0F23     		movs	r3, #15
 13147 0104 FC18     		adds	r4, r7, r3
 13148 0106 0E23     		movs	r3, #14
 13149 0108 FA18     		adds	r2, r7, r3
 13150 010a 0123     		movs	r3, #1
 13151 010c 2721     		movs	r1, #39
 13152 010e A847     		blx	r5
 13153 0110 0300     		movs	r3, r0
 13154 0112 2370     		strb	r3, [r4]
5279:bma2x2.c      **** 			(p_bma2x2->dev_addr,
5280:bma2x2.c      **** 			BMA2x2_SLOW_NO_MOTION_DURN_REG,
5281:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
5282:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 13155              		.loc 1 5282 0
 13156 0114 0E23     		movs	r3, #14
 13157 0116 FB18     		adds	r3, r7, r3
 13158 0118 1B78     		ldrb	r3, [r3]
 13159 011a 5BB2     		sxtb	r3, r3
 13160 011c 0322     		movs	r2, #3
 13161 011e 1340     		ands	r3, r2
 13162 0120 5AB2     		sxtb	r2, r3
 13163 0122 BB1D     		adds	r3, r7, #6
 13164 0124 1B78     		ldrb	r3, [r3]
 13165 0126 9B00     		lsls	r3, r3, #2
 13166 0128 5BB2     		sxtb	r3, r3
 13167 012a 1343     		orrs	r3, r2
 13168 012c 5BB2     		sxtb	r3, r3
 13169 012e DAB2     		uxtb	r2, r3
 13170 0130 0E23     		movs	r3, #14
 13171 0132 FB18     		adds	r3, r7, r3
 13172 0134 1A70     		strb	r2, [r3]
5283:bma2x2.c      **** 			(data_u8, BMA2x2_SLOW_NO_MOTION_DURN, durn_u8);
5284:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 13173              		.loc 1 5284 0
 13174 0136 0E23     		movs	r3, #14
 13175 0138 FB18     		adds	r3, r7, r3
 13176 013a 0122     		movs	r2, #1
 13177 013c 1900     		movs	r1, r3
 13178 013e 2720     		movs	r0, #39
 13179 0140 FFF7FEFF 		bl	bma2x2_write_reg
 13180 0144 0300     		movs	r3, r0
 13181 0146 DAB2     		uxtb	r2, r3
 13182 0148 0F23     		movs	r3, #15
 13183 014a FB18     		adds	r3, r7, r3
 13184 014c 1B78     		ldrb	r3, [r3]
 13185 014e D318     		adds	r3, r2, r3
 13186 0150 DAB2     		uxtb	r2, r3
 13187 0152 0F23     		movs	r3, #15
 13188 0154 FB18     		adds	r3, r7, r3
 13189 0156 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 328


5285:bma2x2.c      **** 			BMA2x2_SLOW_NO_MOTION_DURN_REG,
5286:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
5287:bma2x2.c      **** 		break;
 13190              		.loc 1 5287 0
 13191 0158 04E0     		b	.L780
 13192              	.L774:
5288:bma2x2.c      **** 		default:
5289:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 13193              		.loc 1 5289 0
 13194 015a 0F23     		movs	r3, #15
 13195 015c FB18     		adds	r3, r7, r3
 13196 015e FE22     		movs	r2, #254
 13197 0160 1A70     		strb	r2, [r3]
5290:bma2x2.c      **** 		break;
 13198              		.loc 1 5290 0
 13199 0162 C046     		nop
 13200              	.L780:
5291:bma2x2.c      **** 		}
5292:bma2x2.c      **** 	}
5293:bma2x2.c      **** 	return com_rslt;
 13201              		.loc 1 5293 0
 13202 0164 0F23     		movs	r3, #15
 13203 0166 FB18     		adds	r3, r7, r3
 13204 0168 1B78     		ldrb	r3, [r3]
 13205 016a 5BB2     		sxtb	r3, r3
 13206              	.L781:
5294:bma2x2.c      **** }
 13207              		.loc 1 5294 0 discriminator 1
 13208 016c 1800     		movs	r0, r3
 13209 016e BD46     		mov	sp, r7
 13210 0170 04B0     		add	sp, sp, #16
 13211              		@ sp needed
 13212 0172 B0BD     		pop	{r4, r5, r7, pc}
 13213              	.L783:
 13214              		.align	2
 13215              	.L782:
 13216 0174 00000000 		.word	p_bma2x2
 13217              		.cfi_endproc
 13218              	.LFE79:
 13219              		.size	bma2x2_set_durn, .-bma2x2_set_durn
 13220              		.section	.text.bma2x2_get_thres,"ax",%progbits
 13221              		.align	2
 13222              		.global	bma2x2_get_thres
 13223              		.code	16
 13224              		.thumb_func
 13225              		.type	bma2x2_get_thres, %function
 13226              	bma2x2_get_thres:
 13227              	.LFB80:
5295:bma2x2.c      **** /*!
5296:bma2x2.c      ****  * @brief This API is used to get the threshold of
5297:bma2x2.c      ****  *	Low, High, Slope and slow no motion interrupts in the registers
5298:bma2x2.c      ****  *	@note LOW_THRES		-> register 0x23 bit form 0 to 7
5299:bma2x2.c      ****  *	@note HIGH_THRES		-> register 0x26 bit form 0 to 7
5300:bma2x2.c      ****  *	@note SLOPE_THRES		-> register 0x28 bit form 0 to 7
5301:bma2x2.c      ****  *	@note SLO_NO_MOT_THRES -> register 0x29 bit form 0 to 7
5302:bma2x2.c      ****  *
5303:bma2x2.c      ****  *  @param channel_u8: The value of threshold selection
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 329


5304:bma2x2.c      ****  *     channel_u8   | result
5305:bma2x2.c      ****  *   -----------------| ------------------
5306:bma2x2.c      ****  *               0    | BMA2x2_ACCEL_LOW_THRES
5307:bma2x2.c      ****  *               1    | BMA2x2_ACCEL_HIGH_THRES
5308:bma2x2.c      ****  *               2    | BMA2x2_ACCEL_SLOPE_THRES
5309:bma2x2.c      ****  *               3    | BMA2x2_ACCEL_SLOW_NO_MOTION_THRES
5310:bma2x2.c      ****  *
5311:bma2x2.c      ****  *  @param thres_u8: The threshold value of selected interrupts
5312:bma2x2.c      ****  *
5313:bma2x2.c      ****  *	@note : LOW-G THRESHOLD
5314:bma2x2.c      ****  *     Threshold                    |    result
5315:bma2x2.c      ****  * ---------------------------------| ------------------
5316:bma2x2.c      ****  * BMA2x2_ACCEL_LOW_THRES           | Low-threshold interrupt trigger
5317:bma2x2.c      ****  *                                  | according to(thres_u8 * 7.81) mg
5318:bma2x2.c      ****  *                                  | range from 0g to 1.992g
5319:bma2x2.c      ****  *                                  | default is 375mg
5320:bma2x2.c      ****  *	@note : HIGH-G THRESHOLD
5321:bma2x2.c      ****  *	@note Threshold of high-g interrupt according to accel g range
5322:bma2x2.c      ****  *    g-range           |      High-g threshold
5323:bma2x2.c      ****  *  --------------------|----------------------------
5324:bma2x2.c      ****  *     2g               |    (thres_u8 * 7.81) mg
5325:bma2x2.c      ****  *     4g               |    (thres_u8 * 15.63) mg
5326:bma2x2.c      ****  *     8g               |    (thres_u8 * 31.25) mg
5327:bma2x2.c      ****  *     16g              |    (thres_u8 * 62.5) mg
5328:bma2x2.c      ****  *
5329:bma2x2.c      ****  *	@note : SLOPE THRESHOLD
5330:bma2x2.c      ****  *	@note Threshold of slope interrupt according to accel g range
5331:bma2x2.c      ****  *    g-range           |      Slope threshold
5332:bma2x2.c      ****  *  --------------------|----------------------------
5333:bma2x2.c      ****  *     2g               |    (thres_u8 * 3.19) mg
5334:bma2x2.c      ****  *     4g               |    (thres_u8 * 7.81) mg
5335:bma2x2.c      ****  *     8g               |    (thres_u8 * 15.63) mg
5336:bma2x2.c      ****  *     16g              |    (thres_u8 * 31.25) mg
5337:bma2x2.c      ****  *
5338:bma2x2.c      ****  *	@note : SLOW NO MOTION THRESHOLD
5339:bma2x2.c      ****  *	@note Threshold of slow no motion interrupt according to accel g range
5340:bma2x2.c      ****  *    g-range           |   slow no motion threshold
5341:bma2x2.c      ****  *  --------------------|----------------------------
5342:bma2x2.c      ****  *     2g               |    (thres_u8 * 3.19) mg
5343:bma2x2.c      ****  *     4g               |    (thres_u8 * 7.81) mg
5344:bma2x2.c      ****  *     8g               |    (thres_u8 * 15.63) mg
5345:bma2x2.c      ****  *     16g              |    (thres_u8 * 31.25) mg
5346:bma2x2.c      ****  *
5347:bma2x2.c      ****  *
5348:bma2x2.c      ****  *
5349:bma2x2.c      ****  *	@return results of bus communication function
5350:bma2x2.c      ****  *	@retval 0 -> Success
5351:bma2x2.c      ****  *	@retval -1 -> Error
5352:bma2x2.c      ****  *
5353:bma2x2.c      ****  *
5354:bma2x2.c      ****  */
5355:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_thres(u8 channel_u8,
5356:bma2x2.c      **** u8 *thres_u8)
5357:bma2x2.c      **** {
 13228              		.loc 1 5357 0
 13229              		.cfi_startproc
 13230              		@ args = 0, pretend = 0, frame = 16
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 330


 13231              		@ frame_needed = 1, uses_anonymous_args = 0
 13232 0000 B0B5     		push	{r4, r5, r7, lr}
 13233              		.cfi_def_cfa_offset 16
 13234              		.cfi_offset 4, -16
 13235              		.cfi_offset 5, -12
 13236              		.cfi_offset 7, -8
 13237              		.cfi_offset 14, -4
 13238 0002 84B0     		sub	sp, sp, #16
 13239              		.cfi_def_cfa_offset 32
 13240 0004 00AF     		add	r7, sp, #0
 13241              		.cfi_def_cfa_register 7
 13242 0006 0200     		movs	r2, r0
 13243 0008 3960     		str	r1, [r7]
 13244 000a FB1D     		adds	r3, r7, #7
 13245 000c 1A70     		strb	r2, [r3]
5358:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 13246              		.loc 1 5358 0
 13247 000e 0E23     		movs	r3, #14
 13248 0010 FB18     		adds	r3, r7, r3
 13249 0012 0022     		movs	r2, #0
 13250 0014 1A70     		strb	r2, [r3]
5359:bma2x2.c      **** 	/*  Variable used to return value of
5360:bma2x2.c      **** 	communication routine*/
5361:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 13251              		.loc 1 5361 0
 13252 0016 0F23     		movs	r3, #15
 13253 0018 FB18     		adds	r3, r7, r3
 13254 001a FF22     		movs	r2, #255
 13255 001c 1A70     		strb	r2, [r3]
5362:bma2x2.c      **** 
5363:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 13256              		.loc 1 5363 0
 13257 001e 3A4B     		ldr	r3, .L795
 13258 0020 1B68     		ldr	r3, [r3]
 13259 0022 002B     		cmp	r3, #0
 13260 0024 02D1     		bne	.L785
5364:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
5365:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 13261              		.loc 1 5365 0
 13262 0026 7F23     		movs	r3, #127
 13263 0028 5B42     		rsbs	r3, r3, #0
 13264 002a 69E0     		b	.L794
 13265              	.L785:
5366:bma2x2.c      **** 		} else {
5367:bma2x2.c      **** 		switch (channel_u8) {
 13266              		.loc 1 5367 0
 13267 002c FB1D     		adds	r3, r7, #7
 13268 002e 1B78     		ldrb	r3, [r3]
 13269 0030 012B     		cmp	r3, #1
 13270 0032 1DD0     		beq	.L788
 13271 0034 02DC     		bgt	.L789
 13272 0036 002B     		cmp	r3, #0
 13273 0038 05D0     		beq	.L790
 13274 003a 58E0     		b	.L787
 13275              	.L789:
 13276 003c 022B     		cmp	r3, #2
 13277 003e 2CD0     		beq	.L791
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 331


 13278 0040 032B     		cmp	r3, #3
 13279 0042 3FD0     		beq	.L792
 13280 0044 53E0     		b	.L787
 13281              	.L790:
5368:bma2x2.c      **** 		/* Read the threshold value */
5369:bma2x2.c      **** 		case BMA2x2_LOW_THRES:
5370:bma2x2.c      **** 			/*LOW THRESHOLD*/
5371:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 13282              		.loc 1 5371 0
 13283 0046 304B     		ldr	r3, .L795
 13284 0048 1B68     		ldr	r3, [r3]
 13285 004a DD68     		ldr	r5, [r3, #12]
 13286 004c 2E4B     		ldr	r3, .L795
 13287 004e 1B68     		ldr	r3, [r3]
 13288 0050 1879     		ldrb	r0, [r3, #4]
 13289 0052 0F23     		movs	r3, #15
 13290 0054 FC18     		adds	r4, r7, r3
 13291 0056 0E23     		movs	r3, #14
 13292 0058 FA18     		adds	r2, r7, r3
 13293 005a 0123     		movs	r3, #1
 13294 005c 2321     		movs	r1, #35
 13295 005e A847     		blx	r5
 13296 0060 0300     		movs	r3, r0
 13297 0062 2370     		strb	r3, [r4]
5372:bma2x2.c      **** 			(p_bma2x2->dev_addr, BMA2x2_LOW_THRES_ADDR,
5373:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
5374:bma2x2.c      **** 			*thres_u8 = data_u8;
 13298              		.loc 1 5374 0
 13299 0064 0E23     		movs	r3, #14
 13300 0066 FB18     		adds	r3, r7, r3
 13301 0068 1A78     		ldrb	r2, [r3]
 13302 006a 3B68     		ldr	r3, [r7]
 13303 006c 1A70     		strb	r2, [r3]
5375:bma2x2.c      **** 		break;
 13304              		.loc 1 5375 0
 13305 006e 43E0     		b	.L793
 13306              	.L788:
5376:bma2x2.c      **** 		case BMA2x2_HIGH_THRES:
5377:bma2x2.c      **** 			/*HIGH THRESHOLD*/
5378:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 13307              		.loc 1 5378 0
 13308 0070 254B     		ldr	r3, .L795
 13309 0072 1B68     		ldr	r3, [r3]
 13310 0074 DD68     		ldr	r5, [r3, #12]
 13311 0076 244B     		ldr	r3, .L795
 13312 0078 1B68     		ldr	r3, [r3]
 13313 007a 1879     		ldrb	r0, [r3, #4]
 13314 007c 0F23     		movs	r3, #15
 13315 007e FC18     		adds	r4, r7, r3
 13316 0080 0E23     		movs	r3, #14
 13317 0082 FA18     		adds	r2, r7, r3
 13318 0084 0123     		movs	r3, #1
 13319 0086 2621     		movs	r1, #38
 13320 0088 A847     		blx	r5
 13321 008a 0300     		movs	r3, r0
 13322 008c 2370     		strb	r3, [r4]
5379:bma2x2.c      **** 			(p_bma2x2->dev_addr,
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 332


5380:bma2x2.c      **** 			BMA2x2_HIGH_THRES_ADDR,
5381:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
5382:bma2x2.c      **** 			*thres_u8 = data_u8;
 13323              		.loc 1 5382 0
 13324 008e 0E23     		movs	r3, #14
 13325 0090 FB18     		adds	r3, r7, r3
 13326 0092 1A78     		ldrb	r2, [r3]
 13327 0094 3B68     		ldr	r3, [r7]
 13328 0096 1A70     		strb	r2, [r3]
5383:bma2x2.c      **** 		break;
 13329              		.loc 1 5383 0
 13330 0098 2EE0     		b	.L793
 13331              	.L791:
5384:bma2x2.c      **** 		case BMA2x2_SLOPE_THRES:
5385:bma2x2.c      **** 			/*SLOPE THRESHOLD*/
5386:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 13332              		.loc 1 5386 0
 13333 009a 1B4B     		ldr	r3, .L795
 13334 009c 1B68     		ldr	r3, [r3]
 13335 009e DD68     		ldr	r5, [r3, #12]
 13336 00a0 194B     		ldr	r3, .L795
 13337 00a2 1B68     		ldr	r3, [r3]
 13338 00a4 1879     		ldrb	r0, [r3, #4]
 13339 00a6 0F23     		movs	r3, #15
 13340 00a8 FC18     		adds	r4, r7, r3
 13341 00aa 0E23     		movs	r3, #14
 13342 00ac FA18     		adds	r2, r7, r3
 13343 00ae 0123     		movs	r3, #1
 13344 00b0 2821     		movs	r1, #40
 13345 00b2 A847     		blx	r5
 13346 00b4 0300     		movs	r3, r0
 13347 00b6 2370     		strb	r3, [r4]
5387:bma2x2.c      **** 			(p_bma2x2->dev_addr,
5388:bma2x2.c      **** 			BMA2x2_SLOPE_THRES_ADDR,
5389:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
5390:bma2x2.c      **** 			*thres_u8 = data_u8;
 13348              		.loc 1 5390 0
 13349 00b8 0E23     		movs	r3, #14
 13350 00ba FB18     		adds	r3, r7, r3
 13351 00bc 1A78     		ldrb	r2, [r3]
 13352 00be 3B68     		ldr	r3, [r7]
 13353 00c0 1A70     		strb	r2, [r3]
5391:bma2x2.c      **** 		break;
 13354              		.loc 1 5391 0
 13355 00c2 19E0     		b	.L793
 13356              	.L792:
5392:bma2x2.c      **** 		case BMA2x2_SLOW_NO_MOTION_THRES:
5393:bma2x2.c      **** 			/*SLO NO MOT THRESHOLD*/
5394:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 13357              		.loc 1 5394 0
 13358 00c4 104B     		ldr	r3, .L795
 13359 00c6 1B68     		ldr	r3, [r3]
 13360 00c8 DD68     		ldr	r5, [r3, #12]
 13361 00ca 0F4B     		ldr	r3, .L795
 13362 00cc 1B68     		ldr	r3, [r3]
 13363 00ce 1879     		ldrb	r0, [r3, #4]
 13364 00d0 0F23     		movs	r3, #15
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 333


 13365 00d2 FC18     		adds	r4, r7, r3
 13366 00d4 0E23     		movs	r3, #14
 13367 00d6 FA18     		adds	r2, r7, r3
 13368 00d8 0123     		movs	r3, #1
 13369 00da 2921     		movs	r1, #41
 13370 00dc A847     		blx	r5
 13371 00de 0300     		movs	r3, r0
 13372 00e0 2370     		strb	r3, [r4]
5395:bma2x2.c      **** 			(p_bma2x2->dev_addr,
5396:bma2x2.c      **** 			BMA2x2_SLOW_NO_MOTION_THRES_ADDR,
5397:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
5398:bma2x2.c      **** 			*thres_u8 = data_u8;
 13373              		.loc 1 5398 0
 13374 00e2 0E23     		movs	r3, #14
 13375 00e4 FB18     		adds	r3, r7, r3
 13376 00e6 1A78     		ldrb	r2, [r3]
 13377 00e8 3B68     		ldr	r3, [r7]
 13378 00ea 1A70     		strb	r2, [r3]
5399:bma2x2.c      **** 		break;
 13379              		.loc 1 5399 0
 13380 00ec 04E0     		b	.L793
 13381              	.L787:
5400:bma2x2.c      **** 		default:
5401:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 13382              		.loc 1 5401 0
 13383 00ee 0F23     		movs	r3, #15
 13384 00f0 FB18     		adds	r3, r7, r3
 13385 00f2 FE22     		movs	r2, #254
 13386 00f4 1A70     		strb	r2, [r3]
5402:bma2x2.c      **** 		break;
 13387              		.loc 1 5402 0
 13388 00f6 C046     		nop
 13389              	.L793:
5403:bma2x2.c      **** 		}
5404:bma2x2.c      **** 	}
5405:bma2x2.c      **** 	return com_rslt;
 13390              		.loc 1 5405 0
 13391 00f8 0F23     		movs	r3, #15
 13392 00fa FB18     		adds	r3, r7, r3
 13393 00fc 1B78     		ldrb	r3, [r3]
 13394 00fe 5BB2     		sxtb	r3, r3
 13395              	.L794:
5406:bma2x2.c      **** }
 13396              		.loc 1 5406 0 discriminator 1
 13397 0100 1800     		movs	r0, r3
 13398 0102 BD46     		mov	sp, r7
 13399 0104 04B0     		add	sp, sp, #16
 13400              		@ sp needed
 13401 0106 B0BD     		pop	{r4, r5, r7, pc}
 13402              	.L796:
 13403              		.align	2
 13404              	.L795:
 13405 0108 00000000 		.word	p_bma2x2
 13406              		.cfi_endproc
 13407              	.LFE80:
 13408              		.size	bma2x2_get_thres, .-bma2x2_get_thres
 13409              		.section	.text.bma2x2_set_thres,"ax",%progbits
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 334


 13410              		.align	2
 13411              		.global	bma2x2_set_thres
 13412              		.code	16
 13413              		.thumb_func
 13414              		.type	bma2x2_set_thres, %function
 13415              	bma2x2_set_thres:
 13416              	.LFB81:
5407:bma2x2.c      **** /*!
5408:bma2x2.c      ****  * @brief This API is used to set the threshold of
5409:bma2x2.c      ****  *	Low, High, Slope and slow no motion interrupts in the registers
5410:bma2x2.c      ****  *	@note LOW_THRES		-> register 0x23 bit form 0 to 7
5411:bma2x2.c      ****  *	@note HIGH_THRES		-> register 0x26 bit form 0 to 7
5412:bma2x2.c      ****  *	@note SLOPE_THRES		-> register 0x28 bit form 0 to 7
5413:bma2x2.c      ****  *	@note SLO_NO_MOT_THRES -> register 0x29 bit form 0 to 7
5414:bma2x2.c      ****  *
5415:bma2x2.c      ****  *  @param channel_u8: The value of threshold selection
5416:bma2x2.c      ****  *     channel_u8   | result
5417:bma2x2.c      ****  *   -----------------| ------------------
5418:bma2x2.c      ****  *               0    | BMA2x2_ACCEL_LOW_THRES
5419:bma2x2.c      ****  *               1    | BMA2x2_ACCEL_HIGH_THRES
5420:bma2x2.c      ****  *               2    | BMA2x2_ACCEL_SLOPE_THRES
5421:bma2x2.c      ****  *               3    | BMA2x2_ACCEL_SLOW_NO_MOTION_THRES
5422:bma2x2.c      ****  *
5423:bma2x2.c      ****  *  @param thres_u8: The threshold value of selected interrupts
5424:bma2x2.c      ****  *
5425:bma2x2.c      ****  *	@note : LOW-G THRESHOLD
5426:bma2x2.c      ****  *     Threshold                    |    result
5427:bma2x2.c      ****  * ---------------------------------| ------------------
5428:bma2x2.c      ****  * BMA2x2_ACCEL_LOW_THRES           | Low-threshold interrupt trigger
5429:bma2x2.c      ****  *                                  | according to(thres_u8 * 7.81) mg
5430:bma2x2.c      ****  *                                  | range from 0g to 1.992g
5431:bma2x2.c      ****  *                                  | default is 375mg
5432:bma2x2.c      ****  *	@note : HIGH-G THRESHOLD
5433:bma2x2.c      ****  *	@note Threshold of high-g interrupt according to accel g range
5434:bma2x2.c      ****  *    g-range           |      High-g threshold
5435:bma2x2.c      ****  *  --------------------|----------------------------
5436:bma2x2.c      ****  *     2g               |    (thres_u8 * 7.81) mg
5437:bma2x2.c      ****  *     4g               |    (thres_u8 * 15.63) mg
5438:bma2x2.c      ****  *     8g               |    (thres_u8 * 31.25) mg
5439:bma2x2.c      ****  *     16g              |    (thres_u8 * 62.5) mg
5440:bma2x2.c      ****  *
5441:bma2x2.c      ****  *	@note : SLOPE THRESHOLD
5442:bma2x2.c      ****  *	@note Threshold of slope interrupt according to accel g range
5443:bma2x2.c      ****  *    g-range           |      Slope threshold
5444:bma2x2.c      ****  *  --------------------|----------------------------
5445:bma2x2.c      ****  *     2g               |    (thres_u8 * 3.19) mg
5446:bma2x2.c      ****  *     4g               |    (thres_u8 * 7.81) mg
5447:bma2x2.c      ****  *     8g               |    (thres_u8 * 15.63) mg
5448:bma2x2.c      ****  *     16g              |    (thres_u8 * 31.25) mg
5449:bma2x2.c      ****  *
5450:bma2x2.c      ****  *	@note : SLOW NO MOTION THRESHOLD
5451:bma2x2.c      ****  *	@note Threshold of slow no motion interrupt according to accel g range
5452:bma2x2.c      ****  *    g-range           |   slow no motion threshold
5453:bma2x2.c      ****  *  --------------------|----------------------------
5454:bma2x2.c      ****  *     2g               |    (thres_u8 * 3.19) mg
5455:bma2x2.c      ****  *     4g               |    (thres_u8 * 7.81) mg
5456:bma2x2.c      ****  *     8g               |    (thres_u8 * 15.63) mg
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 335


5457:bma2x2.c      ****  *     16g              |    (thres_u8 * 31.25) mg
5458:bma2x2.c      ****  *
5459:bma2x2.c      ****  *
5460:bma2x2.c      ****  *
5461:bma2x2.c      ****  *	@return results of bus communication function
5462:bma2x2.c      ****  *	@retval 0 -> Success
5463:bma2x2.c      ****  *	@retval -1 -> Error
5464:bma2x2.c      ****  *
5465:bma2x2.c      ****  *
5466:bma2x2.c      ****  */
5467:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_thres(u8 channel_u8,
5468:bma2x2.c      **** u8 thres_u8)
5469:bma2x2.c      **** {
 13417              		.loc 1 5469 0
 13418              		.cfi_startproc
 13419              		@ args = 0, pretend = 0, frame = 16
 13420              		@ frame_needed = 1, uses_anonymous_args = 0
 13421 0000 90B5     		push	{r4, r7, lr}
 13422              		.cfi_def_cfa_offset 12
 13423              		.cfi_offset 4, -12
 13424              		.cfi_offset 7, -8
 13425              		.cfi_offset 14, -4
 13426 0002 85B0     		sub	sp, sp, #20
 13427              		.cfi_def_cfa_offset 32
 13428 0004 00AF     		add	r7, sp, #0
 13429              		.cfi_def_cfa_register 7
 13430 0006 0200     		movs	r2, r0
 13431 0008 FB1D     		adds	r3, r7, #7
 13432 000a 1A70     		strb	r2, [r3]
 13433 000c BB1D     		adds	r3, r7, #6
 13434 000e 0A1C     		adds	r2, r1, #0
 13435 0010 1A70     		strb	r2, [r3]
5470:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 13436              		.loc 1 5470 0
 13437 0012 0E23     		movs	r3, #14
 13438 0014 FB18     		adds	r3, r7, r3
 13439 0016 0022     		movs	r2, #0
 13440 0018 1A70     		strb	r2, [r3]
5471:bma2x2.c      **** 	/*  Variable used to return value of
5472:bma2x2.c      **** 	communication routine*/
5473:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 13441              		.loc 1 5473 0
 13442 001a 0F23     		movs	r3, #15
 13443 001c FB18     		adds	r3, r7, r3
 13444 001e FF22     		movs	r2, #255
 13445 0020 1A70     		strb	r2, [r3]
5474:bma2x2.c      **** 
5475:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 13446              		.loc 1 5475 0
 13447 0022 324B     		ldr	r3, .L808
 13448 0024 1B68     		ldr	r3, [r3]
 13449 0026 002B     		cmp	r3, #0
 13450 0028 02D1     		bne	.L798
5476:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
5477:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 13451              		.loc 1 5477 0
 13452 002a 7F23     		movs	r3, #127
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 336


 13453 002c 5B42     		rsbs	r3, r3, #0
 13454 002e 59E0     		b	.L807
 13455              	.L798:
5478:bma2x2.c      **** 		} else {
5479:bma2x2.c      **** 		switch (channel_u8) {
 13456              		.loc 1 5479 0
 13457 0030 FB1D     		adds	r3, r7, #7
 13458 0032 1B78     		ldrb	r3, [r3]
 13459 0034 012B     		cmp	r3, #1
 13460 0036 19D0     		beq	.L801
 13461 0038 02DC     		bgt	.L802
 13462 003a 002B     		cmp	r3, #0
 13463 003c 05D0     		beq	.L803
 13464 003e 48E0     		b	.L800
 13465              	.L802:
 13466 0040 022B     		cmp	r3, #2
 13467 0042 24D0     		beq	.L804
 13468 0044 032B     		cmp	r3, #3
 13469 0046 33D0     		beq	.L805
 13470 0048 43E0     		b	.L800
 13471              	.L803:
5480:bma2x2.c      **** 		/* write the threshold value*/
5481:bma2x2.c      **** 		case BMA2x2_LOW_THRES:
5482:bma2x2.c      **** 			/*LOW THRESHOLD*/
5483:bma2x2.c      **** 			data_u8 = thres_u8;
 13472              		.loc 1 5483 0
 13473 004a 0E23     		movs	r3, #14
 13474 004c FB18     		adds	r3, r7, r3
 13475 004e BA1D     		adds	r2, r7, #6
 13476 0050 1278     		ldrb	r2, [r2]
 13477 0052 1A70     		strb	r2, [r3]
5484:bma2x2.c      **** 			com_rslt = bma2x2_write_reg(
 13478              		.loc 1 5484 0
 13479 0054 0F23     		movs	r3, #15
 13480 0056 FC18     		adds	r4, r7, r3
 13481 0058 0E23     		movs	r3, #14
 13482 005a FB18     		adds	r3, r7, r3
 13483 005c 0122     		movs	r2, #1
 13484 005e 1900     		movs	r1, r3
 13485 0060 2320     		movs	r0, #35
 13486 0062 FFF7FEFF 		bl	bma2x2_write_reg
 13487 0066 0300     		movs	r3, r0
 13488 0068 2370     		strb	r3, [r4]
5485:bma2x2.c      **** 			BMA2x2_LOW_THRES_ADDR, &data_u8,
5486:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
5487:bma2x2.c      **** 		break;
 13489              		.loc 1 5487 0
 13490 006a 37E0     		b	.L806
 13491              	.L801:
5488:bma2x2.c      **** 		case BMA2x2_HIGH_THRES:
5489:bma2x2.c      **** 			/*HIGH THRESHOLD*/
5490:bma2x2.c      **** 			data_u8 = thres_u8;
 13492              		.loc 1 5490 0
 13493 006c 0E23     		movs	r3, #14
 13494 006e FB18     		adds	r3, r7, r3
 13495 0070 BA1D     		adds	r2, r7, #6
 13496 0072 1278     		ldrb	r2, [r2]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 337


 13497 0074 1A70     		strb	r2, [r3]
5491:bma2x2.c      **** 			com_rslt = bma2x2_write_reg(
 13498              		.loc 1 5491 0
 13499 0076 0F23     		movs	r3, #15
 13500 0078 FC18     		adds	r4, r7, r3
 13501 007a 0E23     		movs	r3, #14
 13502 007c FB18     		adds	r3, r7, r3
 13503 007e 0122     		movs	r2, #1
 13504 0080 1900     		movs	r1, r3
 13505 0082 2620     		movs	r0, #38
 13506 0084 FFF7FEFF 		bl	bma2x2_write_reg
 13507 0088 0300     		movs	r3, r0
 13508 008a 2370     		strb	r3, [r4]
5492:bma2x2.c      **** 			BMA2x2_HIGH_THRES_ADDR, &data_u8,
5493:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
5494:bma2x2.c      **** 		break;
 13509              		.loc 1 5494 0
 13510 008c 26E0     		b	.L806
 13511              	.L804:
5495:bma2x2.c      **** 		case BMA2x2_SLOPE_THRES:
5496:bma2x2.c      **** 			/*SLOPE THRESHOLD*/
5497:bma2x2.c      **** 			data_u8 = thres_u8;
 13512              		.loc 1 5497 0
 13513 008e 0E23     		movs	r3, #14
 13514 0090 FB18     		adds	r3, r7, r3
 13515 0092 BA1D     		adds	r2, r7, #6
 13516 0094 1278     		ldrb	r2, [r2]
 13517 0096 1A70     		strb	r2, [r3]
5498:bma2x2.c      **** 			com_rslt = bma2x2_write_reg(
 13518              		.loc 1 5498 0
 13519 0098 0F23     		movs	r3, #15
 13520 009a FC18     		adds	r4, r7, r3
 13521 009c 0E23     		movs	r3, #14
 13522 009e FB18     		adds	r3, r7, r3
 13523 00a0 0122     		movs	r2, #1
 13524 00a2 1900     		movs	r1, r3
 13525 00a4 2820     		movs	r0, #40
 13526 00a6 FFF7FEFF 		bl	bma2x2_write_reg
 13527 00aa 0300     		movs	r3, r0
 13528 00ac 2370     		strb	r3, [r4]
5499:bma2x2.c      **** 			BMA2x2_SLOPE_THRES_ADDR, &data_u8,
5500:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
5501:bma2x2.c      **** 		break;
 13529              		.loc 1 5501 0
 13530 00ae 15E0     		b	.L806
 13531              	.L805:
5502:bma2x2.c      **** 		case BMA2x2_SLOW_NO_MOTION_THRES:
5503:bma2x2.c      **** 			/*SLO NO MOT THRESHOLD*/
5504:bma2x2.c      **** 			data_u8 = thres_u8;
 13532              		.loc 1 5504 0
 13533 00b0 0E23     		movs	r3, #14
 13534 00b2 FB18     		adds	r3, r7, r3
 13535 00b4 BA1D     		adds	r2, r7, #6
 13536 00b6 1278     		ldrb	r2, [r2]
 13537 00b8 1A70     		strb	r2, [r3]
5505:bma2x2.c      **** 			com_rslt = bma2x2_write_reg(
 13538              		.loc 1 5505 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 338


 13539 00ba 0F23     		movs	r3, #15
 13540 00bc FC18     		adds	r4, r7, r3
 13541 00be 0E23     		movs	r3, #14
 13542 00c0 FB18     		adds	r3, r7, r3
 13543 00c2 0122     		movs	r2, #1
 13544 00c4 1900     		movs	r1, r3
 13545 00c6 2920     		movs	r0, #41
 13546 00c8 FFF7FEFF 		bl	bma2x2_write_reg
 13547 00cc 0300     		movs	r3, r0
 13548 00ce 2370     		strb	r3, [r4]
5506:bma2x2.c      **** 			BMA2x2_SLOW_NO_MOTION_THRES_ADDR,
5507:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
5508:bma2x2.c      **** 		break;
 13549              		.loc 1 5508 0
 13550 00d0 04E0     		b	.L806
 13551              	.L800:
5509:bma2x2.c      **** 		default:
5510:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 13552              		.loc 1 5510 0
 13553 00d2 0F23     		movs	r3, #15
 13554 00d4 FB18     		adds	r3, r7, r3
 13555 00d6 FE22     		movs	r2, #254
 13556 00d8 1A70     		strb	r2, [r3]
5511:bma2x2.c      **** 		break;
 13557              		.loc 1 5511 0
 13558 00da C046     		nop
 13559              	.L806:
5512:bma2x2.c      **** 		}
5513:bma2x2.c      **** 	}
5514:bma2x2.c      **** 	return com_rslt;
 13560              		.loc 1 5514 0
 13561 00dc 0F23     		movs	r3, #15
 13562 00de FB18     		adds	r3, r7, r3
 13563 00e0 1B78     		ldrb	r3, [r3]
 13564 00e2 5BB2     		sxtb	r3, r3
 13565              	.L807:
5515:bma2x2.c      **** }
 13566              		.loc 1 5515 0 discriminator 1
 13567 00e4 1800     		movs	r0, r3
 13568 00e6 BD46     		mov	sp, r7
 13569 00e8 05B0     		add	sp, sp, #20
 13570              		@ sp needed
 13571 00ea 90BD     		pop	{r4, r7, pc}
 13572              	.L809:
 13573              		.align	2
 13574              	.L808:
 13575 00ec 00000000 		.word	p_bma2x2
 13576              		.cfi_endproc
 13577              	.LFE81:
 13578              		.size	bma2x2_set_thres, .-bma2x2_set_thres
 13579              		.section	.text.bma2x2_get_low_high_g_hyst,"ax",%progbits
 13580              		.align	2
 13581              		.global	bma2x2_get_low_high_g_hyst
 13582              		.code	16
 13583              		.thumb_func
 13584              		.type	bma2x2_get_low_high_g_hyst, %function
 13585              	bma2x2_get_low_high_g_hyst:
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 339


 13586              	.LFB82:
5516:bma2x2.c      **** /*!
5517:bma2x2.c      ****  *	@brief This API is used to get
5518:bma2x2.c      ****  *	the low high hysteresis in the registers 0x24
5519:bma2x2.c      ****  *	@note LOW_G_HYST  -> bit form 0 to 1
5520:bma2x2.c      ****  *	@note HIGH_G_HYST  -> bit from 6 to 7
5521:bma2x2.c      ****  *
5522:bma2x2.c      ****  *  @param channel_u8: The value of hysteresis selection
5523:bma2x2.c      ****  *     channel_u8   | result
5524:bma2x2.c      ****  *   -----------------| ------------------
5525:bma2x2.c      ****  *           0        | BMA2x2_ACCEL_LOW_G_HYST
5526:bma2x2.c      ****  *           1        | BMA2x2_ACCEL_HIGH_G_HYST
5527:bma2x2.c      ****  *
5528:bma2x2.c      ****  *  @param hyst_u8: The hysteresis data
5529:bma2x2.c      ****  *
5530:bma2x2.c      ****  *	@note LOW HYSTERESIS
5531:bma2x2.c      ****  *	@note Hysteresis of low-g interrupt according to (hyst_u8 * 125)mg
5532:bma2x2.c      ****  *
5533:bma2x2.c      ****  *	@note HIGH HYSTERESIS
5534:bma2x2.c      ****  *	@note High hysteresis depends on the accel range selection
5535:bma2x2.c      ****  *    g-range           |    High Hysteresis
5536:bma2x2.c      ****  *  --------------------|----------------------------
5537:bma2x2.c      ****  *     2g               |    (thres_u8 * 125) mg
5538:bma2x2.c      ****  *     4g               |    (thres_u8 * 250) mg
5539:bma2x2.c      ****  *     8g               |    (thres_u8 * 500) mg
5540:bma2x2.c      ****  *     16g              |    (thres_u8 * 1000) mg
5541:bma2x2.c      ****  *
5542:bma2x2.c      ****  *	@return results of bus communication function
5543:bma2x2.c      ****  *	@retval 0 -> Success
5544:bma2x2.c      ****  *	@retval -1 -> Error
5545:bma2x2.c      ****  *
5546:bma2x2.c      ****  *
5547:bma2x2.c      ****  */
5548:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_low_high_g_hyst(u8 channel_u8,
5549:bma2x2.c      **** u8 *hyst_u8)
5550:bma2x2.c      **** {
 13587              		.loc 1 5550 0
 13588              		.cfi_startproc
 13589              		@ args = 0, pretend = 0, frame = 16
 13590              		@ frame_needed = 1, uses_anonymous_args = 0
 13591 0000 B0B5     		push	{r4, r5, r7, lr}
 13592              		.cfi_def_cfa_offset 16
 13593              		.cfi_offset 4, -16
 13594              		.cfi_offset 5, -12
 13595              		.cfi_offset 7, -8
 13596              		.cfi_offset 14, -4
 13597 0002 84B0     		sub	sp, sp, #16
 13598              		.cfi_def_cfa_offset 32
 13599 0004 00AF     		add	r7, sp, #0
 13600              		.cfi_def_cfa_register 7
 13601 0006 0200     		movs	r2, r0
 13602 0008 3960     		str	r1, [r7]
 13603 000a FB1D     		adds	r3, r7, #7
 13604 000c 1A70     		strb	r2, [r3]
5551:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 13605              		.loc 1 5551 0
 13606 000e 0E23     		movs	r3, #14
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 340


 13607 0010 FB18     		adds	r3, r7, r3
 13608 0012 0022     		movs	r2, #0
 13609 0014 1A70     		strb	r2, [r3]
5552:bma2x2.c      **** 	/*  Variable used to return value of
5553:bma2x2.c      **** 	communication routine*/
5554:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 13610              		.loc 1 5554 0
 13611 0016 0F23     		movs	r3, #15
 13612 0018 FB18     		adds	r3, r7, r3
 13613 001a FF22     		movs	r2, #255
 13614 001c 1A70     		strb	r2, [r3]
5555:bma2x2.c      **** 
5556:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 13615              		.loc 1 5556 0
 13616 001e 254B     		ldr	r3, .L819
 13617 0020 1B68     		ldr	r3, [r3]
 13618 0022 002B     		cmp	r3, #0
 13619 0024 02D1     		bne	.L811
5557:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
5558:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 13620              		.loc 1 5558 0
 13621 0026 7F23     		movs	r3, #127
 13622 0028 5B42     		rsbs	r3, r3, #0
 13623 002a 3EE0     		b	.L817
 13624              	.L811:
5559:bma2x2.c      **** 		} else {
5560:bma2x2.c      **** 		switch (channel_u8) {
 13625              		.loc 1 5560 0
 13626 002c FB1D     		adds	r3, r7, #7
 13627 002e 1B78     		ldrb	r3, [r3]
 13628 0030 002B     		cmp	r3, #0
 13629 0032 02D0     		beq	.L814
 13630 0034 012B     		cmp	r3, #1
 13631 0036 18D0     		beq	.L815
 13632 0038 2EE0     		b	.L818
 13633              	.L814:
5561:bma2x2.c      **** 		/* read the hysteresis data */
5562:bma2x2.c      **** 		case BMA2x2_LOW_G_HYST:
5563:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 13634              		.loc 1 5563 0
 13635 003a 1E4B     		ldr	r3, .L819
 13636 003c 1B68     		ldr	r3, [r3]
 13637 003e DD68     		ldr	r5, [r3, #12]
 13638 0040 1C4B     		ldr	r3, .L819
 13639 0042 1B68     		ldr	r3, [r3]
 13640 0044 1879     		ldrb	r0, [r3, #4]
 13641 0046 0F23     		movs	r3, #15
 13642 0048 FC18     		adds	r4, r7, r3
 13643 004a 0E23     		movs	r3, #14
 13644 004c FA18     		adds	r2, r7, r3
 13645 004e 0123     		movs	r3, #1
 13646 0050 2421     		movs	r1, #36
 13647 0052 A847     		blx	r5
 13648 0054 0300     		movs	r3, r0
 13649 0056 2370     		strb	r3, [r4]
5564:bma2x2.c      **** 			(p_bma2x2->dev_addr,
5565:bma2x2.c      **** 			BMA2x2_LOW_G_HYST_REG,
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 341


5566:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
5567:bma2x2.c      **** 			*hyst_u8 = BMA2x2_GET_BITSLICE
 13650              		.loc 1 5567 0
 13651 0058 0E23     		movs	r3, #14
 13652 005a FB18     		adds	r3, r7, r3
 13653 005c 1B78     		ldrb	r3, [r3]
 13654 005e 0322     		movs	r2, #3
 13655 0060 1340     		ands	r3, r2
 13656 0062 DAB2     		uxtb	r2, r3
 13657 0064 3B68     		ldr	r3, [r7]
 13658 0066 1A70     		strb	r2, [r3]
5568:bma2x2.c      **** 			(data_u8, BMA2x2_LOW_G_HYST);
5569:bma2x2.c      **** 		break;
 13659              		.loc 1 5569 0
 13660 0068 1BE0     		b	.L816
 13661              	.L815:
5570:bma2x2.c      **** 		case BMA2x2_HIGH_G_HYST:
5571:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 13662              		.loc 1 5571 0
 13663 006a 124B     		ldr	r3, .L819
 13664 006c 1B68     		ldr	r3, [r3]
 13665 006e DD68     		ldr	r5, [r3, #12]
 13666 0070 104B     		ldr	r3, .L819
 13667 0072 1B68     		ldr	r3, [r3]
 13668 0074 1879     		ldrb	r0, [r3, #4]
 13669 0076 0F23     		movs	r3, #15
 13670 0078 FC18     		adds	r4, r7, r3
 13671 007a 0E23     		movs	r3, #14
 13672 007c FA18     		adds	r2, r7, r3
 13673 007e 0123     		movs	r3, #1
 13674 0080 2421     		movs	r1, #36
 13675 0082 A847     		blx	r5
 13676 0084 0300     		movs	r3, r0
 13677 0086 2370     		strb	r3, [r4]
5572:bma2x2.c      **** 			(p_bma2x2->dev_addr,
5573:bma2x2.c      **** 			BMA2x2_HIGH_G_HYST_REG,
5574:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
5575:bma2x2.c      **** 			*hyst_u8 = BMA2x2_GET_BITSLICE
 13678              		.loc 1 5575 0
 13679 0088 0E23     		movs	r3, #14
 13680 008a FB18     		adds	r3, r7, r3
 13681 008c 1B78     		ldrb	r3, [r3]
 13682 008e 9B09     		lsrs	r3, r3, #6
 13683 0090 DAB2     		uxtb	r2, r3
 13684 0092 3B68     		ldr	r3, [r7]
 13685 0094 1A70     		strb	r2, [r3]
5576:bma2x2.c      **** 			(data_u8, BMA2x2_HIGH_G_HYST);
5577:bma2x2.c      **** 		break;
 13686              		.loc 1 5577 0
 13687 0096 04E0     		b	.L816
 13688              	.L818:
5578:bma2x2.c      **** 		default:
5579:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 13689              		.loc 1 5579 0
 13690 0098 0F23     		movs	r3, #15
 13691 009a FB18     		adds	r3, r7, r3
 13692 009c FE22     		movs	r2, #254
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 342


 13693 009e 1A70     		strb	r2, [r3]
5580:bma2x2.c      **** 		break;
 13694              		.loc 1 5580 0
 13695 00a0 C046     		nop
 13696              	.L816:
5581:bma2x2.c      **** 		}
5582:bma2x2.c      **** 	}
5583:bma2x2.c      **** 	return com_rslt;
 13697              		.loc 1 5583 0
 13698 00a2 0F23     		movs	r3, #15
 13699 00a4 FB18     		adds	r3, r7, r3
 13700 00a6 1B78     		ldrb	r3, [r3]
 13701 00a8 5BB2     		sxtb	r3, r3
 13702              	.L817:
5584:bma2x2.c      **** }
 13703              		.loc 1 5584 0 discriminator 1
 13704 00aa 1800     		movs	r0, r3
 13705 00ac BD46     		mov	sp, r7
 13706 00ae 04B0     		add	sp, sp, #16
 13707              		@ sp needed
 13708 00b0 B0BD     		pop	{r4, r5, r7, pc}
 13709              	.L820:
 13710 00b2 C046     		.align	2
 13711              	.L819:
 13712 00b4 00000000 		.word	p_bma2x2
 13713              		.cfi_endproc
 13714              	.LFE82:
 13715              		.size	bma2x2_get_low_high_g_hyst, .-bma2x2_get_low_high_g_hyst
 13716              		.section	.text.bma2x2_set_low_high_g_hyst,"ax",%progbits
 13717              		.align	2
 13718              		.global	bma2x2_set_low_high_g_hyst
 13719              		.code	16
 13720              		.thumb_func
 13721              		.type	bma2x2_set_low_high_g_hyst, %function
 13722              	bma2x2_set_low_high_g_hyst:
 13723              	.LFB83:
5585:bma2x2.c      **** /*!
5586:bma2x2.c      ****  *	@brief This API is used to set
5587:bma2x2.c      ****  *	the low high hysteresis in the registers 0x24
5588:bma2x2.c      ****  *	@note LOW_G_HYST  -> bit form 0 to 1
5589:bma2x2.c      ****  *	@note HIGH_G_HYST  -> bit from 6 to 7
5590:bma2x2.c      ****  *
5591:bma2x2.c      ****  *  @param channel_u8: The value of hysteresis selection
5592:bma2x2.c      ****  *     channel_u8   | result
5593:bma2x2.c      ****  *   -----------------| ------------------
5594:bma2x2.c      ****  *           0        | BMA2x2_ACCEL_LOW_G_HYST
5595:bma2x2.c      ****  *           1        | BMA2x2_ACCEL_HIGH_G_HYST
5596:bma2x2.c      ****  *
5597:bma2x2.c      ****  *  @param hyst_u8: The hysteresis data
5598:bma2x2.c      ****  *
5599:bma2x2.c      ****  *	@note LOW HYSTERESIS
5600:bma2x2.c      ****  *	@note Hysteresis of low-g interrupt according to (hyst_u8 * 125)mg
5601:bma2x2.c      ****  *
5602:bma2x2.c      ****  *	@note HIGH HYSTERESIS
5603:bma2x2.c      ****  *	@note High hysteresis depends on the accel range selection
5604:bma2x2.c      ****  *    g-range           |    High Hysteresis
5605:bma2x2.c      ****  *  --------------------|----------------------------
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 343


5606:bma2x2.c      ****  *     2g               |    (thres_u8 * 125) mg
5607:bma2x2.c      ****  *     4g               |    (thres_u8 * 250) mg
5608:bma2x2.c      ****  *     8g               |    (thres_u8 * 500) mg
5609:bma2x2.c      ****  *     16g              |    (thres_u8 * 1000) mg
5610:bma2x2.c      ****  *
5611:bma2x2.c      ****  *	@return results of bus communication function
5612:bma2x2.c      ****  *	@retval 0 -> Success
5613:bma2x2.c      ****  *	@retval -1 -> Error
5614:bma2x2.c      ****  *
5615:bma2x2.c      ****  *
5616:bma2x2.c      ****  */
5617:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_low_high_g_hyst(u8 channel_u8,
5618:bma2x2.c      **** u8 hyst_u8)
5619:bma2x2.c      **** {
 13724              		.loc 1 5619 0
 13725              		.cfi_startproc
 13726              		@ args = 0, pretend = 0, frame = 16
 13727              		@ frame_needed = 1, uses_anonymous_args = 0
 13728 0000 B0B5     		push	{r4, r5, r7, lr}
 13729              		.cfi_def_cfa_offset 16
 13730              		.cfi_offset 4, -16
 13731              		.cfi_offset 5, -12
 13732              		.cfi_offset 7, -8
 13733              		.cfi_offset 14, -4
 13734 0002 84B0     		sub	sp, sp, #16
 13735              		.cfi_def_cfa_offset 32
 13736 0004 00AF     		add	r7, sp, #0
 13737              		.cfi_def_cfa_register 7
 13738 0006 0200     		movs	r2, r0
 13739 0008 FB1D     		adds	r3, r7, #7
 13740 000a 1A70     		strb	r2, [r3]
 13741 000c BB1D     		adds	r3, r7, #6
 13742 000e 0A1C     		adds	r2, r1, #0
 13743 0010 1A70     		strb	r2, [r3]
5620:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 13744              		.loc 1 5620 0
 13745 0012 0E23     		movs	r3, #14
 13746 0014 FB18     		adds	r3, r7, r3
 13747 0016 0022     		movs	r2, #0
 13748 0018 1A70     		strb	r2, [r3]
5621:bma2x2.c      **** 	/*  Variable used to return value of
5622:bma2x2.c      **** 	communication routine*/
5623:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 13749              		.loc 1 5623 0
 13750 001a 0F23     		movs	r3, #15
 13751 001c FB18     		adds	r3, r7, r3
 13752 001e FF22     		movs	r2, #255
 13753 0020 1A70     		strb	r2, [r3]
5624:bma2x2.c      **** 
5625:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 13754              		.loc 1 5625 0
 13755 0022 404B     		ldr	r3, .L830
 13756 0024 1B68     		ldr	r3, [r3]
 13757 0026 002B     		cmp	r3, #0
 13758 0028 02D1     		bne	.L822
5626:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
5627:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 344


 13759              		.loc 1 5627 0
 13760 002a 7F23     		movs	r3, #127
 13761 002c 5B42     		rsbs	r3, r3, #0
 13762 002e 75E0     		b	.L828
 13763              	.L822:
5628:bma2x2.c      **** 		} else {
5629:bma2x2.c      **** 		switch (channel_u8) {
 13764              		.loc 1 5629 0
 13765 0030 FB1D     		adds	r3, r7, #7
 13766 0032 1B78     		ldrb	r3, [r3]
 13767 0034 002B     		cmp	r3, #0
 13768 0036 02D0     		beq	.L825
 13769 0038 012B     		cmp	r3, #1
 13770 003a 34D0     		beq	.L826
 13771 003c 65E0     		b	.L829
 13772              	.L825:
5630:bma2x2.c      **** 		/* write the hysteresis data  */
5631:bma2x2.c      **** 		case BMA2x2_LOW_G_HYST:
5632:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 13773              		.loc 1 5632 0
 13774 003e 394B     		ldr	r3, .L830
 13775 0040 1B68     		ldr	r3, [r3]
 13776 0042 DD68     		ldr	r5, [r3, #12]
 13777 0044 374B     		ldr	r3, .L830
 13778 0046 1B68     		ldr	r3, [r3]
 13779 0048 1879     		ldrb	r0, [r3, #4]
 13780 004a 0F23     		movs	r3, #15
 13781 004c FC18     		adds	r4, r7, r3
 13782 004e 0E23     		movs	r3, #14
 13783 0050 FA18     		adds	r2, r7, r3
 13784 0052 0123     		movs	r3, #1
 13785 0054 2421     		movs	r1, #36
 13786 0056 A847     		blx	r5
 13787 0058 0300     		movs	r3, r0
 13788 005a 2370     		strb	r3, [r4]
5633:bma2x2.c      **** 			(p_bma2x2->dev_addr, BMA2x2_LOW_G_HYST_REG,
5634:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
5635:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 13789              		.loc 1 5635 0
 13790 005c 0E23     		movs	r3, #14
 13791 005e FB18     		adds	r3, r7, r3
 13792 0060 1B78     		ldrb	r3, [r3]
 13793 0062 5BB2     		sxtb	r3, r3
 13794 0064 0322     		movs	r2, #3
 13795 0066 9343     		bics	r3, r2
 13796 0068 5AB2     		sxtb	r2, r3
 13797 006a BB1D     		adds	r3, r7, #6
 13798 006c 1B78     		ldrb	r3, [r3]
 13799 006e 5BB2     		sxtb	r3, r3
 13800 0070 0321     		movs	r1, #3
 13801 0072 0B40     		ands	r3, r1
 13802 0074 5BB2     		sxtb	r3, r3
 13803 0076 1343     		orrs	r3, r2
 13804 0078 5BB2     		sxtb	r3, r3
 13805 007a DAB2     		uxtb	r2, r3
 13806 007c 0E23     		movs	r3, #14
 13807 007e FB18     		adds	r3, r7, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 345


 13808 0080 1A70     		strb	r2, [r3]
5636:bma2x2.c      **** 			(data_u8, BMA2x2_LOW_G_HYST, hyst_u8);
5637:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 13809              		.loc 1 5637 0
 13810 0082 0E23     		movs	r3, #14
 13811 0084 FB18     		adds	r3, r7, r3
 13812 0086 0122     		movs	r2, #1
 13813 0088 1900     		movs	r1, r3
 13814 008a 2420     		movs	r0, #36
 13815 008c FFF7FEFF 		bl	bma2x2_write_reg
 13816 0090 0300     		movs	r3, r0
 13817 0092 DAB2     		uxtb	r2, r3
 13818 0094 0F23     		movs	r3, #15
 13819 0096 FB18     		adds	r3, r7, r3
 13820 0098 1B78     		ldrb	r3, [r3]
 13821 009a D318     		adds	r3, r2, r3
 13822 009c DAB2     		uxtb	r2, r3
 13823 009e 0F23     		movs	r3, #15
 13824 00a0 FB18     		adds	r3, r7, r3
 13825 00a2 1A70     		strb	r2, [r3]
5638:bma2x2.c      **** 			BMA2x2_LOW_G_HYST_REG,
5639:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
5640:bma2x2.c      **** 		break;
 13826              		.loc 1 5640 0
 13827 00a4 36E0     		b	.L827
 13828              	.L826:
5641:bma2x2.c      **** 		case BMA2x2_HIGH_G_HYST:
5642:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 13829              		.loc 1 5642 0
 13830 00a6 1F4B     		ldr	r3, .L830
 13831 00a8 1B68     		ldr	r3, [r3]
 13832 00aa DD68     		ldr	r5, [r3, #12]
 13833 00ac 1D4B     		ldr	r3, .L830
 13834 00ae 1B68     		ldr	r3, [r3]
 13835 00b0 1879     		ldrb	r0, [r3, #4]
 13836 00b2 0F23     		movs	r3, #15
 13837 00b4 FC18     		adds	r4, r7, r3
 13838 00b6 0E23     		movs	r3, #14
 13839 00b8 FA18     		adds	r2, r7, r3
 13840 00ba 0123     		movs	r3, #1
 13841 00bc 2421     		movs	r1, #36
 13842 00be A847     		blx	r5
 13843 00c0 0300     		movs	r3, r0
 13844 00c2 2370     		strb	r3, [r4]
5643:bma2x2.c      **** 			(p_bma2x2->dev_addr,
5644:bma2x2.c      **** 			BMA2x2_HIGH_G_HYST_REG, &data_u8,
5645:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
5646:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 13845              		.loc 1 5646 0
 13846 00c4 0E23     		movs	r3, #14
 13847 00c6 FB18     		adds	r3, r7, r3
 13848 00c8 1B78     		ldrb	r3, [r3]
 13849 00ca 5BB2     		sxtb	r3, r3
 13850 00cc 3F22     		movs	r2, #63
 13851 00ce 1340     		ands	r3, r2
 13852 00d0 5AB2     		sxtb	r2, r3
 13853 00d2 BB1D     		adds	r3, r7, #6
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 346


 13854 00d4 1B78     		ldrb	r3, [r3]
 13855 00d6 9B01     		lsls	r3, r3, #6
 13856 00d8 5BB2     		sxtb	r3, r3
 13857 00da 1343     		orrs	r3, r2
 13858 00dc 5BB2     		sxtb	r3, r3
 13859 00de DAB2     		uxtb	r2, r3
 13860 00e0 0E23     		movs	r3, #14
 13861 00e2 FB18     		adds	r3, r7, r3
 13862 00e4 1A70     		strb	r2, [r3]
5647:bma2x2.c      **** 			(data_u8, BMA2x2_HIGH_G_HYST, hyst_u8);
5648:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 13863              		.loc 1 5648 0
 13864 00e6 0E23     		movs	r3, #14
 13865 00e8 FB18     		adds	r3, r7, r3
 13866 00ea 0122     		movs	r2, #1
 13867 00ec 1900     		movs	r1, r3
 13868 00ee 2420     		movs	r0, #36
 13869 00f0 FFF7FEFF 		bl	bma2x2_write_reg
 13870 00f4 0300     		movs	r3, r0
 13871 00f6 DAB2     		uxtb	r2, r3
 13872 00f8 0F23     		movs	r3, #15
 13873 00fa FB18     		adds	r3, r7, r3
 13874 00fc 1B78     		ldrb	r3, [r3]
 13875 00fe D318     		adds	r3, r2, r3
 13876 0100 DAB2     		uxtb	r2, r3
 13877 0102 0F23     		movs	r3, #15
 13878 0104 FB18     		adds	r3, r7, r3
 13879 0106 1A70     		strb	r2, [r3]
5649:bma2x2.c      **** 			BMA2x2_HIGH_G_HYST_REG,
5650:bma2x2.c      **** 			&data_u8,  BMA2x2_GEN_READ_WRITE_LENGTH);
5651:bma2x2.c      **** 		break;
 13880              		.loc 1 5651 0
 13881 0108 04E0     		b	.L827
 13882              	.L829:
5652:bma2x2.c      **** 		default:
5653:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 13883              		.loc 1 5653 0
 13884 010a 0F23     		movs	r3, #15
 13885 010c FB18     		adds	r3, r7, r3
 13886 010e FE22     		movs	r2, #254
 13887 0110 1A70     		strb	r2, [r3]
5654:bma2x2.c      **** 		break;
 13888              		.loc 1 5654 0
 13889 0112 C046     		nop
 13890              	.L827:
5655:bma2x2.c      **** 		}
5656:bma2x2.c      **** 	}
5657:bma2x2.c      **** 	return com_rslt;
 13891              		.loc 1 5657 0
 13892 0114 0F23     		movs	r3, #15
 13893 0116 FB18     		adds	r3, r7, r3
 13894 0118 1B78     		ldrb	r3, [r3]
 13895 011a 5BB2     		sxtb	r3, r3
 13896              	.L828:
5658:bma2x2.c      **** }
 13897              		.loc 1 5658 0 discriminator 1
 13898 011c 1800     		movs	r0, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 347


 13899 011e BD46     		mov	sp, r7
 13900 0120 04B0     		add	sp, sp, #16
 13901              		@ sp needed
 13902 0122 B0BD     		pop	{r4, r5, r7, pc}
 13903              	.L831:
 13904              		.align	2
 13905              	.L830:
 13906 0124 00000000 		.word	p_bma2x2
 13907              		.cfi_endproc
 13908              	.LFE83:
 13909              		.size	bma2x2_set_low_high_g_hyst, .-bma2x2_set_low_high_g_hyst
 13910              		.section	.text.bma2x2_get_low_g_mode,"ax",%progbits
 13911              		.align	2
 13912              		.global	bma2x2_get_low_g_mode
 13913              		.code	16
 13914              		.thumb_func
 13915              		.type	bma2x2_get_low_g_mode, %function
 13916              	bma2x2_get_low_g_mode:
 13917              	.LFB84:
5659:bma2x2.c      **** /*!
5660:bma2x2.c      ****  *	@brief This API is used to get
5661:bma2x2.c      ****  *	low_g  mode in the registers 0x24 bit 2
5662:bma2x2.c      ****  *
5663:bma2x2.c      ****  *
5664:bma2x2.c      ****  *	@param low_g_mode_u8: The value of Low_G mode
5665:bma2x2.c      ****  *      low_g_mode_u8   |  g-result
5666:bma2x2.c      ****  *  --------------------|----------------------------
5667:bma2x2.c      ****  *     0x00             | LOW_G_SINGLE_AXIS_MODE
5668:bma2x2.c      ****  *     0x01             | LOW_G_SUMMING_MODE
5669:bma2x2.c      ****  *
5670:bma2x2.c      ****  *
5671:bma2x2.c      ****  *	@return results of bus communication function
5672:bma2x2.c      ****  *	@retval 0 -> Success
5673:bma2x2.c      ****  *	@retval -1 -> Error
5674:bma2x2.c      ****  *
5675:bma2x2.c      ****  *
5676:bma2x2.c      **** */
5677:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_low_g_mode(u8 *low_g_mode_u8)
5678:bma2x2.c      **** {
 13918              		.loc 1 5678 0
 13919              		.cfi_startproc
 13920              		@ args = 0, pretend = 0, frame = 16
 13921              		@ frame_needed = 1, uses_anonymous_args = 0
 13922 0000 B0B5     		push	{r4, r5, r7, lr}
 13923              		.cfi_def_cfa_offset 16
 13924              		.cfi_offset 4, -16
 13925              		.cfi_offset 5, -12
 13926              		.cfi_offset 7, -8
 13927              		.cfi_offset 14, -4
 13928 0002 84B0     		sub	sp, sp, #16
 13929              		.cfi_def_cfa_offset 32
 13930 0004 00AF     		add	r7, sp, #0
 13931              		.cfi_def_cfa_register 7
 13932 0006 7860     		str	r0, [r7, #4]
5679:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 13933              		.loc 1 5679 0
 13934 0008 0E23     		movs	r3, #14
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 348


 13935 000a FB18     		adds	r3, r7, r3
 13936 000c 0022     		movs	r2, #0
 13937 000e 1A70     		strb	r2, [r3]
5680:bma2x2.c      **** 	/*  Variable used to return value of
5681:bma2x2.c      **** 	communication routine*/
5682:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 13938              		.loc 1 5682 0
 13939 0010 0F23     		movs	r3, #15
 13940 0012 FB18     		adds	r3, r7, r3
 13941 0014 FF22     		movs	r2, #255
 13942 0016 1A70     		strb	r2, [r3]
5683:bma2x2.c      **** 
5684:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 13943              		.loc 1 5684 0
 13944 0018 134B     		ldr	r3, .L836
 13945 001a 1B68     		ldr	r3, [r3]
 13946 001c 002B     		cmp	r3, #0
 13947 001e 02D1     		bne	.L833
5685:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
5686:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 13948              		.loc 1 5686 0
 13949 0020 7F23     		movs	r3, #127
 13950 0022 5B42     		rsbs	r3, r3, #0
 13951 0024 1CE0     		b	.L835
 13952              	.L833:
5687:bma2x2.c      **** 		} else {
5688:bma2x2.c      **** 			/* read the low-g mode*/
5689:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 13953              		.loc 1 5689 0
 13954 0026 104B     		ldr	r3, .L836
 13955 0028 1B68     		ldr	r3, [r3]
 13956 002a DD68     		ldr	r5, [r3, #12]
 13957 002c 0E4B     		ldr	r3, .L836
 13958 002e 1B68     		ldr	r3, [r3]
 13959 0030 1879     		ldrb	r0, [r3, #4]
 13960 0032 0F23     		movs	r3, #15
 13961 0034 FC18     		adds	r4, r7, r3
 13962 0036 0E23     		movs	r3, #14
 13963 0038 FA18     		adds	r2, r7, r3
 13964 003a 0123     		movs	r3, #1
 13965 003c 2421     		movs	r1, #36
 13966 003e A847     		blx	r5
 13967 0040 0300     		movs	r3, r0
 13968 0042 2370     		strb	r3, [r4]
5690:bma2x2.c      **** 			(p_bma2x2->dev_addr, BMA2x2_LOW_G_INTR_MODE_REG,
5691:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
5692:bma2x2.c      **** 			*low_g_mode_u8 = BMA2x2_GET_BITSLICE(data_u8,
 13969              		.loc 1 5692 0
 13970 0044 0E23     		movs	r3, #14
 13971 0046 FB18     		adds	r3, r7, r3
 13972 0048 1B78     		ldrb	r3, [r3]
 13973 004a 9B10     		asrs	r3, r3, #2
 13974 004c DBB2     		uxtb	r3, r3
 13975 004e 0122     		movs	r2, #1
 13976 0050 1340     		ands	r3, r2
 13977 0052 DAB2     		uxtb	r2, r3
 13978 0054 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 349


 13979 0056 1A70     		strb	r2, [r3]
5693:bma2x2.c      **** 			BMA2x2_LOW_G_INTR_MODE);
5694:bma2x2.c      **** 		}
5695:bma2x2.c      **** 	return com_rslt;
 13980              		.loc 1 5695 0
 13981 0058 0F23     		movs	r3, #15
 13982 005a FB18     		adds	r3, r7, r3
 13983 005c 1B78     		ldrb	r3, [r3]
 13984 005e 5BB2     		sxtb	r3, r3
 13985              	.L835:
5696:bma2x2.c      **** }
 13986              		.loc 1 5696 0 discriminator 1
 13987 0060 1800     		movs	r0, r3
 13988 0062 BD46     		mov	sp, r7
 13989 0064 04B0     		add	sp, sp, #16
 13990              		@ sp needed
 13991 0066 B0BD     		pop	{r4, r5, r7, pc}
 13992              	.L837:
 13993              		.align	2
 13994              	.L836:
 13995 0068 00000000 		.word	p_bma2x2
 13996              		.cfi_endproc
 13997              	.LFE84:
 13998              		.size	bma2x2_get_low_g_mode, .-bma2x2_get_low_g_mode
 13999              		.section	.text.bma2x2_set_low_g_mode,"ax",%progbits
 14000              		.align	2
 14001              		.global	bma2x2_set_low_g_mode
 14002              		.code	16
 14003              		.thumb_func
 14004              		.type	bma2x2_set_low_g_mode, %function
 14005              	bma2x2_set_low_g_mode:
 14006              	.LFB85:
5697:bma2x2.c      **** /*!
5698:bma2x2.c      ****  *	@brief This API is used to set
5699:bma2x2.c      ****  *	low_g  mode in the registers 0x24 bit 2
5700:bma2x2.c      ****  *
5701:bma2x2.c      ****  *
5702:bma2x2.c      ****  *	@param low_g_mode_u8: The value of Low_G mode
5703:bma2x2.c      ****  *    low_g_mode_u8   |    result
5704:bma2x2.c      ****  *  --------------------|----------------------------
5705:bma2x2.c      ****  *     0x00             | LOW_G_SINGLE_AXIS_MODE
5706:bma2x2.c      ****  *     0x01             | LOW_G_SUMMING_MODE
5707:bma2x2.c      ****  *
5708:bma2x2.c      ****  *
5709:bma2x2.c      ****  *	@return results of bus communication function
5710:bma2x2.c      ****  *	@retval 0 -> Success
5711:bma2x2.c      ****  *	@retval -1 -> Error
5712:bma2x2.c      ****  *
5713:bma2x2.c      ****  *
5714:bma2x2.c      **** */
5715:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_low_g_mode(u8 low_g_mode_u8)
5716:bma2x2.c      **** {
 14007              		.loc 1 5716 0
 14008              		.cfi_startproc
 14009              		@ args = 0, pretend = 0, frame = 16
 14010              		@ frame_needed = 1, uses_anonymous_args = 0
 14011 0000 B0B5     		push	{r4, r5, r7, lr}
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 350


 14012              		.cfi_def_cfa_offset 16
 14013              		.cfi_offset 4, -16
 14014              		.cfi_offset 5, -12
 14015              		.cfi_offset 7, -8
 14016              		.cfi_offset 14, -4
 14017 0002 84B0     		sub	sp, sp, #16
 14018              		.cfi_def_cfa_offset 32
 14019 0004 00AF     		add	r7, sp, #0
 14020              		.cfi_def_cfa_register 7
 14021 0006 0200     		movs	r2, r0
 14022 0008 FB1D     		adds	r3, r7, #7
 14023 000a 1A70     		strb	r2, [r3]
5717:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 14024              		.loc 1 5717 0
 14025 000c 0E23     		movs	r3, #14
 14026 000e FB18     		adds	r3, r7, r3
 14027 0010 0022     		movs	r2, #0
 14028 0012 1A70     		strb	r2, [r3]
5718:bma2x2.c      **** 	/*  Variable used to return value of
5719:bma2x2.c      **** 	communication routine*/
5720:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 14029              		.loc 1 5720 0
 14030 0014 0F23     		movs	r3, #15
 14031 0016 FB18     		adds	r3, r7, r3
 14032 0018 FF22     		movs	r2, #255
 14033 001a 1A70     		strb	r2, [r3]
5721:bma2x2.c      **** 
5722:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 14034              		.loc 1 5722 0
 14035 001c 214B     		ldr	r3, .L842
 14036 001e 1B68     		ldr	r3, [r3]
 14037 0020 002B     		cmp	r3, #0
 14038 0022 02D1     		bne	.L839
5723:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
5724:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 14039              		.loc 1 5724 0
 14040 0024 7F23     		movs	r3, #127
 14041 0026 5B42     		rsbs	r3, r3, #0
 14042 0028 37E0     		b	.L841
 14043              	.L839:
5725:bma2x2.c      **** 		} else {
5726:bma2x2.c      **** 			/* write the low-g mode*/
5727:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 14044              		.loc 1 5727 0
 14045 002a 1E4B     		ldr	r3, .L842
 14046 002c 1B68     		ldr	r3, [r3]
 14047 002e DD68     		ldr	r5, [r3, #12]
 14048 0030 1C4B     		ldr	r3, .L842
 14049 0032 1B68     		ldr	r3, [r3]
 14050 0034 1879     		ldrb	r0, [r3, #4]
 14051 0036 0F23     		movs	r3, #15
 14052 0038 FC18     		adds	r4, r7, r3
 14053 003a 0E23     		movs	r3, #14
 14054 003c FA18     		adds	r2, r7, r3
 14055 003e 0123     		movs	r3, #1
 14056 0040 2421     		movs	r1, #36
 14057 0042 A847     		blx	r5
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 351


 14058 0044 0300     		movs	r3, r0
 14059 0046 2370     		strb	r3, [r4]
5728:bma2x2.c      **** 			(p_bma2x2->dev_addr,
5729:bma2x2.c      **** 			BMA2x2_LOW_G_INTR_MODE_REG, &data_u8,
5730:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
5731:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 14060              		.loc 1 5731 0
 14061 0048 0E23     		movs	r3, #14
 14062 004a FB18     		adds	r3, r7, r3
 14063 004c 1B78     		ldrb	r3, [r3]
 14064 004e 5BB2     		sxtb	r3, r3
 14065 0050 0422     		movs	r2, #4
 14066 0052 9343     		bics	r3, r2
 14067 0054 5AB2     		sxtb	r2, r3
 14068 0056 FB1D     		adds	r3, r7, #7
 14069 0058 1B78     		ldrb	r3, [r3]
 14070 005a 9B00     		lsls	r3, r3, #2
 14071 005c 5BB2     		sxtb	r3, r3
 14072 005e 0421     		movs	r1, #4
 14073 0060 0B40     		ands	r3, r1
 14074 0062 5BB2     		sxtb	r3, r3
 14075 0064 1343     		orrs	r3, r2
 14076 0066 5BB2     		sxtb	r3, r3
 14077 0068 DAB2     		uxtb	r2, r3
 14078 006a 0E23     		movs	r3, #14
 14079 006c FB18     		adds	r3, r7, r3
 14080 006e 1A70     		strb	r2, [r3]
5732:bma2x2.c      **** 			(data_u8, BMA2x2_LOW_G_INTR_MODE, low_g_mode_u8);
5733:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 14081              		.loc 1 5733 0
 14082 0070 0E23     		movs	r3, #14
 14083 0072 FB18     		adds	r3, r7, r3
 14084 0074 0122     		movs	r2, #1
 14085 0076 1900     		movs	r1, r3
 14086 0078 2420     		movs	r0, #36
 14087 007a FFF7FEFF 		bl	bma2x2_write_reg
 14088 007e 0300     		movs	r3, r0
 14089 0080 DAB2     		uxtb	r2, r3
 14090 0082 0F23     		movs	r3, #15
 14091 0084 FB18     		adds	r3, r7, r3
 14092 0086 1B78     		ldrb	r3, [r3]
 14093 0088 D318     		adds	r3, r2, r3
 14094 008a DAB2     		uxtb	r2, r3
 14095 008c 0F23     		movs	r3, #15
 14096 008e FB18     		adds	r3, r7, r3
 14097 0090 1A70     		strb	r2, [r3]
5734:bma2x2.c      **** 			BMA2x2_LOW_G_INTR_MODE_REG,
5735:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
5736:bma2x2.c      **** 		}
5737:bma2x2.c      **** 	return com_rslt;
 14098              		.loc 1 5737 0
 14099 0092 0F23     		movs	r3, #15
 14100 0094 FB18     		adds	r3, r7, r3
 14101 0096 1B78     		ldrb	r3, [r3]
 14102 0098 5BB2     		sxtb	r3, r3
 14103              	.L841:
5738:bma2x2.c      **** }
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 352


 14104              		.loc 1 5738 0 discriminator 1
 14105 009a 1800     		movs	r0, r3
 14106 009c BD46     		mov	sp, r7
 14107 009e 04B0     		add	sp, sp, #16
 14108              		@ sp needed
 14109 00a0 B0BD     		pop	{r4, r5, r7, pc}
 14110              	.L843:
 14111 00a2 C046     		.align	2
 14112              	.L842:
 14113 00a4 00000000 		.word	p_bma2x2
 14114              		.cfi_endproc
 14115              	.LFE85:
 14116              		.size	bma2x2_set_low_g_mode, .-bma2x2_set_low_g_mode
 14117              		.section	.text.bma2x2_get_tap_durn,"ax",%progbits
 14118              		.align	2
 14119              		.global	bma2x2_get_tap_durn
 14120              		.code	16
 14121              		.thumb_func
 14122              		.type	bma2x2_get_tap_durn, %function
 14123              	bma2x2_get_tap_durn:
 14124              	.LFB86:
5739:bma2x2.c      **** /*!
5740:bma2x2.c      ****  *	@brief This API is used to get
5741:bma2x2.c      ****  *	the tap duration in the register 0x2A bit form 0 to 2
5742:bma2x2.c      ****  *
5743:bma2x2.c      ****  *
5744:bma2x2.c      ****  *	@param tap_durn_u8: The value of tap duration
5745:bma2x2.c      ****  *    tap_durn_u8     |    result
5746:bma2x2.c      ****  *  --------------------|----------------------------
5747:bma2x2.c      ****  *     0x00             | TAP_DURN_50_MS
5748:bma2x2.c      ****  *     0x01             | TAP_DURN_100_MS
5749:bma2x2.c      ****  *     0x02             | TAP_DURN_150_MS
5750:bma2x2.c      ****  *     0x03             | TAP_DURN_200_MS
5751:bma2x2.c      ****  *     0x04             | TAP_DURN_250_MS
5752:bma2x2.c      ****  *     0x05             | TAP_DURN_375_MS
5753:bma2x2.c      ****  *     0x06             | TAP_DURN_500_MS
5754:bma2x2.c      ****  *     0x07             | TAP_DURN_700_MS
5755:bma2x2.c      ****  *
5756:bma2x2.c      ****  *
5757:bma2x2.c      ****  *
5758:bma2x2.c      ****  *	@return results of bus communication function
5759:bma2x2.c      ****  *	@retval 0 -> Success
5760:bma2x2.c      ****  *	@retval -1 -> Error
5761:bma2x2.c      ****  *
5762:bma2x2.c      ****  *
5763:bma2x2.c      ****  */
5764:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_tap_durn(u8 *tap_durn_u8)
5765:bma2x2.c      **** {
 14125              		.loc 1 5765 0
 14126              		.cfi_startproc
 14127              		@ args = 0, pretend = 0, frame = 16
 14128              		@ frame_needed = 1, uses_anonymous_args = 0
 14129 0000 B0B5     		push	{r4, r5, r7, lr}
 14130              		.cfi_def_cfa_offset 16
 14131              		.cfi_offset 4, -16
 14132              		.cfi_offset 5, -12
 14133              		.cfi_offset 7, -8
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 353


 14134              		.cfi_offset 14, -4
 14135 0002 84B0     		sub	sp, sp, #16
 14136              		.cfi_def_cfa_offset 32
 14137 0004 00AF     		add	r7, sp, #0
 14138              		.cfi_def_cfa_register 7
 14139 0006 7860     		str	r0, [r7, #4]
5766:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 14140              		.loc 1 5766 0
 14141 0008 0E23     		movs	r3, #14
 14142 000a FB18     		adds	r3, r7, r3
 14143 000c 0022     		movs	r2, #0
 14144 000e 1A70     		strb	r2, [r3]
5767:bma2x2.c      **** 	/*  Variable used to return value of
5768:bma2x2.c      **** 	communication routine*/
5769:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 14145              		.loc 1 5769 0
 14146 0010 0F23     		movs	r3, #15
 14147 0012 FB18     		adds	r3, r7, r3
 14148 0014 FF22     		movs	r2, #255
 14149 0016 1A70     		strb	r2, [r3]
5770:bma2x2.c      **** 
5771:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 14150              		.loc 1 5771 0
 14151 0018 124B     		ldr	r3, .L848
 14152 001a 1B68     		ldr	r3, [r3]
 14153 001c 002B     		cmp	r3, #0
 14154 001e 02D1     		bne	.L845
5772:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
5773:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 14155              		.loc 1 5773 0
 14156 0020 7F23     		movs	r3, #127
 14157 0022 5B42     		rsbs	r3, r3, #0
 14158 0024 1AE0     		b	.L847
 14159              	.L845:
5774:bma2x2.c      **** 		} else {
5775:bma2x2.c      **** 			/* read the tap duration*/
5776:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 14160              		.loc 1 5776 0
 14161 0026 0F4B     		ldr	r3, .L848
 14162 0028 1B68     		ldr	r3, [r3]
 14163 002a DD68     		ldr	r5, [r3, #12]
 14164 002c 0D4B     		ldr	r3, .L848
 14165 002e 1B68     		ldr	r3, [r3]
 14166 0030 1879     		ldrb	r0, [r3, #4]
 14167 0032 0F23     		movs	r3, #15
 14168 0034 FC18     		adds	r4, r7, r3
 14169 0036 0E23     		movs	r3, #14
 14170 0038 FA18     		adds	r2, r7, r3
 14171 003a 0123     		movs	r3, #1
 14172 003c 2A21     		movs	r1, #42
 14173 003e A847     		blx	r5
 14174 0040 0300     		movs	r3, r0
 14175 0042 2370     		strb	r3, [r4]
5777:bma2x2.c      **** 			(p_bma2x2->dev_addr,
5778:bma2x2.c      **** 			BMA2x2_TAP_DURN_REG, &data_u8,
5779:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
5780:bma2x2.c      **** 			*tap_durn_u8 = BMA2x2_GET_BITSLICE
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 354


 14176              		.loc 1 5780 0
 14177 0044 0E23     		movs	r3, #14
 14178 0046 FB18     		adds	r3, r7, r3
 14179 0048 1B78     		ldrb	r3, [r3]
 14180 004a 0722     		movs	r2, #7
 14181 004c 1340     		ands	r3, r2
 14182 004e DAB2     		uxtb	r2, r3
 14183 0050 7B68     		ldr	r3, [r7, #4]
 14184 0052 1A70     		strb	r2, [r3]
5781:bma2x2.c      **** 			(data_u8, BMA2x2_TAP_DURN);
5782:bma2x2.c      **** 		}
5783:bma2x2.c      **** 	return com_rslt;
 14185              		.loc 1 5783 0
 14186 0054 0F23     		movs	r3, #15
 14187 0056 FB18     		adds	r3, r7, r3
 14188 0058 1B78     		ldrb	r3, [r3]
 14189 005a 5BB2     		sxtb	r3, r3
 14190              	.L847:
5784:bma2x2.c      **** }
 14191              		.loc 1 5784 0 discriminator 1
 14192 005c 1800     		movs	r0, r3
 14193 005e BD46     		mov	sp, r7
 14194 0060 04B0     		add	sp, sp, #16
 14195              		@ sp needed
 14196 0062 B0BD     		pop	{r4, r5, r7, pc}
 14197              	.L849:
 14198              		.align	2
 14199              	.L848:
 14200 0064 00000000 		.word	p_bma2x2
 14201              		.cfi_endproc
 14202              	.LFE86:
 14203              		.size	bma2x2_get_tap_durn, .-bma2x2_get_tap_durn
 14204              		.section	.text.bma2x2_set_tap_durn,"ax",%progbits
 14205              		.align	2
 14206              		.global	bma2x2_set_tap_durn
 14207              		.code	16
 14208              		.thumb_func
 14209              		.type	bma2x2_set_tap_durn, %function
 14210              	bma2x2_set_tap_durn:
 14211              	.LFB87:
5785:bma2x2.c      **** /*!
5786:bma2x2.c      ****  *	@brief This API is used to set
5787:bma2x2.c      ****  *	the tap duration in the register 0x2A bit form 0 to 2
5788:bma2x2.c      ****  *
5789:bma2x2.c      ****  *
5790:bma2x2.c      ****  *	@param tap_durn_u8: The value of tap duration
5791:bma2x2.c      ****  *    tap_durn_u8     |    result
5792:bma2x2.c      ****  *  --------------------|----------------------
5793:bma2x2.c      ****  *     0x00             | TAP_DURN_50_MS
5794:bma2x2.c      ****  *     0x01             | TAP_DURN_100_MS
5795:bma2x2.c      ****  *     0x02             | TAP_DURN_150_MS
5796:bma2x2.c      ****  *     0x03             | TAP_DURN_200_MS
5797:bma2x2.c      ****  *     0x04             | TAP_DURN_250_MS
5798:bma2x2.c      ****  *     0x05             | TAP_DURN_375_MS
5799:bma2x2.c      ****  *     0x06             | TAP_DURN_500_MS
5800:bma2x2.c      ****  *     0x07             | TAP_DURN_700_MS
5801:bma2x2.c      ****  *
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 355


5802:bma2x2.c      ****  *
5803:bma2x2.c      ****  *
5804:bma2x2.c      ****  *	@return results of bus communication function
5805:bma2x2.c      ****  *	@retval 0 -> Success
5806:bma2x2.c      ****  *	@retval -1 -> Error
5807:bma2x2.c      ****  *
5808:bma2x2.c      ****  *
5809:bma2x2.c      ****  */
5810:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_tap_durn(u8 tap_durn_u8)
5811:bma2x2.c      **** {
 14212              		.loc 1 5811 0
 14213              		.cfi_startproc
 14214              		@ args = 0, pretend = 0, frame = 16
 14215              		@ frame_needed = 1, uses_anonymous_args = 0
 14216 0000 B0B5     		push	{r4, r5, r7, lr}
 14217              		.cfi_def_cfa_offset 16
 14218              		.cfi_offset 4, -16
 14219              		.cfi_offset 5, -12
 14220              		.cfi_offset 7, -8
 14221              		.cfi_offset 14, -4
 14222 0002 84B0     		sub	sp, sp, #16
 14223              		.cfi_def_cfa_offset 32
 14224 0004 00AF     		add	r7, sp, #0
 14225              		.cfi_def_cfa_register 7
 14226 0006 0200     		movs	r2, r0
 14227 0008 FB1D     		adds	r3, r7, #7
 14228 000a 1A70     		strb	r2, [r3]
5812:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 14229              		.loc 1 5812 0
 14230 000c 0E23     		movs	r3, #14
 14231 000e FB18     		adds	r3, r7, r3
 14232 0010 0022     		movs	r2, #0
 14233 0012 1A70     		strb	r2, [r3]
5813:bma2x2.c      **** 	/*  Variable used to return value of
5814:bma2x2.c      **** 	communication routine*/
5815:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 14234              		.loc 1 5815 0
 14235 0014 0F23     		movs	r3, #15
 14236 0016 FB18     		adds	r3, r7, r3
 14237 0018 FF22     		movs	r2, #255
 14238 001a 1A70     		strb	r2, [r3]
5816:bma2x2.c      **** 
5817:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 14239              		.loc 1 5817 0
 14240 001c 204B     		ldr	r3, .L854
 14241 001e 1B68     		ldr	r3, [r3]
 14242 0020 002B     		cmp	r3, #0
 14243 0022 02D1     		bne	.L851
5818:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
5819:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 14244              		.loc 1 5819 0
 14245 0024 7F23     		movs	r3, #127
 14246 0026 5B42     		rsbs	r3, r3, #0
 14247 0028 36E0     		b	.L853
 14248              	.L851:
5820:bma2x2.c      **** 		} else {
5821:bma2x2.c      **** 			/* write the tap duration */
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 356


5822:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC(
 14249              		.loc 1 5822 0
 14250 002a 1D4B     		ldr	r3, .L854
 14251 002c 1B68     		ldr	r3, [r3]
 14252 002e DD68     		ldr	r5, [r3, #12]
 14253 0030 1B4B     		ldr	r3, .L854
 14254 0032 1B68     		ldr	r3, [r3]
 14255 0034 1879     		ldrb	r0, [r3, #4]
 14256 0036 0F23     		movs	r3, #15
 14257 0038 FC18     		adds	r4, r7, r3
 14258 003a 0E23     		movs	r3, #14
 14259 003c FA18     		adds	r2, r7, r3
 14260 003e 0123     		movs	r3, #1
 14261 0040 2A21     		movs	r1, #42
 14262 0042 A847     		blx	r5
 14263 0044 0300     		movs	r3, r0
 14264 0046 2370     		strb	r3, [r4]
5823:bma2x2.c      **** 			p_bma2x2->dev_addr,
5824:bma2x2.c      **** 			BMA2x2_TAP_DURN_REG, &data_u8,
5825:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
5826:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 14265              		.loc 1 5826 0
 14266 0048 0E23     		movs	r3, #14
 14267 004a FB18     		adds	r3, r7, r3
 14268 004c 1B78     		ldrb	r3, [r3]
 14269 004e 5BB2     		sxtb	r3, r3
 14270 0050 0722     		movs	r2, #7
 14271 0052 9343     		bics	r3, r2
 14272 0054 5AB2     		sxtb	r2, r3
 14273 0056 FB1D     		adds	r3, r7, #7
 14274 0058 1B78     		ldrb	r3, [r3]
 14275 005a 5BB2     		sxtb	r3, r3
 14276 005c 0721     		movs	r1, #7
 14277 005e 0B40     		ands	r3, r1
 14278 0060 5BB2     		sxtb	r3, r3
 14279 0062 1343     		orrs	r3, r2
 14280 0064 5BB2     		sxtb	r3, r3
 14281 0066 DAB2     		uxtb	r2, r3
 14282 0068 0E23     		movs	r3, #14
 14283 006a FB18     		adds	r3, r7, r3
 14284 006c 1A70     		strb	r2, [r3]
5827:bma2x2.c      **** 			(data_u8, BMA2x2_TAP_DURN, tap_durn_u8);
5828:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 14285              		.loc 1 5828 0
 14286 006e 0E23     		movs	r3, #14
 14287 0070 FB18     		adds	r3, r7, r3
 14288 0072 0122     		movs	r2, #1
 14289 0074 1900     		movs	r1, r3
 14290 0076 2A20     		movs	r0, #42
 14291 0078 FFF7FEFF 		bl	bma2x2_write_reg
 14292 007c 0300     		movs	r3, r0
 14293 007e DAB2     		uxtb	r2, r3
 14294 0080 0F23     		movs	r3, #15
 14295 0082 FB18     		adds	r3, r7, r3
 14296 0084 1B78     		ldrb	r3, [r3]
 14297 0086 D318     		adds	r3, r2, r3
 14298 0088 DAB2     		uxtb	r2, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 357


 14299 008a 0F23     		movs	r3, #15
 14300 008c FB18     		adds	r3, r7, r3
 14301 008e 1A70     		strb	r2, [r3]
5829:bma2x2.c      **** 			BMA2x2_TAP_DURN_REG, &data_u8,
5830:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
5831:bma2x2.c      **** 		}
5832:bma2x2.c      **** 	return com_rslt;
 14302              		.loc 1 5832 0
 14303 0090 0F23     		movs	r3, #15
 14304 0092 FB18     		adds	r3, r7, r3
 14305 0094 1B78     		ldrb	r3, [r3]
 14306 0096 5BB2     		sxtb	r3, r3
 14307              	.L853:
5833:bma2x2.c      **** }
 14308              		.loc 1 5833 0 discriminator 1
 14309 0098 1800     		movs	r0, r3
 14310 009a BD46     		mov	sp, r7
 14311 009c 04B0     		add	sp, sp, #16
 14312              		@ sp needed
 14313 009e B0BD     		pop	{r4, r5, r7, pc}
 14314              	.L855:
 14315              		.align	2
 14316              	.L854:
 14317 00a0 00000000 		.word	p_bma2x2
 14318              		.cfi_endproc
 14319              	.LFE87:
 14320              		.size	bma2x2_set_tap_durn, .-bma2x2_set_tap_durn
 14321              		.section	.text.bma2x2_get_tap_shock,"ax",%progbits
 14322              		.align	2
 14323              		.global	bma2x2_get_tap_shock
 14324              		.code	16
 14325              		.thumb_func
 14326              		.type	bma2x2_get_tap_shock, %function
 14327              	bma2x2_get_tap_shock:
 14328              	.LFB88:
5834:bma2x2.c      **** /*!
5835:bma2x2.c      ****  *	@brief This API is used to get
5836:bma2x2.c      ****  *	the tap shock form the register 0x2A bit 6
5837:bma2x2.c      ****  *
5838:bma2x2.c      ****  *
5839:bma2x2.c      ****  *
5840:bma2x2.c      ****  *	@param tap_shock_u8: The value of tap shock
5841:bma2x2.c      ****  *    tap_shock_u8    |    result
5842:bma2x2.c      ****  *  --------------------|----------------------
5843:bma2x2.c      ****  *     0x00             | TAP_SHOCK_50_MS
5844:bma2x2.c      ****  *     0x01             | TAP_SHOCK_75_MS
5845:bma2x2.c      ****  *
5846:bma2x2.c      ****  *
5847:bma2x2.c      ****  *	@return results of bus communication function
5848:bma2x2.c      ****  *	@retval 0 -> Success
5849:bma2x2.c      ****  *	@retval -1 -> Error
5850:bma2x2.c      ****  *
5851:bma2x2.c      ****  *
5852:bma2x2.c      **** */
5853:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_tap_shock(u8 *tap_shock_u8)
5854:bma2x2.c      **** {
 14329              		.loc 1 5854 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 358


 14330              		.cfi_startproc
 14331              		@ args = 0, pretend = 0, frame = 16
 14332              		@ frame_needed = 1, uses_anonymous_args = 0
 14333 0000 B0B5     		push	{r4, r5, r7, lr}
 14334              		.cfi_def_cfa_offset 16
 14335              		.cfi_offset 4, -16
 14336              		.cfi_offset 5, -12
 14337              		.cfi_offset 7, -8
 14338              		.cfi_offset 14, -4
 14339 0002 84B0     		sub	sp, sp, #16
 14340              		.cfi_def_cfa_offset 32
 14341 0004 00AF     		add	r7, sp, #0
 14342              		.cfi_def_cfa_register 7
 14343 0006 7860     		str	r0, [r7, #4]
5855:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 14344              		.loc 1 5855 0
 14345 0008 0E23     		movs	r3, #14
 14346 000a FB18     		adds	r3, r7, r3
 14347 000c 0022     		movs	r2, #0
 14348 000e 1A70     		strb	r2, [r3]
5856:bma2x2.c      **** 	/*  Variable used to return value of
5857:bma2x2.c      **** 	communication routine*/
5858:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 14349              		.loc 1 5858 0
 14350 0010 0F23     		movs	r3, #15
 14351 0012 FB18     		adds	r3, r7, r3
 14352 0014 FF22     		movs	r2, #255
 14353 0016 1A70     		strb	r2, [r3]
5859:bma2x2.c      **** 
5860:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 14354              		.loc 1 5860 0
 14355 0018 134B     		ldr	r3, .L860
 14356 001a 1B68     		ldr	r3, [r3]
 14357 001c 002B     		cmp	r3, #0
 14358 001e 02D1     		bne	.L857
5861:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
5862:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 14359              		.loc 1 5862 0
 14360 0020 7F23     		movs	r3, #127
 14361 0022 5B42     		rsbs	r3, r3, #0
 14362 0024 1CE0     		b	.L859
 14363              	.L857:
5863:bma2x2.c      **** 		} else {
5864:bma2x2.c      **** 			/* read tap shock value */
5865:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 14364              		.loc 1 5865 0
 14365 0026 104B     		ldr	r3, .L860
 14366 0028 1B68     		ldr	r3, [r3]
 14367 002a DD68     		ldr	r5, [r3, #12]
 14368 002c 0E4B     		ldr	r3, .L860
 14369 002e 1B68     		ldr	r3, [r3]
 14370 0030 1879     		ldrb	r0, [r3, #4]
 14371 0032 0F23     		movs	r3, #15
 14372 0034 FC18     		adds	r4, r7, r3
 14373 0036 0E23     		movs	r3, #14
 14374 0038 FA18     		adds	r2, r7, r3
 14375 003a 0123     		movs	r3, #1
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 359


 14376 003c 2A21     		movs	r1, #42
 14377 003e A847     		blx	r5
 14378 0040 0300     		movs	r3, r0
 14379 0042 2370     		strb	r3, [r4]
5866:bma2x2.c      **** 			(p_bma2x2->dev_addr,
5867:bma2x2.c      **** 			BMA2x2_TAP_SHOCK_DURN_REG,
5868:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
5869:bma2x2.c      **** 			*tap_shock_u8 = BMA2x2_GET_BITSLICE(data_u8,
 14380              		.loc 1 5869 0
 14381 0044 0E23     		movs	r3, #14
 14382 0046 FB18     		adds	r3, r7, r3
 14383 0048 1B78     		ldrb	r3, [r3]
 14384 004a 9B11     		asrs	r3, r3, #6
 14385 004c DBB2     		uxtb	r3, r3
 14386 004e 0122     		movs	r2, #1
 14387 0050 1340     		ands	r3, r2
 14388 0052 DAB2     		uxtb	r2, r3
 14389 0054 7B68     		ldr	r3, [r7, #4]
 14390 0056 1A70     		strb	r2, [r3]
5870:bma2x2.c      **** 			BMA2x2_TAP_SHOCK_DURN);
5871:bma2x2.c      **** 		}
5872:bma2x2.c      **** 	return com_rslt;
 14391              		.loc 1 5872 0
 14392 0058 0F23     		movs	r3, #15
 14393 005a FB18     		adds	r3, r7, r3
 14394 005c 1B78     		ldrb	r3, [r3]
 14395 005e 5BB2     		sxtb	r3, r3
 14396              	.L859:
5873:bma2x2.c      **** }
 14397              		.loc 1 5873 0 discriminator 1
 14398 0060 1800     		movs	r0, r3
 14399 0062 BD46     		mov	sp, r7
 14400 0064 04B0     		add	sp, sp, #16
 14401              		@ sp needed
 14402 0066 B0BD     		pop	{r4, r5, r7, pc}
 14403              	.L861:
 14404              		.align	2
 14405              	.L860:
 14406 0068 00000000 		.word	p_bma2x2
 14407              		.cfi_endproc
 14408              	.LFE88:
 14409              		.size	bma2x2_get_tap_shock, .-bma2x2_get_tap_shock
 14410              		.section	.text.bma2x2_set_tap_shock,"ax",%progbits
 14411              		.align	2
 14412              		.global	bma2x2_set_tap_shock
 14413              		.code	16
 14414              		.thumb_func
 14415              		.type	bma2x2_set_tap_shock, %function
 14416              	bma2x2_set_tap_shock:
 14417              	.LFB89:
5874:bma2x2.c      **** /*!
5875:bma2x2.c      ****  *	@brief This API is used to set
5876:bma2x2.c      ****  *	the tap shock form the register 0x2A bit 6
5877:bma2x2.c      ****  *
5878:bma2x2.c      ****  *
5879:bma2x2.c      ****  *
5880:bma2x2.c      ****  *	@param tap_shock_u8: The value of tap shock
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 360


5881:bma2x2.c      ****  *    tap_shock_u8    |    result
5882:bma2x2.c      ****  *  --------------------|----------------------
5883:bma2x2.c      ****  *     0x00             | TAP_SHOCK_50_MS
5884:bma2x2.c      ****  *     0x01             | TAP_SHOCK_75_MS
5885:bma2x2.c      ****  *
5886:bma2x2.c      ****  *
5887:bma2x2.c      ****  *	@return results of bus communication function
5888:bma2x2.c      ****  *	@retval 0 -> Success
5889:bma2x2.c      ****  *	@retval -1 -> Error
5890:bma2x2.c      ****  *
5891:bma2x2.c      ****  *
5892:bma2x2.c      **** */
5893:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_tap_shock(u8 tap_shock_u8)
5894:bma2x2.c      **** {
 14418              		.loc 1 5894 0
 14419              		.cfi_startproc
 14420              		@ args = 0, pretend = 0, frame = 16
 14421              		@ frame_needed = 1, uses_anonymous_args = 0
 14422 0000 B0B5     		push	{r4, r5, r7, lr}
 14423              		.cfi_def_cfa_offset 16
 14424              		.cfi_offset 4, -16
 14425              		.cfi_offset 5, -12
 14426              		.cfi_offset 7, -8
 14427              		.cfi_offset 14, -4
 14428 0002 84B0     		sub	sp, sp, #16
 14429              		.cfi_def_cfa_offset 32
 14430 0004 00AF     		add	r7, sp, #0
 14431              		.cfi_def_cfa_register 7
 14432 0006 0200     		movs	r2, r0
 14433 0008 FB1D     		adds	r3, r7, #7
 14434 000a 1A70     		strb	r2, [r3]
5895:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 14435              		.loc 1 5895 0
 14436 000c 0E23     		movs	r3, #14
 14437 000e FB18     		adds	r3, r7, r3
 14438 0010 0022     		movs	r2, #0
 14439 0012 1A70     		strb	r2, [r3]
5896:bma2x2.c      **** 	/*  Variable used to return value of
5897:bma2x2.c      **** 	communication routine*/
5898:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 14440              		.loc 1 5898 0
 14441 0014 0F23     		movs	r3, #15
 14442 0016 FB18     		adds	r3, r7, r3
 14443 0018 FF22     		movs	r2, #255
 14444 001a 1A70     		strb	r2, [r3]
5899:bma2x2.c      **** 
5900:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 14445              		.loc 1 5900 0
 14446 001c 214B     		ldr	r3, .L866
 14447 001e 1B68     		ldr	r3, [r3]
 14448 0020 002B     		cmp	r3, #0
 14449 0022 02D1     		bne	.L863
5901:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
5902:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 14450              		.loc 1 5902 0
 14451 0024 7F23     		movs	r3, #127
 14452 0026 5B42     		rsbs	r3, r3, #0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 361


 14453 0028 37E0     		b	.L865
 14454              	.L863:
5903:bma2x2.c      **** 		} else {
5904:bma2x2.c      **** 			/* write tap shock value*/
5905:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 14455              		.loc 1 5905 0
 14456 002a 1E4B     		ldr	r3, .L866
 14457 002c 1B68     		ldr	r3, [r3]
 14458 002e DD68     		ldr	r5, [r3, #12]
 14459 0030 1C4B     		ldr	r3, .L866
 14460 0032 1B68     		ldr	r3, [r3]
 14461 0034 1879     		ldrb	r0, [r3, #4]
 14462 0036 0F23     		movs	r3, #15
 14463 0038 FC18     		adds	r4, r7, r3
 14464 003a 0E23     		movs	r3, #14
 14465 003c FA18     		adds	r2, r7, r3
 14466 003e 0123     		movs	r3, #1
 14467 0040 2A21     		movs	r1, #42
 14468 0042 A847     		blx	r5
 14469 0044 0300     		movs	r3, r0
 14470 0046 2370     		strb	r3, [r4]
5906:bma2x2.c      **** 			(p_bma2x2->dev_addr,
5907:bma2x2.c      **** 			BMA2x2_TAP_SHOCK_DURN_REG, &data_u8,
5908:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
5909:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE(data_u8,
 14471              		.loc 1 5909 0
 14472 0048 0E23     		movs	r3, #14
 14473 004a FB18     		adds	r3, r7, r3
 14474 004c 1B78     		ldrb	r3, [r3]
 14475 004e 5BB2     		sxtb	r3, r3
 14476 0050 4022     		movs	r2, #64
 14477 0052 9343     		bics	r3, r2
 14478 0054 5AB2     		sxtb	r2, r3
 14479 0056 FB1D     		adds	r3, r7, #7
 14480 0058 1B78     		ldrb	r3, [r3]
 14481 005a 9B01     		lsls	r3, r3, #6
 14482 005c 5BB2     		sxtb	r3, r3
 14483 005e 4021     		movs	r1, #64
 14484 0060 0B40     		ands	r3, r1
 14485 0062 5BB2     		sxtb	r3, r3
 14486 0064 1343     		orrs	r3, r2
 14487 0066 5BB2     		sxtb	r3, r3
 14488 0068 DAB2     		uxtb	r2, r3
 14489 006a 0E23     		movs	r3, #14
 14490 006c FB18     		adds	r3, r7, r3
 14491 006e 1A70     		strb	r2, [r3]
5910:bma2x2.c      **** 			BMA2x2_TAP_SHOCK_DURN, tap_shock_u8);
5911:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 14492              		.loc 1 5911 0
 14493 0070 0E23     		movs	r3, #14
 14494 0072 FB18     		adds	r3, r7, r3
 14495 0074 0122     		movs	r2, #1
 14496 0076 1900     		movs	r1, r3
 14497 0078 2A20     		movs	r0, #42
 14498 007a FFF7FEFF 		bl	bma2x2_write_reg
 14499 007e 0300     		movs	r3, r0
 14500 0080 DAB2     		uxtb	r2, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 362


 14501 0082 0F23     		movs	r3, #15
 14502 0084 FB18     		adds	r3, r7, r3
 14503 0086 1B78     		ldrb	r3, [r3]
 14504 0088 D318     		adds	r3, r2, r3
 14505 008a DAB2     		uxtb	r2, r3
 14506 008c 0F23     		movs	r3, #15
 14507 008e FB18     		adds	r3, r7, r3
 14508 0090 1A70     		strb	r2, [r3]
5912:bma2x2.c      **** 			BMA2x2_TAP_SHOCK_DURN_REG, &data_u8,
5913:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
5914:bma2x2.c      **** 		}
5915:bma2x2.c      **** 	return com_rslt;
 14509              		.loc 1 5915 0
 14510 0092 0F23     		movs	r3, #15
 14511 0094 FB18     		adds	r3, r7, r3
 14512 0096 1B78     		ldrb	r3, [r3]
 14513 0098 5BB2     		sxtb	r3, r3
 14514              	.L865:
5916:bma2x2.c      **** }
 14515              		.loc 1 5916 0 discriminator 1
 14516 009a 1800     		movs	r0, r3
 14517 009c BD46     		mov	sp, r7
 14518 009e 04B0     		add	sp, sp, #16
 14519              		@ sp needed
 14520 00a0 B0BD     		pop	{r4, r5, r7, pc}
 14521              	.L867:
 14522 00a2 C046     		.align	2
 14523              	.L866:
 14524 00a4 00000000 		.word	p_bma2x2
 14525              		.cfi_endproc
 14526              	.LFE89:
 14527              		.size	bma2x2_set_tap_shock, .-bma2x2_set_tap_shock
 14528              		.section	.text.bma2x2_get_tap_quiet,"ax",%progbits
 14529              		.align	2
 14530              		.global	bma2x2_get_tap_quiet
 14531              		.code	16
 14532              		.thumb_func
 14533              		.type	bma2x2_get_tap_quiet, %function
 14534              	bma2x2_get_tap_quiet:
 14535              	.LFB90:
5917:bma2x2.c      **** /*!
5918:bma2x2.c      ****  *	@brief This API is used to get
5919:bma2x2.c      ****  *	the tap quiet in the register 0x2A bit 7
5920:bma2x2.c      ****  *
5921:bma2x2.c      ****  *
5922:bma2x2.c      ****  *
5923:bma2x2.c      ****  *  @param  tap_quiet_u8 : The value of tap quiet
5924:bma2x2.c      ****  *    tap_quiet_u8    |    result
5925:bma2x2.c      ****  *  --------------------|----------------------
5926:bma2x2.c      ****  *     0x00             | TAP_QUIET_30_MS
5927:bma2x2.c      ****  *     0x01             | TAP_QUIET_20_MS
5928:bma2x2.c      ****  *
5929:bma2x2.c      ****  *	@return results of bus communication function
5930:bma2x2.c      ****  *	@retval 0 -> Success
5931:bma2x2.c      ****  *	@retval -1 -> Error
5932:bma2x2.c      ****  *
5933:bma2x2.c      ****  *
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 363


5934:bma2x2.c      ****  */
5935:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_tap_quiet(u8 *tap_quiet_u8)
5936:bma2x2.c      **** {
 14536              		.loc 1 5936 0
 14537              		.cfi_startproc
 14538              		@ args = 0, pretend = 0, frame = 16
 14539              		@ frame_needed = 1, uses_anonymous_args = 0
 14540 0000 B0B5     		push	{r4, r5, r7, lr}
 14541              		.cfi_def_cfa_offset 16
 14542              		.cfi_offset 4, -16
 14543              		.cfi_offset 5, -12
 14544              		.cfi_offset 7, -8
 14545              		.cfi_offset 14, -4
 14546 0002 84B0     		sub	sp, sp, #16
 14547              		.cfi_def_cfa_offset 32
 14548 0004 00AF     		add	r7, sp, #0
 14549              		.cfi_def_cfa_register 7
 14550 0006 7860     		str	r0, [r7, #4]
5937:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 14551              		.loc 1 5937 0
 14552 0008 0E23     		movs	r3, #14
 14553 000a FB18     		adds	r3, r7, r3
 14554 000c 0022     		movs	r2, #0
 14555 000e 1A70     		strb	r2, [r3]
5938:bma2x2.c      **** 		/*  Variable used to return value of
5939:bma2x2.c      **** 	communication routine*/
5940:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 14556              		.loc 1 5940 0
 14557 0010 0F23     		movs	r3, #15
 14558 0012 FB18     		adds	r3, r7, r3
 14559 0014 FF22     		movs	r2, #255
 14560 0016 1A70     		strb	r2, [r3]
5941:bma2x2.c      **** 
5942:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 14561              		.loc 1 5942 0
 14562 0018 124B     		ldr	r3, .L872
 14563 001a 1B68     		ldr	r3, [r3]
 14564 001c 002B     		cmp	r3, #0
 14565 001e 02D1     		bne	.L869
5943:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
5944:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 14566              		.loc 1 5944 0
 14567 0020 7F23     		movs	r3, #127
 14568 0022 5B42     		rsbs	r3, r3, #0
 14569 0024 19E0     		b	.L871
 14570              	.L869:
5945:bma2x2.c      **** 		} else {
5946:bma2x2.c      **** 			/* read the tap quiet value*/
5947:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 14571              		.loc 1 5947 0
 14572 0026 0F4B     		ldr	r3, .L872
 14573 0028 1B68     		ldr	r3, [r3]
 14574 002a DD68     		ldr	r5, [r3, #12]
 14575 002c 0D4B     		ldr	r3, .L872
 14576 002e 1B68     		ldr	r3, [r3]
 14577 0030 1879     		ldrb	r0, [r3, #4]
 14578 0032 0F23     		movs	r3, #15
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 364


 14579 0034 FC18     		adds	r4, r7, r3
 14580 0036 0E23     		movs	r3, #14
 14581 0038 FA18     		adds	r2, r7, r3
 14582 003a 0123     		movs	r3, #1
 14583 003c 2A21     		movs	r1, #42
 14584 003e A847     		blx	r5
 14585 0040 0300     		movs	r3, r0
 14586 0042 2370     		strb	r3, [r4]
5948:bma2x2.c      **** 			(p_bma2x2->dev_addr,
5949:bma2x2.c      **** 			BMA2x2_TAP_QUIET_DURN_REG, &data_u8,
5950:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
5951:bma2x2.c      **** 			*tap_quiet_u8 = BMA2x2_GET_BITSLICE
 14587              		.loc 1 5951 0
 14588 0044 0E23     		movs	r3, #14
 14589 0046 FB18     		adds	r3, r7, r3
 14590 0048 1B78     		ldrb	r3, [r3]
 14591 004a DB09     		lsrs	r3, r3, #7
 14592 004c DAB2     		uxtb	r2, r3
 14593 004e 7B68     		ldr	r3, [r7, #4]
 14594 0050 1A70     		strb	r2, [r3]
5952:bma2x2.c      **** 			(data_u8, BMA2x2_TAP_QUIET_DURN);
5953:bma2x2.c      **** 		}
5954:bma2x2.c      **** 	return com_rslt;
 14595              		.loc 1 5954 0
 14596 0052 0F23     		movs	r3, #15
 14597 0054 FB18     		adds	r3, r7, r3
 14598 0056 1B78     		ldrb	r3, [r3]
 14599 0058 5BB2     		sxtb	r3, r3
 14600              	.L871:
5955:bma2x2.c      **** }
 14601              		.loc 1 5955 0 discriminator 1
 14602 005a 1800     		movs	r0, r3
 14603 005c BD46     		mov	sp, r7
 14604 005e 04B0     		add	sp, sp, #16
 14605              		@ sp needed
 14606 0060 B0BD     		pop	{r4, r5, r7, pc}
 14607              	.L873:
 14608 0062 C046     		.align	2
 14609              	.L872:
 14610 0064 00000000 		.word	p_bma2x2
 14611              		.cfi_endproc
 14612              	.LFE90:
 14613              		.size	bma2x2_get_tap_quiet, .-bma2x2_get_tap_quiet
 14614              		.section	.text.bma2x2_set_tap_quiet,"ax",%progbits
 14615              		.align	2
 14616              		.global	bma2x2_set_tap_quiet
 14617              		.code	16
 14618              		.thumb_func
 14619              		.type	bma2x2_set_tap_quiet, %function
 14620              	bma2x2_set_tap_quiet:
 14621              	.LFB91:
5956:bma2x2.c      **** /*!
5957:bma2x2.c      ****  *	@brief This API is used to set
5958:bma2x2.c      ****  *	the tap quiet in the register 0x2A bit 7
5959:bma2x2.c      ****  *
5960:bma2x2.c      ****  *
5961:bma2x2.c      ****  *
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 365


5962:bma2x2.c      ****  *  @param  tap_quiet_u8 : The value of tap quiet
5963:bma2x2.c      ****  *    tap_quiet_u8    |    result
5964:bma2x2.c      ****  *  --------------------|----------------------
5965:bma2x2.c      ****  *     0x00             | TAP_QUIET_30_MS
5966:bma2x2.c      ****  *     0x01             | TAP_QUIET_20_MS
5967:bma2x2.c      ****  *
5968:bma2x2.c      ****  *	@return results of bus communication function
5969:bma2x2.c      ****  *	@retval 0 -> Success
5970:bma2x2.c      ****  *	@retval -1 -> Error
5971:bma2x2.c      ****  *
5972:bma2x2.c      ****  *
5973:bma2x2.c      ****  */
5974:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_tap_quiet(u8 tap_quiet_u8)
5975:bma2x2.c      **** {
 14622              		.loc 1 5975 0
 14623              		.cfi_startproc
 14624              		@ args = 0, pretend = 0, frame = 16
 14625              		@ frame_needed = 1, uses_anonymous_args = 0
 14626 0000 B0B5     		push	{r4, r5, r7, lr}
 14627              		.cfi_def_cfa_offset 16
 14628              		.cfi_offset 4, -16
 14629              		.cfi_offset 5, -12
 14630              		.cfi_offset 7, -8
 14631              		.cfi_offset 14, -4
 14632 0002 84B0     		sub	sp, sp, #16
 14633              		.cfi_def_cfa_offset 32
 14634 0004 00AF     		add	r7, sp, #0
 14635              		.cfi_def_cfa_register 7
 14636 0006 0200     		movs	r2, r0
 14637 0008 FB1D     		adds	r3, r7, #7
 14638 000a 1A70     		strb	r2, [r3]
5976:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 14639              		.loc 1 5976 0
 14640 000c 0E23     		movs	r3, #14
 14641 000e FB18     		adds	r3, r7, r3
 14642 0010 0022     		movs	r2, #0
 14643 0012 1A70     		strb	r2, [r3]
5977:bma2x2.c      **** 		/*  Variable used to return value of
5978:bma2x2.c      **** 	communication routine*/
5979:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 14644              		.loc 1 5979 0
 14645 0014 0F23     		movs	r3, #15
 14646 0016 FB18     		adds	r3, r7, r3
 14647 0018 FF22     		movs	r2, #255
 14648 001a 1A70     		strb	r2, [r3]
5980:bma2x2.c      **** 
5981:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 14649              		.loc 1 5981 0
 14650 001c 1F4B     		ldr	r3, .L878
 14651 001e 1B68     		ldr	r3, [r3]
 14652 0020 002B     		cmp	r3, #0
 14653 0022 02D1     		bne	.L875
5982:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
5983:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 14654              		.loc 1 5983 0
 14655 0024 7F23     		movs	r3, #127
 14656 0026 5B42     		rsbs	r3, r3, #0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 366


 14657 0028 34E0     		b	.L877
 14658              	.L875:
5984:bma2x2.c      **** 		} else {
5985:bma2x2.c      **** 			/* write the tap quiet value*/
5986:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 14659              		.loc 1 5986 0
 14660 002a 1C4B     		ldr	r3, .L878
 14661 002c 1B68     		ldr	r3, [r3]
 14662 002e DD68     		ldr	r5, [r3, #12]
 14663 0030 1A4B     		ldr	r3, .L878
 14664 0032 1B68     		ldr	r3, [r3]
 14665 0034 1879     		ldrb	r0, [r3, #4]
 14666 0036 0F23     		movs	r3, #15
 14667 0038 FC18     		adds	r4, r7, r3
 14668 003a 0E23     		movs	r3, #14
 14669 003c FA18     		adds	r2, r7, r3
 14670 003e 0123     		movs	r3, #1
 14671 0040 2A21     		movs	r1, #42
 14672 0042 A847     		blx	r5
 14673 0044 0300     		movs	r3, r0
 14674 0046 2370     		strb	r3, [r4]
5987:bma2x2.c      **** 			(p_bma2x2->dev_addr,
5988:bma2x2.c      **** 			BMA2x2_TAP_QUIET_DURN_REG,
5989:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
5990:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE(data_u8,
 14675              		.loc 1 5990 0
 14676 0048 0E23     		movs	r3, #14
 14677 004a FB18     		adds	r3, r7, r3
 14678 004c 1B78     		ldrb	r3, [r3]
 14679 004e 5BB2     		sxtb	r3, r3
 14680 0050 7F22     		movs	r2, #127
 14681 0052 1340     		ands	r3, r2
 14682 0054 5AB2     		sxtb	r2, r3
 14683 0056 FB1D     		adds	r3, r7, #7
 14684 0058 1B78     		ldrb	r3, [r3]
 14685 005a DB01     		lsls	r3, r3, #7
 14686 005c 5BB2     		sxtb	r3, r3
 14687 005e 1343     		orrs	r3, r2
 14688 0060 5BB2     		sxtb	r3, r3
 14689 0062 DAB2     		uxtb	r2, r3
 14690 0064 0E23     		movs	r3, #14
 14691 0066 FB18     		adds	r3, r7, r3
 14692 0068 1A70     		strb	r2, [r3]
5991:bma2x2.c      **** 			BMA2x2_TAP_QUIET_DURN, tap_quiet_u8);
5992:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 14693              		.loc 1 5992 0
 14694 006a 0E23     		movs	r3, #14
 14695 006c FB18     		adds	r3, r7, r3
 14696 006e 0122     		movs	r2, #1
 14697 0070 1900     		movs	r1, r3
 14698 0072 2A20     		movs	r0, #42
 14699 0074 FFF7FEFF 		bl	bma2x2_write_reg
 14700 0078 0300     		movs	r3, r0
 14701 007a DAB2     		uxtb	r2, r3
 14702 007c 0F23     		movs	r3, #15
 14703 007e FB18     		adds	r3, r7, r3
 14704 0080 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 367


 14705 0082 D318     		adds	r3, r2, r3
 14706 0084 DAB2     		uxtb	r2, r3
 14707 0086 0F23     		movs	r3, #15
 14708 0088 FB18     		adds	r3, r7, r3
 14709 008a 1A70     		strb	r2, [r3]
5993:bma2x2.c      **** 			BMA2x2_TAP_QUIET_DURN_REG,
5994:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
5995:bma2x2.c      **** 		}
5996:bma2x2.c      **** 	return com_rslt;
 14710              		.loc 1 5996 0
 14711 008c 0F23     		movs	r3, #15
 14712 008e FB18     		adds	r3, r7, r3
 14713 0090 1B78     		ldrb	r3, [r3]
 14714 0092 5BB2     		sxtb	r3, r3
 14715              	.L877:
5997:bma2x2.c      **** }
 14716              		.loc 1 5997 0 discriminator 1
 14717 0094 1800     		movs	r0, r3
 14718 0096 BD46     		mov	sp, r7
 14719 0098 04B0     		add	sp, sp, #16
 14720              		@ sp needed
 14721 009a B0BD     		pop	{r4, r5, r7, pc}
 14722              	.L879:
 14723              		.align	2
 14724              	.L878:
 14725 009c 00000000 		.word	p_bma2x2
 14726              		.cfi_endproc
 14727              	.LFE91:
 14728              		.size	bma2x2_set_tap_quiet, .-bma2x2_set_tap_quiet
 14729              		.section	.text.bma2x2_get_tap_thres,"ax",%progbits
 14730              		.align	2
 14731              		.global	bma2x2_get_tap_thres
 14732              		.code	16
 14733              		.thumb_func
 14734              		.type	bma2x2_get_tap_thres, %function
 14735              	bma2x2_get_tap_thres:
 14736              	.LFB92:
5998:bma2x2.c      **** /*!
5999:bma2x2.c      ****  *	@brief This API is used to get
6000:bma2x2.c      ****  *	the tap threshold in the register 0x2B bit from 0 to 4
6001:bma2x2.c      ****  *
6002:bma2x2.c      ****  *
6003:bma2x2.c      ****  *
6004:bma2x2.c      ****  *  @param tap_thres_u8 : The value of tap threshold
6005:bma2x2.c      ****  *  @note Tap threshold of single and double tap corresponding
6006:bma2x2.c      ****  *     to accel range
6007:bma2x2.c      ****  *     range            |    Tap threshold
6008:bma2x2.c      ****  *  --------------------|----------------------
6009:bma2x2.c      ****  *     2g               | (tap_thres_u8 * 62.5)mg
6010:bma2x2.c      ****  *     4g               | (tap_thres_u8 * 125)mg
6011:bma2x2.c      ****  *     8g               | (tap_thres_u8 * 250)mg
6012:bma2x2.c      ****  *     16g              | (tap_thres_u8 * 500)mg
6013:bma2x2.c      ****  *
6014:bma2x2.c      ****  *
6015:bma2x2.c      ****  *	@return results of bus communication function
6016:bma2x2.c      ****  *	@retval 0 -> Success
6017:bma2x2.c      ****  *	@retval -1 -> Error
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 368


6018:bma2x2.c      ****  *
6019:bma2x2.c      ****  *
6020:bma2x2.c      ****  */
6021:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_tap_thres(u8 *tap_thres_u8)
6022:bma2x2.c      **** {
 14737              		.loc 1 6022 0
 14738              		.cfi_startproc
 14739              		@ args = 0, pretend = 0, frame = 16
 14740              		@ frame_needed = 1, uses_anonymous_args = 0
 14741 0000 B0B5     		push	{r4, r5, r7, lr}
 14742              		.cfi_def_cfa_offset 16
 14743              		.cfi_offset 4, -16
 14744              		.cfi_offset 5, -12
 14745              		.cfi_offset 7, -8
 14746              		.cfi_offset 14, -4
 14747 0002 84B0     		sub	sp, sp, #16
 14748              		.cfi_def_cfa_offset 32
 14749 0004 00AF     		add	r7, sp, #0
 14750              		.cfi_def_cfa_register 7
 14751 0006 7860     		str	r0, [r7, #4]
6023:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 14752              		.loc 1 6023 0
 14753 0008 0E23     		movs	r3, #14
 14754 000a FB18     		adds	r3, r7, r3
 14755 000c 0022     		movs	r2, #0
 14756 000e 1A70     		strb	r2, [r3]
6024:bma2x2.c      **** 	/*  Variable used to return value of
6025:bma2x2.c      **** 	communication routine*/
6026:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 14757              		.loc 1 6026 0
 14758 0010 0F23     		movs	r3, #15
 14759 0012 FB18     		adds	r3, r7, r3
 14760 0014 FF22     		movs	r2, #255
 14761 0016 1A70     		strb	r2, [r3]
6027:bma2x2.c      **** 
6028:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 14762              		.loc 1 6028 0
 14763 0018 124B     		ldr	r3, .L884
 14764 001a 1B68     		ldr	r3, [r3]
 14765 001c 002B     		cmp	r3, #0
 14766 001e 02D1     		bne	.L881
6029:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
6030:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 14767              		.loc 1 6030 0
 14768 0020 7F23     		movs	r3, #127
 14769 0022 5B42     		rsbs	r3, r3, #0
 14770 0024 1AE0     		b	.L883
 14771              	.L881:
6031:bma2x2.c      **** 		} else {
6032:bma2x2.c      **** 			/* read the tap threshold*/
6033:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 14772              		.loc 1 6033 0
 14773 0026 0F4B     		ldr	r3, .L884
 14774 0028 1B68     		ldr	r3, [r3]
 14775 002a DD68     		ldr	r5, [r3, #12]
 14776 002c 0D4B     		ldr	r3, .L884
 14777 002e 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 369


 14778 0030 1879     		ldrb	r0, [r3, #4]
 14779 0032 0F23     		movs	r3, #15
 14780 0034 FC18     		adds	r4, r7, r3
 14781 0036 0E23     		movs	r3, #14
 14782 0038 FA18     		adds	r2, r7, r3
 14783 003a 0123     		movs	r3, #1
 14784 003c 2B21     		movs	r1, #43
 14785 003e A847     		blx	r5
 14786 0040 0300     		movs	r3, r0
 14787 0042 2370     		strb	r3, [r4]
6034:bma2x2.c      **** 			(p_bma2x2->dev_addr,
6035:bma2x2.c      **** 			BMA2x2_TAP_THRES_REG,
6036:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
6037:bma2x2.c      **** 			*tap_thres_u8 = BMA2x2_GET_BITSLICE
 14788              		.loc 1 6037 0
 14789 0044 0E23     		movs	r3, #14
 14790 0046 FB18     		adds	r3, r7, r3
 14791 0048 1B78     		ldrb	r3, [r3]
 14792 004a 1F22     		movs	r2, #31
 14793 004c 1340     		ands	r3, r2
 14794 004e DAB2     		uxtb	r2, r3
 14795 0050 7B68     		ldr	r3, [r7, #4]
 14796 0052 1A70     		strb	r2, [r3]
6038:bma2x2.c      **** 			(data_u8, BMA2x2_TAP_THRES);
6039:bma2x2.c      **** 		}
6040:bma2x2.c      **** 	return com_rslt;
 14797              		.loc 1 6040 0
 14798 0054 0F23     		movs	r3, #15
 14799 0056 FB18     		adds	r3, r7, r3
 14800 0058 1B78     		ldrb	r3, [r3]
 14801 005a 5BB2     		sxtb	r3, r3
 14802              	.L883:
6041:bma2x2.c      **** }
 14803              		.loc 1 6041 0 discriminator 1
 14804 005c 1800     		movs	r0, r3
 14805 005e BD46     		mov	sp, r7
 14806 0060 04B0     		add	sp, sp, #16
 14807              		@ sp needed
 14808 0062 B0BD     		pop	{r4, r5, r7, pc}
 14809              	.L885:
 14810              		.align	2
 14811              	.L884:
 14812 0064 00000000 		.word	p_bma2x2
 14813              		.cfi_endproc
 14814              	.LFE92:
 14815              		.size	bma2x2_get_tap_thres, .-bma2x2_get_tap_thres
 14816              		.section	.text.bma2x2_set_tap_thres,"ax",%progbits
 14817              		.align	2
 14818              		.global	bma2x2_set_tap_thres
 14819              		.code	16
 14820              		.thumb_func
 14821              		.type	bma2x2_set_tap_thres, %function
 14822              	bma2x2_set_tap_thres:
 14823              	.LFB93:
6042:bma2x2.c      **** /*!
6043:bma2x2.c      ****  *	@brief This API is used to set
6044:bma2x2.c      ****  *	the tap threshold in the register 0x2B bit from 0 to 4
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 370


6045:bma2x2.c      ****  *
6046:bma2x2.c      ****  *
6047:bma2x2.c      ****  *
6048:bma2x2.c      ****  *  @param tap_thres_u8 : The value of tap threshold
6049:bma2x2.c      ****  *	@note Tap threshold of single and double tap corresponding to accel range
6050:bma2x2.c      ****  *     range            |    Tap threshold
6051:bma2x2.c      ****  *  --------------------|----------------------
6052:bma2x2.c      ****  *     2g               | (tap_thres_u8 * 62.5)mg
6053:bma2x2.c      ****  *     4g               | (tap_thres_u8 * 125)mg
6054:bma2x2.c      ****  *     8g               | (tap_thres_u8 * 250)mg
6055:bma2x2.c      ****  *     16g              | (tap_thres_u8 * 500)mg
6056:bma2x2.c      ****  *
6057:bma2x2.c      ****  *
6058:bma2x2.c      ****  *	@return results of bus communication function
6059:bma2x2.c      ****  *	@retval 0 -> Success
6060:bma2x2.c      ****  *	@retval -1 -> Error
6061:bma2x2.c      ****  *
6062:bma2x2.c      ****  *
6063:bma2x2.c      ****  */
6064:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_tap_thres(u8 tap_thres_u8)
6065:bma2x2.c      **** {
 14824              		.loc 1 6065 0
 14825              		.cfi_startproc
 14826              		@ args = 0, pretend = 0, frame = 16
 14827              		@ frame_needed = 1, uses_anonymous_args = 0
 14828 0000 B0B5     		push	{r4, r5, r7, lr}
 14829              		.cfi_def_cfa_offset 16
 14830              		.cfi_offset 4, -16
 14831              		.cfi_offset 5, -12
 14832              		.cfi_offset 7, -8
 14833              		.cfi_offset 14, -4
 14834 0002 84B0     		sub	sp, sp, #16
 14835              		.cfi_def_cfa_offset 32
 14836 0004 00AF     		add	r7, sp, #0
 14837              		.cfi_def_cfa_register 7
 14838 0006 0200     		movs	r2, r0
 14839 0008 FB1D     		adds	r3, r7, #7
 14840 000a 1A70     		strb	r2, [r3]
6066:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 14841              		.loc 1 6066 0
 14842 000c 0E23     		movs	r3, #14
 14843 000e FB18     		adds	r3, r7, r3
 14844 0010 0022     		movs	r2, #0
 14845 0012 1A70     		strb	r2, [r3]
6067:bma2x2.c      **** 	/*  Variable used to return value of
6068:bma2x2.c      **** 	communication routine*/
6069:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 14846              		.loc 1 6069 0
 14847 0014 0F23     		movs	r3, #15
 14848 0016 FB18     		adds	r3, r7, r3
 14849 0018 FF22     		movs	r2, #255
 14850 001a 1A70     		strb	r2, [r3]
6070:bma2x2.c      **** 
6071:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 14851              		.loc 1 6071 0
 14852 001c 204B     		ldr	r3, .L890
 14853 001e 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 371


 14854 0020 002B     		cmp	r3, #0
 14855 0022 02D1     		bne	.L887
6072:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
6073:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 14856              		.loc 1 6073 0
 14857 0024 7F23     		movs	r3, #127
 14858 0026 5B42     		rsbs	r3, r3, #0
 14859 0028 36E0     		b	.L889
 14860              	.L887:
6074:bma2x2.c      **** 		} else {
6075:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 14861              		.loc 1 6075 0
 14862 002a 1D4B     		ldr	r3, .L890
 14863 002c 1B68     		ldr	r3, [r3]
 14864 002e DD68     		ldr	r5, [r3, #12]
 14865 0030 1B4B     		ldr	r3, .L890
 14866 0032 1B68     		ldr	r3, [r3]
 14867 0034 1879     		ldrb	r0, [r3, #4]
 14868 0036 0F23     		movs	r3, #15
 14869 0038 FC18     		adds	r4, r7, r3
 14870 003a 0E23     		movs	r3, #14
 14871 003c FA18     		adds	r2, r7, r3
 14872 003e 0123     		movs	r3, #1
 14873 0040 2B21     		movs	r1, #43
 14874 0042 A847     		blx	r5
 14875 0044 0300     		movs	r3, r0
 14876 0046 2370     		strb	r3, [r4]
6076:bma2x2.c      **** 			(p_bma2x2->dev_addr,
6077:bma2x2.c      **** 			BMA2x2_TAP_THRES_REG, &data_u8,
6078:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
6079:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 14877              		.loc 1 6079 0
 14878 0048 0E23     		movs	r3, #14
 14879 004a FB18     		adds	r3, r7, r3
 14880 004c 1B78     		ldrb	r3, [r3]
 14881 004e 5BB2     		sxtb	r3, r3
 14882 0050 1F22     		movs	r2, #31
 14883 0052 9343     		bics	r3, r2
 14884 0054 5AB2     		sxtb	r2, r3
 14885 0056 FB1D     		adds	r3, r7, #7
 14886 0058 1B78     		ldrb	r3, [r3]
 14887 005a 5BB2     		sxtb	r3, r3
 14888 005c 1F21     		movs	r1, #31
 14889 005e 0B40     		ands	r3, r1
 14890 0060 5BB2     		sxtb	r3, r3
 14891 0062 1343     		orrs	r3, r2
 14892 0064 5BB2     		sxtb	r3, r3
 14893 0066 DAB2     		uxtb	r2, r3
 14894 0068 0E23     		movs	r3, #14
 14895 006a FB18     		adds	r3, r7, r3
 14896 006c 1A70     		strb	r2, [r3]
6080:bma2x2.c      **** 			(data_u8, BMA2x2_TAP_THRES, tap_thres_u8);
6081:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 14897              		.loc 1 6081 0
 14898 006e 0E23     		movs	r3, #14
 14899 0070 FB18     		adds	r3, r7, r3
 14900 0072 0122     		movs	r2, #1
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 372


 14901 0074 1900     		movs	r1, r3
 14902 0076 2B20     		movs	r0, #43
 14903 0078 FFF7FEFF 		bl	bma2x2_write_reg
 14904 007c 0300     		movs	r3, r0
 14905 007e DAB2     		uxtb	r2, r3
 14906 0080 0F23     		movs	r3, #15
 14907 0082 FB18     		adds	r3, r7, r3
 14908 0084 1B78     		ldrb	r3, [r3]
 14909 0086 D318     		adds	r3, r2, r3
 14910 0088 DAB2     		uxtb	r2, r3
 14911 008a 0F23     		movs	r3, #15
 14912 008c FB18     		adds	r3, r7, r3
 14913 008e 1A70     		strb	r2, [r3]
6082:bma2x2.c      **** 			BMA2x2_TAP_THRES_REG, &data_u8,
6083:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
6084:bma2x2.c      **** 		}
6085:bma2x2.c      **** 	return com_rslt;
 14914              		.loc 1 6085 0
 14915 0090 0F23     		movs	r3, #15
 14916 0092 FB18     		adds	r3, r7, r3
 14917 0094 1B78     		ldrb	r3, [r3]
 14918 0096 5BB2     		sxtb	r3, r3
 14919              	.L889:
6086:bma2x2.c      **** }
 14920              		.loc 1 6086 0 discriminator 1
 14921 0098 1800     		movs	r0, r3
 14922 009a BD46     		mov	sp, r7
 14923 009c 04B0     		add	sp, sp, #16
 14924              		@ sp needed
 14925 009e B0BD     		pop	{r4, r5, r7, pc}
 14926              	.L891:
 14927              		.align	2
 14928              	.L890:
 14929 00a0 00000000 		.word	p_bma2x2
 14930              		.cfi_endproc
 14931              	.LFE93:
 14932              		.size	bma2x2_set_tap_thres, .-bma2x2_set_tap_thres
 14933              		.section	.text.bma2x2_get_tap_sample,"ax",%progbits
 14934              		.align	2
 14935              		.global	bma2x2_get_tap_sample
 14936              		.code	16
 14937              		.thumb_func
 14938              		.type	bma2x2_get_tap_sample, %function
 14939              	bma2x2_get_tap_sample:
 14940              	.LFB94:
6087:bma2x2.c      **** /*!
6088:bma2x2.c      ****  *	@brief This API is used to get
6089:bma2x2.c      ****  *	the tap sample in the register 0x2B bit 6 and 7
6090:bma2x2.c      ****  *
6091:bma2x2.c      ****  *
6092:bma2x2.c      ****  *
6093:bma2x2.c      ****  *  @param   *tap_sample_u8 : The value of tap sample
6094:bma2x2.c      ****  *     tap_sample_u8  |    result
6095:bma2x2.c      ****  *  --------------------|----------------------
6096:bma2x2.c      ****  *     0x00             | 2 samples
6097:bma2x2.c      ****  *     0x01             | 4 samples
6098:bma2x2.c      ****  *     0x02             | 8 samples
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 373


6099:bma2x2.c      ****  *     0x03             | 16 samples
6100:bma2x2.c      ****  *
6101:bma2x2.c      ****  *
6102:bma2x2.c      ****  *	@return results of bus communication function
6103:bma2x2.c      ****  *	@retval 0 -> Success
6104:bma2x2.c      ****  *	@retval -1 -> Error
6105:bma2x2.c      ****  *
6106:bma2x2.c      ****  *
6107:bma2x2.c      ****  */
6108:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_tap_sample(u8 *tap_sample_u8)
6109:bma2x2.c      **** {
 14941              		.loc 1 6109 0
 14942              		.cfi_startproc
 14943              		@ args = 0, pretend = 0, frame = 16
 14944              		@ frame_needed = 1, uses_anonymous_args = 0
 14945 0000 B0B5     		push	{r4, r5, r7, lr}
 14946              		.cfi_def_cfa_offset 16
 14947              		.cfi_offset 4, -16
 14948              		.cfi_offset 5, -12
 14949              		.cfi_offset 7, -8
 14950              		.cfi_offset 14, -4
 14951 0002 84B0     		sub	sp, sp, #16
 14952              		.cfi_def_cfa_offset 32
 14953 0004 00AF     		add	r7, sp, #0
 14954              		.cfi_def_cfa_register 7
 14955 0006 7860     		str	r0, [r7, #4]
6110:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 14956              		.loc 1 6110 0
 14957 0008 0E23     		movs	r3, #14
 14958 000a FB18     		adds	r3, r7, r3
 14959 000c 0022     		movs	r2, #0
 14960 000e 1A70     		strb	r2, [r3]
6111:bma2x2.c      **** 		/*  Variable used to return value of
6112:bma2x2.c      **** 	communication routine*/
6113:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 14961              		.loc 1 6113 0
 14962 0010 0F23     		movs	r3, #15
 14963 0012 FB18     		adds	r3, r7, r3
 14964 0014 FF22     		movs	r2, #255
 14965 0016 1A70     		strb	r2, [r3]
6114:bma2x2.c      **** 
6115:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 14966              		.loc 1 6115 0
 14967 0018 124B     		ldr	r3, .L896
 14968 001a 1B68     		ldr	r3, [r3]
 14969 001c 002B     		cmp	r3, #0
 14970 001e 02D1     		bne	.L893
6116:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
6117:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 14971              		.loc 1 6117 0
 14972 0020 7F23     		movs	r3, #127
 14973 0022 5B42     		rsbs	r3, r3, #0
 14974 0024 19E0     		b	.L895
 14975              	.L893:
6118:bma2x2.c      **** 		} else {
6119:bma2x2.c      **** 			/* read tap samples */
6120:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 374


 14976              		.loc 1 6120 0
 14977 0026 0F4B     		ldr	r3, .L896
 14978 0028 1B68     		ldr	r3, [r3]
 14979 002a DD68     		ldr	r5, [r3, #12]
 14980 002c 0D4B     		ldr	r3, .L896
 14981 002e 1B68     		ldr	r3, [r3]
 14982 0030 1879     		ldrb	r0, [r3, #4]
 14983 0032 0F23     		movs	r3, #15
 14984 0034 FC18     		adds	r4, r7, r3
 14985 0036 0E23     		movs	r3, #14
 14986 0038 FA18     		adds	r2, r7, r3
 14987 003a 0123     		movs	r3, #1
 14988 003c 2B21     		movs	r1, #43
 14989 003e A847     		blx	r5
 14990 0040 0300     		movs	r3, r0
 14991 0042 2370     		strb	r3, [r4]
6121:bma2x2.c      **** 			(p_bma2x2->dev_addr,
6122:bma2x2.c      **** 			BMA2x2_TAP_SAMPLES_REG, &data_u8,
6123:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
6124:bma2x2.c      **** 			*tap_sample_u8 = BMA2x2_GET_BITSLICE
 14992              		.loc 1 6124 0
 14993 0044 0E23     		movs	r3, #14
 14994 0046 FB18     		adds	r3, r7, r3
 14995 0048 1B78     		ldrb	r3, [r3]
 14996 004a 9B09     		lsrs	r3, r3, #6
 14997 004c DAB2     		uxtb	r2, r3
 14998 004e 7B68     		ldr	r3, [r7, #4]
 14999 0050 1A70     		strb	r2, [r3]
6125:bma2x2.c      **** 			(data_u8, BMA2x2_TAP_SAMPLES);
6126:bma2x2.c      **** 		}
6127:bma2x2.c      **** 	return com_rslt;
 15000              		.loc 1 6127 0
 15001 0052 0F23     		movs	r3, #15
 15002 0054 FB18     		adds	r3, r7, r3
 15003 0056 1B78     		ldrb	r3, [r3]
 15004 0058 5BB2     		sxtb	r3, r3
 15005              	.L895:
6128:bma2x2.c      **** }
 15006              		.loc 1 6128 0 discriminator 1
 15007 005a 1800     		movs	r0, r3
 15008 005c BD46     		mov	sp, r7
 15009 005e 04B0     		add	sp, sp, #16
 15010              		@ sp needed
 15011 0060 B0BD     		pop	{r4, r5, r7, pc}
 15012              	.L897:
 15013 0062 C046     		.align	2
 15014              	.L896:
 15015 0064 00000000 		.word	p_bma2x2
 15016              		.cfi_endproc
 15017              	.LFE94:
 15018              		.size	bma2x2_get_tap_sample, .-bma2x2_get_tap_sample
 15019              		.section	.text.bma2x2_set_tap_sample,"ax",%progbits
 15020              		.align	2
 15021              		.global	bma2x2_set_tap_sample
 15022              		.code	16
 15023              		.thumb_func
 15024              		.type	bma2x2_set_tap_sample, %function
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 375


 15025              	bma2x2_set_tap_sample:
 15026              	.LFB95:
6129:bma2x2.c      **** /*!
6130:bma2x2.c      ****  *	@brief This API is used to set
6131:bma2x2.c      ****  *	the tap sample in the register 0x2B bit 6 and 7
6132:bma2x2.c      ****  *
6133:bma2x2.c      ****  *
6134:bma2x2.c      ****  *
6135:bma2x2.c      ****  *  @param   *tap_sample_u8 : The value of tap sample
6136:bma2x2.c      ****  *     tap_sample_u8  |    result
6137:bma2x2.c      ****  *  --------------------|----------------------
6138:bma2x2.c      ****  *     0x00             | 2 samples
6139:bma2x2.c      ****  *     0x01             | 4 samples
6140:bma2x2.c      ****  *     0x02             | 8 samples
6141:bma2x2.c      ****  *     0x03             | 16 samples
6142:bma2x2.c      ****  *
6143:bma2x2.c      ****  *
6144:bma2x2.c      ****  *	@return results of bus communication function
6145:bma2x2.c      ****  *	@retval 0 -> Success
6146:bma2x2.c      ****  *	@retval -1 -> Error
6147:bma2x2.c      ****  *
6148:bma2x2.c      ****  *
6149:bma2x2.c      ****  */
6150:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_tap_sample(u8 tap_sample_u8)
6151:bma2x2.c      **** {
 15027              		.loc 1 6151 0
 15028              		.cfi_startproc
 15029              		@ args = 0, pretend = 0, frame = 16
 15030              		@ frame_needed = 1, uses_anonymous_args = 0
 15031 0000 B0B5     		push	{r4, r5, r7, lr}
 15032              		.cfi_def_cfa_offset 16
 15033              		.cfi_offset 4, -16
 15034              		.cfi_offset 5, -12
 15035              		.cfi_offset 7, -8
 15036              		.cfi_offset 14, -4
 15037 0002 84B0     		sub	sp, sp, #16
 15038              		.cfi_def_cfa_offset 32
 15039 0004 00AF     		add	r7, sp, #0
 15040              		.cfi_def_cfa_register 7
 15041 0006 0200     		movs	r2, r0
 15042 0008 FB1D     		adds	r3, r7, #7
 15043 000a 1A70     		strb	r2, [r3]
6152:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 15044              		.loc 1 6152 0
 15045 000c 0E23     		movs	r3, #14
 15046 000e FB18     		adds	r3, r7, r3
 15047 0010 0022     		movs	r2, #0
 15048 0012 1A70     		strb	r2, [r3]
6153:bma2x2.c      **** 	/*  Variable used to return value of
6154:bma2x2.c      **** 	communication routine*/
6155:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 15049              		.loc 1 6155 0
 15050 0014 0F23     		movs	r3, #15
 15051 0016 FB18     		adds	r3, r7, r3
 15052 0018 FF22     		movs	r2, #255
 15053 001a 1A70     		strb	r2, [r3]
6156:bma2x2.c      **** 
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 376


6157:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 15054              		.loc 1 6157 0
 15055 001c 1F4B     		ldr	r3, .L902
 15056 001e 1B68     		ldr	r3, [r3]
 15057 0020 002B     		cmp	r3, #0
 15058 0022 02D1     		bne	.L899
6158:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
6159:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 15059              		.loc 1 6159 0
 15060 0024 7F23     		movs	r3, #127
 15061 0026 5B42     		rsbs	r3, r3, #0
 15062 0028 34E0     		b	.L901
 15063              	.L899:
6160:bma2x2.c      **** 		} else {
6161:bma2x2.c      **** 			/* write tap samples */
6162:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 15064              		.loc 1 6162 0
 15065 002a 1C4B     		ldr	r3, .L902
 15066 002c 1B68     		ldr	r3, [r3]
 15067 002e DD68     		ldr	r5, [r3, #12]
 15068 0030 1A4B     		ldr	r3, .L902
 15069 0032 1B68     		ldr	r3, [r3]
 15070 0034 1879     		ldrb	r0, [r3, #4]
 15071 0036 0F23     		movs	r3, #15
 15072 0038 FC18     		adds	r4, r7, r3
 15073 003a 0E23     		movs	r3, #14
 15074 003c FA18     		adds	r2, r7, r3
 15075 003e 0123     		movs	r3, #1
 15076 0040 2B21     		movs	r1, #43
 15077 0042 A847     		blx	r5
 15078 0044 0300     		movs	r3, r0
 15079 0046 2370     		strb	r3, [r4]
6163:bma2x2.c      **** 			(p_bma2x2->dev_addr, BMA2x2_TAP_SAMPLES_REG,
6164:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
6165:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 15080              		.loc 1 6165 0
 15081 0048 0E23     		movs	r3, #14
 15082 004a FB18     		adds	r3, r7, r3
 15083 004c 1B78     		ldrb	r3, [r3]
 15084 004e 5BB2     		sxtb	r3, r3
 15085 0050 3F22     		movs	r2, #63
 15086 0052 1340     		ands	r3, r2
 15087 0054 5AB2     		sxtb	r2, r3
 15088 0056 FB1D     		adds	r3, r7, #7
 15089 0058 1B78     		ldrb	r3, [r3]
 15090 005a 9B01     		lsls	r3, r3, #6
 15091 005c 5BB2     		sxtb	r3, r3
 15092 005e 1343     		orrs	r3, r2
 15093 0060 5BB2     		sxtb	r3, r3
 15094 0062 DAB2     		uxtb	r2, r3
 15095 0064 0E23     		movs	r3, #14
 15096 0066 FB18     		adds	r3, r7, r3
 15097 0068 1A70     		strb	r2, [r3]
6166:bma2x2.c      **** 			(data_u8, BMA2x2_TAP_SAMPLES, tap_sample_u8);
6167:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 15098              		.loc 1 6167 0
 15099 006a 0E23     		movs	r3, #14
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 377


 15100 006c FB18     		adds	r3, r7, r3
 15101 006e 0122     		movs	r2, #1
 15102 0070 1900     		movs	r1, r3
 15103 0072 2B20     		movs	r0, #43
 15104 0074 FFF7FEFF 		bl	bma2x2_write_reg
 15105 0078 0300     		movs	r3, r0
 15106 007a DAB2     		uxtb	r2, r3
 15107 007c 0F23     		movs	r3, #15
 15108 007e FB18     		adds	r3, r7, r3
 15109 0080 1B78     		ldrb	r3, [r3]
 15110 0082 D318     		adds	r3, r2, r3
 15111 0084 DAB2     		uxtb	r2, r3
 15112 0086 0F23     		movs	r3, #15
 15113 0088 FB18     		adds	r3, r7, r3
 15114 008a 1A70     		strb	r2, [r3]
6168:bma2x2.c      **** 			BMA2x2_TAP_SAMPLES_REG, &data_u8,
6169:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
6170:bma2x2.c      **** 		}
6171:bma2x2.c      **** 	return com_rslt;
 15115              		.loc 1 6171 0
 15116 008c 0F23     		movs	r3, #15
 15117 008e FB18     		adds	r3, r7, r3
 15118 0090 1B78     		ldrb	r3, [r3]
 15119 0092 5BB2     		sxtb	r3, r3
 15120              	.L901:
6172:bma2x2.c      **** }
 15121              		.loc 1 6172 0 discriminator 1
 15122 0094 1800     		movs	r0, r3
 15123 0096 BD46     		mov	sp, r7
 15124 0098 04B0     		add	sp, sp, #16
 15125              		@ sp needed
 15126 009a B0BD     		pop	{r4, r5, r7, pc}
 15127              	.L903:
 15128              		.align	2
 15129              	.L902:
 15130 009c 00000000 		.word	p_bma2x2
 15131              		.cfi_endproc
 15132              	.LFE95:
 15133              		.size	bma2x2_set_tap_sample, .-bma2x2_set_tap_sample
 15134              		.section	.text.bma2x2_get_orient_mode,"ax",%progbits
 15135              		.align	2
 15136              		.global	bma2x2_get_orient_mode
 15137              		.code	16
 15138              		.thumb_func
 15139              		.type	bma2x2_get_orient_mode, %function
 15140              	bma2x2_get_orient_mode:
 15141              	.LFB96:
6173:bma2x2.c      **** /*!
6174:bma2x2.c      ****  *	@brief This API is used to get
6175:bma2x2.c      ****  *	the orient mode in the register 0x2C bit 0 and 1
6176:bma2x2.c      ****  *
6177:bma2x2.c      ****  *
6178:bma2x2.c      ****  *
6179:bma2x2.c      ****  *  @param orient_mode_u8 : The value of orient mode
6180:bma2x2.c      ****  *     orient_mode_u8 |    result
6181:bma2x2.c      ****  *  --------------------|------------------
6182:bma2x2.c      ****  *     0x00             | symmetrical
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 378


6183:bma2x2.c      ****  *     0x01             | high asymmetrical
6184:bma2x2.c      ****  *     0x02             | low asymmetrical
6185:bma2x2.c      ****  *     0x03             | symmetrical
6186:bma2x2.c      ****  *
6187:bma2x2.c      ****  *
6188:bma2x2.c      ****  *
6189:bma2x2.c      ****  *	@return results of bus communication function
6190:bma2x2.c      ****  *	@retval 0 -> Success
6191:bma2x2.c      ****  *	@retval -1 -> Error
6192:bma2x2.c      ****  *
6193:bma2x2.c      ****  *
6194:bma2x2.c      **** */
6195:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_orient_mode(u8 *orient_mode_u8)
6196:bma2x2.c      **** {
 15142              		.loc 1 6196 0
 15143              		.cfi_startproc
 15144              		@ args = 0, pretend = 0, frame = 16
 15145              		@ frame_needed = 1, uses_anonymous_args = 0
 15146 0000 B0B5     		push	{r4, r5, r7, lr}
 15147              		.cfi_def_cfa_offset 16
 15148              		.cfi_offset 4, -16
 15149              		.cfi_offset 5, -12
 15150              		.cfi_offset 7, -8
 15151              		.cfi_offset 14, -4
 15152 0002 84B0     		sub	sp, sp, #16
 15153              		.cfi_def_cfa_offset 32
 15154 0004 00AF     		add	r7, sp, #0
 15155              		.cfi_def_cfa_register 7
 15156 0006 7860     		str	r0, [r7, #4]
6197:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 15157              		.loc 1 6197 0
 15158 0008 0E23     		movs	r3, #14
 15159 000a FB18     		adds	r3, r7, r3
 15160 000c 0022     		movs	r2, #0
 15161 000e 1A70     		strb	r2, [r3]
6198:bma2x2.c      **** 	/*  Variable used to return value of
6199:bma2x2.c      **** 	communication routine*/
6200:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 15162              		.loc 1 6200 0
 15163 0010 0F23     		movs	r3, #15
 15164 0012 FB18     		adds	r3, r7, r3
 15165 0014 FF22     		movs	r2, #255
 15166 0016 1A70     		strb	r2, [r3]
6201:bma2x2.c      **** 
6202:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 15167              		.loc 1 6202 0
 15168 0018 124B     		ldr	r3, .L908
 15169 001a 1B68     		ldr	r3, [r3]
 15170 001c 002B     		cmp	r3, #0
 15171 001e 02D1     		bne	.L905
6203:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
6204:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 15172              		.loc 1 6204 0
 15173 0020 7F23     		movs	r3, #127
 15174 0022 5B42     		rsbs	r3, r3, #0
 15175 0024 1AE0     		b	.L907
 15176              	.L905:
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 379


6205:bma2x2.c      **** 		} else {
6206:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC(
 15177              		.loc 1 6206 0
 15178 0026 0F4B     		ldr	r3, .L908
 15179 0028 1B68     		ldr	r3, [r3]
 15180 002a DD68     		ldr	r5, [r3, #12]
 15181 002c 0D4B     		ldr	r3, .L908
 15182 002e 1B68     		ldr	r3, [r3]
 15183 0030 1879     		ldrb	r0, [r3, #4]
 15184 0032 0F23     		movs	r3, #15
 15185 0034 FC18     		adds	r4, r7, r3
 15186 0036 0E23     		movs	r3, #14
 15187 0038 FA18     		adds	r2, r7, r3
 15188 003a 0123     		movs	r3, #1
 15189 003c 2C21     		movs	r1, #44
 15190 003e A847     		blx	r5
 15191 0040 0300     		movs	r3, r0
 15192 0042 2370     		strb	r3, [r4]
6207:bma2x2.c      **** 			p_bma2x2->dev_addr,
6208:bma2x2.c      **** 			BMA2x2_ORIENT_MODE_REG, &data_u8,
6209:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
6210:bma2x2.c      **** 			*orient_mode_u8 = BMA2x2_GET_BITSLICE(
 15193              		.loc 1 6210 0
 15194 0044 0E23     		movs	r3, #14
 15195 0046 FB18     		adds	r3, r7, r3
 15196 0048 1B78     		ldrb	r3, [r3]
 15197 004a 0322     		movs	r2, #3
 15198 004c 1340     		ands	r3, r2
 15199 004e DAB2     		uxtb	r2, r3
 15200 0050 7B68     		ldr	r3, [r7, #4]
 15201 0052 1A70     		strb	r2, [r3]
6211:bma2x2.c      **** 			data_u8, BMA2x2_ORIENT_MODE);
6212:bma2x2.c      **** 		}
6213:bma2x2.c      **** 	return com_rslt;
 15202              		.loc 1 6213 0
 15203 0054 0F23     		movs	r3, #15
 15204 0056 FB18     		adds	r3, r7, r3
 15205 0058 1B78     		ldrb	r3, [r3]
 15206 005a 5BB2     		sxtb	r3, r3
 15207              	.L907:
6214:bma2x2.c      **** }
 15208              		.loc 1 6214 0 discriminator 1
 15209 005c 1800     		movs	r0, r3
 15210 005e BD46     		mov	sp, r7
 15211 0060 04B0     		add	sp, sp, #16
 15212              		@ sp needed
 15213 0062 B0BD     		pop	{r4, r5, r7, pc}
 15214              	.L909:
 15215              		.align	2
 15216              	.L908:
 15217 0064 00000000 		.word	p_bma2x2
 15218              		.cfi_endproc
 15219              	.LFE96:
 15220              		.size	bma2x2_get_orient_mode, .-bma2x2_get_orient_mode
 15221              		.section	.text.bma2x2_set_orient_mode,"ax",%progbits
 15222              		.align	2
 15223              		.global	bma2x2_set_orient_mode
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 380


 15224              		.code	16
 15225              		.thumb_func
 15226              		.type	bma2x2_set_orient_mode, %function
 15227              	bma2x2_set_orient_mode:
 15228              	.LFB97:
6215:bma2x2.c      **** /*!
6216:bma2x2.c      ****  *	@brief This API is used to set
6217:bma2x2.c      ****  *	the orient mode in the register 0x2C bit 0 and 1
6218:bma2x2.c      ****  *
6219:bma2x2.c      ****  *
6220:bma2x2.c      ****  *
6221:bma2x2.c      ****  *  @param orient_mode_u8 : The value of orient mode
6222:bma2x2.c      ****  *     orient_mode_u8 |    result
6223:bma2x2.c      ****  *  --------------------|------------------
6224:bma2x2.c      ****  *     0x00             | symmetrical
6225:bma2x2.c      ****  *     0x01             | high asymmetrical
6226:bma2x2.c      ****  *     0x02             | low asymmetrical
6227:bma2x2.c      ****  *     0x03             | symmetrical
6228:bma2x2.c      ****  *
6229:bma2x2.c      ****  *
6230:bma2x2.c      ****  *
6231:bma2x2.c      ****  *	@return results of bus communication function
6232:bma2x2.c      ****  *	@retval 0 -> Success
6233:bma2x2.c      ****  *	@retval -1 -> Error
6234:bma2x2.c      ****  *
6235:bma2x2.c      ****  *
6236:bma2x2.c      **** */
6237:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_orient_mode(u8 orient_mode_u8)
6238:bma2x2.c      **** {
 15229              		.loc 1 6238 0
 15230              		.cfi_startproc
 15231              		@ args = 0, pretend = 0, frame = 16
 15232              		@ frame_needed = 1, uses_anonymous_args = 0
 15233 0000 B0B5     		push	{r4, r5, r7, lr}
 15234              		.cfi_def_cfa_offset 16
 15235              		.cfi_offset 4, -16
 15236              		.cfi_offset 5, -12
 15237              		.cfi_offset 7, -8
 15238              		.cfi_offset 14, -4
 15239 0002 84B0     		sub	sp, sp, #16
 15240              		.cfi_def_cfa_offset 32
 15241 0004 00AF     		add	r7, sp, #0
 15242              		.cfi_def_cfa_register 7
 15243 0006 0200     		movs	r2, r0
 15244 0008 FB1D     		adds	r3, r7, #7
 15245 000a 1A70     		strb	r2, [r3]
6239:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 15246              		.loc 1 6239 0
 15247 000c 0E23     		movs	r3, #14
 15248 000e FB18     		adds	r3, r7, r3
 15249 0010 0022     		movs	r2, #0
 15250 0012 1A70     		strb	r2, [r3]
6240:bma2x2.c      **** 	/*  Variable used to return value of
6241:bma2x2.c      **** 	communication routine*/
6242:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 15251              		.loc 1 6242 0
 15252 0014 0F23     		movs	r3, #15
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 381


 15253 0016 FB18     		adds	r3, r7, r3
 15254 0018 FF22     		movs	r2, #255
 15255 001a 1A70     		strb	r2, [r3]
6243:bma2x2.c      **** 
6244:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 15256              		.loc 1 6244 0
 15257 001c 204B     		ldr	r3, .L914
 15258 001e 1B68     		ldr	r3, [r3]
 15259 0020 002B     		cmp	r3, #0
 15260 0022 02D1     		bne	.L911
6245:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
6246:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 15261              		.loc 1 6246 0
 15262 0024 7F23     		movs	r3, #127
 15263 0026 5B42     		rsbs	r3, r3, #0
 15264 0028 36E0     		b	.L913
 15265              	.L911:
6247:bma2x2.c      **** 		} else {
6248:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 15266              		.loc 1 6248 0
 15267 002a 1D4B     		ldr	r3, .L914
 15268 002c 1B68     		ldr	r3, [r3]
 15269 002e DD68     		ldr	r5, [r3, #12]
 15270 0030 1B4B     		ldr	r3, .L914
 15271 0032 1B68     		ldr	r3, [r3]
 15272 0034 1879     		ldrb	r0, [r3, #4]
 15273 0036 0F23     		movs	r3, #15
 15274 0038 FC18     		adds	r4, r7, r3
 15275 003a 0E23     		movs	r3, #14
 15276 003c FA18     		adds	r2, r7, r3
 15277 003e 0123     		movs	r3, #1
 15278 0040 2C21     		movs	r1, #44
 15279 0042 A847     		blx	r5
 15280 0044 0300     		movs	r3, r0
 15281 0046 2370     		strb	r3, [r4]
6249:bma2x2.c      **** 			(p_bma2x2->dev_addr,
6250:bma2x2.c      **** 			BMA2x2_ORIENT_MODE_REG, &data_u8,
6251:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
6252:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE(data_u8,
 15282              		.loc 1 6252 0
 15283 0048 0E23     		movs	r3, #14
 15284 004a FB18     		adds	r3, r7, r3
 15285 004c 1B78     		ldrb	r3, [r3]
 15286 004e 5BB2     		sxtb	r3, r3
 15287 0050 0322     		movs	r2, #3
 15288 0052 9343     		bics	r3, r2
 15289 0054 5AB2     		sxtb	r2, r3
 15290 0056 FB1D     		adds	r3, r7, #7
 15291 0058 1B78     		ldrb	r3, [r3]
 15292 005a 5BB2     		sxtb	r3, r3
 15293 005c 0321     		movs	r1, #3
 15294 005e 0B40     		ands	r3, r1
 15295 0060 5BB2     		sxtb	r3, r3
 15296 0062 1343     		orrs	r3, r2
 15297 0064 5BB2     		sxtb	r3, r3
 15298 0066 DAB2     		uxtb	r2, r3
 15299 0068 0E23     		movs	r3, #14
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 382


 15300 006a FB18     		adds	r3, r7, r3
 15301 006c 1A70     		strb	r2, [r3]
6253:bma2x2.c      **** 			BMA2x2_ORIENT_MODE, orient_mode_u8);
6254:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 15302              		.loc 1 6254 0
 15303 006e 0E23     		movs	r3, #14
 15304 0070 FB18     		adds	r3, r7, r3
 15305 0072 0122     		movs	r2, #1
 15306 0074 1900     		movs	r1, r3
 15307 0076 2C20     		movs	r0, #44
 15308 0078 FFF7FEFF 		bl	bma2x2_write_reg
 15309 007c 0300     		movs	r3, r0
 15310 007e DAB2     		uxtb	r2, r3
 15311 0080 0F23     		movs	r3, #15
 15312 0082 FB18     		adds	r3, r7, r3
 15313 0084 1B78     		ldrb	r3, [r3]
 15314 0086 D318     		adds	r3, r2, r3
 15315 0088 DAB2     		uxtb	r2, r3
 15316 008a 0F23     		movs	r3, #15
 15317 008c FB18     		adds	r3, r7, r3
 15318 008e 1A70     		strb	r2, [r3]
6255:bma2x2.c      **** 			BMA2x2_ORIENT_MODE_REG, &data_u8,
6256:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
6257:bma2x2.c      **** 		}
6258:bma2x2.c      **** 	return com_rslt;
 15319              		.loc 1 6258 0
 15320 0090 0F23     		movs	r3, #15
 15321 0092 FB18     		adds	r3, r7, r3
 15322 0094 1B78     		ldrb	r3, [r3]
 15323 0096 5BB2     		sxtb	r3, r3
 15324              	.L913:
6259:bma2x2.c      **** }
 15325              		.loc 1 6259 0 discriminator 1
 15326 0098 1800     		movs	r0, r3
 15327 009a BD46     		mov	sp, r7
 15328 009c 04B0     		add	sp, sp, #16
 15329              		@ sp needed
 15330 009e B0BD     		pop	{r4, r5, r7, pc}
 15331              	.L915:
 15332              		.align	2
 15333              	.L914:
 15334 00a0 00000000 		.word	p_bma2x2
 15335              		.cfi_endproc
 15336              	.LFE97:
 15337              		.size	bma2x2_set_orient_mode, .-bma2x2_set_orient_mode
 15338              		.section	.text.bma2x2_get_orient_block,"ax",%progbits
 15339              		.align	2
 15340              		.global	bma2x2_get_orient_block
 15341              		.code	16
 15342              		.thumb_func
 15343              		.type	bma2x2_get_orient_block, %function
 15344              	bma2x2_get_orient_block:
 15345              	.LFB98:
6260:bma2x2.c      **** /*!
6261:bma2x2.c      ****  *	@brief This API is used to get
6262:bma2x2.c      ****  *	the orient block in the register 0x2C bit 2 and 3
6263:bma2x2.c      ****  *
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 383


6264:bma2x2.c      ****  *
6265:bma2x2.c      ****  *
6266:bma2x2.c      ****  *	@param orient_block_u8 : The value of orient block
6267:bma2x2.c      ****  *     orient_mode_u8 |    result
6268:bma2x2.c      ****  *  --------------------|------------------
6269:bma2x2.c      ****  *     0x00             | no blocking
6270:bma2x2.c      ****  *     0x01             | theta blocking or
6271:bma2x2.c      ****  *                      | acceleration slope in any axis > 1.5g
6272:bma2x2.c      ****  *     0x02             | theta blocking or
6273:bma2x2.c      ****  *                      | acceleration slope in any axis > 0.2g
6274:bma2x2.c      ****  *                      | acceleration in any axis > 1.5g
6275:bma2x2.c      ****  *     0x03             | theta blocking or
6276:bma2x2.c      ****  *                      | acceleration slope in any axis > 0.4g
6277:bma2x2.c      ****  *                      | acceleration in any axis > 1.5g
6278:bma2x2.c      ****  *                      | value of orient is not stable for at lease 100ms
6279:bma2x2.c      ****  *
6280:bma2x2.c      ****  *
6281:bma2x2.c      ****  *	@return results of bus communication function
6282:bma2x2.c      ****  *	@retval 0 -> Success
6283:bma2x2.c      ****  *	@retval -1 -> Error
6284:bma2x2.c      ****  *
6285:bma2x2.c      ****  *
6286:bma2x2.c      ****  */
6287:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_orient_block(
6288:bma2x2.c      **** u8 *orient_block_u8)
6289:bma2x2.c      **** {
 15346              		.loc 1 6289 0
 15347              		.cfi_startproc
 15348              		@ args = 0, pretend = 0, frame = 16
 15349              		@ frame_needed = 1, uses_anonymous_args = 0
 15350 0000 B0B5     		push	{r4, r5, r7, lr}
 15351              		.cfi_def_cfa_offset 16
 15352              		.cfi_offset 4, -16
 15353              		.cfi_offset 5, -12
 15354              		.cfi_offset 7, -8
 15355              		.cfi_offset 14, -4
 15356 0002 84B0     		sub	sp, sp, #16
 15357              		.cfi_def_cfa_offset 32
 15358 0004 00AF     		add	r7, sp, #0
 15359              		.cfi_def_cfa_register 7
 15360 0006 7860     		str	r0, [r7, #4]
6290:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 15361              		.loc 1 6290 0
 15362 0008 0E23     		movs	r3, #14
 15363 000a FB18     		adds	r3, r7, r3
 15364 000c 0022     		movs	r2, #0
 15365 000e 1A70     		strb	r2, [r3]
6291:bma2x2.c      **** 		/*  Variable used to return value of
6292:bma2x2.c      **** 	communication routine*/
6293:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 15366              		.loc 1 6293 0
 15367 0010 0F23     		movs	r3, #15
 15368 0012 FB18     		adds	r3, r7, r3
 15369 0014 FF22     		movs	r2, #255
 15370 0016 1A70     		strb	r2, [r3]
6294:bma2x2.c      **** 
6295:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 384


 15371              		.loc 1 6295 0
 15372 0018 134B     		ldr	r3, .L920
 15373 001a 1B68     		ldr	r3, [r3]
 15374 001c 002B     		cmp	r3, #0
 15375 001e 02D1     		bne	.L917
6296:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
6297:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 15376              		.loc 1 6297 0
 15377 0020 7F23     		movs	r3, #127
 15378 0022 5B42     		rsbs	r3, r3, #0
 15379 0024 1CE0     		b	.L919
 15380              	.L917:
6298:bma2x2.c      **** 		} else {
6299:bma2x2.c      **** 			/* Read the orient block data */
6300:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 15381              		.loc 1 6300 0
 15382 0026 104B     		ldr	r3, .L920
 15383 0028 1B68     		ldr	r3, [r3]
 15384 002a DD68     		ldr	r5, [r3, #12]
 15385 002c 0E4B     		ldr	r3, .L920
 15386 002e 1B68     		ldr	r3, [r3]
 15387 0030 1879     		ldrb	r0, [r3, #4]
 15388 0032 0F23     		movs	r3, #15
 15389 0034 FC18     		adds	r4, r7, r3
 15390 0036 0E23     		movs	r3, #14
 15391 0038 FA18     		adds	r2, r7, r3
 15392 003a 0123     		movs	r3, #1
 15393 003c 2C21     		movs	r1, #44
 15394 003e A847     		blx	r5
 15395 0040 0300     		movs	r3, r0
 15396 0042 2370     		strb	r3, [r4]
6301:bma2x2.c      **** 			(p_bma2x2->dev_addr,
6302:bma2x2.c      **** 			BMA2x2_ORIENT_BLOCK_REG, &data_u8,
6303:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
6304:bma2x2.c      **** 			*orient_block_u8 = BMA2x2_GET_BITSLICE
 15397              		.loc 1 6304 0
 15398 0044 0E23     		movs	r3, #14
 15399 0046 FB18     		adds	r3, r7, r3
 15400 0048 1B78     		ldrb	r3, [r3]
 15401 004a 9B10     		asrs	r3, r3, #2
 15402 004c DBB2     		uxtb	r3, r3
 15403 004e 0322     		movs	r2, #3
 15404 0050 1340     		ands	r3, r2
 15405 0052 DAB2     		uxtb	r2, r3
 15406 0054 7B68     		ldr	r3, [r7, #4]
 15407 0056 1A70     		strb	r2, [r3]
6305:bma2x2.c      **** 			(data_u8, BMA2x2_ORIENT_BLOCK);
6306:bma2x2.c      **** 		}
6307:bma2x2.c      **** 	return com_rslt;
 15408              		.loc 1 6307 0
 15409 0058 0F23     		movs	r3, #15
 15410 005a FB18     		adds	r3, r7, r3
 15411 005c 1B78     		ldrb	r3, [r3]
 15412 005e 5BB2     		sxtb	r3, r3
 15413              	.L919:
6308:bma2x2.c      **** }
 15414              		.loc 1 6308 0 discriminator 1
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 385


 15415 0060 1800     		movs	r0, r3
 15416 0062 BD46     		mov	sp, r7
 15417 0064 04B0     		add	sp, sp, #16
 15418              		@ sp needed
 15419 0066 B0BD     		pop	{r4, r5, r7, pc}
 15420              	.L921:
 15421              		.align	2
 15422              	.L920:
 15423 0068 00000000 		.word	p_bma2x2
 15424              		.cfi_endproc
 15425              	.LFE98:
 15426              		.size	bma2x2_get_orient_block, .-bma2x2_get_orient_block
 15427              		.section	.text.bma2x2_set_orient_block,"ax",%progbits
 15428              		.align	2
 15429              		.global	bma2x2_set_orient_block
 15430              		.code	16
 15431              		.thumb_func
 15432              		.type	bma2x2_set_orient_block, %function
 15433              	bma2x2_set_orient_block:
 15434              	.LFB99:
6309:bma2x2.c      **** /*!
6310:bma2x2.c      ****  *	@brief This API is used to set
6311:bma2x2.c      ****  *	the orient block in the register 0x2C bit 2 and 3
6312:bma2x2.c      ****  *
6313:bma2x2.c      ****  *
6314:bma2x2.c      ****  *
6315:bma2x2.c      ****  *	@param orient_block_u8 : The value of orient block
6316:bma2x2.c      ****  *     orient_mode_u8 |    result
6317:bma2x2.c      ****  *  --------------------|------------------
6318:bma2x2.c      ****  *     0x00             | no blocking
6319:bma2x2.c      ****  *     0x01             | theta blocking or
6320:bma2x2.c      ****  *                      | acceleration slope in any axis > 1.5g
6321:bma2x2.c      ****  *     0x02             | theta blocking or
6322:bma2x2.c      ****  *                      | acceleration slope in any axis > 0.2g
6323:bma2x2.c      ****  *                      | acceleration in any axis > 1.5g
6324:bma2x2.c      ****  *     0x03             | theta blocking or
6325:bma2x2.c      ****  *                      | acceleration slope in any axis > 0.4g
6326:bma2x2.c      ****  *                      | acceleration in any axis > 1.5g
6327:bma2x2.c      ****  *                      | value of orient is not stable for at lease 100ms
6328:bma2x2.c      ****  *
6329:bma2x2.c      ****  *
6330:bma2x2.c      ****  *	@return results of bus communication function
6331:bma2x2.c      ****  *	@retval 0 -> Success
6332:bma2x2.c      ****  *	@retval -1 -> Error
6333:bma2x2.c      ****  *
6334:bma2x2.c      ****  *
6335:bma2x2.c      ****  */
6336:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_orient_block(u8 orient_block_u8)
6337:bma2x2.c      **** {
 15435              		.loc 1 6337 0
 15436              		.cfi_startproc
 15437              		@ args = 0, pretend = 0, frame = 16
 15438              		@ frame_needed = 1, uses_anonymous_args = 0
 15439 0000 B0B5     		push	{r4, r5, r7, lr}
 15440              		.cfi_def_cfa_offset 16
 15441              		.cfi_offset 4, -16
 15442              		.cfi_offset 5, -12
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 386


 15443              		.cfi_offset 7, -8
 15444              		.cfi_offset 14, -4
 15445 0002 84B0     		sub	sp, sp, #16
 15446              		.cfi_def_cfa_offset 32
 15447 0004 00AF     		add	r7, sp, #0
 15448              		.cfi_def_cfa_register 7
 15449 0006 0200     		movs	r2, r0
 15450 0008 FB1D     		adds	r3, r7, #7
 15451 000a 1A70     		strb	r2, [r3]
6338:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 15452              		.loc 1 6338 0
 15453 000c 0E23     		movs	r3, #14
 15454 000e FB18     		adds	r3, r7, r3
 15455 0010 0022     		movs	r2, #0
 15456 0012 1A70     		strb	r2, [r3]
6339:bma2x2.c      **** 	/*  Variable used to return value of
6340:bma2x2.c      **** 	communication routine*/
6341:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 15457              		.loc 1 6341 0
 15458 0014 0F23     		movs	r3, #15
 15459 0016 FB18     		adds	r3, r7, r3
 15460 0018 FF22     		movs	r2, #255
 15461 001a 1A70     		strb	r2, [r3]
6342:bma2x2.c      **** 
6343:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 15462              		.loc 1 6343 0
 15463 001c 214B     		ldr	r3, .L926
 15464 001e 1B68     		ldr	r3, [r3]
 15465 0020 002B     		cmp	r3, #0
 15466 0022 02D1     		bne	.L923
6344:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
6345:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 15467              		.loc 1 6345 0
 15468 0024 7F23     		movs	r3, #127
 15469 0026 5B42     		rsbs	r3, r3, #0
 15470 0028 37E0     		b	.L925
 15471              	.L923:
6346:bma2x2.c      **** 		} else {
6347:bma2x2.c      **** 			/* write the orient block data */
6348:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 15472              		.loc 1 6348 0
 15473 002a 1E4B     		ldr	r3, .L926
 15474 002c 1B68     		ldr	r3, [r3]
 15475 002e DD68     		ldr	r5, [r3, #12]
 15476 0030 1C4B     		ldr	r3, .L926
 15477 0032 1B68     		ldr	r3, [r3]
 15478 0034 1879     		ldrb	r0, [r3, #4]
 15479 0036 0F23     		movs	r3, #15
 15480 0038 FC18     		adds	r4, r7, r3
 15481 003a 0E23     		movs	r3, #14
 15482 003c FA18     		adds	r2, r7, r3
 15483 003e 0123     		movs	r3, #1
 15484 0040 2C21     		movs	r1, #44
 15485 0042 A847     		blx	r5
 15486 0044 0300     		movs	r3, r0
 15487 0046 2370     		strb	r3, [r4]
6349:bma2x2.c      **** 			(p_bma2x2->dev_addr,
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 387


6350:bma2x2.c      **** 			BMA2x2_ORIENT_BLOCK_REG, &data_u8,
6351:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
6352:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 15488              		.loc 1 6352 0
 15489 0048 0E23     		movs	r3, #14
 15490 004a FB18     		adds	r3, r7, r3
 15491 004c 1B78     		ldrb	r3, [r3]
 15492 004e 5BB2     		sxtb	r3, r3
 15493 0050 0C22     		movs	r2, #12
 15494 0052 9343     		bics	r3, r2
 15495 0054 5AB2     		sxtb	r2, r3
 15496 0056 FB1D     		adds	r3, r7, #7
 15497 0058 1B78     		ldrb	r3, [r3]
 15498 005a 9B00     		lsls	r3, r3, #2
 15499 005c 5BB2     		sxtb	r3, r3
 15500 005e 0C21     		movs	r1, #12
 15501 0060 0B40     		ands	r3, r1
 15502 0062 5BB2     		sxtb	r3, r3
 15503 0064 1343     		orrs	r3, r2
 15504 0066 5BB2     		sxtb	r3, r3
 15505 0068 DAB2     		uxtb	r2, r3
 15506 006a 0E23     		movs	r3, #14
 15507 006c FB18     		adds	r3, r7, r3
 15508 006e 1A70     		strb	r2, [r3]
6353:bma2x2.c      **** 			(data_u8, BMA2x2_ORIENT_BLOCK, orient_block_u8);
6354:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 15509              		.loc 1 6354 0
 15510 0070 0E23     		movs	r3, #14
 15511 0072 FB18     		adds	r3, r7, r3
 15512 0074 0122     		movs	r2, #1
 15513 0076 1900     		movs	r1, r3
 15514 0078 2C20     		movs	r0, #44
 15515 007a FFF7FEFF 		bl	bma2x2_write_reg
 15516 007e 0300     		movs	r3, r0
 15517 0080 DAB2     		uxtb	r2, r3
 15518 0082 0F23     		movs	r3, #15
 15519 0084 FB18     		adds	r3, r7, r3
 15520 0086 1B78     		ldrb	r3, [r3]
 15521 0088 D318     		adds	r3, r2, r3
 15522 008a DAB2     		uxtb	r2, r3
 15523 008c 0F23     		movs	r3, #15
 15524 008e FB18     		adds	r3, r7, r3
 15525 0090 1A70     		strb	r2, [r3]
6355:bma2x2.c      **** 			BMA2x2_ORIENT_BLOCK_REG, &data_u8,
6356:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
6357:bma2x2.c      **** 		}
6358:bma2x2.c      **** 	return com_rslt;
 15526              		.loc 1 6358 0
 15527 0092 0F23     		movs	r3, #15
 15528 0094 FB18     		adds	r3, r7, r3
 15529 0096 1B78     		ldrb	r3, [r3]
 15530 0098 5BB2     		sxtb	r3, r3
 15531              	.L925:
6359:bma2x2.c      **** }
 15532              		.loc 1 6359 0 discriminator 1
 15533 009a 1800     		movs	r0, r3
 15534 009c BD46     		mov	sp, r7
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 388


 15535 009e 04B0     		add	sp, sp, #16
 15536              		@ sp needed
 15537 00a0 B0BD     		pop	{r4, r5, r7, pc}
 15538              	.L927:
 15539 00a2 C046     		.align	2
 15540              	.L926:
 15541 00a4 00000000 		.word	p_bma2x2
 15542              		.cfi_endproc
 15543              	.LFE99:
 15544              		.size	bma2x2_set_orient_block, .-bma2x2_set_orient_block
 15545              		.section	.text.bma2x2_get_orient_hyst,"ax",%progbits
 15546              		.align	2
 15547              		.global	bma2x2_get_orient_hyst
 15548              		.code	16
 15549              		.thumb_func
 15550              		.type	bma2x2_get_orient_hyst, %function
 15551              	bma2x2_get_orient_hyst:
 15552              	.LFB100:
6360:bma2x2.c      **** /*!
6361:bma2x2.c      ****  *	@brief This API is used to get
6362:bma2x2.c      ****  *	the orient hysteresis in the register 0x2C bit 4 to 6
6363:bma2x2.c      ****  *
6364:bma2x2.c      ****  *
6365:bma2x2.c      ****  *
6366:bma2x2.c      ****  *  @param orient_hyst_u8 : The value of orient hysteresis
6367:bma2x2.c      ****  *
6368:bma2x2.c      ****  *
6369:bma2x2.c      ****  *
6370:bma2x2.c      ****  *	@return results of bus communication function
6371:bma2x2.c      ****  *	@retval 0 -> Success
6372:bma2x2.c      ****  *	@retval -1 -> Error
6373:bma2x2.c      ****  *
6374:bma2x2.c      ****  *
6375:bma2x2.c      ****  */
6376:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_orient_hyst(u8 *orient_hyst_u8)
6377:bma2x2.c      **** {
 15553              		.loc 1 6377 0
 15554              		.cfi_startproc
 15555              		@ args = 0, pretend = 0, frame = 16
 15556              		@ frame_needed = 1, uses_anonymous_args = 0
 15557 0000 B0B5     		push	{r4, r5, r7, lr}
 15558              		.cfi_def_cfa_offset 16
 15559              		.cfi_offset 4, -16
 15560              		.cfi_offset 5, -12
 15561              		.cfi_offset 7, -8
 15562              		.cfi_offset 14, -4
 15563 0002 84B0     		sub	sp, sp, #16
 15564              		.cfi_def_cfa_offset 32
 15565 0004 00AF     		add	r7, sp, #0
 15566              		.cfi_def_cfa_register 7
 15567 0006 7860     		str	r0, [r7, #4]
6378:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 15568              		.loc 1 6378 0
 15569 0008 0E23     		movs	r3, #14
 15570 000a FB18     		adds	r3, r7, r3
 15571 000c 0022     		movs	r2, #0
 15572 000e 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 389


6379:bma2x2.c      **** 	/*  Variable used to return value of
6380:bma2x2.c      **** 	communication routine*/
6381:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 15573              		.loc 1 6381 0
 15574 0010 0F23     		movs	r3, #15
 15575 0012 FB18     		adds	r3, r7, r3
 15576 0014 FF22     		movs	r2, #255
 15577 0016 1A70     		strb	r2, [r3]
6382:bma2x2.c      **** 
6383:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 15578              		.loc 1 6383 0
 15579 0018 134B     		ldr	r3, .L932
 15580 001a 1B68     		ldr	r3, [r3]
 15581 001c 002B     		cmp	r3, #0
 15582 001e 02D1     		bne	.L929
6384:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
6385:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 15583              		.loc 1 6385 0
 15584 0020 7F23     		movs	r3, #127
 15585 0022 5B42     		rsbs	r3, r3, #0
 15586 0024 1CE0     		b	.L931
 15587              	.L929:
6386:bma2x2.c      **** 		} else {
6387:bma2x2.c      **** 			/* read the orient hysteresis data*/
6388:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 15588              		.loc 1 6388 0
 15589 0026 104B     		ldr	r3, .L932
 15590 0028 1B68     		ldr	r3, [r3]
 15591 002a DD68     		ldr	r5, [r3, #12]
 15592 002c 0E4B     		ldr	r3, .L932
 15593 002e 1B68     		ldr	r3, [r3]
 15594 0030 1879     		ldrb	r0, [r3, #4]
 15595 0032 0F23     		movs	r3, #15
 15596 0034 FC18     		adds	r4, r7, r3
 15597 0036 0E23     		movs	r3, #14
 15598 0038 FA18     		adds	r2, r7, r3
 15599 003a 0123     		movs	r3, #1
 15600 003c 2C21     		movs	r1, #44
 15601 003e A847     		blx	r5
 15602 0040 0300     		movs	r3, r0
 15603 0042 2370     		strb	r3, [r4]
6389:bma2x2.c      **** 			(p_bma2x2->dev_addr,
6390:bma2x2.c      **** 			BMA2x2_ORIENT_HYST_REG, &data_u8,
6391:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
6392:bma2x2.c      **** 			*orient_hyst_u8 = BMA2x2_GET_BITSLICE
 15604              		.loc 1 6392 0
 15605 0044 0E23     		movs	r3, #14
 15606 0046 FB18     		adds	r3, r7, r3
 15607 0048 1B78     		ldrb	r3, [r3]
 15608 004a 1B11     		asrs	r3, r3, #4
 15609 004c DBB2     		uxtb	r3, r3
 15610 004e 0722     		movs	r2, #7
 15611 0050 1340     		ands	r3, r2
 15612 0052 DAB2     		uxtb	r2, r3
 15613 0054 7B68     		ldr	r3, [r7, #4]
 15614 0056 1A70     		strb	r2, [r3]
6393:bma2x2.c      **** 			(data_u8, BMA2x2_ORIENT_HYST);
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 390


6394:bma2x2.c      **** 		}
6395:bma2x2.c      **** 	return com_rslt;
 15615              		.loc 1 6395 0
 15616 0058 0F23     		movs	r3, #15
 15617 005a FB18     		adds	r3, r7, r3
 15618 005c 1B78     		ldrb	r3, [r3]
 15619 005e 5BB2     		sxtb	r3, r3
 15620              	.L931:
6396:bma2x2.c      **** }
 15621              		.loc 1 6396 0 discriminator 1
 15622 0060 1800     		movs	r0, r3
 15623 0062 BD46     		mov	sp, r7
 15624 0064 04B0     		add	sp, sp, #16
 15625              		@ sp needed
 15626 0066 B0BD     		pop	{r4, r5, r7, pc}
 15627              	.L933:
 15628              		.align	2
 15629              	.L932:
 15630 0068 00000000 		.word	p_bma2x2
 15631              		.cfi_endproc
 15632              	.LFE100:
 15633              		.size	bma2x2_get_orient_hyst, .-bma2x2_get_orient_hyst
 15634              		.section	.text.bma2x2_set_orient_hyst,"ax",%progbits
 15635              		.align	2
 15636              		.global	bma2x2_set_orient_hyst
 15637              		.code	16
 15638              		.thumb_func
 15639              		.type	bma2x2_set_orient_hyst, %function
 15640              	bma2x2_set_orient_hyst:
 15641              	.LFB101:
6397:bma2x2.c      **** /*!
6398:bma2x2.c      ****  *	@brief This API is used to set
6399:bma2x2.c      ****  *	the orient hysteresis in the register 0x2C bit 4 to 6
6400:bma2x2.c      ****  *
6401:bma2x2.c      ****  *
6402:bma2x2.c      ****  *
6403:bma2x2.c      ****  *  @param orient_hyst_u8 : The value of orient hysteresis
6404:bma2x2.c      ****  *
6405:bma2x2.c      ****  *
6406:bma2x2.c      ****  *
6407:bma2x2.c      ****  *	@return results of bus communication function
6408:bma2x2.c      ****  *	@retval 0 -> Success
6409:bma2x2.c      ****  *	@retval -1 -> Error
6410:bma2x2.c      ****  *
6411:bma2x2.c      ****  *
6412:bma2x2.c      ****  */
6413:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_orient_hyst(u8 orient_hyst_u8)
6414:bma2x2.c      **** {
 15642              		.loc 1 6414 0
 15643              		.cfi_startproc
 15644              		@ args = 0, pretend = 0, frame = 16
 15645              		@ frame_needed = 1, uses_anonymous_args = 0
 15646 0000 B0B5     		push	{r4, r5, r7, lr}
 15647              		.cfi_def_cfa_offset 16
 15648              		.cfi_offset 4, -16
 15649              		.cfi_offset 5, -12
 15650              		.cfi_offset 7, -8
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 391


 15651              		.cfi_offset 14, -4
 15652 0002 84B0     		sub	sp, sp, #16
 15653              		.cfi_def_cfa_offset 32
 15654 0004 00AF     		add	r7, sp, #0
 15655              		.cfi_def_cfa_register 7
 15656 0006 0200     		movs	r2, r0
 15657 0008 FB1D     		adds	r3, r7, #7
 15658 000a 1A70     		strb	r2, [r3]
6415:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 15659              		.loc 1 6415 0
 15660 000c 0E23     		movs	r3, #14
 15661 000e FB18     		adds	r3, r7, r3
 15662 0010 0022     		movs	r2, #0
 15663 0012 1A70     		strb	r2, [r3]
6416:bma2x2.c      **** 	/*  Variable used to return value of
6417:bma2x2.c      **** 	communication routine*/
6418:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 15664              		.loc 1 6418 0
 15665 0014 0F23     		movs	r3, #15
 15666 0016 FB18     		adds	r3, r7, r3
 15667 0018 FF22     		movs	r2, #255
 15668 001a 1A70     		strb	r2, [r3]
6419:bma2x2.c      **** 
6420:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 15669              		.loc 1 6420 0
 15670 001c 214B     		ldr	r3, .L938
 15671 001e 1B68     		ldr	r3, [r3]
 15672 0020 002B     		cmp	r3, #0
 15673 0022 02D1     		bne	.L935
6421:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
6422:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 15674              		.loc 1 6422 0
 15675 0024 7F23     		movs	r3, #127
 15676 0026 5B42     		rsbs	r3, r3, #0
 15677 0028 37E0     		b	.L937
 15678              	.L935:
6423:bma2x2.c      **** 		} else {
6424:bma2x2.c      **** 			/* write the orient hysteresis data */
6425:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 15679              		.loc 1 6425 0
 15680 002a 1E4B     		ldr	r3, .L938
 15681 002c 1B68     		ldr	r3, [r3]
 15682 002e DD68     		ldr	r5, [r3, #12]
 15683 0030 1C4B     		ldr	r3, .L938
 15684 0032 1B68     		ldr	r3, [r3]
 15685 0034 1879     		ldrb	r0, [r3, #4]
 15686 0036 0F23     		movs	r3, #15
 15687 0038 FC18     		adds	r4, r7, r3
 15688 003a 0E23     		movs	r3, #14
 15689 003c FA18     		adds	r2, r7, r3
 15690 003e 0123     		movs	r3, #1
 15691 0040 2C21     		movs	r1, #44
 15692 0042 A847     		blx	r5
 15693 0044 0300     		movs	r3, r0
 15694 0046 2370     		strb	r3, [r4]
6426:bma2x2.c      **** 			(p_bma2x2->dev_addr,
6427:bma2x2.c      **** 			BMA2x2_ORIENT_HYST_REG, &data_u8,
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 392


6428:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
6429:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE(data_u8,
 15695              		.loc 1 6429 0
 15696 0048 0E23     		movs	r3, #14
 15697 004a FB18     		adds	r3, r7, r3
 15698 004c 1B78     		ldrb	r3, [r3]
 15699 004e 5BB2     		sxtb	r3, r3
 15700 0050 7022     		movs	r2, #112
 15701 0052 9343     		bics	r3, r2
 15702 0054 5AB2     		sxtb	r2, r3
 15703 0056 FB1D     		adds	r3, r7, #7
 15704 0058 1B78     		ldrb	r3, [r3]
 15705 005a 1B01     		lsls	r3, r3, #4
 15706 005c 5BB2     		sxtb	r3, r3
 15707 005e 7021     		movs	r1, #112
 15708 0060 0B40     		ands	r3, r1
 15709 0062 5BB2     		sxtb	r3, r3
 15710 0064 1343     		orrs	r3, r2
 15711 0066 5BB2     		sxtb	r3, r3
 15712 0068 DAB2     		uxtb	r2, r3
 15713 006a 0E23     		movs	r3, #14
 15714 006c FB18     		adds	r3, r7, r3
 15715 006e 1A70     		strb	r2, [r3]
6430:bma2x2.c      **** 			BMA2x2_ORIENT_HYST, orient_hyst_u8);
6431:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 15716              		.loc 1 6431 0
 15717 0070 0E23     		movs	r3, #14
 15718 0072 FB18     		adds	r3, r7, r3
 15719 0074 0122     		movs	r2, #1
 15720 0076 1900     		movs	r1, r3
 15721 0078 2C20     		movs	r0, #44
 15722 007a FFF7FEFF 		bl	bma2x2_write_reg
 15723 007e 0300     		movs	r3, r0
 15724 0080 DAB2     		uxtb	r2, r3
 15725 0082 0F23     		movs	r3, #15
 15726 0084 FB18     		adds	r3, r7, r3
 15727 0086 1B78     		ldrb	r3, [r3]
 15728 0088 D318     		adds	r3, r2, r3
 15729 008a DAB2     		uxtb	r2, r3
 15730 008c 0F23     		movs	r3, #15
 15731 008e FB18     		adds	r3, r7, r3
 15732 0090 1A70     		strb	r2, [r3]
6432:bma2x2.c      **** 			BMA2x2_ORIENT_HYST_REG,
6433:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
6434:bma2x2.c      **** 		}
6435:bma2x2.c      **** 	return com_rslt;
 15733              		.loc 1 6435 0
 15734 0092 0F23     		movs	r3, #15
 15735 0094 FB18     		adds	r3, r7, r3
 15736 0096 1B78     		ldrb	r3, [r3]
 15737 0098 5BB2     		sxtb	r3, r3
 15738              	.L937:
6436:bma2x2.c      **** }
 15739              		.loc 1 6436 0 discriminator 1
 15740 009a 1800     		movs	r0, r3
 15741 009c BD46     		mov	sp, r7
 15742 009e 04B0     		add	sp, sp, #16
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 393


 15743              		@ sp needed
 15744 00a0 B0BD     		pop	{r4, r5, r7, pc}
 15745              	.L939:
 15746 00a2 C046     		.align	2
 15747              	.L938:
 15748 00a4 00000000 		.word	p_bma2x2
 15749              		.cfi_endproc
 15750              	.LFE101:
 15751              		.size	bma2x2_set_orient_hyst, .-bma2x2_set_orient_hyst
 15752              		.section	.text.bma2x2_get_theta,"ax",%progbits
 15753              		.align	2
 15754              		.global	bma2x2_get_theta
 15755              		.code	16
 15756              		.thumb_func
 15757              		.type	bma2x2_get_theta, %function
 15758              	bma2x2_get_theta:
 15759              	.LFB102:
6437:bma2x2.c      **** /*!
6438:bma2x2.c      ****  *	@brief  This API is used to get
6439:bma2x2.c      ****  *	the theta value of orient and flat interrupts
6440:bma2x2.c      ****  *	@note ORIENT_THETA -> register 0x2D bit 0 to 5
6441:bma2x2.c      ****  *	@note FLAT_THETA   -> register 0x2E bit 0 to 5
6442:bma2x2.c      ****  *
6443:bma2x2.c      ****  *  @param channel_u8: The value of theta selection
6444:bma2x2.c      ****  *     channel_u8     |    result
6445:bma2x2.c      ****  *  --------------------|------------------
6446:bma2x2.c      ****  *     0x00             | BMA2x2_ACCEL_ORIENT_THETA
6447:bma2x2.c      ****  *     0x01             | BMA2x2_ACCEL_FLAT_THETA
6448:bma2x2.c      ****  * @note
6449:bma2x2.c      ****  * @note FLAT_THETA : Defines a blocking angle between 0 deg to 44.8 deg
6450:bma2x2.c      ****  * @note ORIENT_THETA : Defines threshold for detection of flat position
6451:bma2x2.c      ****  *                in range from 0 deg to 44.8 deg
6452:bma2x2.c      ****  *
6453:bma2x2.c      ****  *  @param theta_u8: The value of theta
6454:bma2x2.c      ****  *
6455:bma2x2.c      ****  *	@return results of bus communication function
6456:bma2x2.c      ****  *	@retval 0 -> Success
6457:bma2x2.c      ****  *	@retval -1 -> Error
6458:bma2x2.c      ****  *
6459:bma2x2.c      ****  *
6460:bma2x2.c      ****  */
6461:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_theta(u8 channel_u8,
6462:bma2x2.c      **** u8 *theta_u8)
6463:bma2x2.c      **** {
 15760              		.loc 1 6463 0
 15761              		.cfi_startproc
 15762              		@ args = 0, pretend = 0, frame = 16
 15763              		@ frame_needed = 1, uses_anonymous_args = 0
 15764 0000 B0B5     		push	{r4, r5, r7, lr}
 15765              		.cfi_def_cfa_offset 16
 15766              		.cfi_offset 4, -16
 15767              		.cfi_offset 5, -12
 15768              		.cfi_offset 7, -8
 15769              		.cfi_offset 14, -4
 15770 0002 84B0     		sub	sp, sp, #16
 15771              		.cfi_def_cfa_offset 32
 15772 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 394


 15773              		.cfi_def_cfa_register 7
 15774 0006 0200     		movs	r2, r0
 15775 0008 3960     		str	r1, [r7]
 15776 000a FB1D     		adds	r3, r7, #7
 15777 000c 1A70     		strb	r2, [r3]
6464:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 15778              		.loc 1 6464 0
 15779 000e 0E23     		movs	r3, #14
 15780 0010 FB18     		adds	r3, r7, r3
 15781 0012 0022     		movs	r2, #0
 15782 0014 1A70     		strb	r2, [r3]
6465:bma2x2.c      **** 	/*  Variable used to return value of
6466:bma2x2.c      **** 	communication routine*/
6467:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 15783              		.loc 1 6467 0
 15784 0016 0F23     		movs	r3, #15
 15785 0018 FB18     		adds	r3, r7, r3
 15786 001a FF22     		movs	r2, #255
 15787 001c 1A70     		strb	r2, [r3]
6468:bma2x2.c      **** 
6469:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 15788              		.loc 1 6469 0
 15789 001e 244B     		ldr	r3, .L949
 15790 0020 1B68     		ldr	r3, [r3]
 15791 0022 002B     		cmp	r3, #0
 15792 0024 02D1     		bne	.L941
6470:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
6471:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 15793              		.loc 1 6471 0
 15794 0026 7F23     		movs	r3, #127
 15795 0028 5B42     		rsbs	r3, r3, #0
 15796 002a 3CE0     		b	.L947
 15797              	.L941:
6472:bma2x2.c      **** 		} else {
6473:bma2x2.c      **** 		switch (channel_u8) {
 15798              		.loc 1 6473 0
 15799 002c FB1D     		adds	r3, r7, #7
 15800 002e 1B78     		ldrb	r3, [r3]
 15801 0030 002B     		cmp	r3, #0
 15802 0032 02D0     		beq	.L944
 15803 0034 012B     		cmp	r3, #1
 15804 0036 18D0     		beq	.L945
 15805 0038 2CE0     		b	.L948
 15806              	.L944:
6474:bma2x2.c      **** 		/* write theta value*/
6475:bma2x2.c      **** 		case BMA2x2_ORIENT_THETA:
6476:bma2x2.c      **** 			/*ORIENT THETA*/
6477:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 15807              		.loc 1 6477 0
 15808 003a 1D4B     		ldr	r3, .L949
 15809 003c 1B68     		ldr	r3, [r3]
 15810 003e DD68     		ldr	r5, [r3, #12]
 15811 0040 1B4B     		ldr	r3, .L949
 15812 0042 1B68     		ldr	r3, [r3]
 15813 0044 1879     		ldrb	r0, [r3, #4]
 15814 0046 0F23     		movs	r3, #15
 15815 0048 FC18     		adds	r4, r7, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 395


 15816 004a 0E23     		movs	r3, #14
 15817 004c FA18     		adds	r2, r7, r3
 15818 004e 0123     		movs	r3, #1
 15819 0050 2D21     		movs	r1, #45
 15820 0052 A847     		blx	r5
 15821 0054 0300     		movs	r3, r0
 15822 0056 2370     		strb	r3, [r4]
6478:bma2x2.c      **** 			(p_bma2x2->dev_addr,
6479:bma2x2.c      **** 			BMA2x2_THETA_BLOCK_REG, &data_u8,
6480:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
6481:bma2x2.c      **** 			*theta_u8 = BMA2x2_GET_BITSLICE
 15823              		.loc 1 6481 0
 15824 0058 0E23     		movs	r3, #14
 15825 005a FB18     		adds	r3, r7, r3
 15826 005c 1B78     		ldrb	r3, [r3]
 15827 005e 3F22     		movs	r2, #63
 15828 0060 1340     		ands	r3, r2
 15829 0062 DAB2     		uxtb	r2, r3
 15830 0064 3B68     		ldr	r3, [r7]
 15831 0066 1A70     		strb	r2, [r3]
6482:bma2x2.c      **** 			(data_u8, BMA2x2_THETA_BLOCK);
6483:bma2x2.c      **** 		break;
 15832              		.loc 1 6483 0
 15833 0068 19E0     		b	.L946
 15834              	.L945:
6484:bma2x2.c      **** 		case BMA2x2_FLAT_THETA:
6485:bma2x2.c      **** 			/*FLAT THETA*/
6486:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 15835              		.loc 1 6486 0
 15836 006a 114B     		ldr	r3, .L949
 15837 006c 1B68     		ldr	r3, [r3]
 15838 006e DD68     		ldr	r5, [r3, #12]
 15839 0070 0F4B     		ldr	r3, .L949
 15840 0072 1B68     		ldr	r3, [r3]
 15841 0074 1879     		ldrb	r0, [r3, #4]
 15842 0076 0F23     		movs	r3, #15
 15843 0078 FC18     		adds	r4, r7, r3
 15844 007a 0E23     		movs	r3, #14
 15845 007c FA18     		adds	r2, r7, r3
 15846 007e 0123     		movs	r3, #1
 15847 0080 2E21     		movs	r1, #46
 15848 0082 A847     		blx	r5
 15849 0084 0300     		movs	r3, r0
 15850 0086 2370     		strb	r3, [r4]
6487:bma2x2.c      **** 			(p_bma2x2->dev_addr,
6488:bma2x2.c      **** 			BMA2x2_THETA_FLAT_REG,
6489:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
6490:bma2x2.c      **** 			*theta_u8 = data_u8;
 15851              		.loc 1 6490 0
 15852 0088 0E23     		movs	r3, #14
 15853 008a FB18     		adds	r3, r7, r3
 15854 008c 1A78     		ldrb	r2, [r3]
 15855 008e 3B68     		ldr	r3, [r7]
 15856 0090 1A70     		strb	r2, [r3]
6491:bma2x2.c      **** 		break;
 15857              		.loc 1 6491 0
 15858 0092 04E0     		b	.L946
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 396


 15859              	.L948:
6492:bma2x2.c      **** 		default:
6493:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 15860              		.loc 1 6493 0
 15861 0094 0F23     		movs	r3, #15
 15862 0096 FB18     		adds	r3, r7, r3
 15863 0098 FE22     		movs	r2, #254
 15864 009a 1A70     		strb	r2, [r3]
6494:bma2x2.c      **** 		break;
 15865              		.loc 1 6494 0
 15866 009c C046     		nop
 15867              	.L946:
6495:bma2x2.c      **** 		}
6496:bma2x2.c      **** 	}
6497:bma2x2.c      **** 	return com_rslt;
 15868              		.loc 1 6497 0
 15869 009e 0F23     		movs	r3, #15
 15870 00a0 FB18     		adds	r3, r7, r3
 15871 00a2 1B78     		ldrb	r3, [r3]
 15872 00a4 5BB2     		sxtb	r3, r3
 15873              	.L947:
6498:bma2x2.c      **** }
 15874              		.loc 1 6498 0 discriminator 1
 15875 00a6 1800     		movs	r0, r3
 15876 00a8 BD46     		mov	sp, r7
 15877 00aa 04B0     		add	sp, sp, #16
 15878              		@ sp needed
 15879 00ac B0BD     		pop	{r4, r5, r7, pc}
 15880              	.L950:
 15881 00ae C046     		.align	2
 15882              	.L949:
 15883 00b0 00000000 		.word	p_bma2x2
 15884              		.cfi_endproc
 15885              	.LFE102:
 15886              		.size	bma2x2_get_theta, .-bma2x2_get_theta
 15887              		.section	.text.bma2x2_set_theta,"ax",%progbits
 15888              		.align	2
 15889              		.global	bma2x2_set_theta
 15890              		.code	16
 15891              		.thumb_func
 15892              		.type	bma2x2_set_theta, %function
 15893              	bma2x2_set_theta:
 15894              	.LFB103:
6499:bma2x2.c      **** /*!
6500:bma2x2.c      ****  *	@brief  This API is used to set
6501:bma2x2.c      ****  *	the theta value of orient and flat interrupts
6502:bma2x2.c      ****  *	@note ORIENT_THETA -> register 0x2D bit 0 to 5
6503:bma2x2.c      ****  *	@note FLAT_THETA   -> register 0x2E bit 0 to 5
6504:bma2x2.c      ****  *
6505:bma2x2.c      ****  *  @param channel_u8: The value of theta selection
6506:bma2x2.c      ****  *     channel_u8     |    result
6507:bma2x2.c      ****  *  --------------------|------------------
6508:bma2x2.c      ****  *     0x00             | BMA2x2_ACCEL_ORIENT_THETA
6509:bma2x2.c      ****  *     0x01             | BMA2x2_ACCEL_FLAT_THETA
6510:bma2x2.c      ****  * @note
6511:bma2x2.c      ****  * @note FLAT_THETA : Defines a blocking angle between 0 deg to 44.8 deg
6512:bma2x2.c      ****  * @note ORIENT_THETA : Defines threshold for detection of flat position
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 397


6513:bma2x2.c      ****  *                in range from 0 deg to 44.8 deg
6514:bma2x2.c      ****  *
6515:bma2x2.c      ****  *  @param theta_u8: The value of theta
6516:bma2x2.c      ****  *
6517:bma2x2.c      ****  *	@return results of bus communication function
6518:bma2x2.c      ****  *	@retval 0 -> Success
6519:bma2x2.c      ****  *	@retval -1 -> Error
6520:bma2x2.c      ****  *
6521:bma2x2.c      ****  *
6522:bma2x2.c      ****  */
6523:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_theta(u8 channel_u8,
6524:bma2x2.c      **** u8 theta_u8)
6525:bma2x2.c      **** {
 15895              		.loc 1 6525 0
 15896              		.cfi_startproc
 15897              		@ args = 0, pretend = 0, frame = 16
 15898              		@ frame_needed = 1, uses_anonymous_args = 0
 15899 0000 B0B5     		push	{r4, r5, r7, lr}
 15900              		.cfi_def_cfa_offset 16
 15901              		.cfi_offset 4, -16
 15902              		.cfi_offset 5, -12
 15903              		.cfi_offset 7, -8
 15904              		.cfi_offset 14, -4
 15905 0002 84B0     		sub	sp, sp, #16
 15906              		.cfi_def_cfa_offset 32
 15907 0004 00AF     		add	r7, sp, #0
 15908              		.cfi_def_cfa_register 7
 15909 0006 0200     		movs	r2, r0
 15910 0008 FB1D     		adds	r3, r7, #7
 15911 000a 1A70     		strb	r2, [r3]
 15912 000c BB1D     		adds	r3, r7, #6
 15913 000e 0A1C     		adds	r2, r1, #0
 15914 0010 1A70     		strb	r2, [r3]
6526:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 15915              		.loc 1 6526 0
 15916 0012 0E23     		movs	r3, #14
 15917 0014 FB18     		adds	r3, r7, r3
 15918 0016 0022     		movs	r2, #0
 15919 0018 1A70     		strb	r2, [r3]
6527:bma2x2.c      **** 	/*  Variable used to return value of
6528:bma2x2.c      **** 	communication routine*/
6529:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 15920              		.loc 1 6529 0
 15921 001a 0F23     		movs	r3, #15
 15922 001c FB18     		adds	r3, r7, r3
 15923 001e FF22     		movs	r2, #255
 15924 0020 1A70     		strb	r2, [r3]
6530:bma2x2.c      **** 
6531:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 15925              		.loc 1 6531 0
 15926 0022 304B     		ldr	r3, .L960
 15927 0024 1B68     		ldr	r3, [r3]
 15928 0026 002B     		cmp	r3, #0
 15929 0028 02D1     		bne	.L952
6532:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
6533:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 15930              		.loc 1 6533 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 398


 15931 002a 7F23     		movs	r3, #127
 15932 002c 5B42     		rsbs	r3, r3, #0
 15933 002e 54E0     		b	.L958
 15934              	.L952:
6534:bma2x2.c      **** 		} else {
6535:bma2x2.c      **** 		switch (channel_u8) {
 15935              		.loc 1 6535 0
 15936 0030 FB1D     		adds	r3, r7, #7
 15937 0032 1B78     		ldrb	r3, [r3]
 15938 0034 002B     		cmp	r3, #0
 15939 0036 02D0     		beq	.L955
 15940 0038 012B     		cmp	r3, #1
 15941 003a 34D0     		beq	.L956
 15942 003c 44E0     		b	.L959
 15943              	.L955:
6536:bma2x2.c      **** 		/* write flat value */
6537:bma2x2.c      **** 		case BMA2x2_ORIENT_THETA:
6538:bma2x2.c      **** 			/*ORIENT THETA*/
6539:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 15944              		.loc 1 6539 0
 15945 003e 294B     		ldr	r3, .L960
 15946 0040 1B68     		ldr	r3, [r3]
 15947 0042 DD68     		ldr	r5, [r3, #12]
 15948 0044 274B     		ldr	r3, .L960
 15949 0046 1B68     		ldr	r3, [r3]
 15950 0048 1879     		ldrb	r0, [r3, #4]
 15951 004a 0F23     		movs	r3, #15
 15952 004c FC18     		adds	r4, r7, r3
 15953 004e 0E23     		movs	r3, #14
 15954 0050 FA18     		adds	r2, r7, r3
 15955 0052 0123     		movs	r3, #1
 15956 0054 2D21     		movs	r1, #45
 15957 0056 A847     		blx	r5
 15958 0058 0300     		movs	r3, r0
 15959 005a 2370     		strb	r3, [r4]
6540:bma2x2.c      **** 			(p_bma2x2->dev_addr,
6541:bma2x2.c      **** 			BMA2x2_THETA_BLOCK_REG, &data_u8,
6542:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
6543:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE(data_u8,
 15960              		.loc 1 6543 0
 15961 005c 0E23     		movs	r3, #14
 15962 005e FB18     		adds	r3, r7, r3
 15963 0060 1B78     		ldrb	r3, [r3]
 15964 0062 5BB2     		sxtb	r3, r3
 15965 0064 3F22     		movs	r2, #63
 15966 0066 9343     		bics	r3, r2
 15967 0068 5AB2     		sxtb	r2, r3
 15968 006a BB1D     		adds	r3, r7, #6
 15969 006c 1B78     		ldrb	r3, [r3]
 15970 006e 5BB2     		sxtb	r3, r3
 15971 0070 3F21     		movs	r1, #63
 15972 0072 0B40     		ands	r3, r1
 15973 0074 5BB2     		sxtb	r3, r3
 15974 0076 1343     		orrs	r3, r2
 15975 0078 5BB2     		sxtb	r3, r3
 15976 007a DAB2     		uxtb	r2, r3
 15977 007c 0E23     		movs	r3, #14
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 399


 15978 007e FB18     		adds	r3, r7, r3
 15979 0080 1A70     		strb	r2, [r3]
6544:bma2x2.c      **** 			BMA2x2_THETA_BLOCK, theta_u8);
6545:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 15980              		.loc 1 6545 0
 15981 0082 0E23     		movs	r3, #14
 15982 0084 FB18     		adds	r3, r7, r3
 15983 0086 0122     		movs	r2, #1
 15984 0088 1900     		movs	r1, r3
 15985 008a 2D20     		movs	r0, #45
 15986 008c FFF7FEFF 		bl	bma2x2_write_reg
 15987 0090 0300     		movs	r3, r0
 15988 0092 DAB2     		uxtb	r2, r3
 15989 0094 0F23     		movs	r3, #15
 15990 0096 FB18     		adds	r3, r7, r3
 15991 0098 1B78     		ldrb	r3, [r3]
 15992 009a D318     		adds	r3, r2, r3
 15993 009c DAB2     		uxtb	r2, r3
 15994 009e 0F23     		movs	r3, #15
 15995 00a0 FB18     		adds	r3, r7, r3
 15996 00a2 1A70     		strb	r2, [r3]
6546:bma2x2.c      **** 			BMA2x2_THETA_BLOCK_REG,
6547:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
6548:bma2x2.c      **** 		break;
 15997              		.loc 1 6548 0
 15998 00a4 15E0     		b	.L957
 15999              	.L956:
6549:bma2x2.c      **** 		case BMA2x2_FLAT_THETA:
6550:bma2x2.c      **** 			/*FLAT THETA*/
6551:bma2x2.c      **** 			data_u8 = theta_u8;
 16000              		.loc 1 6551 0
 16001 00a6 0E23     		movs	r3, #14
 16002 00a8 FB18     		adds	r3, r7, r3
 16003 00aa BA1D     		adds	r2, r7, #6
 16004 00ac 1278     		ldrb	r2, [r2]
 16005 00ae 1A70     		strb	r2, [r3]
6552:bma2x2.c      **** 			com_rslt = bma2x2_write_reg(
 16006              		.loc 1 6552 0
 16007 00b0 0F23     		movs	r3, #15
 16008 00b2 FC18     		adds	r4, r7, r3
 16009 00b4 0E23     		movs	r3, #14
 16010 00b6 FB18     		adds	r3, r7, r3
 16011 00b8 0122     		movs	r2, #1
 16012 00ba 1900     		movs	r1, r3
 16013 00bc 2E20     		movs	r0, #46
 16014 00be FFF7FEFF 		bl	bma2x2_write_reg
 16015 00c2 0300     		movs	r3, r0
 16016 00c4 2370     		strb	r3, [r4]
6553:bma2x2.c      **** 			BMA2x2_THETA_FLAT_REG,
6554:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
6555:bma2x2.c      **** 		break;
 16017              		.loc 1 6555 0
 16018 00c6 04E0     		b	.L957
 16019              	.L959:
6556:bma2x2.c      **** 		default:
6557:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 16020              		.loc 1 6557 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 400


 16021 00c8 0F23     		movs	r3, #15
 16022 00ca FB18     		adds	r3, r7, r3
 16023 00cc FE22     		movs	r2, #254
 16024 00ce 1A70     		strb	r2, [r3]
6558:bma2x2.c      **** 		break;
 16025              		.loc 1 6558 0
 16026 00d0 C046     		nop
 16027              	.L957:
6559:bma2x2.c      **** 		}
6560:bma2x2.c      **** 	}
6561:bma2x2.c      **** 	return com_rslt;
 16028              		.loc 1 6561 0
 16029 00d2 0F23     		movs	r3, #15
 16030 00d4 FB18     		adds	r3, r7, r3
 16031 00d6 1B78     		ldrb	r3, [r3]
 16032 00d8 5BB2     		sxtb	r3, r3
 16033              	.L958:
6562:bma2x2.c      **** }
 16034              		.loc 1 6562 0 discriminator 1
 16035 00da 1800     		movs	r0, r3
 16036 00dc BD46     		mov	sp, r7
 16037 00de 04B0     		add	sp, sp, #16
 16038              		@ sp needed
 16039 00e0 B0BD     		pop	{r4, r5, r7, pc}
 16040              	.L961:
 16041 00e2 C046     		.align	2
 16042              	.L960:
 16043 00e4 00000000 		.word	p_bma2x2
 16044              		.cfi_endproc
 16045              	.LFE103:
 16046              		.size	bma2x2_set_theta, .-bma2x2_set_theta
 16047              		.section	.text.bma2x2_get_orient_enable,"ax",%progbits
 16048              		.align	2
 16049              		.global	bma2x2_get_orient_enable
 16050              		.code	16
 16051              		.thumb_func
 16052              		.type	bma2x2_get_orient_enable, %function
 16053              	bma2x2_get_orient_enable:
 16054              	.LFB104:
6563:bma2x2.c      **** /*!
6564:bma2x2.c      ****  *	@brief This API is used to get
6565:bma2x2.c      ****  *  the interrupt enable of orient ud_enable in the register 0x2D bit 6
6566:bma2x2.c      ****  *
6567:bma2x2.c      ****  *
6568:bma2x2.c      ****  *  @param orient_enable_u8 : The value of orient ud_enable
6569:bma2x2.c      ****  *     orient_enable_u8     |    result
6570:bma2x2.c      ****  *  ------------------------- |------------------
6571:bma2x2.c      ****  *     0x00                   | Generates Interrupt
6572:bma2x2.c      ****  *     0x01                   | Do not generate interrupt
6573:bma2x2.c      ****  *
6574:bma2x2.c      ****  *
6575:bma2x2.c      ****  *
6576:bma2x2.c      ****  *	@return results of bus communication function
6577:bma2x2.c      ****  *	@retval 0 -> Success
6578:bma2x2.c      ****  *	@retval -1 -> Error
6579:bma2x2.c      ****  *
6580:bma2x2.c      ****  *
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 401


6581:bma2x2.c      ****  */
6582:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_orient_enable(u8 *orient_enable_u8)
6583:bma2x2.c      **** {
 16055              		.loc 1 6583 0
 16056              		.cfi_startproc
 16057              		@ args = 0, pretend = 0, frame = 16
 16058              		@ frame_needed = 1, uses_anonymous_args = 0
 16059 0000 B0B5     		push	{r4, r5, r7, lr}
 16060              		.cfi_def_cfa_offset 16
 16061              		.cfi_offset 4, -16
 16062              		.cfi_offset 5, -12
 16063              		.cfi_offset 7, -8
 16064              		.cfi_offset 14, -4
 16065 0002 84B0     		sub	sp, sp, #16
 16066              		.cfi_def_cfa_offset 32
 16067 0004 00AF     		add	r7, sp, #0
 16068              		.cfi_def_cfa_register 7
 16069 0006 7860     		str	r0, [r7, #4]
6584:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 16070              		.loc 1 6584 0
 16071 0008 0E23     		movs	r3, #14
 16072 000a FB18     		adds	r3, r7, r3
 16073 000c 0022     		movs	r2, #0
 16074 000e 1A70     		strb	r2, [r3]
6585:bma2x2.c      **** 	/*  Variable used to return value of
6586:bma2x2.c      **** 	communication routine*/
6587:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 16075              		.loc 1 6587 0
 16076 0010 0F23     		movs	r3, #15
 16077 0012 FB18     		adds	r3, r7, r3
 16078 0014 FF22     		movs	r2, #255
 16079 0016 1A70     		strb	r2, [r3]
6588:bma2x2.c      **** 
6589:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 16080              		.loc 1 6589 0
 16081 0018 134B     		ldr	r3, .L966
 16082 001a 1B68     		ldr	r3, [r3]
 16083 001c 002B     		cmp	r3, #0
 16084 001e 02D1     		bne	.L963
6590:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
6591:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 16085              		.loc 1 6591 0
 16086 0020 7F23     		movs	r3, #127
 16087 0022 5B42     		rsbs	r3, r3, #0
 16088 0024 1CE0     		b	.L965
 16089              	.L963:
6592:bma2x2.c      **** 		} else {
6593:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 16090              		.loc 1 6593 0
 16091 0026 104B     		ldr	r3, .L966
 16092 0028 1B68     		ldr	r3, [r3]
 16093 002a DD68     		ldr	r5, [r3, #12]
 16094 002c 0E4B     		ldr	r3, .L966
 16095 002e 1B68     		ldr	r3, [r3]
 16096 0030 1879     		ldrb	r0, [r3, #4]
 16097 0032 0F23     		movs	r3, #15
 16098 0034 FC18     		adds	r4, r7, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 402


 16099 0036 0E23     		movs	r3, #14
 16100 0038 FA18     		adds	r2, r7, r3
 16101 003a 0123     		movs	r3, #1
 16102 003c 2D21     		movs	r1, #45
 16103 003e A847     		blx	r5
 16104 0040 0300     		movs	r3, r0
 16105 0042 2370     		strb	r3, [r4]
6594:bma2x2.c      **** 			(p_bma2x2->dev_addr,
6595:bma2x2.c      **** 			BMA2x2_ORIENT_UD_ENABLE_REG,
6596:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
6597:bma2x2.c      **** 			*orient_enable_u8 = BMA2x2_GET_BITSLICE
 16106              		.loc 1 6597 0
 16107 0044 0E23     		movs	r3, #14
 16108 0046 FB18     		adds	r3, r7, r3
 16109 0048 1B78     		ldrb	r3, [r3]
 16110 004a 9B11     		asrs	r3, r3, #6
 16111 004c DBB2     		uxtb	r3, r3
 16112 004e 0122     		movs	r2, #1
 16113 0050 1340     		ands	r3, r2
 16114 0052 DAB2     		uxtb	r2, r3
 16115 0054 7B68     		ldr	r3, [r7, #4]
 16116 0056 1A70     		strb	r2, [r3]
6598:bma2x2.c      **** 			(data_u8, BMA2x2_ORIENT_UD_ENABLE);
6599:bma2x2.c      **** 		}
6600:bma2x2.c      **** 	return com_rslt;
 16117              		.loc 1 6600 0
 16118 0058 0F23     		movs	r3, #15
 16119 005a FB18     		adds	r3, r7, r3
 16120 005c 1B78     		ldrb	r3, [r3]
 16121 005e 5BB2     		sxtb	r3, r3
 16122              	.L965:
6601:bma2x2.c      **** }
 16123              		.loc 1 6601 0 discriminator 1
 16124 0060 1800     		movs	r0, r3
 16125 0062 BD46     		mov	sp, r7
 16126 0064 04B0     		add	sp, sp, #16
 16127              		@ sp needed
 16128 0066 B0BD     		pop	{r4, r5, r7, pc}
 16129              	.L967:
 16130              		.align	2
 16131              	.L966:
 16132 0068 00000000 		.word	p_bma2x2
 16133              		.cfi_endproc
 16134              	.LFE104:
 16135              		.size	bma2x2_get_orient_enable, .-bma2x2_get_orient_enable
 16136              		.section	.text.bma2x2_set_orient_enable,"ax",%progbits
 16137              		.align	2
 16138              		.global	bma2x2_set_orient_enable
 16139              		.code	16
 16140              		.thumb_func
 16141              		.type	bma2x2_set_orient_enable, %function
 16142              	bma2x2_set_orient_enable:
 16143              	.LFB105:
6602:bma2x2.c      **** /*!
6603:bma2x2.c      ****  *	@brief This API is used to set
6604:bma2x2.c      ****  *  the interrupt enable of orient ud_enable in the register 0x2D bit 6
6605:bma2x2.c      ****  *
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 403


6606:bma2x2.c      ****  *
6607:bma2x2.c      ****  *  @param orient_enable_u8 : The value of orient ud_enable
6608:bma2x2.c      ****  *     orient_enable_u8     |    result
6609:bma2x2.c      ****  *  ------------------------- |------------------
6610:bma2x2.c      ****  *     0x00                   | Generates Interrupt
6611:bma2x2.c      ****  *     0x01                   | Do not generate interrupt
6612:bma2x2.c      ****  *
6613:bma2x2.c      ****  *
6614:bma2x2.c      ****  *
6615:bma2x2.c      ****  *	@return results of bus communication function
6616:bma2x2.c      ****  *	@retval 0 -> Success
6617:bma2x2.c      ****  *	@retval -1 -> Error
6618:bma2x2.c      ****  *
6619:bma2x2.c      ****  *
6620:bma2x2.c      ****  */
6621:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_orient_enable(u8 orient_enable_u8)
6622:bma2x2.c      **** {
 16144              		.loc 1 6622 0
 16145              		.cfi_startproc
 16146              		@ args = 0, pretend = 0, frame = 16
 16147              		@ frame_needed = 1, uses_anonymous_args = 0
 16148 0000 B0B5     		push	{r4, r5, r7, lr}
 16149              		.cfi_def_cfa_offset 16
 16150              		.cfi_offset 4, -16
 16151              		.cfi_offset 5, -12
 16152              		.cfi_offset 7, -8
 16153              		.cfi_offset 14, -4
 16154 0002 84B0     		sub	sp, sp, #16
 16155              		.cfi_def_cfa_offset 32
 16156 0004 00AF     		add	r7, sp, #0
 16157              		.cfi_def_cfa_register 7
 16158 0006 0200     		movs	r2, r0
 16159 0008 FB1D     		adds	r3, r7, #7
 16160 000a 1A70     		strb	r2, [r3]
6623:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 16161              		.loc 1 6623 0
 16162 000c 0E23     		movs	r3, #14
 16163 000e FB18     		adds	r3, r7, r3
 16164 0010 0022     		movs	r2, #0
 16165 0012 1A70     		strb	r2, [r3]
6624:bma2x2.c      **** 	/*  Variable used to return value of
6625:bma2x2.c      **** 	communication routine*/
6626:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 16166              		.loc 1 6626 0
 16167 0014 0F23     		movs	r3, #15
 16168 0016 FB18     		adds	r3, r7, r3
 16169 0018 FF22     		movs	r2, #255
 16170 001a 1A70     		strb	r2, [r3]
6627:bma2x2.c      **** 
6628:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 16171              		.loc 1 6628 0
 16172 001c 214B     		ldr	r3, .L972
 16173 001e 1B68     		ldr	r3, [r3]
 16174 0020 002B     		cmp	r3, #0
 16175 0022 02D1     		bne	.L969
6629:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
6630:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 404


 16176              		.loc 1 6630 0
 16177 0024 7F23     		movs	r3, #127
 16178 0026 5B42     		rsbs	r3, r3, #0
 16179 0028 37E0     		b	.L971
 16180              	.L969:
6631:bma2x2.c      **** 		} else {
6632:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 16181              		.loc 1 6632 0
 16182 002a 1E4B     		ldr	r3, .L972
 16183 002c 1B68     		ldr	r3, [r3]
 16184 002e DD68     		ldr	r5, [r3, #12]
 16185 0030 1C4B     		ldr	r3, .L972
 16186 0032 1B68     		ldr	r3, [r3]
 16187 0034 1879     		ldrb	r0, [r3, #4]
 16188 0036 0F23     		movs	r3, #15
 16189 0038 FC18     		adds	r4, r7, r3
 16190 003a 0E23     		movs	r3, #14
 16191 003c FA18     		adds	r2, r7, r3
 16192 003e 0123     		movs	r3, #1
 16193 0040 2D21     		movs	r1, #45
 16194 0042 A847     		blx	r5
 16195 0044 0300     		movs	r3, r0
 16196 0046 2370     		strb	r3, [r4]
6633:bma2x2.c      **** 			(p_bma2x2->dev_addr,
6634:bma2x2.c      **** 			BMA2x2_ORIENT_UD_ENABLE_REG,
6635:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
6636:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE(data_u8,
 16197              		.loc 1 6636 0
 16198 0048 0E23     		movs	r3, #14
 16199 004a FB18     		adds	r3, r7, r3
 16200 004c 1B78     		ldrb	r3, [r3]
 16201 004e 5BB2     		sxtb	r3, r3
 16202 0050 4022     		movs	r2, #64
 16203 0052 9343     		bics	r3, r2
 16204 0054 5AB2     		sxtb	r2, r3
 16205 0056 FB1D     		adds	r3, r7, #7
 16206 0058 1B78     		ldrb	r3, [r3]
 16207 005a 9B01     		lsls	r3, r3, #6
 16208 005c 5BB2     		sxtb	r3, r3
 16209 005e 4021     		movs	r1, #64
 16210 0060 0B40     		ands	r3, r1
 16211 0062 5BB2     		sxtb	r3, r3
 16212 0064 1343     		orrs	r3, r2
 16213 0066 5BB2     		sxtb	r3, r3
 16214 0068 DAB2     		uxtb	r2, r3
 16215 006a 0E23     		movs	r3, #14
 16216 006c FB18     		adds	r3, r7, r3
 16217 006e 1A70     		strb	r2, [r3]
6637:bma2x2.c      **** 			BMA2x2_ORIENT_UD_ENABLE, orient_enable_u8);
6638:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 16218              		.loc 1 6638 0
 16219 0070 0E23     		movs	r3, #14
 16220 0072 FB18     		adds	r3, r7, r3
 16221 0074 0122     		movs	r2, #1
 16222 0076 1900     		movs	r1, r3
 16223 0078 2D20     		movs	r0, #45
 16224 007a FFF7FEFF 		bl	bma2x2_write_reg
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 405


 16225 007e 0300     		movs	r3, r0
 16226 0080 DAB2     		uxtb	r2, r3
 16227 0082 0F23     		movs	r3, #15
 16228 0084 FB18     		adds	r3, r7, r3
 16229 0086 1B78     		ldrb	r3, [r3]
 16230 0088 D318     		adds	r3, r2, r3
 16231 008a DAB2     		uxtb	r2, r3
 16232 008c 0F23     		movs	r3, #15
 16233 008e FB18     		adds	r3, r7, r3
 16234 0090 1A70     		strb	r2, [r3]
6639:bma2x2.c      **** 			BMA2x2_ORIENT_UD_ENABLE_REG,
6640:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
6641:bma2x2.c      **** 		}
6642:bma2x2.c      **** 	return com_rslt;
 16235              		.loc 1 6642 0
 16236 0092 0F23     		movs	r3, #15
 16237 0094 FB18     		adds	r3, r7, r3
 16238 0096 1B78     		ldrb	r3, [r3]
 16239 0098 5BB2     		sxtb	r3, r3
 16240              	.L971:
6643:bma2x2.c      **** }
 16241              		.loc 1 6643 0 discriminator 1
 16242 009a 1800     		movs	r0, r3
 16243 009c BD46     		mov	sp, r7
 16244 009e 04B0     		add	sp, sp, #16
 16245              		@ sp needed
 16246 00a0 B0BD     		pop	{r4, r5, r7, pc}
 16247              	.L973:
 16248 00a2 C046     		.align	2
 16249              	.L972:
 16250 00a4 00000000 		.word	p_bma2x2
 16251              		.cfi_endproc
 16252              	.LFE105:
 16253              		.size	bma2x2_set_orient_enable, .-bma2x2_set_orient_enable
 16254              		.section	.text.bma2x2_get_flat_hyst,"ax",%progbits
 16255              		.align	2
 16256              		.global	bma2x2_get_flat_hyst
 16257              		.code	16
 16258              		.thumb_func
 16259              		.type	bma2x2_get_flat_hyst, %function
 16260              	bma2x2_get_flat_hyst:
 16261              	.LFB106:
6644:bma2x2.c      **** /*!
6645:bma2x2.c      ****  *	@brief This API is used to get
6646:bma2x2.c      ****  *	the interrupt enable of flat hysteresis("flat_hy)
6647:bma2x2.c      ****  *	in the register 0x2F bit 0 to 2
6648:bma2x2.c      ****  *
6649:bma2x2.c      ****  *
6650:bma2x2.c      ****  *
6651:bma2x2.c      ****  *
6652:bma2x2.c      ****  *  @param flat_hyst_u8 : The value of flat hysteresis
6653:bma2x2.c      ****  *
6654:bma2x2.c      ****  *
6655:bma2x2.c      ****  *
6656:bma2x2.c      ****  *	@return results of bus communication function
6657:bma2x2.c      ****  *	@retval 0 -> Success
6658:bma2x2.c      ****  *	@retval -1 -> Error
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 406


6659:bma2x2.c      ****  *
6660:bma2x2.c      ****  *
6661:bma2x2.c      ****  */
6662:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_flat_hyst(u8 *flat_hyst_u8)
6663:bma2x2.c      **** {
 16262              		.loc 1 6663 0
 16263              		.cfi_startproc
 16264              		@ args = 0, pretend = 0, frame = 16
 16265              		@ frame_needed = 1, uses_anonymous_args = 0
 16266 0000 B0B5     		push	{r4, r5, r7, lr}
 16267              		.cfi_def_cfa_offset 16
 16268              		.cfi_offset 4, -16
 16269              		.cfi_offset 5, -12
 16270              		.cfi_offset 7, -8
 16271              		.cfi_offset 14, -4
 16272 0002 84B0     		sub	sp, sp, #16
 16273              		.cfi_def_cfa_offset 32
 16274 0004 00AF     		add	r7, sp, #0
 16275              		.cfi_def_cfa_register 7
 16276 0006 7860     		str	r0, [r7, #4]
6664:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 16277              		.loc 1 6664 0
 16278 0008 0E23     		movs	r3, #14
 16279 000a FB18     		adds	r3, r7, r3
 16280 000c 0022     		movs	r2, #0
 16281 000e 1A70     		strb	r2, [r3]
6665:bma2x2.c      **** 	/*  Variable used to return value of
6666:bma2x2.c      **** 	communication routine*/
6667:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 16282              		.loc 1 6667 0
 16283 0010 0F23     		movs	r3, #15
 16284 0012 FB18     		adds	r3, r7, r3
 16285 0014 FF22     		movs	r2, #255
 16286 0016 1A70     		strb	r2, [r3]
6668:bma2x2.c      **** 
6669:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 16287              		.loc 1 6669 0
 16288 0018 124B     		ldr	r3, .L978
 16289 001a 1B68     		ldr	r3, [r3]
 16290 001c 002B     		cmp	r3, #0
 16291 001e 02D1     		bne	.L975
6670:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
6671:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 16292              		.loc 1 6671 0
 16293 0020 7F23     		movs	r3, #127
 16294 0022 5B42     		rsbs	r3, r3, #0
 16295 0024 1AE0     		b	.L977
 16296              	.L975:
6672:bma2x2.c      **** 		} else {
6673:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 16297              		.loc 1 6673 0
 16298 0026 0F4B     		ldr	r3, .L978
 16299 0028 1B68     		ldr	r3, [r3]
 16300 002a DD68     		ldr	r5, [r3, #12]
 16301 002c 0D4B     		ldr	r3, .L978
 16302 002e 1B68     		ldr	r3, [r3]
 16303 0030 1879     		ldrb	r0, [r3, #4]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 407


 16304 0032 0F23     		movs	r3, #15
 16305 0034 FC18     		adds	r4, r7, r3
 16306 0036 0E23     		movs	r3, #14
 16307 0038 FA18     		adds	r2, r7, r3
 16308 003a 0123     		movs	r3, #1
 16309 003c 2F21     		movs	r1, #47
 16310 003e A847     		blx	r5
 16311 0040 0300     		movs	r3, r0
 16312 0042 2370     		strb	r3, [r4]
6674:bma2x2.c      **** 			(p_bma2x2->dev_addr,
6675:bma2x2.c      **** 			BMA2x2_FLAT_HYST_REG, &data_u8,
6676:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
6677:bma2x2.c      **** 			*flat_hyst_u8 = BMA2x2_GET_BITSLICE
 16313              		.loc 1 6677 0
 16314 0044 0E23     		movs	r3, #14
 16315 0046 FB18     		adds	r3, r7, r3
 16316 0048 1B78     		ldrb	r3, [r3]
 16317 004a 0722     		movs	r2, #7
 16318 004c 1340     		ands	r3, r2
 16319 004e DAB2     		uxtb	r2, r3
 16320 0050 7B68     		ldr	r3, [r7, #4]
 16321 0052 1A70     		strb	r2, [r3]
6678:bma2x2.c      **** 			(data_u8, BMA2x2_FLAT_HYST);
6679:bma2x2.c      **** 		}
6680:bma2x2.c      **** 	return com_rslt;
 16322              		.loc 1 6680 0
 16323 0054 0F23     		movs	r3, #15
 16324 0056 FB18     		adds	r3, r7, r3
 16325 0058 1B78     		ldrb	r3, [r3]
 16326 005a 5BB2     		sxtb	r3, r3
 16327              	.L977:
6681:bma2x2.c      **** }
 16328              		.loc 1 6681 0 discriminator 1
 16329 005c 1800     		movs	r0, r3
 16330 005e BD46     		mov	sp, r7
 16331 0060 04B0     		add	sp, sp, #16
 16332              		@ sp needed
 16333 0062 B0BD     		pop	{r4, r5, r7, pc}
 16334              	.L979:
 16335              		.align	2
 16336              	.L978:
 16337 0064 00000000 		.word	p_bma2x2
 16338              		.cfi_endproc
 16339              	.LFE106:
 16340              		.size	bma2x2_get_flat_hyst, .-bma2x2_get_flat_hyst
 16341              		.section	.text.bma2x2_set_flat_hyst,"ax",%progbits
 16342              		.align	2
 16343              		.global	bma2x2_set_flat_hyst
 16344              		.code	16
 16345              		.thumb_func
 16346              		.type	bma2x2_set_flat_hyst, %function
 16347              	bma2x2_set_flat_hyst:
 16348              	.LFB107:
6682:bma2x2.c      **** /*!
6683:bma2x2.c      ****  *	@brief This API is used to set
6684:bma2x2.c      ****  *	the interrupt enable of flat hysteresis("flat_hy)
6685:bma2x2.c      ****  *	in the register 0x2F bit 0 to 2
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 408


6686:bma2x2.c      ****  *
6687:bma2x2.c      ****  *
6688:bma2x2.c      ****  *
6689:bma2x2.c      ****  *
6690:bma2x2.c      ****  *  @param flat_hyst_u8 : The value of flat hysteresis
6691:bma2x2.c      ****  *
6692:bma2x2.c      ****  *
6693:bma2x2.c      ****  *
6694:bma2x2.c      ****  *	@return results of bus communication function
6695:bma2x2.c      ****  *	@retval 0 -> Success
6696:bma2x2.c      ****  *	@retval -1 -> Error
6697:bma2x2.c      ****  *
6698:bma2x2.c      ****  *
6699:bma2x2.c      ****  */
6700:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_flat_hyst(u8 flat_hyst_u8)
6701:bma2x2.c      **** {
 16349              		.loc 1 6701 0
 16350              		.cfi_startproc
 16351              		@ args = 0, pretend = 0, frame = 16
 16352              		@ frame_needed = 1, uses_anonymous_args = 0
 16353 0000 B0B5     		push	{r4, r5, r7, lr}
 16354              		.cfi_def_cfa_offset 16
 16355              		.cfi_offset 4, -16
 16356              		.cfi_offset 5, -12
 16357              		.cfi_offset 7, -8
 16358              		.cfi_offset 14, -4
 16359 0002 84B0     		sub	sp, sp, #16
 16360              		.cfi_def_cfa_offset 32
 16361 0004 00AF     		add	r7, sp, #0
 16362              		.cfi_def_cfa_register 7
 16363 0006 0200     		movs	r2, r0
 16364 0008 FB1D     		adds	r3, r7, #7
 16365 000a 1A70     		strb	r2, [r3]
6702:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 16366              		.loc 1 6702 0
 16367 000c 0E23     		movs	r3, #14
 16368 000e FB18     		adds	r3, r7, r3
 16369 0010 0022     		movs	r2, #0
 16370 0012 1A70     		strb	r2, [r3]
6703:bma2x2.c      **** 	/*  Variable used to return value of
6704:bma2x2.c      **** 	communication routine*/
6705:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 16371              		.loc 1 6705 0
 16372 0014 0F23     		movs	r3, #15
 16373 0016 FB18     		adds	r3, r7, r3
 16374 0018 FF22     		movs	r2, #255
 16375 001a 1A70     		strb	r2, [r3]
6706:bma2x2.c      **** 
6707:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 16376              		.loc 1 6707 0
 16377 001c 204B     		ldr	r3, .L984
 16378 001e 1B68     		ldr	r3, [r3]
 16379 0020 002B     		cmp	r3, #0
 16380 0022 02D1     		bne	.L981
6708:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
6709:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 16381              		.loc 1 6709 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 409


 16382 0024 7F23     		movs	r3, #127
 16383 0026 5B42     		rsbs	r3, r3, #0
 16384 0028 36E0     		b	.L983
 16385              	.L981:
6710:bma2x2.c      **** 		} else {
6711:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC(
 16386              		.loc 1 6711 0
 16387 002a 1D4B     		ldr	r3, .L984
 16388 002c 1B68     		ldr	r3, [r3]
 16389 002e DD68     		ldr	r5, [r3, #12]
 16390 0030 1B4B     		ldr	r3, .L984
 16391 0032 1B68     		ldr	r3, [r3]
 16392 0034 1879     		ldrb	r0, [r3, #4]
 16393 0036 0F23     		movs	r3, #15
 16394 0038 FC18     		adds	r4, r7, r3
 16395 003a 0E23     		movs	r3, #14
 16396 003c FA18     		adds	r2, r7, r3
 16397 003e 0123     		movs	r3, #1
 16398 0040 2F21     		movs	r1, #47
 16399 0042 A847     		blx	r5
 16400 0044 0300     		movs	r3, r0
 16401 0046 2370     		strb	r3, [r4]
6712:bma2x2.c      **** 			p_bma2x2->dev_addr,
6713:bma2x2.c      **** 			BMA2x2_FLAT_HYST_REG,
6714:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
6715:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 16402              		.loc 1 6715 0
 16403 0048 0E23     		movs	r3, #14
 16404 004a FB18     		adds	r3, r7, r3
 16405 004c 1B78     		ldrb	r3, [r3]
 16406 004e 5BB2     		sxtb	r3, r3
 16407 0050 0722     		movs	r2, #7
 16408 0052 9343     		bics	r3, r2
 16409 0054 5AB2     		sxtb	r2, r3
 16410 0056 FB1D     		adds	r3, r7, #7
 16411 0058 1B78     		ldrb	r3, [r3]
 16412 005a 5BB2     		sxtb	r3, r3
 16413 005c 0721     		movs	r1, #7
 16414 005e 0B40     		ands	r3, r1
 16415 0060 5BB2     		sxtb	r3, r3
 16416 0062 1343     		orrs	r3, r2
 16417 0064 5BB2     		sxtb	r3, r3
 16418 0066 DAB2     		uxtb	r2, r3
 16419 0068 0E23     		movs	r3, #14
 16420 006a FB18     		adds	r3, r7, r3
 16421 006c 1A70     		strb	r2, [r3]
6716:bma2x2.c      **** 			(data_u8, BMA2x2_FLAT_HYST, flat_hyst_u8);
6717:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 16422              		.loc 1 6717 0
 16423 006e 0E23     		movs	r3, #14
 16424 0070 FB18     		adds	r3, r7, r3
 16425 0072 0122     		movs	r2, #1
 16426 0074 1900     		movs	r1, r3
 16427 0076 2F20     		movs	r0, #47
 16428 0078 FFF7FEFF 		bl	bma2x2_write_reg
 16429 007c 0300     		movs	r3, r0
 16430 007e DAB2     		uxtb	r2, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 410


 16431 0080 0F23     		movs	r3, #15
 16432 0082 FB18     		adds	r3, r7, r3
 16433 0084 1B78     		ldrb	r3, [r3]
 16434 0086 D318     		adds	r3, r2, r3
 16435 0088 DAB2     		uxtb	r2, r3
 16436 008a 0F23     		movs	r3, #15
 16437 008c FB18     		adds	r3, r7, r3
 16438 008e 1A70     		strb	r2, [r3]
6718:bma2x2.c      **** 			BMA2x2_FLAT_HYST_REG, &data_u8,
6719:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
6720:bma2x2.c      **** 		}
6721:bma2x2.c      **** 	return com_rslt;
 16439              		.loc 1 6721 0
 16440 0090 0F23     		movs	r3, #15
 16441 0092 FB18     		adds	r3, r7, r3
 16442 0094 1B78     		ldrb	r3, [r3]
 16443 0096 5BB2     		sxtb	r3, r3
 16444              	.L983:
6722:bma2x2.c      **** }
 16445              		.loc 1 6722 0 discriminator 1
 16446 0098 1800     		movs	r0, r3
 16447 009a BD46     		mov	sp, r7
 16448 009c 04B0     		add	sp, sp, #16
 16449              		@ sp needed
 16450 009e B0BD     		pop	{r4, r5, r7, pc}
 16451              	.L985:
 16452              		.align	2
 16453              	.L984:
 16454 00a0 00000000 		.word	p_bma2x2
 16455              		.cfi_endproc
 16456              	.LFE107:
 16457              		.size	bma2x2_set_flat_hyst, .-bma2x2_set_flat_hyst
 16458              		.section	.text.bma2x2_get_flat_hold_time,"ax",%progbits
 16459              		.align	2
 16460              		.global	bma2x2_get_flat_hold_time
 16461              		.code	16
 16462              		.thumb_func
 16463              		.type	bma2x2_get_flat_hold_time, %function
 16464              	bma2x2_get_flat_hold_time:
 16465              	.LFB108:
6723:bma2x2.c      **** /*!
6724:bma2x2.c      ****  *	@brief This API is used to get
6725:bma2x2.c      ****  *  the interrupt enable of flat hold time(flat_hold_time)
6726:bma2x2.c      ****  *	in the register 0x2F bit 4 and 5
6727:bma2x2.c      ****  *
6728:bma2x2.c      ****  *
6729:bma2x2.c      ****  *  @param  flat_hold_time_u8 : The value of flat hold time
6730:bma2x2.c      ****  *     flat_hold_time_u8    |    result
6731:bma2x2.c      ****  *  ------------------------- |------------------
6732:bma2x2.c      ****  *     0x00                   | 0ms
6733:bma2x2.c      ****  *     0x01                   | 512ms
6734:bma2x2.c      ****  *     0x02                   | 1024ms
6735:bma2x2.c      ****  *     0x03                   | 2048ms
6736:bma2x2.c      ****  *
6737:bma2x2.c      ****  *
6738:bma2x2.c      ****  *
6739:bma2x2.c      ****  *	@return results of bus communication function
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 411


6740:bma2x2.c      ****  *	@retval 0 -> Success
6741:bma2x2.c      ****  *	@retval -1 -> Error
6742:bma2x2.c      ****  *
6743:bma2x2.c      ****  *
6744:bma2x2.c      ****  */
6745:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_flat_hold_time(
6746:bma2x2.c      **** u8 *flat_hold_time_u8)
6747:bma2x2.c      **** {
 16466              		.loc 1 6747 0
 16467              		.cfi_startproc
 16468              		@ args = 0, pretend = 0, frame = 16
 16469              		@ frame_needed = 1, uses_anonymous_args = 0
 16470 0000 B0B5     		push	{r4, r5, r7, lr}
 16471              		.cfi_def_cfa_offset 16
 16472              		.cfi_offset 4, -16
 16473              		.cfi_offset 5, -12
 16474              		.cfi_offset 7, -8
 16475              		.cfi_offset 14, -4
 16476 0002 84B0     		sub	sp, sp, #16
 16477              		.cfi_def_cfa_offset 32
 16478 0004 00AF     		add	r7, sp, #0
 16479              		.cfi_def_cfa_register 7
 16480 0006 7860     		str	r0, [r7, #4]
6748:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 16481              		.loc 1 6748 0
 16482 0008 0E23     		movs	r3, #14
 16483 000a FB18     		adds	r3, r7, r3
 16484 000c 0022     		movs	r2, #0
 16485 000e 1A70     		strb	r2, [r3]
6749:bma2x2.c      **** 	/*  Variable used to return value of
6750:bma2x2.c      **** 	communication routine*/
6751:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 16486              		.loc 1 6751 0
 16487 0010 0F23     		movs	r3, #15
 16488 0012 FB18     		adds	r3, r7, r3
 16489 0014 FF22     		movs	r2, #255
 16490 0016 1A70     		strb	r2, [r3]
6752:bma2x2.c      **** 
6753:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 16491              		.loc 1 6753 0
 16492 0018 134B     		ldr	r3, .L990
 16493 001a 1B68     		ldr	r3, [r3]
 16494 001c 002B     		cmp	r3, #0
 16495 001e 02D1     		bne	.L987
6754:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
6755:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 16496              		.loc 1 6755 0
 16497 0020 7F23     		movs	r3, #127
 16498 0022 5B42     		rsbs	r3, r3, #0
 16499 0024 1CE0     		b	.L989
 16500              	.L987:
6756:bma2x2.c      **** 		} else {
6757:bma2x2.c      **** 			/* read the flat hold time */
6758:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 16501              		.loc 1 6758 0
 16502 0026 104B     		ldr	r3, .L990
 16503 0028 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 412


 16504 002a DD68     		ldr	r5, [r3, #12]
 16505 002c 0E4B     		ldr	r3, .L990
 16506 002e 1B68     		ldr	r3, [r3]
 16507 0030 1879     		ldrb	r0, [r3, #4]
 16508 0032 0F23     		movs	r3, #15
 16509 0034 FC18     		adds	r4, r7, r3
 16510 0036 0E23     		movs	r3, #14
 16511 0038 FA18     		adds	r2, r7, r3
 16512 003a 0123     		movs	r3, #1
 16513 003c 2F21     		movs	r1, #47
 16514 003e A847     		blx	r5
 16515 0040 0300     		movs	r3, r0
 16516 0042 2370     		strb	r3, [r4]
6759:bma2x2.c      **** 			(p_bma2x2->dev_addr,
6760:bma2x2.c      **** 			BMA2x2_FLAT_HOLD_TIME_REG,
6761:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
6762:bma2x2.c      **** 			*flat_hold_time_u8 = BMA2x2_GET_BITSLICE
 16517              		.loc 1 6762 0
 16518 0044 0E23     		movs	r3, #14
 16519 0046 FB18     		adds	r3, r7, r3
 16520 0048 1B78     		ldrb	r3, [r3]
 16521 004a 1B11     		asrs	r3, r3, #4
 16522 004c DBB2     		uxtb	r3, r3
 16523 004e 0322     		movs	r2, #3
 16524 0050 1340     		ands	r3, r2
 16525 0052 DAB2     		uxtb	r2, r3
 16526 0054 7B68     		ldr	r3, [r7, #4]
 16527 0056 1A70     		strb	r2, [r3]
6763:bma2x2.c      **** 			(data_u8, BMA2x2_FLAT_HOLD_TIME);
6764:bma2x2.c      **** 		}
6765:bma2x2.c      **** 	return com_rslt;
 16528              		.loc 1 6765 0
 16529 0058 0F23     		movs	r3, #15
 16530 005a FB18     		adds	r3, r7, r3
 16531 005c 1B78     		ldrb	r3, [r3]
 16532 005e 5BB2     		sxtb	r3, r3
 16533              	.L989:
6766:bma2x2.c      **** }
 16534              		.loc 1 6766 0 discriminator 1
 16535 0060 1800     		movs	r0, r3
 16536 0062 BD46     		mov	sp, r7
 16537 0064 04B0     		add	sp, sp, #16
 16538              		@ sp needed
 16539 0066 B0BD     		pop	{r4, r5, r7, pc}
 16540              	.L991:
 16541              		.align	2
 16542              	.L990:
 16543 0068 00000000 		.word	p_bma2x2
 16544              		.cfi_endproc
 16545              	.LFE108:
 16546              		.size	bma2x2_get_flat_hold_time, .-bma2x2_get_flat_hold_time
 16547              		.section	.text.bma2x2_set_flat_hold_time,"ax",%progbits
 16548              		.align	2
 16549              		.global	bma2x2_set_flat_hold_time
 16550              		.code	16
 16551              		.thumb_func
 16552              		.type	bma2x2_set_flat_hold_time, %function
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 413


 16553              	bma2x2_set_flat_hold_time:
 16554              	.LFB109:
6767:bma2x2.c      **** /*!
6768:bma2x2.c      ****  *	@brief This API is used to set
6769:bma2x2.c      ****  *  the interrupt enable of flat hold time(flat_hold_time)
6770:bma2x2.c      ****  *	in the register 0x2F bit 4 and 5
6771:bma2x2.c      ****  *
6772:bma2x2.c      ****  *
6773:bma2x2.c      ****  *  @param  flat_hold_time_u8 : The value of flat hold time
6774:bma2x2.c      ****  *     flat_hold_time_u8    |    result
6775:bma2x2.c      ****  *  ------------------------- |------------------
6776:bma2x2.c      ****  *     0x00                   | 0ms
6777:bma2x2.c      ****  *     0x01                   | 512ms
6778:bma2x2.c      ****  *     0x02                   | 1024ms
6779:bma2x2.c      ****  *     0x03                   | 2048ms
6780:bma2x2.c      ****  *
6781:bma2x2.c      ****  *
6782:bma2x2.c      ****  *
6783:bma2x2.c      ****  *	@return results of bus communication function
6784:bma2x2.c      ****  *	@retval 0 -> Success
6785:bma2x2.c      ****  *	@retval -1 -> Error
6786:bma2x2.c      ****  *
6787:bma2x2.c      ****  *
6788:bma2x2.c      ****  */
6789:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_flat_hold_time(
6790:bma2x2.c      **** u8 flat_hold_time_u8)
6791:bma2x2.c      **** {
 16555              		.loc 1 6791 0
 16556              		.cfi_startproc
 16557              		@ args = 0, pretend = 0, frame = 16
 16558              		@ frame_needed = 1, uses_anonymous_args = 0
 16559 0000 B0B5     		push	{r4, r5, r7, lr}
 16560              		.cfi_def_cfa_offset 16
 16561              		.cfi_offset 4, -16
 16562              		.cfi_offset 5, -12
 16563              		.cfi_offset 7, -8
 16564              		.cfi_offset 14, -4
 16565 0002 84B0     		sub	sp, sp, #16
 16566              		.cfi_def_cfa_offset 32
 16567 0004 00AF     		add	r7, sp, #0
 16568              		.cfi_def_cfa_register 7
 16569 0006 0200     		movs	r2, r0
 16570 0008 FB1D     		adds	r3, r7, #7
 16571 000a 1A70     		strb	r2, [r3]
6792:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 16572              		.loc 1 6792 0
 16573 000c 0E23     		movs	r3, #14
 16574 000e FB18     		adds	r3, r7, r3
 16575 0010 0022     		movs	r2, #0
 16576 0012 1A70     		strb	r2, [r3]
6793:bma2x2.c      **** 	/*  Variable used to return value of
6794:bma2x2.c      **** 	communication routine*/
6795:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 16577              		.loc 1 6795 0
 16578 0014 0F23     		movs	r3, #15
 16579 0016 FB18     		adds	r3, r7, r3
 16580 0018 FF22     		movs	r2, #255
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 414


 16581 001a 1A70     		strb	r2, [r3]
6796:bma2x2.c      **** 
6797:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 16582              		.loc 1 6797 0
 16583 001c 214B     		ldr	r3, .L996
 16584 001e 1B68     		ldr	r3, [r3]
 16585 0020 002B     		cmp	r3, #0
 16586 0022 02D1     		bne	.L993
6798:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
6799:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 16587              		.loc 1 6799 0
 16588 0024 7F23     		movs	r3, #127
 16589 0026 5B42     		rsbs	r3, r3, #0
 16590 0028 37E0     		b	.L995
 16591              	.L993:
6800:bma2x2.c      **** 		} else {
6801:bma2x2.c      **** 			/* write the flat hold time */
6802:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 16592              		.loc 1 6802 0
 16593 002a 1E4B     		ldr	r3, .L996
 16594 002c 1B68     		ldr	r3, [r3]
 16595 002e DD68     		ldr	r5, [r3, #12]
 16596 0030 1C4B     		ldr	r3, .L996
 16597 0032 1B68     		ldr	r3, [r3]
 16598 0034 1879     		ldrb	r0, [r3, #4]
 16599 0036 0F23     		movs	r3, #15
 16600 0038 FC18     		adds	r4, r7, r3
 16601 003a 0E23     		movs	r3, #14
 16602 003c FA18     		adds	r2, r7, r3
 16603 003e 0123     		movs	r3, #1
 16604 0040 2F21     		movs	r1, #47
 16605 0042 A847     		blx	r5
 16606 0044 0300     		movs	r3, r0
 16607 0046 2370     		strb	r3, [r4]
6803:bma2x2.c      **** 			(p_bma2x2->dev_addr,
6804:bma2x2.c      **** 			BMA2x2_FLAT_HOLD_TIME_REG, &data_u8,
6805:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
6806:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 16608              		.loc 1 6806 0
 16609 0048 0E23     		movs	r3, #14
 16610 004a FB18     		adds	r3, r7, r3
 16611 004c 1B78     		ldrb	r3, [r3]
 16612 004e 5BB2     		sxtb	r3, r3
 16613 0050 3022     		movs	r2, #48
 16614 0052 9343     		bics	r3, r2
 16615 0054 5AB2     		sxtb	r2, r3
 16616 0056 FB1D     		adds	r3, r7, #7
 16617 0058 1B78     		ldrb	r3, [r3]
 16618 005a 1B01     		lsls	r3, r3, #4
 16619 005c 5BB2     		sxtb	r3, r3
 16620 005e 3021     		movs	r1, #48
 16621 0060 0B40     		ands	r3, r1
 16622 0062 5BB2     		sxtb	r3, r3
 16623 0064 1343     		orrs	r3, r2
 16624 0066 5BB2     		sxtb	r3, r3
 16625 0068 DAB2     		uxtb	r2, r3
 16626 006a 0E23     		movs	r3, #14
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 415


 16627 006c FB18     		adds	r3, r7, r3
 16628 006e 1A70     		strb	r2, [r3]
6807:bma2x2.c      **** 			(data_u8, BMA2x2_FLAT_HOLD_TIME, flat_hold_time_u8);
6808:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 16629              		.loc 1 6808 0
 16630 0070 0E23     		movs	r3, #14
 16631 0072 FB18     		adds	r3, r7, r3
 16632 0074 0122     		movs	r2, #1
 16633 0076 1900     		movs	r1, r3
 16634 0078 2F20     		movs	r0, #47
 16635 007a FFF7FEFF 		bl	bma2x2_write_reg
 16636 007e 0300     		movs	r3, r0
 16637 0080 DAB2     		uxtb	r2, r3
 16638 0082 0F23     		movs	r3, #15
 16639 0084 FB18     		adds	r3, r7, r3
 16640 0086 1B78     		ldrb	r3, [r3]
 16641 0088 D318     		adds	r3, r2, r3
 16642 008a DAB2     		uxtb	r2, r3
 16643 008c 0F23     		movs	r3, #15
 16644 008e FB18     		adds	r3, r7, r3
 16645 0090 1A70     		strb	r2, [r3]
6809:bma2x2.c      **** 			BMA2x2_FLAT_HOLD_TIME_REG, &data_u8,
6810:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
6811:bma2x2.c      **** 		}
6812:bma2x2.c      **** 	return com_rslt;
 16646              		.loc 1 6812 0
 16647 0092 0F23     		movs	r3, #15
 16648 0094 FB18     		adds	r3, r7, r3
 16649 0096 1B78     		ldrb	r3, [r3]
 16650 0098 5BB2     		sxtb	r3, r3
 16651              	.L995:
6813:bma2x2.c      **** }
 16652              		.loc 1 6813 0 discriminator 1
 16653 009a 1800     		movs	r0, r3
 16654 009c BD46     		mov	sp, r7
 16655 009e 04B0     		add	sp, sp, #16
 16656              		@ sp needed
 16657 00a0 B0BD     		pop	{r4, r5, r7, pc}
 16658              	.L997:
 16659 00a2 C046     		.align	2
 16660              	.L996:
 16661 00a4 00000000 		.word	p_bma2x2
 16662              		.cfi_endproc
 16663              	.LFE109:
 16664              		.size	bma2x2_set_flat_hold_time, .-bma2x2_set_flat_hold_time
 16665              		.section	.text.bma2x2_get_fifo_wml_trig,"ax",%progbits
 16666              		.align	2
 16667              		.global	bma2x2_get_fifo_wml_trig
 16668              		.code	16
 16669              		.thumb_func
 16670              		.type	bma2x2_get_fifo_wml_trig, %function
 16671              	bma2x2_get_fifo_wml_trig:
 16672              	.LFB110:
6814:bma2x2.c      **** /*!
6815:bma2x2.c      ****  *	@brief This API is used to get
6816:bma2x2.c      ****  *	the fifo water mark level trigger in the register 0x30 bit from 0 to 5
6817:bma2x2.c      ****  *
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 416


6818:bma2x2.c      ****  *
6819:bma2x2.c      ****  *
6820:bma2x2.c      ****  *
6821:bma2x2.c      ****  *  @param fifo_wml_trig: The value of fifo watermark trigger level
6822:bma2x2.c      ****  *
6823:bma2x2.c      ****  *
6824:bma2x2.c      ****  *
6825:bma2x2.c      ****  *	@return results of bus communication function
6826:bma2x2.c      ****  *	@retval 0 -> Success
6827:bma2x2.c      ****  *	@retval -1 -> Error
6828:bma2x2.c      ****  *
6829:bma2x2.c      ****  *
6830:bma2x2.c      ****  */
6831:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_fifo_wml_trig(
6832:bma2x2.c      **** u8 *fifo_wml_trig)
6833:bma2x2.c      **** {
 16673              		.loc 1 6833 0
 16674              		.cfi_startproc
 16675              		@ args = 0, pretend = 0, frame = 16
 16676              		@ frame_needed = 1, uses_anonymous_args = 0
 16677 0000 B0B5     		push	{r4, r5, r7, lr}
 16678              		.cfi_def_cfa_offset 16
 16679              		.cfi_offset 4, -16
 16680              		.cfi_offset 5, -12
 16681              		.cfi_offset 7, -8
 16682              		.cfi_offset 14, -4
 16683 0002 84B0     		sub	sp, sp, #16
 16684              		.cfi_def_cfa_offset 32
 16685 0004 00AF     		add	r7, sp, #0
 16686              		.cfi_def_cfa_register 7
 16687 0006 7860     		str	r0, [r7, #4]
6834:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 16688              		.loc 1 6834 0
 16689 0008 0E23     		movs	r3, #14
 16690 000a FB18     		adds	r3, r7, r3
 16691 000c 0022     		movs	r2, #0
 16692 000e 1A70     		strb	r2, [r3]
6835:bma2x2.c      **** 	/*  Variable used to return value of
6836:bma2x2.c      **** 	communication routine*/
6837:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 16693              		.loc 1 6837 0
 16694 0010 0F23     		movs	r3, #15
 16695 0012 FB18     		adds	r3, r7, r3
 16696 0014 FF22     		movs	r2, #255
 16697 0016 1A70     		strb	r2, [r3]
6838:bma2x2.c      **** 
6839:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 16698              		.loc 1 6839 0
 16699 0018 124B     		ldr	r3, .L1002
 16700 001a 1B68     		ldr	r3, [r3]
 16701 001c 002B     		cmp	r3, #0
 16702 001e 02D1     		bne	.L999
6840:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
6841:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 16703              		.loc 1 6841 0
 16704 0020 7F23     		movs	r3, #127
 16705 0022 5B42     		rsbs	r3, r3, #0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 417


 16706 0024 1AE0     		b	.L1001
 16707              	.L999:
6842:bma2x2.c      **** 		} else {
6843:bma2x2.c      **** 			/* read the fifo water mark trigger */
6844:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 16708              		.loc 1 6844 0
 16709 0026 0F4B     		ldr	r3, .L1002
 16710 0028 1B68     		ldr	r3, [r3]
 16711 002a DD68     		ldr	r5, [r3, #12]
 16712 002c 0D4B     		ldr	r3, .L1002
 16713 002e 1B68     		ldr	r3, [r3]
 16714 0030 1879     		ldrb	r0, [r3, #4]
 16715 0032 0F23     		movs	r3, #15
 16716 0034 FC18     		adds	r4, r7, r3
 16717 0036 0E23     		movs	r3, #14
 16718 0038 FA18     		adds	r2, r7, r3
 16719 003a 0123     		movs	r3, #1
 16720 003c 3021     		movs	r1, #48
 16721 003e A847     		blx	r5
 16722 0040 0300     		movs	r3, r0
 16723 0042 2370     		strb	r3, [r4]
6845:bma2x2.c      **** 			(p_bma2x2->dev_addr,
6846:bma2x2.c      **** 			BMA2x2_FIFO_WML_TRIG_RETAIN_REG,
6847:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
6848:bma2x2.c      **** 			*fifo_wml_trig = BMA2x2_GET_BITSLICE
 16724              		.loc 1 6848 0
 16725 0044 0E23     		movs	r3, #14
 16726 0046 FB18     		adds	r3, r7, r3
 16727 0048 1B78     		ldrb	r3, [r3]
 16728 004a 3F22     		movs	r2, #63
 16729 004c 1340     		ands	r3, r2
 16730 004e DAB2     		uxtb	r2, r3
 16731 0050 7B68     		ldr	r3, [r7, #4]
 16732 0052 1A70     		strb	r2, [r3]
6849:bma2x2.c      **** 			(data_u8, BMA2x2_FIFO_WML_TRIG_RETAIN);
6850:bma2x2.c      **** 		}
6851:bma2x2.c      **** 	return com_rslt;
 16733              		.loc 1 6851 0
 16734 0054 0F23     		movs	r3, #15
 16735 0056 FB18     		adds	r3, r7, r3
 16736 0058 1B78     		ldrb	r3, [r3]
 16737 005a 5BB2     		sxtb	r3, r3
 16738              	.L1001:
6852:bma2x2.c      **** }
 16739              		.loc 1 6852 0 discriminator 1
 16740 005c 1800     		movs	r0, r3
 16741 005e BD46     		mov	sp, r7
 16742 0060 04B0     		add	sp, sp, #16
 16743              		@ sp needed
 16744 0062 B0BD     		pop	{r4, r5, r7, pc}
 16745              	.L1003:
 16746              		.align	2
 16747              	.L1002:
 16748 0064 00000000 		.word	p_bma2x2
 16749              		.cfi_endproc
 16750              	.LFE110:
 16751              		.size	bma2x2_get_fifo_wml_trig, .-bma2x2_get_fifo_wml_trig
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 418


 16752              		.section	.text.bma2x2_set_fifo_wml_trig,"ax",%progbits
 16753              		.align	2
 16754              		.global	bma2x2_set_fifo_wml_trig
 16755              		.code	16
 16756              		.thumb_func
 16757              		.type	bma2x2_set_fifo_wml_trig, %function
 16758              	bma2x2_set_fifo_wml_trig:
 16759              	.LFB111:
6853:bma2x2.c      **** /*!
6854:bma2x2.c      ****  *	@brief This API is used to set
6855:bma2x2.c      ****  *	the fifo water mark level trigger in the register 0x30 bit from 0 to 5
6856:bma2x2.c      ****  *
6857:bma2x2.c      ****  *
6858:bma2x2.c      ****  *
6859:bma2x2.c      ****  *
6860:bma2x2.c      ****  *  @param fifo_wml_trig: The value of fifo watermark trigger level
6861:bma2x2.c      ****  *
6862:bma2x2.c      ****  *
6863:bma2x2.c      ****  *
6864:bma2x2.c      ****  *	@return results of bus communication function
6865:bma2x2.c      ****  *	@retval 0 -> Success
6866:bma2x2.c      ****  *	@retval -1 -> Error
6867:bma2x2.c      ****  *
6868:bma2x2.c      ****  *
6869:bma2x2.c      ****  */
6870:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_fifo_wml_trig(
6871:bma2x2.c      **** u8 fifo_wml_trig)
6872:bma2x2.c      **** {
 16760              		.loc 1 6872 0
 16761              		.cfi_startproc
 16762              		@ args = 0, pretend = 0, frame = 16
 16763              		@ frame_needed = 1, uses_anonymous_args = 0
 16764 0000 B0B5     		push	{r4, r5, r7, lr}
 16765              		.cfi_def_cfa_offset 16
 16766              		.cfi_offset 4, -16
 16767              		.cfi_offset 5, -12
 16768              		.cfi_offset 7, -8
 16769              		.cfi_offset 14, -4
 16770 0002 84B0     		sub	sp, sp, #16
 16771              		.cfi_def_cfa_offset 32
 16772 0004 00AF     		add	r7, sp, #0
 16773              		.cfi_def_cfa_register 7
 16774 0006 0200     		movs	r2, r0
 16775 0008 FB1D     		adds	r3, r7, #7
 16776 000a 1A70     		strb	r2, [r3]
6873:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 16777              		.loc 1 6873 0
 16778 000c 0E23     		movs	r3, #14
 16779 000e FB18     		adds	r3, r7, r3
 16780 0010 0022     		movs	r2, #0
 16781 0012 1A70     		strb	r2, [r3]
6874:bma2x2.c      **** 	u8 power_mode = BMA2x2_INIT_VALUE;
 16782              		.loc 1 6874 0
 16783 0014 0D23     		movs	r3, #13
 16784 0016 FB18     		adds	r3, r7, r3
 16785 0018 0022     		movs	r2, #0
 16786 001a 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 419


6875:bma2x2.c      **** 	/*  Variable used to return value of
6876:bma2x2.c      **** 	communication routine*/
6877:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 16787              		.loc 1 6877 0
 16788 001c 0F23     		movs	r3, #15
 16789 001e FB18     		adds	r3, r7, r3
 16790 0020 FF22     		movs	r2, #255
 16791 0022 1A70     		strb	r2, [r3]
6878:bma2x2.c      **** 
6879:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 16792              		.loc 1 6879 0
 16793 0024 3B4B     		ldr	r3, .L1010
 16794 0026 1B68     		ldr	r3, [r3]
 16795 0028 002B     		cmp	r3, #0
 16796 002a 02D1     		bne	.L1005
6880:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
6881:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 16797              		.loc 1 6881 0
 16798 002c 7F23     		movs	r3, #127
 16799 002e 5B42     		rsbs	r3, r3, #0
 16800 0030 6BE0     		b	.L1009
 16801              	.L1005:
6882:bma2x2.c      **** 		} else {
6883:bma2x2.c      **** 		if (fifo_wml_trig < BMA2x2_FIFO_WML_RANGE) {
 16802              		.loc 1 6883 0
 16803 0032 FB1D     		adds	r3, r7, #7
 16804 0034 1B78     		ldrb	r3, [r3]
 16805 0036 1F2B     		cmp	r3, #31
 16806 0038 5FD8     		bhi	.L1007
6884:bma2x2.c      **** 			/* write the fifo watermark trigger*/
6885:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 16807              		.loc 1 6885 0
 16808 003a 364B     		ldr	r3, .L1010
 16809 003c 1B68     		ldr	r3, [r3]
 16810 003e DD68     		ldr	r5, [r3, #12]
 16811 0040 344B     		ldr	r3, .L1010
 16812 0042 1B68     		ldr	r3, [r3]
 16813 0044 1879     		ldrb	r0, [r3, #4]
 16814 0046 0F23     		movs	r3, #15
 16815 0048 FC18     		adds	r4, r7, r3
 16816 004a 0E23     		movs	r3, #14
 16817 004c FA18     		adds	r2, r7, r3
 16818 004e 0123     		movs	r3, #1
 16819 0050 3021     		movs	r1, #48
 16820 0052 A847     		blx	r5
 16821 0054 0300     		movs	r3, r0
 16822 0056 2370     		strb	r3, [r4]
6886:bma2x2.c      **** 			(p_bma2x2->dev_addr,
6887:bma2x2.c      **** 			BMA2x2_FIFO_WML_TRIG_RETAIN_REG,
6888:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
6889:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 16823              		.loc 1 6889 0
 16824 0058 0E23     		movs	r3, #14
 16825 005a FB18     		adds	r3, r7, r3
 16826 005c 1B78     		ldrb	r3, [r3]
 16827 005e 5BB2     		sxtb	r3, r3
 16828 0060 3F22     		movs	r2, #63
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 420


 16829 0062 9343     		bics	r3, r2
 16830 0064 5AB2     		sxtb	r2, r3
 16831 0066 FB1D     		adds	r3, r7, #7
 16832 0068 1B78     		ldrb	r3, [r3]
 16833 006a 5BB2     		sxtb	r3, r3
 16834 006c 3F21     		movs	r1, #63
 16835 006e 0B40     		ands	r3, r1
 16836 0070 5BB2     		sxtb	r3, r3
 16837 0072 1343     		orrs	r3, r2
 16838 0074 5BB2     		sxtb	r3, r3
 16839 0076 DAB2     		uxtb	r2, r3
 16840 0078 0E23     		movs	r3, #14
 16841 007a FB18     		adds	r3, r7, r3
 16842 007c 1A70     		strb	r2, [r3]
6890:bma2x2.c      **** 			(data_u8, BMA2x2_FIFO_WML_TRIG_RETAIN,
6891:bma2x2.c      **** 			fifo_wml_trig);
6892:bma2x2.c      **** 			com_rslt += bma2x2_get_power_mode(&power_mode);
 16843              		.loc 1 6892 0
 16844 007e 0D23     		movs	r3, #13
 16845 0080 FB18     		adds	r3, r7, r3
 16846 0082 1800     		movs	r0, r3
 16847 0084 FFF7FEFF 		bl	bma2x2_get_power_mode
 16848 0088 0300     		movs	r3, r0
 16849 008a DAB2     		uxtb	r2, r3
 16850 008c 0F23     		movs	r3, #15
 16851 008e FB18     		adds	r3, r7, r3
 16852 0090 1B78     		ldrb	r3, [r3]
 16853 0092 D318     		adds	r3, r2, r3
 16854 0094 DAB2     		uxtb	r2, r3
 16855 0096 0F23     		movs	r3, #15
 16856 0098 FB18     		adds	r3, r7, r3
 16857 009a 1A70     		strb	r2, [r3]
6893:bma2x2.c      **** 			com_rslt += bma2x2_set_power_mode(BMA2x2_MODE_STANDBY);
 16858              		.loc 1 6893 0
 16859 009c 0520     		movs	r0, #5
 16860 009e FFF7FEFF 		bl	bma2x2_set_power_mode
 16861 00a2 0300     		movs	r3, r0
 16862 00a4 DAB2     		uxtb	r2, r3
 16863 00a6 0F23     		movs	r3, #15
 16864 00a8 FB18     		adds	r3, r7, r3
 16865 00aa 1B78     		ldrb	r3, [r3]
 16866 00ac D318     		adds	r3, r2, r3
 16867 00ae DAB2     		uxtb	r2, r3
 16868 00b0 0F23     		movs	r3, #15
 16869 00b2 FB18     		adds	r3, r7, r3
 16870 00b4 1A70     		strb	r2, [r3]
6894:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 16871              		.loc 1 6894 0
 16872 00b6 0E23     		movs	r3, #14
 16873 00b8 FB18     		adds	r3, r7, r3
 16874 00ba 0122     		movs	r2, #1
 16875 00bc 1900     		movs	r1, r3
 16876 00be 3020     		movs	r0, #48
 16877 00c0 FFF7FEFF 		bl	bma2x2_write_reg
 16878 00c4 0300     		movs	r3, r0
 16879 00c6 DAB2     		uxtb	r2, r3
 16880 00c8 0F23     		movs	r3, #15
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 421


 16881 00ca FB18     		adds	r3, r7, r3
 16882 00cc 1B78     		ldrb	r3, [r3]
 16883 00ce D318     		adds	r3, r2, r3
 16884 00d0 DAB2     		uxtb	r2, r3
 16885 00d2 0F23     		movs	r3, #15
 16886 00d4 FB18     		adds	r3, r7, r3
 16887 00d6 1A70     		strb	r2, [r3]
6895:bma2x2.c      **** 			BMA2x2_FIFO_WML_TRIG_RETAIN_REG,
6896:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
6897:bma2x2.c      **** 			com_rslt += bma2x2_set_power_mode(power_mode);
 16888              		.loc 1 6897 0
 16889 00d8 0D23     		movs	r3, #13
 16890 00da FB18     		adds	r3, r7, r3
 16891 00dc 1B78     		ldrb	r3, [r3]
 16892 00de 1800     		movs	r0, r3
 16893 00e0 FFF7FEFF 		bl	bma2x2_set_power_mode
 16894 00e4 0300     		movs	r3, r0
 16895 00e6 DAB2     		uxtb	r2, r3
 16896 00e8 0F23     		movs	r3, #15
 16897 00ea FB18     		adds	r3, r7, r3
 16898 00ec 1B78     		ldrb	r3, [r3]
 16899 00ee D318     		adds	r3, r2, r3
 16900 00f0 DAB2     		uxtb	r2, r3
 16901 00f2 0F23     		movs	r3, #15
 16902 00f4 FB18     		adds	r3, r7, r3
 16903 00f6 1A70     		strb	r2, [r3]
 16904 00f8 03E0     		b	.L1008
 16905              	.L1007:
6898:bma2x2.c      **** 		} else {
6899:bma2x2.c      **** 		com_rslt = E_OUT_OF_RANGE;
 16906              		.loc 1 6899 0
 16907 00fa 0F23     		movs	r3, #15
 16908 00fc FB18     		adds	r3, r7, r3
 16909 00fe FE22     		movs	r2, #254
 16910 0100 1A70     		strb	r2, [r3]
 16911              	.L1008:
6900:bma2x2.c      **** 		}
6901:bma2x2.c      **** 	}
6902:bma2x2.c      **** 	return com_rslt;
 16912              		.loc 1 6902 0
 16913 0102 0F23     		movs	r3, #15
 16914 0104 FB18     		adds	r3, r7, r3
 16915 0106 1B78     		ldrb	r3, [r3]
 16916 0108 5BB2     		sxtb	r3, r3
 16917              	.L1009:
6903:bma2x2.c      **** }
 16918              		.loc 1 6903 0 discriminator 1
 16919 010a 1800     		movs	r0, r3
 16920 010c BD46     		mov	sp, r7
 16921 010e 04B0     		add	sp, sp, #16
 16922              		@ sp needed
 16923 0110 B0BD     		pop	{r4, r5, r7, pc}
 16924              	.L1011:
 16925 0112 C046     		.align	2
 16926              	.L1010:
 16927 0114 00000000 		.word	p_bma2x2
 16928              		.cfi_endproc
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 422


 16929              	.LFE111:
 16930              		.size	bma2x2_set_fifo_wml_trig, .-bma2x2_set_fifo_wml_trig
 16931              		.section	.text.bma2x2_get_selftest_axis,"ax",%progbits
 16932              		.align	2
 16933              		.global	bma2x2_get_selftest_axis
 16934              		.code	16
 16935              		.thumb_func
 16936              		.type	bma2x2_get_selftest_axis, %function
 16937              	bma2x2_get_selftest_axis:
 16938              	.LFB112:
6904:bma2x2.c      **** /*!
6905:bma2x2.c      ****  *	@brief This API is for to get
6906:bma2x2.c      ****  *	the self test axis(self_test_axis) in the register ox32 bit 0 to 2
6907:bma2x2.c      ****  *
6908:bma2x2.c      ****  *
6909:bma2x2.c      ****  *
6910:bma2x2.c      ****  *  @param selftest_axis_u8 : The value of selftest axis
6911:bma2x2.c      ****  *     selftest_axis_u8     |    result
6912:bma2x2.c      ****  *  ------------------------- |------------------
6913:bma2x2.c      ****  *     0x00                   | self test disable
6914:bma2x2.c      ****  *     0x01                   | x-axis
6915:bma2x2.c      ****  *     0x02                   | y-axis
6916:bma2x2.c      ****  *     0x03                   | z-axis
6917:bma2x2.c      ****  *
6918:bma2x2.c      ****  *
6919:bma2x2.c      ****  *	@return results of bus communication function
6920:bma2x2.c      ****  *	@retval 0 -> Success
6921:bma2x2.c      ****  *	@retval -1 -> Error
6922:bma2x2.c      ****  *
6923:bma2x2.c      ****  *
6924:bma2x2.c      ****  */
6925:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_selftest_axis(
6926:bma2x2.c      **** u8 *selftest_axis_u8)
6927:bma2x2.c      **** {
 16939              		.loc 1 6927 0
 16940              		.cfi_startproc
 16941              		@ args = 0, pretend = 0, frame = 16
 16942              		@ frame_needed = 1, uses_anonymous_args = 0
 16943 0000 B0B5     		push	{r4, r5, r7, lr}
 16944              		.cfi_def_cfa_offset 16
 16945              		.cfi_offset 4, -16
 16946              		.cfi_offset 5, -12
 16947              		.cfi_offset 7, -8
 16948              		.cfi_offset 14, -4
 16949 0002 84B0     		sub	sp, sp, #16
 16950              		.cfi_def_cfa_offset 32
 16951 0004 00AF     		add	r7, sp, #0
 16952              		.cfi_def_cfa_register 7
 16953 0006 7860     		str	r0, [r7, #4]
6928:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 16954              		.loc 1 6928 0
 16955 0008 0E23     		movs	r3, #14
 16956 000a FB18     		adds	r3, r7, r3
 16957 000c 0022     		movs	r2, #0
 16958 000e 1A70     		strb	r2, [r3]
6929:bma2x2.c      **** 	/*  Variable used to return value of
6930:bma2x2.c      **** 	communication routine*/
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 423


6931:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 16959              		.loc 1 6931 0
 16960 0010 0F23     		movs	r3, #15
 16961 0012 FB18     		adds	r3, r7, r3
 16962 0014 FF22     		movs	r2, #255
 16963 0016 1A70     		strb	r2, [r3]
6932:bma2x2.c      **** 
6933:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 16964              		.loc 1 6933 0
 16965 0018 124B     		ldr	r3, .L1016
 16966 001a 1B68     		ldr	r3, [r3]
 16967 001c 002B     		cmp	r3, #0
 16968 001e 02D1     		bne	.L1013
6934:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
6935:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 16969              		.loc 1 6935 0
 16970 0020 7F23     		movs	r3, #127
 16971 0022 5B42     		rsbs	r3, r3, #0
 16972 0024 1AE0     		b	.L1015
 16973              	.L1013:
6936:bma2x2.c      **** 		} else {
6937:bma2x2.c      **** 			/* read the self test axis*/
6938:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 16974              		.loc 1 6938 0
 16975 0026 0F4B     		ldr	r3, .L1016
 16976 0028 1B68     		ldr	r3, [r3]
 16977 002a DD68     		ldr	r5, [r3, #12]
 16978 002c 0D4B     		ldr	r3, .L1016
 16979 002e 1B68     		ldr	r3, [r3]
 16980 0030 1879     		ldrb	r0, [r3, #4]
 16981 0032 0F23     		movs	r3, #15
 16982 0034 FC18     		adds	r4, r7, r3
 16983 0036 0E23     		movs	r3, #14
 16984 0038 FA18     		adds	r2, r7, r3
 16985 003a 0123     		movs	r3, #1
 16986 003c 3221     		movs	r1, #50
 16987 003e A847     		blx	r5
 16988 0040 0300     		movs	r3, r0
 16989 0042 2370     		strb	r3, [r4]
6939:bma2x2.c      **** 			(p_bma2x2->dev_addr,
6940:bma2x2.c      **** 			BMA2x2_ENABLE_SELFTEST_REG,
6941:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
6942:bma2x2.c      **** 			*selftest_axis_u8 = BMA2x2_GET_BITSLICE
 16990              		.loc 1 6942 0
 16991 0044 0E23     		movs	r3, #14
 16992 0046 FB18     		adds	r3, r7, r3
 16993 0048 1B78     		ldrb	r3, [r3]
 16994 004a 0322     		movs	r2, #3
 16995 004c 1340     		ands	r3, r2
 16996 004e DAB2     		uxtb	r2, r3
 16997 0050 7B68     		ldr	r3, [r7, #4]
 16998 0052 1A70     		strb	r2, [r3]
6943:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_SELFTEST);
6944:bma2x2.c      **** 		}
6945:bma2x2.c      **** 	return com_rslt;
 16999              		.loc 1 6945 0
 17000 0054 0F23     		movs	r3, #15
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 424


 17001 0056 FB18     		adds	r3, r7, r3
 17002 0058 1B78     		ldrb	r3, [r3]
 17003 005a 5BB2     		sxtb	r3, r3
 17004              	.L1015:
6946:bma2x2.c      **** }
 17005              		.loc 1 6946 0 discriminator 1
 17006 005c 1800     		movs	r0, r3
 17007 005e BD46     		mov	sp, r7
 17008 0060 04B0     		add	sp, sp, #16
 17009              		@ sp needed
 17010 0062 B0BD     		pop	{r4, r5, r7, pc}
 17011              	.L1017:
 17012              		.align	2
 17013              	.L1016:
 17014 0064 00000000 		.word	p_bma2x2
 17015              		.cfi_endproc
 17016              	.LFE112:
 17017              		.size	bma2x2_get_selftest_axis, .-bma2x2_get_selftest_axis
 17018              		.section	.text.bma2x2_set_selftest_axis,"ax",%progbits
 17019              		.align	2
 17020              		.global	bma2x2_set_selftest_axis
 17021              		.code	16
 17022              		.thumb_func
 17023              		.type	bma2x2_set_selftest_axis, %function
 17024              	bma2x2_set_selftest_axis:
 17025              	.LFB113:
6947:bma2x2.c      **** /*!
6948:bma2x2.c      ****  *	@brief This API is for to set
6949:bma2x2.c      ****  *	the self test axis(self_test_axis) in the register ox32 bit 0 to 2
6950:bma2x2.c      ****  *
6951:bma2x2.c      ****  *
6952:bma2x2.c      ****  *
6953:bma2x2.c      ****  *  @param selftest_axis_u8 : The value of selftest axis
6954:bma2x2.c      ****  *     selftest_axis_u8     |    result
6955:bma2x2.c      ****  *  ------------------------- |------------------
6956:bma2x2.c      ****  *     0x00                   | self test disable
6957:bma2x2.c      ****  *     0x01                   | x-axis
6958:bma2x2.c      ****  *     0x02                   | y-axis
6959:bma2x2.c      ****  *     0x03                   | z-axis
6960:bma2x2.c      ****  *
6961:bma2x2.c      ****  *
6962:bma2x2.c      ****  *	@return results of bus communication function
6963:bma2x2.c      ****  *	@retval 0 -> Success
6964:bma2x2.c      ****  *	@retval -1 -> Error
6965:bma2x2.c      ****  *
6966:bma2x2.c      ****  *
6967:bma2x2.c      ****  */
6968:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_selftest_axis(
6969:bma2x2.c      **** u8 selftest_axis_u8)
6970:bma2x2.c      **** {
 17026              		.loc 1 6970 0
 17027              		.cfi_startproc
 17028              		@ args = 0, pretend = 0, frame = 16
 17029              		@ frame_needed = 1, uses_anonymous_args = 0
 17030 0000 B0B5     		push	{r4, r5, r7, lr}
 17031              		.cfi_def_cfa_offset 16
 17032              		.cfi_offset 4, -16
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 425


 17033              		.cfi_offset 5, -12
 17034              		.cfi_offset 7, -8
 17035              		.cfi_offset 14, -4
 17036 0002 84B0     		sub	sp, sp, #16
 17037              		.cfi_def_cfa_offset 32
 17038 0004 00AF     		add	r7, sp, #0
 17039              		.cfi_def_cfa_register 7
 17040 0006 0200     		movs	r2, r0
 17041 0008 FB1D     		adds	r3, r7, #7
 17042 000a 1A70     		strb	r2, [r3]
6971:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 17043              		.loc 1 6971 0
 17044 000c 0E23     		movs	r3, #14
 17045 000e FB18     		adds	r3, r7, r3
 17046 0010 0022     		movs	r2, #0
 17047 0012 1A70     		strb	r2, [r3]
6972:bma2x2.c      **** 	/*  Variable used to return value of
6973:bma2x2.c      **** 	communication routine*/
6974:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 17048              		.loc 1 6974 0
 17049 0014 0F23     		movs	r3, #15
 17050 0016 FB18     		adds	r3, r7, r3
 17051 0018 FF22     		movs	r2, #255
 17052 001a 1A70     		strb	r2, [r3]
6975:bma2x2.c      **** 
6976:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 17053              		.loc 1 6976 0
 17054 001c 254B     		ldr	r3, .L1024
 17055 001e 1B68     		ldr	r3, [r3]
 17056 0020 002B     		cmp	r3, #0
 17057 0022 02D1     		bne	.L1019
6977:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
6978:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 17058              		.loc 1 6978 0
 17059 0024 7F23     		movs	r3, #127
 17060 0026 5B42     		rsbs	r3, r3, #0
 17061 0028 3FE0     		b	.L1023
 17062              	.L1019:
6979:bma2x2.c      **** 		} else {
6980:bma2x2.c      **** 		if (selftest_axis_u8 < BMA2x2_SELF_TEST_AXIS_RANGE) {
 17063              		.loc 1 6980 0
 17064 002a FB1D     		adds	r3, r7, #7
 17065 002c 1B78     		ldrb	r3, [r3]
 17066 002e 032B     		cmp	r3, #3
 17067 0030 33D8     		bhi	.L1021
6981:bma2x2.c      **** 			/* write the self test axis*/
6982:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 17068              		.loc 1 6982 0
 17069 0032 204B     		ldr	r3, .L1024
 17070 0034 1B68     		ldr	r3, [r3]
 17071 0036 DD68     		ldr	r5, [r3, #12]
 17072 0038 1E4B     		ldr	r3, .L1024
 17073 003a 1B68     		ldr	r3, [r3]
 17074 003c 1879     		ldrb	r0, [r3, #4]
 17075 003e 0F23     		movs	r3, #15
 17076 0040 FC18     		adds	r4, r7, r3
 17077 0042 0E23     		movs	r3, #14
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 426


 17078 0044 FA18     		adds	r2, r7, r3
 17079 0046 0123     		movs	r3, #1
 17080 0048 3221     		movs	r1, #50
 17081 004a A847     		blx	r5
 17082 004c 0300     		movs	r3, r0
 17083 004e 2370     		strb	r3, [r4]
6983:bma2x2.c      **** 			(p_bma2x2->dev_addr,
6984:bma2x2.c      **** 			BMA2x2_ENABLE_SELFTEST_REG,
6985:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
6986:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 17084              		.loc 1 6986 0
 17085 0050 0E23     		movs	r3, #14
 17086 0052 FB18     		adds	r3, r7, r3
 17087 0054 1B78     		ldrb	r3, [r3]
 17088 0056 5BB2     		sxtb	r3, r3
 17089 0058 0322     		movs	r2, #3
 17090 005a 9343     		bics	r3, r2
 17091 005c 5AB2     		sxtb	r2, r3
 17092 005e FB1D     		adds	r3, r7, #7
 17093 0060 1B78     		ldrb	r3, [r3]
 17094 0062 5BB2     		sxtb	r3, r3
 17095 0064 0321     		movs	r1, #3
 17096 0066 0B40     		ands	r3, r1
 17097 0068 5BB2     		sxtb	r3, r3
 17098 006a 1343     		orrs	r3, r2
 17099 006c 5BB2     		sxtb	r3, r3
 17100 006e DAB2     		uxtb	r2, r3
 17101 0070 0E23     		movs	r3, #14
 17102 0072 FB18     		adds	r3, r7, r3
 17103 0074 1A70     		strb	r2, [r3]
6987:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_SELFTEST, selftest_axis_u8);
6988:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 17104              		.loc 1 6988 0
 17105 0076 0E23     		movs	r3, #14
 17106 0078 FB18     		adds	r3, r7, r3
 17107 007a 0122     		movs	r2, #1
 17108 007c 1900     		movs	r1, r3
 17109 007e 3220     		movs	r0, #50
 17110 0080 FFF7FEFF 		bl	bma2x2_write_reg
 17111 0084 0300     		movs	r3, r0
 17112 0086 DAB2     		uxtb	r2, r3
 17113 0088 0F23     		movs	r3, #15
 17114 008a FB18     		adds	r3, r7, r3
 17115 008c 1B78     		ldrb	r3, [r3]
 17116 008e D318     		adds	r3, r2, r3
 17117 0090 DAB2     		uxtb	r2, r3
 17118 0092 0F23     		movs	r3, #15
 17119 0094 FB18     		adds	r3, r7, r3
 17120 0096 1A70     		strb	r2, [r3]
 17121 0098 03E0     		b	.L1022
 17122              	.L1021:
6989:bma2x2.c      **** 			BMA2x2_ENABLE_SELFTEST_REG,
6990:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
6991:bma2x2.c      **** 		 } else {
6992:bma2x2.c      **** 		com_rslt = E_OUT_OF_RANGE;
 17123              		.loc 1 6992 0
 17124 009a 0F23     		movs	r3, #15
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 427


 17125 009c FB18     		adds	r3, r7, r3
 17126 009e FE22     		movs	r2, #254
 17127 00a0 1A70     		strb	r2, [r3]
 17128              	.L1022:
6993:bma2x2.c      **** 		}
6994:bma2x2.c      **** 	}
6995:bma2x2.c      **** 	return com_rslt;
 17129              		.loc 1 6995 0
 17130 00a2 0F23     		movs	r3, #15
 17131 00a4 FB18     		adds	r3, r7, r3
 17132 00a6 1B78     		ldrb	r3, [r3]
 17133 00a8 5BB2     		sxtb	r3, r3
 17134              	.L1023:
6996:bma2x2.c      **** }
 17135              		.loc 1 6996 0 discriminator 1
 17136 00aa 1800     		movs	r0, r3
 17137 00ac BD46     		mov	sp, r7
 17138 00ae 04B0     		add	sp, sp, #16
 17139              		@ sp needed
 17140 00b0 B0BD     		pop	{r4, r5, r7, pc}
 17141              	.L1025:
 17142 00b2 C046     		.align	2
 17143              	.L1024:
 17144 00b4 00000000 		.word	p_bma2x2
 17145              		.cfi_endproc
 17146              	.LFE113:
 17147              		.size	bma2x2_set_selftest_axis, .-bma2x2_set_selftest_axis
 17148              		.section	.text.bma2x2_get_selftest_sign,"ax",%progbits
 17149              		.align	2
 17150              		.global	bma2x2_get_selftest_sign
 17151              		.code	16
 17152              		.thumb_func
 17153              		.type	bma2x2_get_selftest_sign, %function
 17154              	bma2x2_get_selftest_sign:
 17155              	.LFB114:
6997:bma2x2.c      **** /*!
6998:bma2x2.c      ****  *	@brief This API is for to get
6999:bma2x2.c      ****  *	the Self Test sign(selftest_sign) in the register 0x32 bit 2
7000:bma2x2.c      ****  *
7001:bma2x2.c      ****  *
7002:bma2x2.c      ****  *
7003:bma2x2.c      ****  *  @param selftest_sign_u8 : The value of self test sign
7004:bma2x2.c      ****  *     selftest_sign_u8     |    result
7005:bma2x2.c      ****  *  ------------------------- |------------------
7006:bma2x2.c      ****  *     0x00                   | negative sign
7007:bma2x2.c      ****  *     0x01                   | positive sign
7008:bma2x2.c      ****  *
7009:bma2x2.c      ****  *
7010:bma2x2.c      ****  *	@return results of bus communication function
7011:bma2x2.c      ****  *	@retval 0 -> Success
7012:bma2x2.c      ****  *	@retval -1 -> Error
7013:bma2x2.c      ****  *
7014:bma2x2.c      ****  *
7015:bma2x2.c      ****  */
7016:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_selftest_sign(
7017:bma2x2.c      **** u8 *selftest_sign_u8)
7018:bma2x2.c      **** {
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 428


 17156              		.loc 1 7018 0
 17157              		.cfi_startproc
 17158              		@ args = 0, pretend = 0, frame = 16
 17159              		@ frame_needed = 1, uses_anonymous_args = 0
 17160 0000 B0B5     		push	{r4, r5, r7, lr}
 17161              		.cfi_def_cfa_offset 16
 17162              		.cfi_offset 4, -16
 17163              		.cfi_offset 5, -12
 17164              		.cfi_offset 7, -8
 17165              		.cfi_offset 14, -4
 17166 0002 84B0     		sub	sp, sp, #16
 17167              		.cfi_def_cfa_offset 32
 17168 0004 00AF     		add	r7, sp, #0
 17169              		.cfi_def_cfa_register 7
 17170 0006 7860     		str	r0, [r7, #4]
7019:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 17171              		.loc 1 7019 0
 17172 0008 0E23     		movs	r3, #14
 17173 000a FB18     		adds	r3, r7, r3
 17174 000c 0022     		movs	r2, #0
 17175 000e 1A70     		strb	r2, [r3]
7020:bma2x2.c      **** 	/*  Variable used to return value of
7021:bma2x2.c      **** 	communication routine*/
7022:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 17176              		.loc 1 7022 0
 17177 0010 0F23     		movs	r3, #15
 17178 0012 FB18     		adds	r3, r7, r3
 17179 0014 FF22     		movs	r2, #255
 17180 0016 1A70     		strb	r2, [r3]
7023:bma2x2.c      **** 
7024:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 17181              		.loc 1 7024 0
 17182 0018 134B     		ldr	r3, .L1030
 17183 001a 1B68     		ldr	r3, [r3]
 17184 001c 002B     		cmp	r3, #0
 17185 001e 02D1     		bne	.L1027
7025:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
7026:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 17186              		.loc 1 7026 0
 17187 0020 7F23     		movs	r3, #127
 17188 0022 5B42     		rsbs	r3, r3, #0
 17189 0024 1CE0     		b	.L1029
 17190              	.L1027:
7027:bma2x2.c      **** 		} else {
7028:bma2x2.c      **** 			/* read self test sign */
7029:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 17191              		.loc 1 7029 0
 17192 0026 104B     		ldr	r3, .L1030
 17193 0028 1B68     		ldr	r3, [r3]
 17194 002a DD68     		ldr	r5, [r3, #12]
 17195 002c 0E4B     		ldr	r3, .L1030
 17196 002e 1B68     		ldr	r3, [r3]
 17197 0030 1879     		ldrb	r0, [r3, #4]
 17198 0032 0F23     		movs	r3, #15
 17199 0034 FC18     		adds	r4, r7, r3
 17200 0036 0E23     		movs	r3, #14
 17201 0038 FA18     		adds	r2, r7, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 429


 17202 003a 0123     		movs	r3, #1
 17203 003c 3221     		movs	r1, #50
 17204 003e A847     		blx	r5
 17205 0040 0300     		movs	r3, r0
 17206 0042 2370     		strb	r3, [r4]
7030:bma2x2.c      **** 			(p_bma2x2->dev_addr,
7031:bma2x2.c      **** 			BMA2x2_NEG_SELFTEST_REG,
7032:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7033:bma2x2.c      **** 			*selftest_sign_u8 = BMA2x2_GET_BITSLICE
 17207              		.loc 1 7033 0
 17208 0044 0E23     		movs	r3, #14
 17209 0046 FB18     		adds	r3, r7, r3
 17210 0048 1B78     		ldrb	r3, [r3]
 17211 004a 9B10     		asrs	r3, r3, #2
 17212 004c DBB2     		uxtb	r3, r3
 17213 004e 0122     		movs	r2, #1
 17214 0050 1340     		ands	r3, r2
 17215 0052 DAB2     		uxtb	r2, r3
 17216 0054 7B68     		ldr	r3, [r7, #4]
 17217 0056 1A70     		strb	r2, [r3]
7034:bma2x2.c      **** 			(data_u8, BMA2x2_NEG_SELFTEST);
7035:bma2x2.c      **** 		}
7036:bma2x2.c      **** 	return com_rslt;
 17218              		.loc 1 7036 0
 17219 0058 0F23     		movs	r3, #15
 17220 005a FB18     		adds	r3, r7, r3
 17221 005c 1B78     		ldrb	r3, [r3]
 17222 005e 5BB2     		sxtb	r3, r3
 17223              	.L1029:
7037:bma2x2.c      **** }
 17224              		.loc 1 7037 0 discriminator 1
 17225 0060 1800     		movs	r0, r3
 17226 0062 BD46     		mov	sp, r7
 17227 0064 04B0     		add	sp, sp, #16
 17228              		@ sp needed
 17229 0066 B0BD     		pop	{r4, r5, r7, pc}
 17230              	.L1031:
 17231              		.align	2
 17232              	.L1030:
 17233 0068 00000000 		.word	p_bma2x2
 17234              		.cfi_endproc
 17235              	.LFE114:
 17236              		.size	bma2x2_get_selftest_sign, .-bma2x2_get_selftest_sign
 17237              		.section	.text.bma2x2_set_selftest_sign,"ax",%progbits
 17238              		.align	2
 17239              		.global	bma2x2_set_selftest_sign
 17240              		.code	16
 17241              		.thumb_func
 17242              		.type	bma2x2_set_selftest_sign, %function
 17243              	bma2x2_set_selftest_sign:
 17244              	.LFB115:
7038:bma2x2.c      **** /*!
7039:bma2x2.c      ****  *	@brief This API is for to set
7040:bma2x2.c      ****  *	the Self Test sign(selftest_sign) in the register 0x32 bit 2
7041:bma2x2.c      ****  *
7042:bma2x2.c      ****  *
7043:bma2x2.c      ****  *
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 430


7044:bma2x2.c      ****  *  @param selftest_sign_u8 : The value of self test sign
7045:bma2x2.c      ****  *     selftest_sign_u8     |    result
7046:bma2x2.c      ****  *  ------------------------- |------------------
7047:bma2x2.c      ****  *     0x00                   | negative sign
7048:bma2x2.c      ****  *     0x01                   | positive sign
7049:bma2x2.c      ****  *
7050:bma2x2.c      ****  *
7051:bma2x2.c      ****  *	@return results of bus communication function
7052:bma2x2.c      ****  *	@retval 0 -> Success
7053:bma2x2.c      ****  *	@retval -1 -> Error
7054:bma2x2.c      ****  *
7055:bma2x2.c      ****  *
7056:bma2x2.c      ****  */
7057:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_selftest_sign(
7058:bma2x2.c      **** u8 selftest_sign_u8)
7059:bma2x2.c      **** {
 17245              		.loc 1 7059 0
 17246              		.cfi_startproc
 17247              		@ args = 0, pretend = 0, frame = 16
 17248              		@ frame_needed = 1, uses_anonymous_args = 0
 17249 0000 B0B5     		push	{r4, r5, r7, lr}
 17250              		.cfi_def_cfa_offset 16
 17251              		.cfi_offset 4, -16
 17252              		.cfi_offset 5, -12
 17253              		.cfi_offset 7, -8
 17254              		.cfi_offset 14, -4
 17255 0002 84B0     		sub	sp, sp, #16
 17256              		.cfi_def_cfa_offset 32
 17257 0004 00AF     		add	r7, sp, #0
 17258              		.cfi_def_cfa_register 7
 17259 0006 0200     		movs	r2, r0
 17260 0008 FB1D     		adds	r3, r7, #7
 17261 000a 1A70     		strb	r2, [r3]
7060:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 17262              		.loc 1 7060 0
 17263 000c 0E23     		movs	r3, #14
 17264 000e FB18     		adds	r3, r7, r3
 17265 0010 0022     		movs	r2, #0
 17266 0012 1A70     		strb	r2, [r3]
7061:bma2x2.c      **** 	/*  Variable used to return value of
7062:bma2x2.c      **** 	communication routine*/
7063:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 17267              		.loc 1 7063 0
 17268 0014 0F23     		movs	r3, #15
 17269 0016 FB18     		adds	r3, r7, r3
 17270 0018 FF22     		movs	r2, #255
 17271 001a 1A70     		strb	r2, [r3]
7064:bma2x2.c      **** 
7065:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 17272              		.loc 1 7065 0
 17273 001c 254B     		ldr	r3, .L1038
 17274 001e 1B68     		ldr	r3, [r3]
 17275 0020 002B     		cmp	r3, #0
 17276 0022 02D1     		bne	.L1033
7066:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
7067:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 17277              		.loc 1 7067 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 431


 17278 0024 7F23     		movs	r3, #127
 17279 0026 5B42     		rsbs	r3, r3, #0
 17280 0028 40E0     		b	.L1037
 17281              	.L1033:
7068:bma2x2.c      **** 		} else {
7069:bma2x2.c      **** 		if (selftest_sign_u8 <
 17282              		.loc 1 7069 0
 17283 002a FB1D     		adds	r3, r7, #7
 17284 002c 1B78     		ldrb	r3, [r3]
 17285 002e 012B     		cmp	r3, #1
 17286 0030 34D8     		bhi	.L1035
7070:bma2x2.c      **** 		BMA2x2_SELF_TEST_SIGN_RANGE) {
7071:bma2x2.c      **** 			/* write self test sign */
7072:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 17287              		.loc 1 7072 0
 17288 0032 204B     		ldr	r3, .L1038
 17289 0034 1B68     		ldr	r3, [r3]
 17290 0036 DD68     		ldr	r5, [r3, #12]
 17291 0038 1E4B     		ldr	r3, .L1038
 17292 003a 1B68     		ldr	r3, [r3]
 17293 003c 1879     		ldrb	r0, [r3, #4]
 17294 003e 0F23     		movs	r3, #15
 17295 0040 FC18     		adds	r4, r7, r3
 17296 0042 0E23     		movs	r3, #14
 17297 0044 FA18     		adds	r2, r7, r3
 17298 0046 0123     		movs	r3, #1
 17299 0048 3221     		movs	r1, #50
 17300 004a A847     		blx	r5
 17301 004c 0300     		movs	r3, r0
 17302 004e 2370     		strb	r3, [r4]
7073:bma2x2.c      **** 			(p_bma2x2->dev_addr,
7074:bma2x2.c      **** 			BMA2x2_NEG_SELFTEST_REG,
7075:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7076:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 17303              		.loc 1 7076 0
 17304 0050 0E23     		movs	r3, #14
 17305 0052 FB18     		adds	r3, r7, r3
 17306 0054 1B78     		ldrb	r3, [r3]
 17307 0056 5BB2     		sxtb	r3, r3
 17308 0058 0422     		movs	r2, #4
 17309 005a 9343     		bics	r3, r2
 17310 005c 5AB2     		sxtb	r2, r3
 17311 005e FB1D     		adds	r3, r7, #7
 17312 0060 1B78     		ldrb	r3, [r3]
 17313 0062 9B00     		lsls	r3, r3, #2
 17314 0064 5BB2     		sxtb	r3, r3
 17315 0066 0421     		movs	r1, #4
 17316 0068 0B40     		ands	r3, r1
 17317 006a 5BB2     		sxtb	r3, r3
 17318 006c 1343     		orrs	r3, r2
 17319 006e 5BB2     		sxtb	r3, r3
 17320 0070 DAB2     		uxtb	r2, r3
 17321 0072 0E23     		movs	r3, #14
 17322 0074 FB18     		adds	r3, r7, r3
 17323 0076 1A70     		strb	r2, [r3]
7077:bma2x2.c      **** 			(data_u8, BMA2x2_NEG_SELFTEST, selftest_sign_u8);
7078:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 432


 17324              		.loc 1 7078 0
 17325 0078 0E23     		movs	r3, #14
 17326 007a FB18     		adds	r3, r7, r3
 17327 007c 0122     		movs	r2, #1
 17328 007e 1900     		movs	r1, r3
 17329 0080 3220     		movs	r0, #50
 17330 0082 FFF7FEFF 		bl	bma2x2_write_reg
 17331 0086 0300     		movs	r3, r0
 17332 0088 DAB2     		uxtb	r2, r3
 17333 008a 0F23     		movs	r3, #15
 17334 008c FB18     		adds	r3, r7, r3
 17335 008e 1B78     		ldrb	r3, [r3]
 17336 0090 D318     		adds	r3, r2, r3
 17337 0092 DAB2     		uxtb	r2, r3
 17338 0094 0F23     		movs	r3, #15
 17339 0096 FB18     		adds	r3, r7, r3
 17340 0098 1A70     		strb	r2, [r3]
 17341 009a 03E0     		b	.L1036
 17342              	.L1035:
7079:bma2x2.c      **** 			BMA2x2_NEG_SELFTEST_REG,
7080:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7081:bma2x2.c      **** 		} else {
7082:bma2x2.c      **** 		com_rslt = E_OUT_OF_RANGE;
 17343              		.loc 1 7082 0
 17344 009c 0F23     		movs	r3, #15
 17345 009e FB18     		adds	r3, r7, r3
 17346 00a0 FE22     		movs	r2, #254
 17347 00a2 1A70     		strb	r2, [r3]
 17348              	.L1036:
7083:bma2x2.c      **** 		}
7084:bma2x2.c      **** 	}
7085:bma2x2.c      **** 	return com_rslt;
 17349              		.loc 1 7085 0
 17350 00a4 0F23     		movs	r3, #15
 17351 00a6 FB18     		adds	r3, r7, r3
 17352 00a8 1B78     		ldrb	r3, [r3]
 17353 00aa 5BB2     		sxtb	r3, r3
 17354              	.L1037:
7086:bma2x2.c      **** }
 17355              		.loc 1 7086 0 discriminator 1
 17356 00ac 1800     		movs	r0, r3
 17357 00ae BD46     		mov	sp, r7
 17358 00b0 04B0     		add	sp, sp, #16
 17359              		@ sp needed
 17360 00b2 B0BD     		pop	{r4, r5, r7, pc}
 17361              	.L1039:
 17362              		.align	2
 17363              	.L1038:
 17364 00b4 00000000 		.word	p_bma2x2
 17365              		.cfi_endproc
 17366              	.LFE115:
 17367              		.size	bma2x2_set_selftest_sign, .-bma2x2_set_selftest_sign
 17368              		.section	.text.bma2x2_get_nvmprog_mode,"ax",%progbits
 17369              		.align	2
 17370              		.global	bma2x2_get_nvmprog_mode
 17371              		.code	16
 17372              		.thumb_func
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 433


 17373              		.type	bma2x2_get_nvmprog_mode, %function
 17374              	bma2x2_get_nvmprog_mode:
 17375              	.LFB116:
7087:bma2x2.c      **** /*!
7088:bma2x2.c      ****  * @brief This API is used to get
7089:bma2x2.c      ****  * the nvm program mode(nvm_prog_mode)in the register 0x33 bit 0
7090:bma2x2.c      ****  *
7091:bma2x2.c      ****  *
7092:bma2x2.c      ****  *  @param  nvmprog_mode_u8 : The value of nvm program mode
7093:bma2x2.c      ****  *     nvmprog_mode_u8      |    result
7094:bma2x2.c      ****  *  ------------------------- |------------------
7095:bma2x2.c      ****  *     0x00                   | Disable program mode
7096:bma2x2.c      ****  *     0x01                   | Enable program mode
7097:bma2x2.c      ****  *
7098:bma2x2.c      ****  *	@return results of bus communication function
7099:bma2x2.c      ****  *	@retval 0 -> Success
7100:bma2x2.c      ****  *	@retval -1 -> Error
7101:bma2x2.c      ****  *
7102:bma2x2.c      ****  *
7103:bma2x2.c      ****  */
7104:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_nvmprog_mode(
7105:bma2x2.c      **** u8 *nvmprog_mode_u8)
7106:bma2x2.c      **** {
 17376              		.loc 1 7106 0
 17377              		.cfi_startproc
 17378              		@ args = 0, pretend = 0, frame = 16
 17379              		@ frame_needed = 1, uses_anonymous_args = 0
 17380 0000 B0B5     		push	{r4, r5, r7, lr}
 17381              		.cfi_def_cfa_offset 16
 17382              		.cfi_offset 4, -16
 17383              		.cfi_offset 5, -12
 17384              		.cfi_offset 7, -8
 17385              		.cfi_offset 14, -4
 17386 0002 84B0     		sub	sp, sp, #16
 17387              		.cfi_def_cfa_offset 32
 17388 0004 00AF     		add	r7, sp, #0
 17389              		.cfi_def_cfa_register 7
 17390 0006 7860     		str	r0, [r7, #4]
7107:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 17391              		.loc 1 7107 0
 17392 0008 0E23     		movs	r3, #14
 17393 000a FB18     		adds	r3, r7, r3
 17394 000c 0022     		movs	r2, #0
 17395 000e 1A70     		strb	r2, [r3]
7108:bma2x2.c      **** 	/*  Variable used to return value of
7109:bma2x2.c      **** 	communication routine*/
7110:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 17396              		.loc 1 7110 0
 17397 0010 0F23     		movs	r3, #15
 17398 0012 FB18     		adds	r3, r7, r3
 17399 0014 FF22     		movs	r2, #255
 17400 0016 1A70     		strb	r2, [r3]
7111:bma2x2.c      **** 
7112:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 17401              		.loc 1 7112 0
 17402 0018 134B     		ldr	r3, .L1044
 17403 001a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 434


 17404 001c 002B     		cmp	r3, #0
 17405 001e 04D1     		bne	.L1041
7113:bma2x2.c      **** 		com_rslt = E_BMA2x2_NULL_PTR;
 17406              		.loc 1 7113 0
 17407 0020 0F23     		movs	r3, #15
 17408 0022 FB18     		adds	r3, r7, r3
 17409 0024 8122     		movs	r2, #129
 17410 0026 1A70     		strb	r2, [r3]
 17411 0028 16E0     		b	.L1042
 17412              	.L1041:
7114:bma2x2.c      **** 	} else {
7115:bma2x2.c      **** 		/* read the nvm program mode*/
7116:bma2x2.c      **** 		com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 17413              		.loc 1 7116 0
 17414 002a 0F4B     		ldr	r3, .L1044
 17415 002c 1B68     		ldr	r3, [r3]
 17416 002e DD68     		ldr	r5, [r3, #12]
 17417 0030 0D4B     		ldr	r3, .L1044
 17418 0032 1B68     		ldr	r3, [r3]
 17419 0034 1879     		ldrb	r0, [r3, #4]
 17420 0036 0F23     		movs	r3, #15
 17421 0038 FC18     		adds	r4, r7, r3
 17422 003a 0E23     		movs	r3, #14
 17423 003c FA18     		adds	r2, r7, r3
 17424 003e 0123     		movs	r3, #1
 17425 0040 3321     		movs	r1, #51
 17426 0042 A847     		blx	r5
 17427 0044 0300     		movs	r3, r0
 17428 0046 2370     		strb	r3, [r4]
7117:bma2x2.c      **** 		(p_bma2x2->dev_addr,
7118:bma2x2.c      **** 		BMA2x2_UNLOCK_EE_PROG_MODE_REG,
7119:bma2x2.c      **** 		&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7120:bma2x2.c      **** 		*nvmprog_mode_u8 = BMA2x2_GET_BITSLICE
 17429              		.loc 1 7120 0
 17430 0048 0E23     		movs	r3, #14
 17431 004a FB18     		adds	r3, r7, r3
 17432 004c 1B78     		ldrb	r3, [r3]
 17433 004e 0122     		movs	r2, #1
 17434 0050 1340     		ands	r3, r2
 17435 0052 DAB2     		uxtb	r2, r3
 17436 0054 7B68     		ldr	r3, [r7, #4]
 17437 0056 1A70     		strb	r2, [r3]
 17438              	.L1042:
7121:bma2x2.c      **** 		(data_u8, BMA2x2_UNLOCK_EE_PROG_MODE);
7122:bma2x2.c      **** 	}
7123:bma2x2.c      **** 	return com_rslt;
 17439              		.loc 1 7123 0
 17440 0058 0F23     		movs	r3, #15
 17441 005a FB18     		adds	r3, r7, r3
 17442 005c 1B78     		ldrb	r3, [r3]
 17443 005e 5BB2     		sxtb	r3, r3
7124:bma2x2.c      **** }
 17444              		.loc 1 7124 0
 17445 0060 1800     		movs	r0, r3
 17446 0062 BD46     		mov	sp, r7
 17447 0064 04B0     		add	sp, sp, #16
 17448              		@ sp needed
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 435


 17449 0066 B0BD     		pop	{r4, r5, r7, pc}
 17450              	.L1045:
 17451              		.align	2
 17452              	.L1044:
 17453 0068 00000000 		.word	p_bma2x2
 17454              		.cfi_endproc
 17455              	.LFE116:
 17456              		.size	bma2x2_get_nvmprog_mode, .-bma2x2_get_nvmprog_mode
 17457              		.section	.text.bma2x2_set_nvmprog_mode,"ax",%progbits
 17458              		.align	2
 17459              		.global	bma2x2_set_nvmprog_mode
 17460              		.code	16
 17461              		.thumb_func
 17462              		.type	bma2x2_set_nvmprog_mode, %function
 17463              	bma2x2_set_nvmprog_mode:
 17464              	.LFB117:
7125:bma2x2.c      **** /*!
7126:bma2x2.c      ****  * @brief This API is used to set
7127:bma2x2.c      ****  * the nvm program mode(nvm_prog_mode)in the register 0x33 bit 0
7128:bma2x2.c      ****  *
7129:bma2x2.c      ****  *
7130:bma2x2.c      ****  *  @param  nvmprog_mode_u8 : The value of nvm program mode
7131:bma2x2.c      ****  *     nvmprog_mode_u8      |    result
7132:bma2x2.c      ****  *  ------------------------- |------------------
7133:bma2x2.c      ****  *     0x00                   | Disable program mode
7134:bma2x2.c      ****  *     0x01                   | Enable program mode
7135:bma2x2.c      ****  *
7136:bma2x2.c      ****  *	@return results of bus communication function
7137:bma2x2.c      ****  *	@retval 0 -> Success
7138:bma2x2.c      ****  *	@retval -1 -> Error
7139:bma2x2.c      ****  *
7140:bma2x2.c      ****  *
7141:bma2x2.c      ****  */
7142:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_nvmprog_mode(u8 nvmprog_mode_u8)
7143:bma2x2.c      **** {
 17465              		.loc 1 7143 0
 17466              		.cfi_startproc
 17467              		@ args = 0, pretend = 0, frame = 16
 17468              		@ frame_needed = 1, uses_anonymous_args = 0
 17469 0000 B0B5     		push	{r4, r5, r7, lr}
 17470              		.cfi_def_cfa_offset 16
 17471              		.cfi_offset 4, -16
 17472              		.cfi_offset 5, -12
 17473              		.cfi_offset 7, -8
 17474              		.cfi_offset 14, -4
 17475 0002 84B0     		sub	sp, sp, #16
 17476              		.cfi_def_cfa_offset 32
 17477 0004 00AF     		add	r7, sp, #0
 17478              		.cfi_def_cfa_register 7
 17479 0006 0200     		movs	r2, r0
 17480 0008 FB1D     		adds	r3, r7, #7
 17481 000a 1A70     		strb	r2, [r3]
7144:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 17482              		.loc 1 7144 0
 17483 000c 0E23     		movs	r3, #14
 17484 000e FB18     		adds	r3, r7, r3
 17485 0010 0022     		movs	r2, #0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 436


 17486 0012 1A70     		strb	r2, [r3]
7145:bma2x2.c      **** 	/*  Variable used to return value of
7146:bma2x2.c      **** 	communication routine*/
7147:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 17487              		.loc 1 7147 0
 17488 0014 0F23     		movs	r3, #15
 17489 0016 FB18     		adds	r3, r7, r3
 17490 0018 FF22     		movs	r2, #255
 17491 001a 1A70     		strb	r2, [r3]
7148:bma2x2.c      **** 
7149:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 17492              		.loc 1 7149 0
 17493 001c 214B     		ldr	r3, .L1050
 17494 001e 1B68     		ldr	r3, [r3]
 17495 0020 002B     		cmp	r3, #0
 17496 0022 04D1     		bne	.L1047
7150:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
7151:bma2x2.c      **** 		com_rslt = E_BMA2x2_NULL_PTR;
 17497              		.loc 1 7151 0
 17498 0024 0F23     		movs	r3, #15
 17499 0026 FB18     		adds	r3, r7, r3
 17500 0028 8122     		movs	r2, #129
 17501 002a 1A70     		strb	r2, [r3]
 17502 002c 32E0     		b	.L1048
 17503              	.L1047:
7152:bma2x2.c      **** 	} else {
7153:bma2x2.c      **** 		/* write the nvm program mode*/
7154:bma2x2.c      **** 		com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 17504              		.loc 1 7154 0
 17505 002e 1D4B     		ldr	r3, .L1050
 17506 0030 1B68     		ldr	r3, [r3]
 17507 0032 DD68     		ldr	r5, [r3, #12]
 17508 0034 1B4B     		ldr	r3, .L1050
 17509 0036 1B68     		ldr	r3, [r3]
 17510 0038 1879     		ldrb	r0, [r3, #4]
 17511 003a 0F23     		movs	r3, #15
 17512 003c FC18     		adds	r4, r7, r3
 17513 003e 0E23     		movs	r3, #14
 17514 0040 FA18     		adds	r2, r7, r3
 17515 0042 0123     		movs	r3, #1
 17516 0044 3321     		movs	r1, #51
 17517 0046 A847     		blx	r5
 17518 0048 0300     		movs	r3, r0
 17519 004a 2370     		strb	r3, [r4]
7155:bma2x2.c      **** 		(p_bma2x2->dev_addr,
7156:bma2x2.c      **** 		BMA2x2_UNLOCK_EE_PROG_MODE_REG,
7157:bma2x2.c      **** 		&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7158:bma2x2.c      **** 		data_u8 = BMA2x2_SET_BITSLICE
 17520              		.loc 1 7158 0
 17521 004c 0E23     		movs	r3, #14
 17522 004e FB18     		adds	r3, r7, r3
 17523 0050 1B78     		ldrb	r3, [r3]
 17524 0052 5BB2     		sxtb	r3, r3
 17525 0054 0122     		movs	r2, #1
 17526 0056 9343     		bics	r3, r2
 17527 0058 5AB2     		sxtb	r2, r3
 17528 005a FB1D     		adds	r3, r7, #7
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 437


 17529 005c 1B78     		ldrb	r3, [r3]
 17530 005e 5BB2     		sxtb	r3, r3
 17531 0060 0121     		movs	r1, #1
 17532 0062 0B40     		ands	r3, r1
 17533 0064 5BB2     		sxtb	r3, r3
 17534 0066 1343     		orrs	r3, r2
 17535 0068 5BB2     		sxtb	r3, r3
 17536 006a DAB2     		uxtb	r2, r3
 17537 006c 0E23     		movs	r3, #14
 17538 006e FB18     		adds	r3, r7, r3
 17539 0070 1A70     		strb	r2, [r3]
7159:bma2x2.c      **** 		(data_u8, BMA2x2_UNLOCK_EE_PROG_MODE, nvmprog_mode_u8);
7160:bma2x2.c      **** 		com_rslt += bma2x2_write_reg
 17540              		.loc 1 7160 0
 17541 0072 0E23     		movs	r3, #14
 17542 0074 FB18     		adds	r3, r7, r3
 17543 0076 0122     		movs	r2, #1
 17544 0078 1900     		movs	r1, r3
 17545 007a 3320     		movs	r0, #51
 17546 007c FFF7FEFF 		bl	bma2x2_write_reg
 17547 0080 0300     		movs	r3, r0
 17548 0082 DAB2     		uxtb	r2, r3
 17549 0084 0F23     		movs	r3, #15
 17550 0086 FB18     		adds	r3, r7, r3
 17551 0088 1B78     		ldrb	r3, [r3]
 17552 008a D318     		adds	r3, r2, r3
 17553 008c DAB2     		uxtb	r2, r3
 17554 008e 0F23     		movs	r3, #15
 17555 0090 FB18     		adds	r3, r7, r3
 17556 0092 1A70     		strb	r2, [r3]
 17557              	.L1048:
7161:bma2x2.c      **** 		(BMA2x2_UNLOCK_EE_PROG_MODE_REG,
7162:bma2x2.c      **** 		&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7163:bma2x2.c      **** 	}
7164:bma2x2.c      **** 	return com_rslt;
 17558              		.loc 1 7164 0
 17559 0094 0F23     		movs	r3, #15
 17560 0096 FB18     		adds	r3, r7, r3
 17561 0098 1B78     		ldrb	r3, [r3]
 17562 009a 5BB2     		sxtb	r3, r3
7165:bma2x2.c      **** }
 17563              		.loc 1 7165 0
 17564 009c 1800     		movs	r0, r3
 17565 009e BD46     		mov	sp, r7
 17566 00a0 04B0     		add	sp, sp, #16
 17567              		@ sp needed
 17568 00a2 B0BD     		pop	{r4, r5, r7, pc}
 17569              	.L1051:
 17570              		.align	2
 17571              	.L1050:
 17572 00a4 00000000 		.word	p_bma2x2
 17573              		.cfi_endproc
 17574              	.LFE117:
 17575              		.size	bma2x2_set_nvmprog_mode, .-bma2x2_set_nvmprog_mode
 17576              		.section	.text.bma2x2_set_nvprog_trig,"ax",%progbits
 17577              		.align	2
 17578              		.global	bma2x2_set_nvprog_trig
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 438


 17579              		.code	16
 17580              		.thumb_func
 17581              		.type	bma2x2_set_nvprog_trig, %function
 17582              	bma2x2_set_nvprog_trig:
 17583              	.LFB118:
7166:bma2x2.c      **** /*!
7167:bma2x2.c      ****  *	@brief This API is used to set
7168:bma2x2.c      ****  *	the value of nvm program trig in the register 0x33 bit 1
7169:bma2x2.c      ****  *
7170:bma2x2.c      ****  *
7171:bma2x2.c      ****  *
7172:bma2x2.c      ****  *
7173:bma2x2.c      ****  *  @param nvprog_trig_u8: The value of nvm program trig
7174:bma2x2.c      ****  *     nvprog_trig_u8       |    result
7175:bma2x2.c      ****  *  ------------------------- |------------------
7176:bma2x2.c      ****  *     0x00                   | Do not trigger nvm program
7177:bma2x2.c      ****  *     0x01                   | Trigger nvm program
7178:bma2x2.c      ****  *
7179:bma2x2.c      ****  *
7180:bma2x2.c      ****  *	@return results of bus communication function
7181:bma2x2.c      ****  *	@retval 0 -> Success
7182:bma2x2.c      ****  *	@retval -1 -> Error
7183:bma2x2.c      ****  *
7184:bma2x2.c      ****  *
7185:bma2x2.c      ****  */
7186:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_nvprog_trig(u8 nvprog_trig_u8)
7187:bma2x2.c      **** {
 17584              		.loc 1 7187 0
 17585              		.cfi_startproc
 17586              		@ args = 0, pretend = 0, frame = 16
 17587              		@ frame_needed = 1, uses_anonymous_args = 0
 17588 0000 B0B5     		push	{r4, r5, r7, lr}
 17589              		.cfi_def_cfa_offset 16
 17590              		.cfi_offset 4, -16
 17591              		.cfi_offset 5, -12
 17592              		.cfi_offset 7, -8
 17593              		.cfi_offset 14, -4
 17594 0002 84B0     		sub	sp, sp, #16
 17595              		.cfi_def_cfa_offset 32
 17596 0004 00AF     		add	r7, sp, #0
 17597              		.cfi_def_cfa_register 7
 17598 0006 0200     		movs	r2, r0
 17599 0008 FB1D     		adds	r3, r7, #7
 17600 000a 1A70     		strb	r2, [r3]
7188:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 17601              		.loc 1 7188 0
 17602 000c 0E23     		movs	r3, #14
 17603 000e FB18     		adds	r3, r7, r3
 17604 0010 0022     		movs	r2, #0
 17605 0012 1A70     		strb	r2, [r3]
7189:bma2x2.c      **** 	/*  Variable used to return value of
7190:bma2x2.c      **** 	communication routine*/
7191:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 17606              		.loc 1 7191 0
 17607 0014 0F23     		movs	r3, #15
 17608 0016 FB18     		adds	r3, r7, r3
 17609 0018 FF22     		movs	r2, #255
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 439


 17610 001a 1A70     		strb	r2, [r3]
7192:bma2x2.c      **** 
7193:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 17611              		.loc 1 7193 0
 17612 001c 224B     		ldr	r3, .L1056
 17613 001e 1B68     		ldr	r3, [r3]
 17614 0020 002B     		cmp	r3, #0
 17615 0022 04D1     		bne	.L1053
7194:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
7195:bma2x2.c      **** 		com_rslt = E_BMA2x2_NULL_PTR;
 17616              		.loc 1 7195 0
 17617 0024 0F23     		movs	r3, #15
 17618 0026 FB18     		adds	r3, r7, r3
 17619 0028 8122     		movs	r2, #129
 17620 002a 1A70     		strb	r2, [r3]
 17621 002c 33E0     		b	.L1054
 17622              	.L1053:
7196:bma2x2.c      **** 	} else {
7197:bma2x2.c      **** 		/* set the nvm program trigger */
7198:bma2x2.c      **** 		com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 17623              		.loc 1 7198 0
 17624 002e 1E4B     		ldr	r3, .L1056
 17625 0030 1B68     		ldr	r3, [r3]
 17626 0032 DD68     		ldr	r5, [r3, #12]
 17627 0034 1C4B     		ldr	r3, .L1056
 17628 0036 1B68     		ldr	r3, [r3]
 17629 0038 1879     		ldrb	r0, [r3, #4]
 17630 003a 0F23     		movs	r3, #15
 17631 003c FC18     		adds	r4, r7, r3
 17632 003e 0E23     		movs	r3, #14
 17633 0040 FA18     		adds	r2, r7, r3
 17634 0042 0123     		movs	r3, #1
 17635 0044 3321     		movs	r1, #51
 17636 0046 A847     		blx	r5
 17637 0048 0300     		movs	r3, r0
 17638 004a 2370     		strb	r3, [r4]
7199:bma2x2.c      **** 		(p_bma2x2->dev_addr,
7200:bma2x2.c      **** 		BMA2x2_START_EE_PROG_TRIG_REG,
7201:bma2x2.c      **** 		&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7202:bma2x2.c      **** 		data_u8 = BMA2x2_SET_BITSLICE
 17639              		.loc 1 7202 0
 17640 004c 0E23     		movs	r3, #14
 17641 004e FB18     		adds	r3, r7, r3
 17642 0050 1B78     		ldrb	r3, [r3]
 17643 0052 5BB2     		sxtb	r3, r3
 17644 0054 0222     		movs	r2, #2
 17645 0056 9343     		bics	r3, r2
 17646 0058 5AB2     		sxtb	r2, r3
 17647 005a FB1D     		adds	r3, r7, #7
 17648 005c 1B78     		ldrb	r3, [r3]
 17649 005e 5B00     		lsls	r3, r3, #1
 17650 0060 5BB2     		sxtb	r3, r3
 17651 0062 0221     		movs	r1, #2
 17652 0064 0B40     		ands	r3, r1
 17653 0066 5BB2     		sxtb	r3, r3
 17654 0068 1343     		orrs	r3, r2
 17655 006a 5BB2     		sxtb	r3, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 440


 17656 006c DAB2     		uxtb	r2, r3
 17657 006e 0E23     		movs	r3, #14
 17658 0070 FB18     		adds	r3, r7, r3
 17659 0072 1A70     		strb	r2, [r3]
7203:bma2x2.c      **** 		(data_u8, BMA2x2_START_EE_PROG_TRIG, nvprog_trig_u8);
7204:bma2x2.c      **** 		com_rslt += bma2x2_write_reg
 17660              		.loc 1 7204 0
 17661 0074 0E23     		movs	r3, #14
 17662 0076 FB18     		adds	r3, r7, r3
 17663 0078 0122     		movs	r2, #1
 17664 007a 1900     		movs	r1, r3
 17665 007c 3320     		movs	r0, #51
 17666 007e FFF7FEFF 		bl	bma2x2_write_reg
 17667 0082 0300     		movs	r3, r0
 17668 0084 DAB2     		uxtb	r2, r3
 17669 0086 0F23     		movs	r3, #15
 17670 0088 FB18     		adds	r3, r7, r3
 17671 008a 1B78     		ldrb	r3, [r3]
 17672 008c D318     		adds	r3, r2, r3
 17673 008e DAB2     		uxtb	r2, r3
 17674 0090 0F23     		movs	r3, #15
 17675 0092 FB18     		adds	r3, r7, r3
 17676 0094 1A70     		strb	r2, [r3]
 17677              	.L1054:
7205:bma2x2.c      **** 		(BMA2x2_START_EE_PROG_TRIG_REG,
7206:bma2x2.c      **** 		&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7207:bma2x2.c      **** 	}
7208:bma2x2.c      **** 	return com_rslt;
 17678              		.loc 1 7208 0
 17679 0096 0F23     		movs	r3, #15
 17680 0098 FB18     		adds	r3, r7, r3
 17681 009a 1B78     		ldrb	r3, [r3]
 17682 009c 5BB2     		sxtb	r3, r3
7209:bma2x2.c      **** }
 17683              		.loc 1 7209 0
 17684 009e 1800     		movs	r0, r3
 17685 00a0 BD46     		mov	sp, r7
 17686 00a2 04B0     		add	sp, sp, #16
 17687              		@ sp needed
 17688 00a4 B0BD     		pop	{r4, r5, r7, pc}
 17689              	.L1057:
 17690 00a6 C046     		.align	2
 17691              	.L1056:
 17692 00a8 00000000 		.word	p_bma2x2
 17693              		.cfi_endproc
 17694              	.LFE118:
 17695              		.size	bma2x2_set_nvprog_trig, .-bma2x2_set_nvprog_trig
 17696              		.section	.text.bma2x2_get_nvmprog_ready,"ax",%progbits
 17697              		.align	2
 17698              		.global	bma2x2_get_nvmprog_ready
 17699              		.code	16
 17700              		.thumb_func
 17701              		.type	bma2x2_get_nvmprog_ready, %function
 17702              	bma2x2_get_nvmprog_ready:
 17703              	.LFB119:
7210:bma2x2.c      **** /*!
7211:bma2x2.c      ****  * @brief This API is used to get
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 441


7212:bma2x2.c      ****  * the nvm program ready in the register bit 2
7213:bma2x2.c      ****  *
7214:bma2x2.c      ****  *
7215:bma2x2.c      ****  *  @param nvprog_ready_u8: The value of nvm program ready
7216:bma2x2.c      ****  *     nvprog_ready_u8      |    result
7217:bma2x2.c      ****  *  ------------------------- |------------------
7218:bma2x2.c      ****  *     0x00                   | nvm write/update operation is in progress
7219:bma2x2.c      ****  *     0x01                   | nvm is ready to accept a new write
7220:bma2x2.c      ****  *
7221:bma2x2.c      ****  *
7222:bma2x2.c      ****  *
7223:bma2x2.c      ****  *	@return results of bus communication function
7224:bma2x2.c      ****  *	@retval 0 -> Success
7225:bma2x2.c      ****  *	@retval -1 -> Error
7226:bma2x2.c      ****  *
7227:bma2x2.c      ****  *
7228:bma2x2.c      ****  */
7229:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_nvmprog_ready(u8 *nvprog_ready_u8)
7230:bma2x2.c      **** {
 17704              		.loc 1 7230 0
 17705              		.cfi_startproc
 17706              		@ args = 0, pretend = 0, frame = 16
 17707              		@ frame_needed = 1, uses_anonymous_args = 0
 17708 0000 B0B5     		push	{r4, r5, r7, lr}
 17709              		.cfi_def_cfa_offset 16
 17710              		.cfi_offset 4, -16
 17711              		.cfi_offset 5, -12
 17712              		.cfi_offset 7, -8
 17713              		.cfi_offset 14, -4
 17714 0002 84B0     		sub	sp, sp, #16
 17715              		.cfi_def_cfa_offset 32
 17716 0004 00AF     		add	r7, sp, #0
 17717              		.cfi_def_cfa_register 7
 17718 0006 7860     		str	r0, [r7, #4]
7231:bma2x2.c      **** 	/*  Variable used to return value of
7232:bma2x2.c      **** 	communication routine*/
7233:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 17719              		.loc 1 7233 0
 17720 0008 0F23     		movs	r3, #15
 17721 000a FB18     		adds	r3, r7, r3
 17722 000c FF22     		movs	r2, #255
 17723 000e 1A70     		strb	r2, [r3]
7234:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 17724              		.loc 1 7234 0
 17725 0010 0E23     		movs	r3, #14
 17726 0012 FB18     		adds	r3, r7, r3
 17727 0014 0022     		movs	r2, #0
 17728 0016 1A70     		strb	r2, [r3]
7235:bma2x2.c      **** 
7236:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 17729              		.loc 1 7236 0
 17730 0018 144B     		ldr	r3, .L1062
 17731 001a 1B68     		ldr	r3, [r3]
 17732 001c 002B     		cmp	r3, #0
 17733 001e 04D1     		bne	.L1059
7237:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
7238:bma2x2.c      **** 		com_rslt = E_BMA2x2_NULL_PTR;
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 442


 17734              		.loc 1 7238 0
 17735 0020 0F23     		movs	r3, #15
 17736 0022 FB18     		adds	r3, r7, r3
 17737 0024 8122     		movs	r2, #129
 17738 0026 1A70     		strb	r2, [r3]
 17739 0028 18E0     		b	.L1060
 17740              	.L1059:
7239:bma2x2.c      **** 	} else {
7240:bma2x2.c      **** 		/* read the nvm program ready*/
7241:bma2x2.c      **** 		com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 17741              		.loc 1 7241 0
 17742 002a 104B     		ldr	r3, .L1062
 17743 002c 1B68     		ldr	r3, [r3]
 17744 002e DD68     		ldr	r5, [r3, #12]
 17745 0030 0E4B     		ldr	r3, .L1062
 17746 0032 1B68     		ldr	r3, [r3]
 17747 0034 1879     		ldrb	r0, [r3, #4]
 17748 0036 0F23     		movs	r3, #15
 17749 0038 FC18     		adds	r4, r7, r3
 17750 003a 0E23     		movs	r3, #14
 17751 003c FA18     		adds	r2, r7, r3
 17752 003e 0123     		movs	r3, #1
 17753 0040 3321     		movs	r1, #51
 17754 0042 A847     		blx	r5
 17755 0044 0300     		movs	r3, r0
 17756 0046 2370     		strb	r3, [r4]
7242:bma2x2.c      **** 		(p_bma2x2->dev_addr,
7243:bma2x2.c      **** 		BMA2x2_EE_PROG_READY_REG,
7244:bma2x2.c      **** 		&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7245:bma2x2.c      **** 		*nvprog_ready_u8 = BMA2x2_GET_BITSLICE
 17757              		.loc 1 7245 0
 17758 0048 0E23     		movs	r3, #14
 17759 004a FB18     		adds	r3, r7, r3
 17760 004c 1B78     		ldrb	r3, [r3]
 17761 004e 9B10     		asrs	r3, r3, #2
 17762 0050 DBB2     		uxtb	r3, r3
 17763 0052 0122     		movs	r2, #1
 17764 0054 1340     		ands	r3, r2
 17765 0056 DAB2     		uxtb	r2, r3
 17766 0058 7B68     		ldr	r3, [r7, #4]
 17767 005a 1A70     		strb	r2, [r3]
 17768              	.L1060:
7246:bma2x2.c      **** 		(data_u8, BMA2x2_EE_PROG_READY);
7247:bma2x2.c      **** 	}
7248:bma2x2.c      **** 	return com_rslt;
 17769              		.loc 1 7248 0
 17770 005c 0F23     		movs	r3, #15
 17771 005e FB18     		adds	r3, r7, r3
 17772 0060 1B78     		ldrb	r3, [r3]
 17773 0062 5BB2     		sxtb	r3, r3
7249:bma2x2.c      **** }
 17774              		.loc 1 7249 0
 17775 0064 1800     		movs	r0, r3
 17776 0066 BD46     		mov	sp, r7
 17777 0068 04B0     		add	sp, sp, #16
 17778              		@ sp needed
 17779 006a B0BD     		pop	{r4, r5, r7, pc}
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 443


 17780              	.L1063:
 17781              		.align	2
 17782              	.L1062:
 17783 006c 00000000 		.word	p_bma2x2
 17784              		.cfi_endproc
 17785              	.LFE119:
 17786              		.size	bma2x2_get_nvmprog_ready, .-bma2x2_get_nvmprog_ready
 17787              		.section	.text.bma2x2_get_nvmprog_remain,"ax",%progbits
 17788              		.align	2
 17789              		.global	bma2x2_get_nvmprog_remain
 17790              		.code	16
 17791              		.thumb_func
 17792              		.type	bma2x2_get_nvmprog_remain, %function
 17793              	bma2x2_get_nvmprog_remain:
 17794              	.LFB120:
7250:bma2x2.c      **** /*!
7251:bma2x2.c      ****  * @brief This API is used to set
7252:bma2x2.c      ****  * the nvm program ready in the register bit 2
7253:bma2x2.c      ****  *
7254:bma2x2.c      ****  *
7255:bma2x2.c      ****  *  @param nvprog_remain_u8: The value of nvm program ready
7256:bma2x2.c      ****  *     nvprog_remain_u8     |    result
7257:bma2x2.c      ****  *  ------------------------- |------------------
7258:bma2x2.c      ****  *     0x00                   | nvm write/update operation is in progress
7259:bma2x2.c      ****  *     0x01                   | nvm is ready to accept a new write
7260:bma2x2.c      ****  *
7261:bma2x2.c      ****  *
7262:bma2x2.c      ****  *
7263:bma2x2.c      ****  *	@return results of bus communication function
7264:bma2x2.c      ****  *	@retval 0 -> Success
7265:bma2x2.c      ****  *	@retval -1 -> Error
7266:bma2x2.c      ****  *
7267:bma2x2.c      ****  *
7268:bma2x2.c      ****  */
7269:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_nvmprog_remain(u8 *nvprog_remain_u8)
7270:bma2x2.c      **** {
 17795              		.loc 1 7270 0
 17796              		.cfi_startproc
 17797              		@ args = 0, pretend = 0, frame = 16
 17798              		@ frame_needed = 1, uses_anonymous_args = 0
 17799 0000 B0B5     		push	{r4, r5, r7, lr}
 17800              		.cfi_def_cfa_offset 16
 17801              		.cfi_offset 4, -16
 17802              		.cfi_offset 5, -12
 17803              		.cfi_offset 7, -8
 17804              		.cfi_offset 14, -4
 17805 0002 84B0     		sub	sp, sp, #16
 17806              		.cfi_def_cfa_offset 32
 17807 0004 00AF     		add	r7, sp, #0
 17808              		.cfi_def_cfa_register 7
 17809 0006 7860     		str	r0, [r7, #4]
7271:bma2x2.c      **** 	/*  Variable used to return value of
7272:bma2x2.c      **** 	communication routine*/
7273:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 17810              		.loc 1 7273 0
 17811 0008 0F23     		movs	r3, #15
 17812 000a FB18     		adds	r3, r7, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 444


 17813 000c FF22     		movs	r2, #255
 17814 000e 1A70     		strb	r2, [r3]
7274:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 17815              		.loc 1 7274 0
 17816 0010 0E23     		movs	r3, #14
 17817 0012 FB18     		adds	r3, r7, r3
 17818 0014 0022     		movs	r2, #0
 17819 0016 1A70     		strb	r2, [r3]
7275:bma2x2.c      **** 	/* Check the struct p_bma2x2 is empty */
7276:bma2x2.c      **** 	if (BMA2x2_NULL == p_bma2x2) {
 17820              		.loc 1 7276 0
 17821 0018 134B     		ldr	r3, .L1068
 17822 001a 1B68     		ldr	r3, [r3]
 17823 001c 002B     		cmp	r3, #0
 17824 001e 04D1     		bne	.L1065
7277:bma2x2.c      **** 		com_rslt = E_BMA2x2_NULL_PTR;
 17825              		.loc 1 7277 0
 17826 0020 0F23     		movs	r3, #15
 17827 0022 FB18     		adds	r3, r7, r3
 17828 0024 8122     		movs	r2, #129
 17829 0026 1A70     		strb	r2, [r3]
 17830 0028 15E0     		b	.L1066
 17831              	.L1065:
7278:bma2x2.c      **** 	} else {
7279:bma2x2.c      **** 		/* write the nvm program ready*/
7280:bma2x2.c      **** 		com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 17832              		.loc 1 7280 0
 17833 002a 0F4B     		ldr	r3, .L1068
 17834 002c 1B68     		ldr	r3, [r3]
 17835 002e DD68     		ldr	r5, [r3, #12]
 17836 0030 0D4B     		ldr	r3, .L1068
 17837 0032 1B68     		ldr	r3, [r3]
 17838 0034 1879     		ldrb	r0, [r3, #4]
 17839 0036 0F23     		movs	r3, #15
 17840 0038 FC18     		adds	r4, r7, r3
 17841 003a 0E23     		movs	r3, #14
 17842 003c FA18     		adds	r2, r7, r3
 17843 003e 0123     		movs	r3, #1
 17844 0040 3321     		movs	r1, #51
 17845 0042 A847     		blx	r5
 17846 0044 0300     		movs	r3, r0
 17847 0046 2370     		strb	r3, [r4]
7281:bma2x2.c      **** 		(p_bma2x2->dev_addr,
7282:bma2x2.c      **** 		BMA2x2_EE_REMAIN_REG, &data_u8,
7283:bma2x2.c      **** 		BMA2x2_GEN_READ_WRITE_LENGTH);
7284:bma2x2.c      **** 		*nvprog_remain_u8 = BMA2x2_GET_BITSLICE
 17848              		.loc 1 7284 0
 17849 0048 0E23     		movs	r3, #14
 17850 004a FB18     		adds	r3, r7, r3
 17851 004c 1B78     		ldrb	r3, [r3]
 17852 004e 1B09     		lsrs	r3, r3, #4
 17853 0050 DAB2     		uxtb	r2, r3
 17854 0052 7B68     		ldr	r3, [r7, #4]
 17855 0054 1A70     		strb	r2, [r3]
 17856              	.L1066:
7285:bma2x2.c      **** 		(data_u8, BMA2x2_EE_REMAIN);
7286:bma2x2.c      **** 	}
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 445


7287:bma2x2.c      **** 	return com_rslt;
 17857              		.loc 1 7287 0
 17858 0056 0F23     		movs	r3, #15
 17859 0058 FB18     		adds	r3, r7, r3
 17860 005a 1B78     		ldrb	r3, [r3]
 17861 005c 5BB2     		sxtb	r3, r3
7288:bma2x2.c      **** }
 17862              		.loc 1 7288 0
 17863 005e 1800     		movs	r0, r3
 17864 0060 BD46     		mov	sp, r7
 17865 0062 04B0     		add	sp, sp, #16
 17866              		@ sp needed
 17867 0064 B0BD     		pop	{r4, r5, r7, pc}
 17868              	.L1069:
 17869 0066 C046     		.align	2
 17870              	.L1068:
 17871 0068 00000000 		.word	p_bma2x2
 17872              		.cfi_endproc
 17873              	.LFE120:
 17874              		.size	bma2x2_get_nvmprog_remain, .-bma2x2_get_nvmprog_remain
 17875              		.section	.text.bma2x2_get_spi3,"ax",%progbits
 17876              		.align	2
 17877              		.global	bma2x2_get_spi3
 17878              		.code	16
 17879              		.thumb_func
 17880              		.type	bma2x2_get_spi3, %function
 17881              	bma2x2_get_spi3:
 17882              	.LFB121:
7289:bma2x2.c      **** /*!
7290:bma2x2.c      ****  *	@brief This API is used to get the enable status of spi3
7291:bma2x2.c      ****  *	in the register 0x34 bit 0
7292:bma2x2.c      ****  *
7293:bma2x2.c      ****  *
7294:bma2x2.c      ****  *
7295:bma2x2.c      ****  *  @param  spi3_u8 : The value of SPI 3 or 4 wire enable
7296:bma2x2.c      ****  *     spi3_u8              |    result
7297:bma2x2.c      ****  *  ------------------------- |------------------
7298:bma2x2.c      ****  *     0x00                   |     spi4
7299:bma2x2.c      ****  *     0x01                   |     spi3
7300:bma2x2.c      ****  *
7301:bma2x2.c      ****  *
7302:bma2x2.c      ****  *
7303:bma2x2.c      ****  *	@return results of bus communication function
7304:bma2x2.c      ****  *	@retval 0 -> Success
7305:bma2x2.c      ****  *	@retval -1 -> Error
7306:bma2x2.c      ****  *
7307:bma2x2.c      ****  *
7308:bma2x2.c      ****  */
7309:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_spi3(u8 *spi3_u8)
7310:bma2x2.c      **** {
 17883              		.loc 1 7310 0
 17884              		.cfi_startproc
 17885              		@ args = 0, pretend = 0, frame = 16
 17886              		@ frame_needed = 1, uses_anonymous_args = 0
 17887 0000 B0B5     		push	{r4, r5, r7, lr}
 17888              		.cfi_def_cfa_offset 16
 17889              		.cfi_offset 4, -16
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 446


 17890              		.cfi_offset 5, -12
 17891              		.cfi_offset 7, -8
 17892              		.cfi_offset 14, -4
 17893 0002 84B0     		sub	sp, sp, #16
 17894              		.cfi_def_cfa_offset 32
 17895 0004 00AF     		add	r7, sp, #0
 17896              		.cfi_def_cfa_register 7
 17897 0006 7860     		str	r0, [r7, #4]
7311:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 17898              		.loc 1 7311 0
 17899 0008 0E23     		movs	r3, #14
 17900 000a FB18     		adds	r3, r7, r3
 17901 000c 0022     		movs	r2, #0
 17902 000e 1A70     		strb	r2, [r3]
7312:bma2x2.c      **** 	/*  Variable used to return value of
7313:bma2x2.c      **** 	communication routine*/
7314:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 17903              		.loc 1 7314 0
 17904 0010 0F23     		movs	r3, #15
 17905 0012 FB18     		adds	r3, r7, r3
 17906 0014 FF22     		movs	r2, #255
 17907 0016 1A70     		strb	r2, [r3]
7315:bma2x2.c      **** 
7316:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 17908              		.loc 1 7316 0
 17909 0018 124B     		ldr	r3, .L1074
 17910 001a 1B68     		ldr	r3, [r3]
 17911 001c 002B     		cmp	r3, #0
 17912 001e 02D1     		bne	.L1071
7317:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
7318:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 17913              		.loc 1 7318 0
 17914 0020 7F23     		movs	r3, #127
 17915 0022 5B42     		rsbs	r3, r3, #0
 17916 0024 1AE0     		b	.L1073
 17917              	.L1071:
7319:bma2x2.c      **** 		} else {
7320:bma2x2.c      **** 			/* read the spi status*/
7321:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 17918              		.loc 1 7321 0
 17919 0026 0F4B     		ldr	r3, .L1074
 17920 0028 1B68     		ldr	r3, [r3]
 17921 002a DD68     		ldr	r5, [r3, #12]
 17922 002c 0D4B     		ldr	r3, .L1074
 17923 002e 1B68     		ldr	r3, [r3]
 17924 0030 1879     		ldrb	r0, [r3, #4]
 17925 0032 0F23     		movs	r3, #15
 17926 0034 FC18     		adds	r4, r7, r3
 17927 0036 0E23     		movs	r3, #14
 17928 0038 FA18     		adds	r2, r7, r3
 17929 003a 0123     		movs	r3, #1
 17930 003c 3421     		movs	r1, #52
 17931 003e A847     		blx	r5
 17932 0040 0300     		movs	r3, r0
 17933 0042 2370     		strb	r3, [r4]
7322:bma2x2.c      **** 			(p_bma2x2->dev_addr,
7323:bma2x2.c      **** 			BMA2x2_ENABLE_SPI_MODE_3_REG,
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 447


7324:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7325:bma2x2.c      **** 			*spi3_u8 = BMA2x2_GET_BITSLICE
 17934              		.loc 1 7325 0
 17935 0044 0E23     		movs	r3, #14
 17936 0046 FB18     		adds	r3, r7, r3
 17937 0048 1B78     		ldrb	r3, [r3]
 17938 004a 0122     		movs	r2, #1
 17939 004c 1340     		ands	r3, r2
 17940 004e DAB2     		uxtb	r2, r3
 17941 0050 7B68     		ldr	r3, [r7, #4]
 17942 0052 1A70     		strb	r2, [r3]
7326:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_SPI_MODE_3);
7327:bma2x2.c      **** 		}
7328:bma2x2.c      **** 	return com_rslt;
 17943              		.loc 1 7328 0
 17944 0054 0F23     		movs	r3, #15
 17945 0056 FB18     		adds	r3, r7, r3
 17946 0058 1B78     		ldrb	r3, [r3]
 17947 005a 5BB2     		sxtb	r3, r3
 17948              	.L1073:
7329:bma2x2.c      **** }
 17949              		.loc 1 7329 0 discriminator 1
 17950 005c 1800     		movs	r0, r3
 17951 005e BD46     		mov	sp, r7
 17952 0060 04B0     		add	sp, sp, #16
 17953              		@ sp needed
 17954 0062 B0BD     		pop	{r4, r5, r7, pc}
 17955              	.L1075:
 17956              		.align	2
 17957              	.L1074:
 17958 0064 00000000 		.word	p_bma2x2
 17959              		.cfi_endproc
 17960              	.LFE121:
 17961              		.size	bma2x2_get_spi3, .-bma2x2_get_spi3
 17962              		.section	.text.bma2x2_set_spi3,"ax",%progbits
 17963              		.align	2
 17964              		.global	bma2x2_set_spi3
 17965              		.code	16
 17966              		.thumb_func
 17967              		.type	bma2x2_set_spi3, %function
 17968              	bma2x2_set_spi3:
 17969              	.LFB122:
7330:bma2x2.c      **** /*!
7331:bma2x2.c      ****  *	@brief This API is used to set the enable status of spi3
7332:bma2x2.c      ****  *	in the register 0x34 bit 0
7333:bma2x2.c      ****  *
7334:bma2x2.c      ****  *
7335:bma2x2.c      ****  *
7336:bma2x2.c      ****  *  @param  spi3_u8 : The value of SPI 3 or 4 wire enable
7337:bma2x2.c      ****  *     spi3_u8              |    result
7338:bma2x2.c      ****  *  ------------------------- |------------------
7339:bma2x2.c      ****  *     0x00                   |     spi4
7340:bma2x2.c      ****  *     0x01                   |     spi3
7341:bma2x2.c      ****  *
7342:bma2x2.c      ****  *
7343:bma2x2.c      ****  *
7344:bma2x2.c      ****  *	@return results of bus communication function
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 448


7345:bma2x2.c      ****  *	@retval 0 -> Success
7346:bma2x2.c      ****  *	@retval -1 -> Error
7347:bma2x2.c      ****  *
7348:bma2x2.c      ****  *
7349:bma2x2.c      ****  */
7350:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_spi3(u8 spi3_u8)
7351:bma2x2.c      **** {
 17970              		.loc 1 7351 0
 17971              		.cfi_startproc
 17972              		@ args = 0, pretend = 0, frame = 16
 17973              		@ frame_needed = 1, uses_anonymous_args = 0
 17974 0000 B0B5     		push	{r4, r5, r7, lr}
 17975              		.cfi_def_cfa_offset 16
 17976              		.cfi_offset 4, -16
 17977              		.cfi_offset 5, -12
 17978              		.cfi_offset 7, -8
 17979              		.cfi_offset 14, -4
 17980 0002 84B0     		sub	sp, sp, #16
 17981              		.cfi_def_cfa_offset 32
 17982 0004 00AF     		add	r7, sp, #0
 17983              		.cfi_def_cfa_register 7
 17984 0006 0200     		movs	r2, r0
 17985 0008 FB1D     		adds	r3, r7, #7
 17986 000a 1A70     		strb	r2, [r3]
7352:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 17987              		.loc 1 7352 0
 17988 000c 0E23     		movs	r3, #14
 17989 000e FB18     		adds	r3, r7, r3
 17990 0010 0022     		movs	r2, #0
 17991 0012 1A70     		strb	r2, [r3]
7353:bma2x2.c      **** 	/*  Variable used to return value of
7354:bma2x2.c      **** 	communication routine*/
7355:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 17992              		.loc 1 7355 0
 17993 0014 0F23     		movs	r3, #15
 17994 0016 FB18     		adds	r3, r7, r3
 17995 0018 FF22     		movs	r2, #255
 17996 001a 1A70     		strb	r2, [r3]
7356:bma2x2.c      **** 
7357:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 17997              		.loc 1 7357 0
 17998 001c 204B     		ldr	r3, .L1080
 17999 001e 1B68     		ldr	r3, [r3]
 18000 0020 002B     		cmp	r3, #0
 18001 0022 02D1     		bne	.L1077
7358:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
7359:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 18002              		.loc 1 7359 0
 18003 0024 7F23     		movs	r3, #127
 18004 0026 5B42     		rsbs	r3, r3, #0
 18005 0028 36E0     		b	.L1079
 18006              	.L1077:
7360:bma2x2.c      **** 		} else {
7361:bma2x2.c      **** 			/* write the spi status*/
7362:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 18007              		.loc 1 7362 0
 18008 002a 1D4B     		ldr	r3, .L1080
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 449


 18009 002c 1B68     		ldr	r3, [r3]
 18010 002e DD68     		ldr	r5, [r3, #12]
 18011 0030 1B4B     		ldr	r3, .L1080
 18012 0032 1B68     		ldr	r3, [r3]
 18013 0034 1879     		ldrb	r0, [r3, #4]
 18014 0036 0F23     		movs	r3, #15
 18015 0038 FC18     		adds	r4, r7, r3
 18016 003a 0E23     		movs	r3, #14
 18017 003c FA18     		adds	r2, r7, r3
 18018 003e 0123     		movs	r3, #1
 18019 0040 3421     		movs	r1, #52
 18020 0042 A847     		blx	r5
 18021 0044 0300     		movs	r3, r0
 18022 0046 2370     		strb	r3, [r4]
7363:bma2x2.c      **** 			(p_bma2x2->dev_addr,
7364:bma2x2.c      **** 			BMA2x2_ENABLE_SPI_MODE_3_REG,
7365:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7366:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 18023              		.loc 1 7366 0
 18024 0048 0E23     		movs	r3, #14
 18025 004a FB18     		adds	r3, r7, r3
 18026 004c 1B78     		ldrb	r3, [r3]
 18027 004e 5BB2     		sxtb	r3, r3
 18028 0050 0122     		movs	r2, #1
 18029 0052 9343     		bics	r3, r2
 18030 0054 5AB2     		sxtb	r2, r3
 18031 0056 FB1D     		adds	r3, r7, #7
 18032 0058 1B78     		ldrb	r3, [r3]
 18033 005a 5BB2     		sxtb	r3, r3
 18034 005c 0121     		movs	r1, #1
 18035 005e 0B40     		ands	r3, r1
 18036 0060 5BB2     		sxtb	r3, r3
 18037 0062 1343     		orrs	r3, r2
 18038 0064 5BB2     		sxtb	r3, r3
 18039 0066 DAB2     		uxtb	r2, r3
 18040 0068 0E23     		movs	r3, #14
 18041 006a FB18     		adds	r3, r7, r3
 18042 006c 1A70     		strb	r2, [r3]
7367:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_SPI_MODE_3, spi3_u8);
7368:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 18043              		.loc 1 7368 0
 18044 006e 0E23     		movs	r3, #14
 18045 0070 FB18     		adds	r3, r7, r3
 18046 0072 0122     		movs	r2, #1
 18047 0074 1900     		movs	r1, r3
 18048 0076 3420     		movs	r0, #52
 18049 0078 FFF7FEFF 		bl	bma2x2_write_reg
 18050 007c 0300     		movs	r3, r0
 18051 007e DAB2     		uxtb	r2, r3
 18052 0080 0F23     		movs	r3, #15
 18053 0082 FB18     		adds	r3, r7, r3
 18054 0084 1B78     		ldrb	r3, [r3]
 18055 0086 D318     		adds	r3, r2, r3
 18056 0088 DAB2     		uxtb	r2, r3
 18057 008a 0F23     		movs	r3, #15
 18058 008c FB18     		adds	r3, r7, r3
 18059 008e 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 450


7369:bma2x2.c      **** 			BMA2x2_ENABLE_SPI_MODE_3_REG,
7370:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7371:bma2x2.c      **** 		}
7372:bma2x2.c      **** 	return com_rslt;
 18060              		.loc 1 7372 0
 18061 0090 0F23     		movs	r3, #15
 18062 0092 FB18     		adds	r3, r7, r3
 18063 0094 1B78     		ldrb	r3, [r3]
 18064 0096 5BB2     		sxtb	r3, r3
 18065              	.L1079:
7373:bma2x2.c      **** }
 18066              		.loc 1 7373 0 discriminator 1
 18067 0098 1800     		movs	r0, r3
 18068 009a BD46     		mov	sp, r7
 18069 009c 04B0     		add	sp, sp, #16
 18070              		@ sp needed
 18071 009e B0BD     		pop	{r4, r5, r7, pc}
 18072              	.L1081:
 18073              		.align	2
 18074              	.L1080:
 18075 00a0 00000000 		.word	p_bma2x2
 18076              		.cfi_endproc
 18077              	.LFE122:
 18078              		.size	bma2x2_set_spi3, .-bma2x2_set_spi3
 18079              		.section	.text.bma2x2_get_i2c_wdt,"ax",%progbits
 18080              		.align	2
 18081              		.global	bma2x2_get_i2c_wdt
 18082              		.code	16
 18083              		.thumb_func
 18084              		.type	bma2x2_get_i2c_wdt, %function
 18085              	bma2x2_get_i2c_wdt:
 18086              	.LFB123:
7374:bma2x2.c      **** /*!
7375:bma2x2.c      ****  *	@brief This API is used to get the i2c
7376:bma2x2.c      ****  *	watch dog timer period and I2C interface mode is selected
7377:bma2x2.c      ****  *	in the register 0x34 bit 1 and 2
7378:bma2x2.c      ****  *
7379:bma2x2.c      ****  *
7380:bma2x2.c      ****  *  @param channel_u8: The i2c option selection
7381:bma2x2.c      ****  *     channel_u8           |    result
7382:bma2x2.c      ****  *  ------------------------- |------------------
7383:bma2x2.c      ****  *        0                   |   BMA2x2_ACCEL_I2C_SELECT
7384:bma2x2.c      ****  *        1                   |   BMA2x2_ACCEL_I2C_ENABLE
7385:bma2x2.c      ****  *
7386:bma2x2.c      ****  *  @param i2c_wdt_u8: watch dog timer period
7387:bma2x2.c      ****  *	and I2C interface mode is selected
7388:bma2x2.c      ****  *     BMA2x2_ACCEL_I2C_SELECT|    result
7389:bma2x2.c      ****  *  ------------------------- |------------------
7390:bma2x2.c      ****  *     0x00                   | Disable the watchdog at SDI pin
7391:bma2x2.c      ****  *     0x01                   | Enable watchdog
7392:bma2x2.c      ****  *
7393:bma2x2.c      ****  *     BMA2x2_I2C_ENABLE      |    result
7394:bma2x2.c      ****  *  ------------------------- |------------------
7395:bma2x2.c      ****  *     0x00                   | 1ms
7396:bma2x2.c      ****  *     0x01                   | 50ms
7397:bma2x2.c      ****  *
7398:bma2x2.c      ****  *
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 451


7399:bma2x2.c      ****  *	@return results of bus communication function
7400:bma2x2.c      ****  *	@retval 0 -> Success
7401:bma2x2.c      ****  *	@retval -1 -> Error
7402:bma2x2.c      ****  *
7403:bma2x2.c      ****  *
7404:bma2x2.c      ****  */
7405:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_i2c_wdt(u8 channel_u8,
7406:bma2x2.c      **** u8 *i2c_wdt_u8)
7407:bma2x2.c      **** {
 18087              		.loc 1 7407 0
 18088              		.cfi_startproc
 18089              		@ args = 0, pretend = 0, frame = 16
 18090              		@ frame_needed = 1, uses_anonymous_args = 0
 18091 0000 B0B5     		push	{r4, r5, r7, lr}
 18092              		.cfi_def_cfa_offset 16
 18093              		.cfi_offset 4, -16
 18094              		.cfi_offset 5, -12
 18095              		.cfi_offset 7, -8
 18096              		.cfi_offset 14, -4
 18097 0002 84B0     		sub	sp, sp, #16
 18098              		.cfi_def_cfa_offset 32
 18099 0004 00AF     		add	r7, sp, #0
 18100              		.cfi_def_cfa_register 7
 18101 0006 0200     		movs	r2, r0
 18102 0008 3960     		str	r1, [r7]
 18103 000a FB1D     		adds	r3, r7, #7
 18104 000c 1A70     		strb	r2, [r3]
7408:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 18105              		.loc 1 7408 0
 18106 000e 0E23     		movs	r3, #14
 18107 0010 FB18     		adds	r3, r7, r3
 18108 0012 0022     		movs	r2, #0
 18109 0014 1A70     		strb	r2, [r3]
7409:bma2x2.c      **** 		/*  Variable used to return value of
7410:bma2x2.c      **** 	communication routine*/
7411:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 18110              		.loc 1 7411 0
 18111 0016 0F23     		movs	r3, #15
 18112 0018 FB18     		adds	r3, r7, r3
 18113 001a FF22     		movs	r2, #255
 18114 001c 1A70     		strb	r2, [r3]
7412:bma2x2.c      **** 
7413:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 18115              		.loc 1 7413 0
 18116 001e 274B     		ldr	r3, .L1091
 18117 0020 1B68     		ldr	r3, [r3]
 18118 0022 002B     		cmp	r3, #0
 18119 0024 02D1     		bne	.L1083
7414:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
7415:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 18120              		.loc 1 7415 0
 18121 0026 7F23     		movs	r3, #127
 18122 0028 5B42     		rsbs	r3, r3, #0
 18123 002a 43E0     		b	.L1089
 18124              	.L1083:
7416:bma2x2.c      **** 		} else {
7417:bma2x2.c      **** 		switch (channel_u8) {
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 452


 18125              		.loc 1 7417 0
 18126 002c FB1D     		adds	r3, r7, #7
 18127 002e 1B78     		ldrb	r3, [r3]
 18128 0030 002B     		cmp	r3, #0
 18129 0032 02D0     		beq	.L1086
 18130 0034 012B     		cmp	r3, #1
 18131 0036 1AD0     		beq	.L1087
 18132 0038 33E0     		b	.L1090
 18133              	.L1086:
7418:bma2x2.c      **** 		case BMA2x2_I2C_SELECT:
7419:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 18134              		.loc 1 7419 0
 18135 003a 204B     		ldr	r3, .L1091
 18136 003c 1B68     		ldr	r3, [r3]
 18137 003e DD68     		ldr	r5, [r3, #12]
 18138 0040 1E4B     		ldr	r3, .L1091
 18139 0042 1B68     		ldr	r3, [r3]
 18140 0044 1879     		ldrb	r0, [r3, #4]
 18141 0046 0F23     		movs	r3, #15
 18142 0048 FC18     		adds	r4, r7, r3
 18143 004a 0E23     		movs	r3, #14
 18144 004c FA18     		adds	r2, r7, r3
 18145 004e 0123     		movs	r3, #1
 18146 0050 3421     		movs	r1, #52
 18147 0052 A847     		blx	r5
 18148 0054 0300     		movs	r3, r0
 18149 0056 2370     		strb	r3, [r4]
7420:bma2x2.c      **** 			(p_bma2x2->dev_addr,
7421:bma2x2.c      **** 			BMA2x2_I2C_WDT_PERIOD_REG,
7422:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7423:bma2x2.c      **** 			*i2c_wdt_u8 = BMA2x2_GET_BITSLICE(data_u8,
 18150              		.loc 1 7423 0
 18151 0058 0E23     		movs	r3, #14
 18152 005a FB18     		adds	r3, r7, r3
 18153 005c 1B78     		ldrb	r3, [r3]
 18154 005e 5B10     		asrs	r3, r3, #1
 18155 0060 DBB2     		uxtb	r3, r3
 18156 0062 0122     		movs	r2, #1
 18157 0064 1340     		ands	r3, r2
 18158 0066 DAB2     		uxtb	r2, r3
 18159 0068 3B68     		ldr	r3, [r7]
 18160 006a 1A70     		strb	r2, [r3]
7424:bma2x2.c      **** 			BMA2x2_I2C_WDT_PERIOD);
7425:bma2x2.c      **** 		break;
 18161              		.loc 1 7425 0
 18162 006c 1EE0     		b	.L1088
 18163              	.L1087:
7426:bma2x2.c      **** 		case BMA2x2_I2C_ENABLE:
7427:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 18164              		.loc 1 7427 0
 18165 006e 134B     		ldr	r3, .L1091
 18166 0070 1B68     		ldr	r3, [r3]
 18167 0072 DD68     		ldr	r5, [r3, #12]
 18168 0074 114B     		ldr	r3, .L1091
 18169 0076 1B68     		ldr	r3, [r3]
 18170 0078 1879     		ldrb	r0, [r3, #4]
 18171 007a 0F23     		movs	r3, #15
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 453


 18172 007c FC18     		adds	r4, r7, r3
 18173 007e 0E23     		movs	r3, #14
 18174 0080 FA18     		adds	r2, r7, r3
 18175 0082 0123     		movs	r3, #1
 18176 0084 3421     		movs	r1, #52
 18177 0086 A847     		blx	r5
 18178 0088 0300     		movs	r3, r0
 18179 008a 2370     		strb	r3, [r4]
7428:bma2x2.c      **** 			(p_bma2x2->dev_addr,
7429:bma2x2.c      **** 			BMA2x2_ENABLE_I2C_WDT_REG,
7430:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7431:bma2x2.c      **** 			*i2c_wdt_u8 = BMA2x2_GET_BITSLICE
 18180              		.loc 1 7431 0
 18181 008c 0E23     		movs	r3, #14
 18182 008e FB18     		adds	r3, r7, r3
 18183 0090 1B78     		ldrb	r3, [r3]
 18184 0092 9B10     		asrs	r3, r3, #2
 18185 0094 DBB2     		uxtb	r3, r3
 18186 0096 0122     		movs	r2, #1
 18187 0098 1340     		ands	r3, r2
 18188 009a DAB2     		uxtb	r2, r3
 18189 009c 3B68     		ldr	r3, [r7]
 18190 009e 1A70     		strb	r2, [r3]
7432:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_I2C_WDT);
7433:bma2x2.c      **** 		break;
 18191              		.loc 1 7433 0
 18192 00a0 04E0     		b	.L1088
 18193              	.L1090:
7434:bma2x2.c      **** 		default:
7435:bma2x2.c      **** 		com_rslt = E_OUT_OF_RANGE;
 18194              		.loc 1 7435 0
 18195 00a2 0F23     		movs	r3, #15
 18196 00a4 FB18     		adds	r3, r7, r3
 18197 00a6 FE22     		movs	r2, #254
 18198 00a8 1A70     		strb	r2, [r3]
7436:bma2x2.c      **** 		break;
 18199              		.loc 1 7436 0
 18200 00aa C046     		nop
 18201              	.L1088:
7437:bma2x2.c      **** 		}
7438:bma2x2.c      **** 	}
7439:bma2x2.c      **** 	return com_rslt;
 18202              		.loc 1 7439 0
 18203 00ac 0F23     		movs	r3, #15
 18204 00ae FB18     		adds	r3, r7, r3
 18205 00b0 1B78     		ldrb	r3, [r3]
 18206 00b2 5BB2     		sxtb	r3, r3
 18207              	.L1089:
7440:bma2x2.c      **** }
 18208              		.loc 1 7440 0 discriminator 1
 18209 00b4 1800     		movs	r0, r3
 18210 00b6 BD46     		mov	sp, r7
 18211 00b8 04B0     		add	sp, sp, #16
 18212              		@ sp needed
 18213 00ba B0BD     		pop	{r4, r5, r7, pc}
 18214              	.L1092:
 18215              		.align	2
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 454


 18216              	.L1091:
 18217 00bc 00000000 		.word	p_bma2x2
 18218              		.cfi_endproc
 18219              	.LFE123:
 18220              		.size	bma2x2_get_i2c_wdt, .-bma2x2_get_i2c_wdt
 18221              		.section	.text.bma2x2_set_i2c_wdt,"ax",%progbits
 18222              		.align	2
 18223              		.global	bma2x2_set_i2c_wdt
 18224              		.code	16
 18225              		.thumb_func
 18226              		.type	bma2x2_set_i2c_wdt, %function
 18227              	bma2x2_set_i2c_wdt:
 18228              	.LFB124:
7441:bma2x2.c      **** /*!
7442:bma2x2.c      ****  *	@brief This API is used to set the i2c
7443:bma2x2.c      ****  *	watch dog timer period and I2C interface mode is selected
7444:bma2x2.c      ****  *	in the register 0x34 bit 1 and 2
7445:bma2x2.c      ****  *
7446:bma2x2.c      ****  *
7447:bma2x2.c      ****  *  @param channel_u8: The i2c option selection
7448:bma2x2.c      ****  *     channel_u8           |    result
7449:bma2x2.c      ****  *  ------------------------- |------------------
7450:bma2x2.c      ****  *        0                   |   BMA2x2_ACCEL_I2C_SELECT
7451:bma2x2.c      ****  *        1                   |   BMA2x2_ACCEL_I2C_ENABLE
7452:bma2x2.c      ****  *
7453:bma2x2.c      ****  *  @param i2c_wdt_u8: watch dog timer period
7454:bma2x2.c      ****  *	and I2C interface mode is selected
7455:bma2x2.c      ****  *     BMA2x2_ACCEL_I2C_SELECT|    result
7456:bma2x2.c      ****  *  ------------------------- |------------------
7457:bma2x2.c      ****  *     0x00                   | Disable the watchdog at SDI pin
7458:bma2x2.c      ****  *     0x01                   | Enable watchdog
7459:bma2x2.c      ****  *
7460:bma2x2.c      ****  *     BMA2x2_I2C_ENABLE      |    result
7461:bma2x2.c      ****  *  ------------------------- |------------------
7462:bma2x2.c      ****  *     0x00                   | 1ms
7463:bma2x2.c      ****  *     0x01                   | 50ms
7464:bma2x2.c      ****  *
7465:bma2x2.c      ****  *
7466:bma2x2.c      ****  *	@return results of bus communication function
7467:bma2x2.c      ****  *	@retval 0 -> Success
7468:bma2x2.c      ****  *	@retval -1 -> Error
7469:bma2x2.c      ****  *
7470:bma2x2.c      ****  *
7471:bma2x2.c      ****  */
7472:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_i2c_wdt(u8 channel_u8,
7473:bma2x2.c      **** u8 i2c_wdt_u8)
7474:bma2x2.c      **** {
 18229              		.loc 1 7474 0
 18230              		.cfi_startproc
 18231              		@ args = 0, pretend = 0, frame = 16
 18232              		@ frame_needed = 1, uses_anonymous_args = 0
 18233 0000 B0B5     		push	{r4, r5, r7, lr}
 18234              		.cfi_def_cfa_offset 16
 18235              		.cfi_offset 4, -16
 18236              		.cfi_offset 5, -12
 18237              		.cfi_offset 7, -8
 18238              		.cfi_offset 14, -4
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 455


 18239 0002 84B0     		sub	sp, sp, #16
 18240              		.cfi_def_cfa_offset 32
 18241 0004 00AF     		add	r7, sp, #0
 18242              		.cfi_def_cfa_register 7
 18243 0006 0200     		movs	r2, r0
 18244 0008 FB1D     		adds	r3, r7, #7
 18245 000a 1A70     		strb	r2, [r3]
 18246 000c BB1D     		adds	r3, r7, #6
 18247 000e 0A1C     		adds	r2, r1, #0
 18248 0010 1A70     		strb	r2, [r3]
7475:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 18249              		.loc 1 7475 0
 18250 0012 0E23     		movs	r3, #14
 18251 0014 FB18     		adds	r3, r7, r3
 18252 0016 0022     		movs	r2, #0
 18253 0018 1A70     		strb	r2, [r3]
7476:bma2x2.c      **** 	/*  Variable used to return value of
7477:bma2x2.c      **** 	communication routine*/
7478:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 18254              		.loc 1 7478 0
 18255 001a 0F23     		movs	r3, #15
 18256 001c FB18     		adds	r3, r7, r3
 18257 001e FF22     		movs	r2, #255
 18258 0020 1A70     		strb	r2, [r3]
7479:bma2x2.c      **** 
7480:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 18259              		.loc 1 7480 0
 18260 0022 424B     		ldr	r3, .L1102
 18261 0024 1B68     		ldr	r3, [r3]
 18262 0026 002B     		cmp	r3, #0
 18263 0028 02D1     		bne	.L1094
7481:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
7482:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 18264              		.loc 1 7482 0
 18265 002a 7F23     		movs	r3, #127
 18266 002c 5B42     		rsbs	r3, r3, #0
 18267 002e 79E0     		b	.L1100
 18268              	.L1094:
7483:bma2x2.c      **** 		} else {
7484:bma2x2.c      **** 		switch (channel_u8) {
 18269              		.loc 1 7484 0
 18270 0030 FB1D     		adds	r3, r7, #7
 18271 0032 1B78     		ldrb	r3, [r3]
 18272 0034 002B     		cmp	r3, #0
 18273 0036 02D0     		beq	.L1097
 18274 0038 012B     		cmp	r3, #1
 18275 003a 35D0     		beq	.L1098
 18276 003c 69E0     		b	.L1101
 18277              	.L1097:
7485:bma2x2.c      **** 		case BMA2x2_I2C_SELECT:
7486:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 18278              		.loc 1 7486 0
 18279 003e 3B4B     		ldr	r3, .L1102
 18280 0040 1B68     		ldr	r3, [r3]
 18281 0042 DD68     		ldr	r5, [r3, #12]
 18282 0044 394B     		ldr	r3, .L1102
 18283 0046 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 456


 18284 0048 1879     		ldrb	r0, [r3, #4]
 18285 004a 0F23     		movs	r3, #15
 18286 004c FC18     		adds	r4, r7, r3
 18287 004e 0E23     		movs	r3, #14
 18288 0050 FA18     		adds	r2, r7, r3
 18289 0052 0123     		movs	r3, #1
 18290 0054 3421     		movs	r1, #52
 18291 0056 A847     		blx	r5
 18292 0058 0300     		movs	r3, r0
 18293 005a 2370     		strb	r3, [r4]
7487:bma2x2.c      **** 			(p_bma2x2->dev_addr,
7488:bma2x2.c      **** 			BMA2x2_I2C_WDT_PERIOD_REG,
7489:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7490:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 18294              		.loc 1 7490 0
 18295 005c 0E23     		movs	r3, #14
 18296 005e FB18     		adds	r3, r7, r3
 18297 0060 1B78     		ldrb	r3, [r3]
 18298 0062 5BB2     		sxtb	r3, r3
 18299 0064 0222     		movs	r2, #2
 18300 0066 9343     		bics	r3, r2
 18301 0068 5AB2     		sxtb	r2, r3
 18302 006a BB1D     		adds	r3, r7, #6
 18303 006c 1B78     		ldrb	r3, [r3]
 18304 006e 5B00     		lsls	r3, r3, #1
 18305 0070 5BB2     		sxtb	r3, r3
 18306 0072 0221     		movs	r1, #2
 18307 0074 0B40     		ands	r3, r1
 18308 0076 5BB2     		sxtb	r3, r3
 18309 0078 1343     		orrs	r3, r2
 18310 007a 5BB2     		sxtb	r3, r3
 18311 007c DAB2     		uxtb	r2, r3
 18312 007e 0E23     		movs	r3, #14
 18313 0080 FB18     		adds	r3, r7, r3
 18314 0082 1A70     		strb	r2, [r3]
7491:bma2x2.c      **** 			(data_u8,
7492:bma2x2.c      **** 			BMA2x2_I2C_WDT_PERIOD, i2c_wdt_u8);
7493:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 18315              		.loc 1 7493 0
 18316 0084 0E23     		movs	r3, #14
 18317 0086 FB18     		adds	r3, r7, r3
 18318 0088 0122     		movs	r2, #1
 18319 008a 1900     		movs	r1, r3
 18320 008c 3420     		movs	r0, #52
 18321 008e FFF7FEFF 		bl	bma2x2_write_reg
 18322 0092 0300     		movs	r3, r0
 18323 0094 DAB2     		uxtb	r2, r3
 18324 0096 0F23     		movs	r3, #15
 18325 0098 FB18     		adds	r3, r7, r3
 18326 009a 1B78     		ldrb	r3, [r3]
 18327 009c D318     		adds	r3, r2, r3
 18328 009e DAB2     		uxtb	r2, r3
 18329 00a0 0F23     		movs	r3, #15
 18330 00a2 FB18     		adds	r3, r7, r3
 18331 00a4 1A70     		strb	r2, [r3]
7494:bma2x2.c      **** 			BMA2x2_I2C_WDT_PERIOD_REG,
7495:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 457


7496:bma2x2.c      **** 		break;
 18332              		.loc 1 7496 0
 18333 00a6 39E0     		b	.L1099
 18334              	.L1098:
7497:bma2x2.c      **** 		case BMA2x2_I2C_ENABLE:
7498:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 18335              		.loc 1 7498 0
 18336 00a8 204B     		ldr	r3, .L1102
 18337 00aa 1B68     		ldr	r3, [r3]
 18338 00ac DD68     		ldr	r5, [r3, #12]
 18339 00ae 1F4B     		ldr	r3, .L1102
 18340 00b0 1B68     		ldr	r3, [r3]
 18341 00b2 1879     		ldrb	r0, [r3, #4]
 18342 00b4 0F23     		movs	r3, #15
 18343 00b6 FC18     		adds	r4, r7, r3
 18344 00b8 0E23     		movs	r3, #14
 18345 00ba FA18     		adds	r2, r7, r3
 18346 00bc 0123     		movs	r3, #1
 18347 00be 3421     		movs	r1, #52
 18348 00c0 A847     		blx	r5
 18349 00c2 0300     		movs	r3, r0
 18350 00c4 2370     		strb	r3, [r4]
7499:bma2x2.c      **** 			(p_bma2x2->dev_addr,
7500:bma2x2.c      **** 			BMA2x2_ENABLE_I2C_WDT_REG,
7501:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7502:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 18351              		.loc 1 7502 0
 18352 00c6 0E23     		movs	r3, #14
 18353 00c8 FB18     		adds	r3, r7, r3
 18354 00ca 1B78     		ldrb	r3, [r3]
 18355 00cc 5BB2     		sxtb	r3, r3
 18356 00ce 0422     		movs	r2, #4
 18357 00d0 9343     		bics	r3, r2
 18358 00d2 5AB2     		sxtb	r2, r3
 18359 00d4 BB1D     		adds	r3, r7, #6
 18360 00d6 1B78     		ldrb	r3, [r3]
 18361 00d8 9B00     		lsls	r3, r3, #2
 18362 00da 5BB2     		sxtb	r3, r3
 18363 00dc 0421     		movs	r1, #4
 18364 00de 0B40     		ands	r3, r1
 18365 00e0 5BB2     		sxtb	r3, r3
 18366 00e2 1343     		orrs	r3, r2
 18367 00e4 5BB2     		sxtb	r3, r3
 18368 00e6 DAB2     		uxtb	r2, r3
 18369 00e8 0E23     		movs	r3, #14
 18370 00ea FB18     		adds	r3, r7, r3
 18371 00ec 1A70     		strb	r2, [r3]
7503:bma2x2.c      **** 			(data_u8,
7504:bma2x2.c      **** 			BMA2x2_ENABLE_I2C_WDT, i2c_wdt_u8);
7505:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 18372              		.loc 1 7505 0
 18373 00ee 0E23     		movs	r3, #14
 18374 00f0 FB18     		adds	r3, r7, r3
 18375 00f2 0122     		movs	r2, #1
 18376 00f4 1900     		movs	r1, r3
 18377 00f6 3420     		movs	r0, #52
 18378 00f8 FFF7FEFF 		bl	bma2x2_write_reg
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 458


 18379 00fc 0300     		movs	r3, r0
 18380 00fe DAB2     		uxtb	r2, r3
 18381 0100 0F23     		movs	r3, #15
 18382 0102 FB18     		adds	r3, r7, r3
 18383 0104 1B78     		ldrb	r3, [r3]
 18384 0106 D318     		adds	r3, r2, r3
 18385 0108 DAB2     		uxtb	r2, r3
 18386 010a 0F23     		movs	r3, #15
 18387 010c FB18     		adds	r3, r7, r3
 18388 010e 1A70     		strb	r2, [r3]
7506:bma2x2.c      **** 			BMA2x2_ENABLE_I2C_WDT_REG,
7507:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7508:bma2x2.c      **** 		break;
 18389              		.loc 1 7508 0
 18390 0110 04E0     		b	.L1099
 18391              	.L1101:
7509:bma2x2.c      **** 		default:
7510:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 18392              		.loc 1 7510 0
 18393 0112 0F23     		movs	r3, #15
 18394 0114 FB18     		adds	r3, r7, r3
 18395 0116 FE22     		movs	r2, #254
 18396 0118 1A70     		strb	r2, [r3]
7511:bma2x2.c      **** 		break;
 18397              		.loc 1 7511 0
 18398 011a C046     		nop
 18399              	.L1099:
7512:bma2x2.c      **** 		}
7513:bma2x2.c      **** 	}
7514:bma2x2.c      **** 	return com_rslt;
 18400              		.loc 1 7514 0
 18401 011c 0F23     		movs	r3, #15
 18402 011e FB18     		adds	r3, r7, r3
 18403 0120 1B78     		ldrb	r3, [r3]
 18404 0122 5BB2     		sxtb	r3, r3
 18405              	.L1100:
7515:bma2x2.c      **** }
 18406              		.loc 1 7515 0 discriminator 1
 18407 0124 1800     		movs	r0, r3
 18408 0126 BD46     		mov	sp, r7
 18409 0128 04B0     		add	sp, sp, #16
 18410              		@ sp needed
 18411 012a B0BD     		pop	{r4, r5, r7, pc}
 18412              	.L1103:
 18413              		.align	2
 18414              	.L1102:
 18415 012c 00000000 		.word	p_bma2x2
 18416              		.cfi_endproc
 18417              	.LFE124:
 18418              		.size	bma2x2_set_i2c_wdt, .-bma2x2_set_i2c_wdt
 18419              		.section	.text.bma2x2_get_slow_comp,"ax",%progbits
 18420              		.align	2
 18421              		.global	bma2x2_get_slow_comp
 18422              		.code	16
 18423              		.thumb_func
 18424              		.type	bma2x2_get_slow_comp, %function
 18425              	bma2x2_get_slow_comp:
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 459


 18426              	.LFB125:
7516:bma2x2.c      **** /*!
7517:bma2x2.c      ****  *	@brief This API is used to get
7518:bma2x2.c      ****  *	slow compensation(hp_x_enable, hp_y_enable and hp_z_enable) enable
7519:bma2x2.c      ****  *	in the register 0x36 bit 0 to 2
7520:bma2x2.c      ****  *	@note SLOW_COMP_X -> bit 0
7521:bma2x2.c      ****  *	@note SLOW_COMP_Y -> bit 1
7522:bma2x2.c      ****  *	@note SLOW_COMP_Z -> bit 2
7523:bma2x2.c      ****  *
7524:bma2x2.c      ****  *
7525:bma2x2.c      ****  *	@param channel_u8: The value of slow compensation selection
7526:bma2x2.c      ****  *     channel_u8           |    result
7527:bma2x2.c      ****  *  ------------------------- |------------------
7528:bma2x2.c      ****  *        0                   |   BMA2x2_ACCEL_SLOW_COMP_X
7529:bma2x2.c      ****  *        1                   |   BMA2x2_ACCEL_SLOW_COMP_Y
7530:bma2x2.c      ****  *        2                   |   BMA2x2_ACCEL_SLOW_COMP_Z
7531:bma2x2.c      ****  *
7532:bma2x2.c      ****  *  @param slow_comp_u8: The value of slow compensation enable
7533:bma2x2.c      ****  *     slow_comp_u8         |    result
7534:bma2x2.c      ****  *  ------------------------- |------------------
7535:bma2x2.c      ****  *         0x00               |    Disable
7536:bma2x2.c      ****  *        0x01                |    Enable
7537:bma2x2.c      ****  *
7538:bma2x2.c      ****  *
7539:bma2x2.c      ****  *	@return results of bus communication function
7540:bma2x2.c      ****  *	@retval 0 -> Success
7541:bma2x2.c      ****  *	@retval -1 -> Error
7542:bma2x2.c      ****  *
7543:bma2x2.c      ****  *
7544:bma2x2.c      ****  */
7545:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_slow_comp(u8 channel_u8,
7546:bma2x2.c      **** u8 *slow_comp_u8)
7547:bma2x2.c      **** {
 18427              		.loc 1 7547 0
 18428              		.cfi_startproc
 18429              		@ args = 0, pretend = 0, frame = 16
 18430              		@ frame_needed = 1, uses_anonymous_args = 0
 18431 0000 B0B5     		push	{r4, r5, r7, lr}
 18432              		.cfi_def_cfa_offset 16
 18433              		.cfi_offset 4, -16
 18434              		.cfi_offset 5, -12
 18435              		.cfi_offset 7, -8
 18436              		.cfi_offset 14, -4
 18437 0002 84B0     		sub	sp, sp, #16
 18438              		.cfi_def_cfa_offset 32
 18439 0004 00AF     		add	r7, sp, #0
 18440              		.cfi_def_cfa_register 7
 18441 0006 0200     		movs	r2, r0
 18442 0008 3960     		str	r1, [r7]
 18443 000a FB1D     		adds	r3, r7, #7
 18444 000c 1A70     		strb	r2, [r3]
7548:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 18445              		.loc 1 7548 0
 18446 000e 0E23     		movs	r3, #14
 18447 0010 FB18     		adds	r3, r7, r3
 18448 0012 0022     		movs	r2, #0
 18449 0014 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 460


7549:bma2x2.c      **** 	/*  Variable used to return value of
7550:bma2x2.c      **** 	communication routine*/
7551:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 18450              		.loc 1 7551 0
 18451 0016 0F23     		movs	r3, #15
 18452 0018 FB18     		adds	r3, r7, r3
 18453 001a FF22     		movs	r2, #255
 18454 001c 1A70     		strb	r2, [r3]
7552:bma2x2.c      **** 
7553:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 18455              		.loc 1 7553 0
 18456 001e 344B     		ldr	r3, .L1114
 18457 0020 1B68     		ldr	r3, [r3]
 18458 0022 002B     		cmp	r3, #0
 18459 0024 02D1     		bne	.L1105
7554:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
7555:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 18460              		.loc 1 7555 0
 18461 0026 7F23     		movs	r3, #127
 18462 0028 5B42     		rsbs	r3, r3, #0
 18463 002a 5CE0     		b	.L1112
 18464              	.L1105:
7556:bma2x2.c      **** 		} else {
7557:bma2x2.c      **** 		switch (channel_u8) {
 18465              		.loc 1 7557 0
 18466 002c FB1D     		adds	r3, r7, #7
 18467 002e 1B78     		ldrb	r3, [r3]
 18468 0030 012B     		cmp	r3, #1
 18469 0032 1BD0     		beq	.L1108
 18470 0034 022B     		cmp	r3, #2
 18471 0036 33D0     		beq	.L1109
 18472 0038 002B     		cmp	r3, #0
 18473 003a 4BD1     		bne	.L1113
7558:bma2x2.c      **** 		case BMA2x2_SLOW_COMP_X:
7559:bma2x2.c      **** 			/*SLOW COMP X*/
7560:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 18474              		.loc 1 7560 0
 18475 003c 2C4B     		ldr	r3, .L1114
 18476 003e 1B68     		ldr	r3, [r3]
 18477 0040 DD68     		ldr	r5, [r3, #12]
 18478 0042 2B4B     		ldr	r3, .L1114
 18479 0044 1B68     		ldr	r3, [r3]
 18480 0046 1879     		ldrb	r0, [r3, #4]
 18481 0048 0F23     		movs	r3, #15
 18482 004a FC18     		adds	r4, r7, r3
 18483 004c 0E23     		movs	r3, #14
 18484 004e FA18     		adds	r2, r7, r3
 18485 0050 0123     		movs	r3, #1
 18486 0052 3621     		movs	r1, #54
 18487 0054 A847     		blx	r5
 18488 0056 0300     		movs	r3, r0
 18489 0058 2370     		strb	r3, [r4]
7561:bma2x2.c      **** 			(p_bma2x2->dev_addr,
7562:bma2x2.c      **** 			BMA2x2_ENABLE_SLOW_COMP_X_REG,
7563:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7564:bma2x2.c      **** 			*slow_comp_u8 = BMA2x2_GET_BITSLICE
 18490              		.loc 1 7564 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 461


 18491 005a 0E23     		movs	r3, #14
 18492 005c FB18     		adds	r3, r7, r3
 18493 005e 1B78     		ldrb	r3, [r3]
 18494 0060 0122     		movs	r2, #1
 18495 0062 1340     		ands	r3, r2
 18496 0064 DAB2     		uxtb	r2, r3
 18497 0066 3B68     		ldr	r3, [r7]
 18498 0068 1A70     		strb	r2, [r3]
7565:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_SLOW_COMP_X);
7566:bma2x2.c      **** 		break;
 18499              		.loc 1 7566 0
 18500 006a 38E0     		b	.L1111
 18501              	.L1108:
7567:bma2x2.c      **** 		case BMA2x2_SLOW_COMP_Y:
7568:bma2x2.c      **** 			/*SLOW COMP Y*/
7569:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 18502              		.loc 1 7569 0
 18503 006c 204B     		ldr	r3, .L1114
 18504 006e 1B68     		ldr	r3, [r3]
 18505 0070 DD68     		ldr	r5, [r3, #12]
 18506 0072 1F4B     		ldr	r3, .L1114
 18507 0074 1B68     		ldr	r3, [r3]
 18508 0076 1879     		ldrb	r0, [r3, #4]
 18509 0078 0F23     		movs	r3, #15
 18510 007a FC18     		adds	r4, r7, r3
 18511 007c 0E23     		movs	r3, #14
 18512 007e FA18     		adds	r2, r7, r3
 18513 0080 0123     		movs	r3, #1
 18514 0082 3621     		movs	r1, #54
 18515 0084 A847     		blx	r5
 18516 0086 0300     		movs	r3, r0
 18517 0088 2370     		strb	r3, [r4]
7570:bma2x2.c      **** 			(p_bma2x2->dev_addr,
7571:bma2x2.c      **** 			BMA2x2_ENABLE_SLOW_COMP_Y_REG,
7572:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7573:bma2x2.c      **** 			*slow_comp_u8 = BMA2x2_GET_BITSLICE
 18518              		.loc 1 7573 0
 18519 008a 0E23     		movs	r3, #14
 18520 008c FB18     		adds	r3, r7, r3
 18521 008e 1B78     		ldrb	r3, [r3]
 18522 0090 5B10     		asrs	r3, r3, #1
 18523 0092 DBB2     		uxtb	r3, r3
 18524 0094 0122     		movs	r2, #1
 18525 0096 1340     		ands	r3, r2
 18526 0098 DAB2     		uxtb	r2, r3
 18527 009a 3B68     		ldr	r3, [r7]
 18528 009c 1A70     		strb	r2, [r3]
7574:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_SLOW_COMP_Y);
7575:bma2x2.c      **** 		break;
 18529              		.loc 1 7575 0
 18530 009e 1EE0     		b	.L1111
 18531              	.L1109:
7576:bma2x2.c      **** 		case BMA2x2_SLOW_COMP_Z:
7577:bma2x2.c      **** 			/*SLOW COMP Z*/
7578:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 18532              		.loc 1 7578 0
 18533 00a0 134B     		ldr	r3, .L1114
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 462


 18534 00a2 1B68     		ldr	r3, [r3]
 18535 00a4 DD68     		ldr	r5, [r3, #12]
 18536 00a6 124B     		ldr	r3, .L1114
 18537 00a8 1B68     		ldr	r3, [r3]
 18538 00aa 1879     		ldrb	r0, [r3, #4]
 18539 00ac 0F23     		movs	r3, #15
 18540 00ae FC18     		adds	r4, r7, r3
 18541 00b0 0E23     		movs	r3, #14
 18542 00b2 FA18     		adds	r2, r7, r3
 18543 00b4 0123     		movs	r3, #1
 18544 00b6 3621     		movs	r1, #54
 18545 00b8 A847     		blx	r5
 18546 00ba 0300     		movs	r3, r0
 18547 00bc 2370     		strb	r3, [r4]
7579:bma2x2.c      **** 			(p_bma2x2->dev_addr,
7580:bma2x2.c      **** 			BMA2x2_ENABLE_SLOW_COMP_Z_REG,
7581:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7582:bma2x2.c      **** 			*slow_comp_u8 = BMA2x2_GET_BITSLICE
 18548              		.loc 1 7582 0
 18549 00be 0E23     		movs	r3, #14
 18550 00c0 FB18     		adds	r3, r7, r3
 18551 00c2 1B78     		ldrb	r3, [r3]
 18552 00c4 9B10     		asrs	r3, r3, #2
 18553 00c6 DBB2     		uxtb	r3, r3
 18554 00c8 0122     		movs	r2, #1
 18555 00ca 1340     		ands	r3, r2
 18556 00cc DAB2     		uxtb	r2, r3
 18557 00ce 3B68     		ldr	r3, [r7]
 18558 00d0 1A70     		strb	r2, [r3]
7583:bma2x2.c      **** 			(data_u8, BMA2x2_ENABLE_SLOW_COMP_Z);
7584:bma2x2.c      **** 		break;
 18559              		.loc 1 7584 0
 18560 00d2 04E0     		b	.L1111
 18561              	.L1113:
7585:bma2x2.c      **** 		default:
7586:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 18562              		.loc 1 7586 0
 18563 00d4 0F23     		movs	r3, #15
 18564 00d6 FB18     		adds	r3, r7, r3
 18565 00d8 FE22     		movs	r2, #254
 18566 00da 1A70     		strb	r2, [r3]
7587:bma2x2.c      **** 		break;
 18567              		.loc 1 7587 0
 18568 00dc C046     		nop
 18569              	.L1111:
7588:bma2x2.c      **** 		}
7589:bma2x2.c      **** 	}
7590:bma2x2.c      **** 	return com_rslt;
 18570              		.loc 1 7590 0
 18571 00de 0F23     		movs	r3, #15
 18572 00e0 FB18     		adds	r3, r7, r3
 18573 00e2 1B78     		ldrb	r3, [r3]
 18574 00e4 5BB2     		sxtb	r3, r3
 18575              	.L1112:
7591:bma2x2.c      **** }
 18576              		.loc 1 7591 0 discriminator 1
 18577 00e6 1800     		movs	r0, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 463


 18578 00e8 BD46     		mov	sp, r7
 18579 00ea 04B0     		add	sp, sp, #16
 18580              		@ sp needed
 18581 00ec B0BD     		pop	{r4, r5, r7, pc}
 18582              	.L1115:
 18583 00ee C046     		.align	2
 18584              	.L1114:
 18585 00f0 00000000 		.word	p_bma2x2
 18586              		.cfi_endproc
 18587              	.LFE125:
 18588              		.size	bma2x2_get_slow_comp, .-bma2x2_get_slow_comp
 18589              		.section	.text.bma2x2_set_slow_comp,"ax",%progbits
 18590              		.align	2
 18591              		.global	bma2x2_set_slow_comp
 18592              		.code	16
 18593              		.thumb_func
 18594              		.type	bma2x2_set_slow_comp, %function
 18595              	bma2x2_set_slow_comp:
 18596              	.LFB126:
7592:bma2x2.c      **** /*!
7593:bma2x2.c      ****  *	@brief This API is used to set
7594:bma2x2.c      ****  *	slow compensation(hp_x_enable, hp_y_enable and hp_z_enable) enable
7595:bma2x2.c      ****  *	in the register 0x36 bit 0 to 2
7596:bma2x2.c      ****  *	@note SLOW_COMP_X -> bit 0
7597:bma2x2.c      ****  *	@note SLOW_COMP_Y -> bit 1
7598:bma2x2.c      ****  *	@note SLOW_COMP_Z -> bit 2
7599:bma2x2.c      ****  *
7600:bma2x2.c      ****  *
7601:bma2x2.c      ****  *	@param channel_u8: The value of slow compensation selection
7602:bma2x2.c      ****  *     channel_u8           |    result
7603:bma2x2.c      ****  *  ------------------------- |------------------
7604:bma2x2.c      ****  *        0                   |   BMA2x2_ACCEL_SLOW_COMP_X
7605:bma2x2.c      ****  *        1                   |   BMA2x2_ACCEL_SLOW_COMP_Y
7606:bma2x2.c      ****  *        2                   |   BMA2x2_ACCEL_SLOW_COMP_Z
7607:bma2x2.c      ****  *
7608:bma2x2.c      ****  *  @param slow_comp_u8: The value of slow compensation enable
7609:bma2x2.c      ****  *     slow_comp_u8         |    result
7610:bma2x2.c      ****  *  ------------------------- |------------------
7611:bma2x2.c      ****  *         0x00               |    Disable
7612:bma2x2.c      ****  *        0x01                |    Enable
7613:bma2x2.c      ****  *
7614:bma2x2.c      ****  *
7615:bma2x2.c      ****  *	@return results of bus communication function
7616:bma2x2.c      ****  *	@retval 0 -> Success
7617:bma2x2.c      ****  *	@retval -1 -> Error
7618:bma2x2.c      ****  *
7619:bma2x2.c      ****  *
7620:bma2x2.c      ****  */
7621:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_slow_comp(u8 channel_u8,
7622:bma2x2.c      **** u8 slow_comp_u8)
7623:bma2x2.c      **** {
 18597              		.loc 1 7623 0
 18598              		.cfi_startproc
 18599              		@ args = 0, pretend = 0, frame = 16
 18600              		@ frame_needed = 1, uses_anonymous_args = 0
 18601 0000 B0B5     		push	{r4, r5, r7, lr}
 18602              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 464


 18603              		.cfi_offset 4, -16
 18604              		.cfi_offset 5, -12
 18605              		.cfi_offset 7, -8
 18606              		.cfi_offset 14, -4
 18607 0002 84B0     		sub	sp, sp, #16
 18608              		.cfi_def_cfa_offset 32
 18609 0004 00AF     		add	r7, sp, #0
 18610              		.cfi_def_cfa_register 7
 18611 0006 0200     		movs	r2, r0
 18612 0008 FB1D     		adds	r3, r7, #7
 18613 000a 1A70     		strb	r2, [r3]
 18614 000c BB1D     		adds	r3, r7, #6
 18615 000e 0A1C     		adds	r2, r1, #0
 18616 0010 1A70     		strb	r2, [r3]
7624:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 18617              		.loc 1 7624 0
 18618 0012 0E23     		movs	r3, #14
 18619 0014 FB18     		adds	r3, r7, r3
 18620 0016 0022     		movs	r2, #0
 18621 0018 1A70     		strb	r2, [r3]
7625:bma2x2.c      **** 		/*  Variable used to return value of
7626:bma2x2.c      **** 	communication routine*/
7627:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 18622              		.loc 1 7627 0
 18623 001a 0F23     		movs	r3, #15
 18624 001c FB18     		adds	r3, r7, r3
 18625 001e FF22     		movs	r2, #255
 18626 0020 1A70     		strb	r2, [r3]
7628:bma2x2.c      **** 
7629:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 18627              		.loc 1 7629 0
 18628 0022 5D4B     		ldr	r3, .L1126
 18629 0024 1B68     		ldr	r3, [r3]
 18630 0026 002B     		cmp	r3, #0
 18631 0028 02D1     		bne	.L1117
7630:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
7631:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 18632              		.loc 1 7631 0
 18633 002a 7F23     		movs	r3, #127
 18634 002c 5B42     		rsbs	r3, r3, #0
 18635 002e AFE0     		b	.L1124
 18636              	.L1117:
7632:bma2x2.c      **** 		} else {
7633:bma2x2.c      **** 		switch (channel_u8) {
 18637              		.loc 1 7633 0
 18638 0030 FB1D     		adds	r3, r7, #7
 18639 0032 1B78     		ldrb	r3, [r3]
 18640 0034 012B     		cmp	r3, #1
 18641 0036 38D0     		beq	.L1120
 18642 0038 022B     		cmp	r3, #2
 18643 003a 6BD0     		beq	.L1121
 18644 003c 002B     		cmp	r3, #0
 18645 003e 00D0     		beq	.LCB17462
 18646 0040 9DE0     		b	.L1125	@long jump
 18647              	.LCB17462:
7634:bma2x2.c      **** 		case BMA2x2_SLOW_COMP_X:
7635:bma2x2.c      **** 			/*SLOW COMP X*/
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 465


7636:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 18648              		.loc 1 7636 0
 18649 0042 554B     		ldr	r3, .L1126
 18650 0044 1B68     		ldr	r3, [r3]
 18651 0046 DD68     		ldr	r5, [r3, #12]
 18652 0048 534B     		ldr	r3, .L1126
 18653 004a 1B68     		ldr	r3, [r3]
 18654 004c 1879     		ldrb	r0, [r3, #4]
 18655 004e 0F23     		movs	r3, #15
 18656 0050 FC18     		adds	r4, r7, r3
 18657 0052 0E23     		movs	r3, #14
 18658 0054 FA18     		adds	r2, r7, r3
 18659 0056 0123     		movs	r3, #1
 18660 0058 3621     		movs	r1, #54
 18661 005a A847     		blx	r5
 18662 005c 0300     		movs	r3, r0
 18663 005e 2370     		strb	r3, [r4]
7637:bma2x2.c      **** 			(p_bma2x2->dev_addr,
7638:bma2x2.c      **** 			BMA2x2_ENABLE_SLOW_COMP_X_REG,
7639:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7640:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 18664              		.loc 1 7640 0
 18665 0060 0E23     		movs	r3, #14
 18666 0062 FB18     		adds	r3, r7, r3
 18667 0064 1B78     		ldrb	r3, [r3]
 18668 0066 5BB2     		sxtb	r3, r3
 18669 0068 0122     		movs	r2, #1
 18670 006a 9343     		bics	r3, r2
 18671 006c 5AB2     		sxtb	r2, r3
 18672 006e BB1D     		adds	r3, r7, #6
 18673 0070 1B78     		ldrb	r3, [r3]
 18674 0072 5BB2     		sxtb	r3, r3
 18675 0074 0121     		movs	r1, #1
 18676 0076 0B40     		ands	r3, r1
 18677 0078 5BB2     		sxtb	r3, r3
 18678 007a 1343     		orrs	r3, r2
 18679 007c 5BB2     		sxtb	r3, r3
 18680 007e DAB2     		uxtb	r2, r3
 18681 0080 0E23     		movs	r3, #14
 18682 0082 FB18     		adds	r3, r7, r3
 18683 0084 1A70     		strb	r2, [r3]
7641:bma2x2.c      **** 			(data_u8,
7642:bma2x2.c      **** 			BMA2x2_ENABLE_SLOW_COMP_X, slow_comp_u8);
7643:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 18684              		.loc 1 7643 0
 18685 0086 0E23     		movs	r3, #14
 18686 0088 FB18     		adds	r3, r7, r3
 18687 008a 0122     		movs	r2, #1
 18688 008c 1900     		movs	r1, r3
 18689 008e 3620     		movs	r0, #54
 18690 0090 FFF7FEFF 		bl	bma2x2_write_reg
 18691 0094 0300     		movs	r3, r0
 18692 0096 DAB2     		uxtb	r2, r3
 18693 0098 0F23     		movs	r3, #15
 18694 009a FB18     		adds	r3, r7, r3
 18695 009c 1B78     		ldrb	r3, [r3]
 18696 009e D318     		adds	r3, r2, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 466


 18697 00a0 DAB2     		uxtb	r2, r3
 18698 00a2 0F23     		movs	r3, #15
 18699 00a4 FB18     		adds	r3, r7, r3
 18700 00a6 1A70     		strb	r2, [r3]
7644:bma2x2.c      **** 			BMA2x2_ENABLE_SLOW_COMP_X_REG,
7645:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7646:bma2x2.c      **** 		break;
 18701              		.loc 1 7646 0
 18702 00a8 6EE0     		b	.L1123
 18703              	.L1120:
7647:bma2x2.c      **** 		case BMA2x2_SLOW_COMP_Y:
7648:bma2x2.c      **** 			/*SLOW COMP Y*/
7649:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 18704              		.loc 1 7649 0
 18705 00aa 3B4B     		ldr	r3, .L1126
 18706 00ac 1B68     		ldr	r3, [r3]
 18707 00ae DD68     		ldr	r5, [r3, #12]
 18708 00b0 394B     		ldr	r3, .L1126
 18709 00b2 1B68     		ldr	r3, [r3]
 18710 00b4 1879     		ldrb	r0, [r3, #4]
 18711 00b6 0F23     		movs	r3, #15
 18712 00b8 FC18     		adds	r4, r7, r3
 18713 00ba 0E23     		movs	r3, #14
 18714 00bc FA18     		adds	r2, r7, r3
 18715 00be 0123     		movs	r3, #1
 18716 00c0 3621     		movs	r1, #54
 18717 00c2 A847     		blx	r5
 18718 00c4 0300     		movs	r3, r0
 18719 00c6 2370     		strb	r3, [r4]
7650:bma2x2.c      **** 			(p_bma2x2->dev_addr,
7651:bma2x2.c      **** 			BMA2x2_ENABLE_SLOW_COMP_Y_REG,
7652:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7653:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 18720              		.loc 1 7653 0
 18721 00c8 0E23     		movs	r3, #14
 18722 00ca FB18     		adds	r3, r7, r3
 18723 00cc 1B78     		ldrb	r3, [r3]
 18724 00ce 5BB2     		sxtb	r3, r3
 18725 00d0 0222     		movs	r2, #2
 18726 00d2 9343     		bics	r3, r2
 18727 00d4 5AB2     		sxtb	r2, r3
 18728 00d6 BB1D     		adds	r3, r7, #6
 18729 00d8 1B78     		ldrb	r3, [r3]
 18730 00da 5B00     		lsls	r3, r3, #1
 18731 00dc 5BB2     		sxtb	r3, r3
 18732 00de 0221     		movs	r1, #2
 18733 00e0 0B40     		ands	r3, r1
 18734 00e2 5BB2     		sxtb	r3, r3
 18735 00e4 1343     		orrs	r3, r2
 18736 00e6 5BB2     		sxtb	r3, r3
 18737 00e8 DAB2     		uxtb	r2, r3
 18738 00ea 0E23     		movs	r3, #14
 18739 00ec FB18     		adds	r3, r7, r3
 18740 00ee 1A70     		strb	r2, [r3]
7654:bma2x2.c      **** 			(data_u8,
7655:bma2x2.c      **** 			BMA2x2_ENABLE_SLOW_COMP_Y, slow_comp_u8);
7656:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 467


 18741              		.loc 1 7656 0
 18742 00f0 0E23     		movs	r3, #14
 18743 00f2 FB18     		adds	r3, r7, r3
 18744 00f4 0122     		movs	r2, #1
 18745 00f6 1900     		movs	r1, r3
 18746 00f8 3620     		movs	r0, #54
 18747 00fa FFF7FEFF 		bl	bma2x2_write_reg
 18748 00fe 0300     		movs	r3, r0
 18749 0100 DAB2     		uxtb	r2, r3
 18750 0102 0F23     		movs	r3, #15
 18751 0104 FB18     		adds	r3, r7, r3
 18752 0106 1B78     		ldrb	r3, [r3]
 18753 0108 D318     		adds	r3, r2, r3
 18754 010a DAB2     		uxtb	r2, r3
 18755 010c 0F23     		movs	r3, #15
 18756 010e FB18     		adds	r3, r7, r3
 18757 0110 1A70     		strb	r2, [r3]
7657:bma2x2.c      **** 			BMA2x2_ENABLE_SLOW_COMP_Y_REG,
7658:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7659:bma2x2.c      **** 		break;
 18758              		.loc 1 7659 0
 18759 0112 39E0     		b	.L1123
 18760              	.L1121:
7660:bma2x2.c      **** 		case BMA2x2_SLOW_COMP_Z:
7661:bma2x2.c      **** 			/*SLOW COMP Z*/
7662:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 18761              		.loc 1 7662 0
 18762 0114 204B     		ldr	r3, .L1126
 18763 0116 1B68     		ldr	r3, [r3]
 18764 0118 DD68     		ldr	r5, [r3, #12]
 18765 011a 1F4B     		ldr	r3, .L1126
 18766 011c 1B68     		ldr	r3, [r3]
 18767 011e 1879     		ldrb	r0, [r3, #4]
 18768 0120 0F23     		movs	r3, #15
 18769 0122 FC18     		adds	r4, r7, r3
 18770 0124 0E23     		movs	r3, #14
 18771 0126 FA18     		adds	r2, r7, r3
 18772 0128 0123     		movs	r3, #1
 18773 012a 3621     		movs	r1, #54
 18774 012c A847     		blx	r5
 18775 012e 0300     		movs	r3, r0
 18776 0130 2370     		strb	r3, [r4]
7663:bma2x2.c      **** 			(p_bma2x2->dev_addr,
7664:bma2x2.c      **** 			BMA2x2_ENABLE_SLOW_COMP_Z_REG,
7665:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7666:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 18777              		.loc 1 7666 0
 18778 0132 0E23     		movs	r3, #14
 18779 0134 FB18     		adds	r3, r7, r3
 18780 0136 1B78     		ldrb	r3, [r3]
 18781 0138 5BB2     		sxtb	r3, r3
 18782 013a 0422     		movs	r2, #4
 18783 013c 9343     		bics	r3, r2
 18784 013e 5AB2     		sxtb	r2, r3
 18785 0140 BB1D     		adds	r3, r7, #6
 18786 0142 1B78     		ldrb	r3, [r3]
 18787 0144 9B00     		lsls	r3, r3, #2
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 468


 18788 0146 5BB2     		sxtb	r3, r3
 18789 0148 0421     		movs	r1, #4
 18790 014a 0B40     		ands	r3, r1
 18791 014c 5BB2     		sxtb	r3, r3
 18792 014e 1343     		orrs	r3, r2
 18793 0150 5BB2     		sxtb	r3, r3
 18794 0152 DAB2     		uxtb	r2, r3
 18795 0154 0E23     		movs	r3, #14
 18796 0156 FB18     		adds	r3, r7, r3
 18797 0158 1A70     		strb	r2, [r3]
7667:bma2x2.c      **** 			(data_u8,
7668:bma2x2.c      **** 			BMA2x2_ENABLE_SLOW_COMP_Z, slow_comp_u8);
7669:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 18798              		.loc 1 7669 0
 18799 015a 0E23     		movs	r3, #14
 18800 015c FB18     		adds	r3, r7, r3
 18801 015e 0122     		movs	r2, #1
 18802 0160 1900     		movs	r1, r3
 18803 0162 3620     		movs	r0, #54
 18804 0164 FFF7FEFF 		bl	bma2x2_write_reg
 18805 0168 0300     		movs	r3, r0
 18806 016a DAB2     		uxtb	r2, r3
 18807 016c 0F23     		movs	r3, #15
 18808 016e FB18     		adds	r3, r7, r3
 18809 0170 1B78     		ldrb	r3, [r3]
 18810 0172 D318     		adds	r3, r2, r3
 18811 0174 DAB2     		uxtb	r2, r3
 18812 0176 0F23     		movs	r3, #15
 18813 0178 FB18     		adds	r3, r7, r3
 18814 017a 1A70     		strb	r2, [r3]
7670:bma2x2.c      **** 			BMA2x2_ENABLE_SLOW_COMP_Z_REG,
7671:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7672:bma2x2.c      **** 		break;
 18815              		.loc 1 7672 0
 18816 017c 04E0     		b	.L1123
 18817              	.L1125:
7673:bma2x2.c      **** 		default:
7674:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 18818              		.loc 1 7674 0
 18819 017e 0F23     		movs	r3, #15
 18820 0180 FB18     		adds	r3, r7, r3
 18821 0182 FE22     		movs	r2, #254
 18822 0184 1A70     		strb	r2, [r3]
7675:bma2x2.c      **** 		break;
 18823              		.loc 1 7675 0
 18824 0186 C046     		nop
 18825              	.L1123:
7676:bma2x2.c      **** 		}
7677:bma2x2.c      **** 	}
7678:bma2x2.c      **** 	return com_rslt;
 18826              		.loc 1 7678 0
 18827 0188 0F23     		movs	r3, #15
 18828 018a FB18     		adds	r3, r7, r3
 18829 018c 1B78     		ldrb	r3, [r3]
 18830 018e 5BB2     		sxtb	r3, r3
 18831              	.L1124:
7679:bma2x2.c      **** }
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 469


 18832              		.loc 1 7679 0 discriminator 1
 18833 0190 1800     		movs	r0, r3
 18834 0192 BD46     		mov	sp, r7
 18835 0194 04B0     		add	sp, sp, #16
 18836              		@ sp needed
 18837 0196 B0BD     		pop	{r4, r5, r7, pc}
 18838              	.L1127:
 18839              		.align	2
 18840              	.L1126:
 18841 0198 00000000 		.word	p_bma2x2
 18842              		.cfi_endproc
 18843              	.LFE126:
 18844              		.size	bma2x2_set_slow_comp, .-bma2x2_set_slow_comp
 18845              		.section	.text.bma2x2_get_cal_rdy,"ax",%progbits
 18846              		.align	2
 18847              		.global	bma2x2_get_cal_rdy
 18848              		.code	16
 18849              		.thumb_func
 18850              		.type	bma2x2_get_cal_rdy, %function
 18851              	bma2x2_get_cal_rdy:
 18852              	.LFB127:
7680:bma2x2.c      **** /*!
7681:bma2x2.c      ****  *	@brief This API is used to get
7682:bma2x2.c      ****  *	the status of fast offset compensation(cal_rdy) in the register 0x36
7683:bma2x2.c      ****  *	bit 4(Read Only Possible)
7684:bma2x2.c      ****  *
7685:bma2x2.c      ****  *
7686:bma2x2.c      ****  *
7687:bma2x2.c      ****  *  @param  cal_rdy_u8: The value of cal_ready
7688:bma2x2.c      ****  *
7689:bma2x2.c      ****  *
7690:bma2x2.c      ****  *
7691:bma2x2.c      ****  *
7692:bma2x2.c      ****  *	@return results of bus communication function
7693:bma2x2.c      ****  *	@retval 0 -> Success
7694:bma2x2.c      ****  *	@retval -1 -> Error
7695:bma2x2.c      ****  *
7696:bma2x2.c      ****  *
7697:bma2x2.c      ****  */
7698:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_cal_rdy(u8 *cal_rdy_u8)
7699:bma2x2.c      **** {
 18853              		.loc 1 7699 0
 18854              		.cfi_startproc
 18855              		@ args = 0, pretend = 0, frame = 16
 18856              		@ frame_needed = 1, uses_anonymous_args = 0
 18857 0000 B0B5     		push	{r4, r5, r7, lr}
 18858              		.cfi_def_cfa_offset 16
 18859              		.cfi_offset 4, -16
 18860              		.cfi_offset 5, -12
 18861              		.cfi_offset 7, -8
 18862              		.cfi_offset 14, -4
 18863 0002 84B0     		sub	sp, sp, #16
 18864              		.cfi_def_cfa_offset 32
 18865 0004 00AF     		add	r7, sp, #0
 18866              		.cfi_def_cfa_register 7
 18867 0006 7860     		str	r0, [r7, #4]
7700:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 470


 18868              		.loc 1 7700 0
 18869 0008 0E23     		movs	r3, #14
 18870 000a FB18     		adds	r3, r7, r3
 18871 000c 0022     		movs	r2, #0
 18872 000e 1A70     		strb	r2, [r3]
7701:bma2x2.c      **** 	/*  Variable used to return value of
7702:bma2x2.c      **** 	communication routine*/
7703:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 18873              		.loc 1 7703 0
 18874 0010 0F23     		movs	r3, #15
 18875 0012 FB18     		adds	r3, r7, r3
 18876 0014 FF22     		movs	r2, #255
 18877 0016 1A70     		strb	r2, [r3]
7704:bma2x2.c      **** 
7705:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 18878              		.loc 1 7705 0
 18879 0018 134B     		ldr	r3, .L1132
 18880 001a 1B68     		ldr	r3, [r3]
 18881 001c 002B     		cmp	r3, #0
 18882 001e 02D1     		bne	.L1129
7706:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
7707:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 18883              		.loc 1 7707 0
 18884 0020 7F23     		movs	r3, #127
 18885 0022 5B42     		rsbs	r3, r3, #0
 18886 0024 1CE0     		b	.L1131
 18887              	.L1129:
7708:bma2x2.c      **** 		} else {
7709:bma2x2.c      **** 		com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 18888              		.loc 1 7709 0
 18889 0026 104B     		ldr	r3, .L1132
 18890 0028 1B68     		ldr	r3, [r3]
 18891 002a DD68     		ldr	r5, [r3, #12]
 18892 002c 0E4B     		ldr	r3, .L1132
 18893 002e 1B68     		ldr	r3, [r3]
 18894 0030 1879     		ldrb	r0, [r3, #4]
 18895 0032 0F23     		movs	r3, #15
 18896 0034 FC18     		adds	r4, r7, r3
 18897 0036 0E23     		movs	r3, #14
 18898 0038 FA18     		adds	r2, r7, r3
 18899 003a 0123     		movs	r3, #1
 18900 003c 3621     		movs	r1, #54
 18901 003e A847     		blx	r5
 18902 0040 0300     		movs	r3, r0
 18903 0042 2370     		strb	r3, [r4]
7710:bma2x2.c      **** 		(p_bma2x2->dev_addr,
7711:bma2x2.c      **** 		BMA2x2_FAST_CAL_RDY_STAT_REG,
7712:bma2x2.c      **** 		&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7713:bma2x2.c      **** 		*cal_rdy_u8 = BMA2x2_GET_BITSLICE(data_u8,
 18904              		.loc 1 7713 0
 18905 0044 0E23     		movs	r3, #14
 18906 0046 FB18     		adds	r3, r7, r3
 18907 0048 1B78     		ldrb	r3, [r3]
 18908 004a 1B11     		asrs	r3, r3, #4
 18909 004c DBB2     		uxtb	r3, r3
 18910 004e 0122     		movs	r2, #1
 18911 0050 1340     		ands	r3, r2
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 471


 18912 0052 DAB2     		uxtb	r2, r3
 18913 0054 7B68     		ldr	r3, [r7, #4]
 18914 0056 1A70     		strb	r2, [r3]
7714:bma2x2.c      **** 		BMA2x2_FAST_CAL_RDY_STAT);
7715:bma2x2.c      **** 	}
7716:bma2x2.c      **** 	return com_rslt;
 18915              		.loc 1 7716 0
 18916 0058 0F23     		movs	r3, #15
 18917 005a FB18     		adds	r3, r7, r3
 18918 005c 1B78     		ldrb	r3, [r3]
 18919 005e 5BB2     		sxtb	r3, r3
 18920              	.L1131:
7717:bma2x2.c      **** }
 18921              		.loc 1 7717 0 discriminator 1
 18922 0060 1800     		movs	r0, r3
 18923 0062 BD46     		mov	sp, r7
 18924 0064 04B0     		add	sp, sp, #16
 18925              		@ sp needed
 18926 0066 B0BD     		pop	{r4, r5, r7, pc}
 18927              	.L1133:
 18928              		.align	2
 18929              	.L1132:
 18930 0068 00000000 		.word	p_bma2x2
 18931              		.cfi_endproc
 18932              	.LFE127:
 18933              		.size	bma2x2_get_cal_rdy, .-bma2x2_get_cal_rdy
 18934              		.section	.text.bma2x2_set_cal_trigger,"ax",%progbits
 18935              		.align	2
 18936              		.global	bma2x2_set_cal_trigger
 18937              		.code	16
 18938              		.thumb_func
 18939              		.type	bma2x2_set_cal_trigger, %function
 18940              	bma2x2_set_cal_trigger:
 18941              	.LFB128:
7718:bma2x2.c      **** /*!
7719:bma2x2.c      ****  *	@brief This API is used to set
7720:bma2x2.c      ****  *	the status of fast offset compensation(cal_rdy) in the register 0x36
7721:bma2x2.c      ****  *	bit 4(Read Only Possible)
7722:bma2x2.c      ****  *
7723:bma2x2.c      ****  *
7724:bma2x2.c      ****  *
7725:bma2x2.c      ****  *  @param  cal_trigger_u8: The value of cal_ready
7726:bma2x2.c      ****  *
7727:bma2x2.c      ****  *
7728:bma2x2.c      ****  *
7729:bma2x2.c      ****  *
7730:bma2x2.c      ****  *	@return results of bus communication function
7731:bma2x2.c      ****  *	@retval 0 -> Success
7732:bma2x2.c      ****  *	@retval -1 -> Error
7733:bma2x2.c      ****  *
7734:bma2x2.c      ****  *
7735:bma2x2.c      ****  */
7736:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_cal_trigger(u8 cal_trigger_u8)
7737:bma2x2.c      **** {
 18942              		.loc 1 7737 0
 18943              		.cfi_startproc
 18944              		@ args = 0, pretend = 0, frame = 16
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 472


 18945              		@ frame_needed = 1, uses_anonymous_args = 0
 18946 0000 B0B5     		push	{r4, r5, r7, lr}
 18947              		.cfi_def_cfa_offset 16
 18948              		.cfi_offset 4, -16
 18949              		.cfi_offset 5, -12
 18950              		.cfi_offset 7, -8
 18951              		.cfi_offset 14, -4
 18952 0002 84B0     		sub	sp, sp, #16
 18953              		.cfi_def_cfa_offset 32
 18954 0004 00AF     		add	r7, sp, #0
 18955              		.cfi_def_cfa_register 7
 18956 0006 0200     		movs	r2, r0
 18957 0008 FB1D     		adds	r3, r7, #7
 18958 000a 1A70     		strb	r2, [r3]
7738:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 18959              		.loc 1 7738 0
 18960 000c 0E23     		movs	r3, #14
 18961 000e FB18     		adds	r3, r7, r3
 18962 0010 0022     		movs	r2, #0
 18963 0012 1A70     		strb	r2, [r3]
7739:bma2x2.c      **** 	/*  Variable used to return value of
7740:bma2x2.c      **** 	communication routine*/
7741:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 18964              		.loc 1 7741 0
 18965 0014 0F23     		movs	r3, #15
 18966 0016 FB18     		adds	r3, r7, r3
 18967 0018 FF22     		movs	r2, #255
 18968 001a 1A70     		strb	r2, [r3]
7742:bma2x2.c      **** 
7743:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 18969              		.loc 1 7743 0
 18970 001c 214B     		ldr	r3, .L1138
 18971 001e 1B68     		ldr	r3, [r3]
 18972 0020 002B     		cmp	r3, #0
 18973 0022 02D1     		bne	.L1135
7744:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
7745:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 18974              		.loc 1 7745 0
 18975 0024 7F23     		movs	r3, #127
 18976 0026 5B42     		rsbs	r3, r3, #0
 18977 0028 37E0     		b	.L1137
 18978              	.L1135:
7746:bma2x2.c      **** 		} else {
7747:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 18979              		.loc 1 7747 0
 18980 002a 1E4B     		ldr	r3, .L1138
 18981 002c 1B68     		ldr	r3, [r3]
 18982 002e DD68     		ldr	r5, [r3, #12]
 18983 0030 1C4B     		ldr	r3, .L1138
 18984 0032 1B68     		ldr	r3, [r3]
 18985 0034 1879     		ldrb	r0, [r3, #4]
 18986 0036 0F23     		movs	r3, #15
 18987 0038 FC18     		adds	r4, r7, r3
 18988 003a 0E23     		movs	r3, #14
 18989 003c FA18     		adds	r2, r7, r3
 18990 003e 0123     		movs	r3, #1
 18991 0040 3621     		movs	r1, #54
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 473


 18992 0042 A847     		blx	r5
 18993 0044 0300     		movs	r3, r0
 18994 0046 2370     		strb	r3, [r4]
7748:bma2x2.c      **** 			(p_bma2x2->dev_addr,
7749:bma2x2.c      **** 			BMA2x2_CAL_TRIGGER_REG, &data_u8,
7750:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
7751:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE(data_u8,
 18995              		.loc 1 7751 0
 18996 0048 0E23     		movs	r3, #14
 18997 004a FB18     		adds	r3, r7, r3
 18998 004c 1B78     		ldrb	r3, [r3]
 18999 004e 5BB2     		sxtb	r3, r3
 19000 0050 6022     		movs	r2, #96
 19001 0052 9343     		bics	r3, r2
 19002 0054 5AB2     		sxtb	r2, r3
 19003 0056 FB1D     		adds	r3, r7, #7
 19004 0058 1B78     		ldrb	r3, [r3]
 19005 005a 5B01     		lsls	r3, r3, #5
 19006 005c 5BB2     		sxtb	r3, r3
 19007 005e 6021     		movs	r1, #96
 19008 0060 0B40     		ands	r3, r1
 19009 0062 5BB2     		sxtb	r3, r3
 19010 0064 1343     		orrs	r3, r2
 19011 0066 5BB2     		sxtb	r3, r3
 19012 0068 DAB2     		uxtb	r2, r3
 19013 006a 0E23     		movs	r3, #14
 19014 006c FB18     		adds	r3, r7, r3
 19015 006e 1A70     		strb	r2, [r3]
7752:bma2x2.c      **** 			BMA2x2_CAL_TRIGGER, cal_trigger_u8);
7753:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 19016              		.loc 1 7753 0
 19017 0070 0E23     		movs	r3, #14
 19018 0072 FB18     		adds	r3, r7, r3
 19019 0074 0122     		movs	r2, #1
 19020 0076 1900     		movs	r1, r3
 19021 0078 3620     		movs	r0, #54
 19022 007a FFF7FEFF 		bl	bma2x2_write_reg
 19023 007e 0300     		movs	r3, r0
 19024 0080 DAB2     		uxtb	r2, r3
 19025 0082 0F23     		movs	r3, #15
 19026 0084 FB18     		adds	r3, r7, r3
 19027 0086 1B78     		ldrb	r3, [r3]
 19028 0088 D318     		adds	r3, r2, r3
 19029 008a DAB2     		uxtb	r2, r3
 19030 008c 0F23     		movs	r3, #15
 19031 008e FB18     		adds	r3, r7, r3
 19032 0090 1A70     		strb	r2, [r3]
7754:bma2x2.c      **** 			BMA2x2_CAL_TRIGGER_REG,
7755:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7756:bma2x2.c      **** 		}
7757:bma2x2.c      **** 	return com_rslt;
 19033              		.loc 1 7757 0
 19034 0092 0F23     		movs	r3, #15
 19035 0094 FB18     		adds	r3, r7, r3
 19036 0096 1B78     		ldrb	r3, [r3]
 19037 0098 5BB2     		sxtb	r3, r3
 19038              	.L1137:
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 474


7758:bma2x2.c      **** }
 19039              		.loc 1 7758 0 discriminator 1
 19040 009a 1800     		movs	r0, r3
 19041 009c BD46     		mov	sp, r7
 19042 009e 04B0     		add	sp, sp, #16
 19043              		@ sp needed
 19044 00a0 B0BD     		pop	{r4, r5, r7, pc}
 19045              	.L1139:
 19046 00a2 C046     		.align	2
 19047              	.L1138:
 19048 00a4 00000000 		.word	p_bma2x2
 19049              		.cfi_endproc
 19050              	.LFE128:
 19051              		.size	bma2x2_set_cal_trigger, .-bma2x2_set_cal_trigger
 19052              		.section	.text.bma2x2_set_offset_rst,"ax",%progbits
 19053              		.align	2
 19054              		.global	bma2x2_set_offset_rst
 19055              		.code	16
 19056              		.thumb_func
 19057              		.type	bma2x2_set_offset_rst, %function
 19058              	bma2x2_set_offset_rst:
 19059              	.LFB129:
7759:bma2x2.c      **** /*!
7760:bma2x2.c      ****  *	@brief This API is used to set
7761:bma2x2.c      ****  *	the offset reset(offset_reset) in the register 0x36
7762:bma2x2.c      ****  *	bit 7(Write only possible)
7763:bma2x2.c      ****  *
7764:bma2x2.c      ****  *
7765:bma2x2.c      ****  *
7766:bma2x2.c      ****  *  @param  offset_rst_u8: The offset reset value
7767:bma2x2.c      ****  *
7768:bma2x2.c      ****  *
7769:bma2x2.c      ****  *
7770:bma2x2.c      ****  *	@return results of bus communication function
7771:bma2x2.c      ****  *	@retval 0 -> Success
7772:bma2x2.c      ****  *	@retval -1 -> Error
7773:bma2x2.c      ****  *
7774:bma2x2.c      ****  *
7775:bma2x2.c      ****  */
7776:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_offset_rst(u8 offset_rst_u8)
7777:bma2x2.c      **** {
 19060              		.loc 1 7777 0
 19061              		.cfi_startproc
 19062              		@ args = 0, pretend = 0, frame = 16
 19063              		@ frame_needed = 1, uses_anonymous_args = 0
 19064 0000 B0B5     		push	{r4, r5, r7, lr}
 19065              		.cfi_def_cfa_offset 16
 19066              		.cfi_offset 4, -16
 19067              		.cfi_offset 5, -12
 19068              		.cfi_offset 7, -8
 19069              		.cfi_offset 14, -4
 19070 0002 84B0     		sub	sp, sp, #16
 19071              		.cfi_def_cfa_offset 32
 19072 0004 00AF     		add	r7, sp, #0
 19073              		.cfi_def_cfa_register 7
 19074 0006 0200     		movs	r2, r0
 19075 0008 FB1D     		adds	r3, r7, #7
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 475


 19076 000a 1A70     		strb	r2, [r3]
7778:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 19077              		.loc 1 7778 0
 19078 000c 0E23     		movs	r3, #14
 19079 000e FB18     		adds	r3, r7, r3
 19080 0010 0022     		movs	r2, #0
 19081 0012 1A70     		strb	r2, [r3]
7779:bma2x2.c      **** 	/*  Variable used to return value of
7780:bma2x2.c      **** 	communication routine*/
7781:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 19082              		.loc 1 7781 0
 19083 0014 0F23     		movs	r3, #15
 19084 0016 FB18     		adds	r3, r7, r3
 19085 0018 FF22     		movs	r2, #255
 19086 001a 1A70     		strb	r2, [r3]
7782:bma2x2.c      **** 
7783:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 19087              		.loc 1 7783 0
 19088 001c 1F4B     		ldr	r3, .L1144
 19089 001e 1B68     		ldr	r3, [r3]
 19090 0020 002B     		cmp	r3, #0
 19091 0022 02D1     		bne	.L1141
7784:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
7785:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 19092              		.loc 1 7785 0
 19093 0024 7F23     		movs	r3, #127
 19094 0026 5B42     		rsbs	r3, r3, #0
 19095 0028 34E0     		b	.L1143
 19096              	.L1141:
7786:bma2x2.c      **** 		} else {
7787:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 19097              		.loc 1 7787 0
 19098 002a 1C4B     		ldr	r3, .L1144
 19099 002c 1B68     		ldr	r3, [r3]
 19100 002e DD68     		ldr	r5, [r3, #12]
 19101 0030 1A4B     		ldr	r3, .L1144
 19102 0032 1B68     		ldr	r3, [r3]
 19103 0034 1879     		ldrb	r0, [r3, #4]
 19104 0036 0F23     		movs	r3, #15
 19105 0038 FC18     		adds	r4, r7, r3
 19106 003a 0E23     		movs	r3, #14
 19107 003c FA18     		adds	r2, r7, r3
 19108 003e 0123     		movs	r3, #1
 19109 0040 3621     		movs	r1, #54
 19110 0042 A847     		blx	r5
 19111 0044 0300     		movs	r3, r0
 19112 0046 2370     		strb	r3, [r4]
7788:bma2x2.c      **** 			(p_bma2x2->dev_addr,
7789:bma2x2.c      **** 			BMA2x2_RST_OFFSET_REG,
7790:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7791:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 19113              		.loc 1 7791 0
 19114 0048 0E23     		movs	r3, #14
 19115 004a FB18     		adds	r3, r7, r3
 19116 004c 1B78     		ldrb	r3, [r3]
 19117 004e 5BB2     		sxtb	r3, r3
 19118 0050 7F22     		movs	r2, #127
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 476


 19119 0052 1340     		ands	r3, r2
 19120 0054 5AB2     		sxtb	r2, r3
 19121 0056 FB1D     		adds	r3, r7, #7
 19122 0058 1B78     		ldrb	r3, [r3]
 19123 005a DB01     		lsls	r3, r3, #7
 19124 005c 5BB2     		sxtb	r3, r3
 19125 005e 1343     		orrs	r3, r2
 19126 0060 5BB2     		sxtb	r3, r3
 19127 0062 DAB2     		uxtb	r2, r3
 19128 0064 0E23     		movs	r3, #14
 19129 0066 FB18     		adds	r3, r7, r3
 19130 0068 1A70     		strb	r2, [r3]
7792:bma2x2.c      **** 			(data_u8, BMA2x2_RST_OFFSET,
7793:bma2x2.c      **** 			offset_rst_u8);
7794:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 19131              		.loc 1 7794 0
 19132 006a 0E23     		movs	r3, #14
 19133 006c FB18     		adds	r3, r7, r3
 19134 006e 0122     		movs	r2, #1
 19135 0070 1900     		movs	r1, r3
 19136 0072 3620     		movs	r0, #54
 19137 0074 FFF7FEFF 		bl	bma2x2_write_reg
 19138 0078 0300     		movs	r3, r0
 19139 007a DAB2     		uxtb	r2, r3
 19140 007c 0F23     		movs	r3, #15
 19141 007e FB18     		adds	r3, r7, r3
 19142 0080 1B78     		ldrb	r3, [r3]
 19143 0082 D318     		adds	r3, r2, r3
 19144 0084 DAB2     		uxtb	r2, r3
 19145 0086 0F23     		movs	r3, #15
 19146 0088 FB18     		adds	r3, r7, r3
 19147 008a 1A70     		strb	r2, [r3]
7795:bma2x2.c      **** 			BMA2x2_RST_OFFSET_REG,
7796:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7797:bma2x2.c      **** 		}
7798:bma2x2.c      **** 	return com_rslt;
 19148              		.loc 1 7798 0
 19149 008c 0F23     		movs	r3, #15
 19150 008e FB18     		adds	r3, r7, r3
 19151 0090 1B78     		ldrb	r3, [r3]
 19152 0092 5BB2     		sxtb	r3, r3
 19153              	.L1143:
7799:bma2x2.c      **** }
 19154              		.loc 1 7799 0 discriminator 1
 19155 0094 1800     		movs	r0, r3
 19156 0096 BD46     		mov	sp, r7
 19157 0098 04B0     		add	sp, sp, #16
 19158              		@ sp needed
 19159 009a B0BD     		pop	{r4, r5, r7, pc}
 19160              	.L1145:
 19161              		.align	2
 19162              	.L1144:
 19163 009c 00000000 		.word	p_bma2x2
 19164              		.cfi_endproc
 19165              	.LFE129:
 19166              		.size	bma2x2_set_offset_rst, .-bma2x2_set_offset_rst
 19167              		.section	.text.bma2x2_get_offset_target,"ax",%progbits
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 477


 19168              		.align	2
 19169              		.global	bma2x2_get_offset_target
 19170              		.code	16
 19171              		.thumb_func
 19172              		.type	bma2x2_get_offset_target, %function
 19173              	bma2x2_get_offset_target:
 19174              	.LFB130:
7800:bma2x2.c      **** /*!
7801:bma2x2.c      ****  *	@brief This API is used to get
7802:bma2x2.c      ****  *	the status of offset target axis(offset_target_x, offset_target_y and
7803:bma2x2.c      ****  *	offset_target_z) and cut_off in the register 0x37
7804:bma2x2.c      ****  *	@note CUT_OFF -> bit 0
7805:bma2x2.c      ****  *	@note OFFSET_TRIGGER_X -> bit 1 and 2
7806:bma2x2.c      ****  *	@note OFFSET_TRIGGER_Y -> bit 3 and 4
7807:bma2x2.c      ****  *	@note OFFSET_TRIGGER_Z -> bit 5 and 6
7808:bma2x2.c      ****  *
7809:bma2x2.c      ****  *
7810:bma2x2.c      ****  *  @param channel_u8: The value of offset axis selection
7811:bma2x2.c      ****  *     channel_u8           |    result
7812:bma2x2.c      ****  *  ------------------------- |------------------
7813:bma2x2.c      ****  *        0                   |   BMA2x2_ACCEL_CUT_OFF
7814:bma2x2.c      ****  *        1                   |   BMA2x2_ACCEL_OFFSET_TRIGGER_X
7815:bma2x2.c      ****  *        2                   |   BMA2x2_ACCEL_OFFSET_TRIGGER_Y
7816:bma2x2.c      ****  *        2                   |   BMA2x2_ACCEL_OFFSET_TRIGGER_Z
7817:bma2x2.c      ****  *
7818:bma2x2.c      ****  *  @param  offset_u8: The offset target value
7819:bma2x2.c      ****  *     CUT_OFF                |    result
7820:bma2x2.c      ****  *  ------------------------- |------------------
7821:bma2x2.c      ****  *        0                   |   1Hz
7822:bma2x2.c      ****  *        1                   |   10Hz
7823:bma2x2.c      ****  *
7824:bma2x2.c      ****  *
7825:bma2x2.c      ****  *     OFFSET_TRIGGER         |    result
7826:bma2x2.c      ****  *  ------------------------- |------------------
7827:bma2x2.c      ****  *        0x00                |   0g
7828:bma2x2.c      ****  *        0x01                |   +1g
7829:bma2x2.c      ****  *        0x02                |   -1g
7830:bma2x2.c      ****  *        0x03                |   0g
7831:bma2x2.c      ****  *
7832:bma2x2.c      ****  *	@return results of bus communication function
7833:bma2x2.c      ****  *	@retval 0 -> Success
7834:bma2x2.c      ****  *	@retval -1 -> Error
7835:bma2x2.c      ****  *
7836:bma2x2.c      ****  *
7837:bma2x2.c      ****  */
7838:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_offset_target(u8 channel_u8,
7839:bma2x2.c      **** u8 *offset_u8)
7840:bma2x2.c      **** {
 19175              		.loc 1 7840 0
 19176              		.cfi_startproc
 19177              		@ args = 0, pretend = 0, frame = 16
 19178              		@ frame_needed = 1, uses_anonymous_args = 0
 19179 0000 B0B5     		push	{r4, r5, r7, lr}
 19180              		.cfi_def_cfa_offset 16
 19181              		.cfi_offset 4, -16
 19182              		.cfi_offset 5, -12
 19183              		.cfi_offset 7, -8
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 478


 19184              		.cfi_offset 14, -4
 19185 0002 84B0     		sub	sp, sp, #16
 19186              		.cfi_def_cfa_offset 32
 19187 0004 00AF     		add	r7, sp, #0
 19188              		.cfi_def_cfa_register 7
 19189 0006 0200     		movs	r2, r0
 19190 0008 3960     		str	r1, [r7]
 19191 000a FB1D     		adds	r3, r7, #7
 19192 000c 1A70     		strb	r2, [r3]
7841:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 19193              		.loc 1 7841 0
 19194 000e 0E23     		movs	r3, #14
 19195 0010 FB18     		adds	r3, r7, r3
 19196 0012 0022     		movs	r2, #0
 19197 0014 1A70     		strb	r2, [r3]
7842:bma2x2.c      **** 	/*  Variable used to return value of
7843:bma2x2.c      **** 	communication routine*/
7844:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 19198              		.loc 1 7844 0
 19199 0016 0F23     		movs	r3, #15
 19200 0018 FB18     		adds	r3, r7, r3
 19201 001a FF22     		movs	r2, #255
 19202 001c 1A70     		strb	r2, [r3]
7845:bma2x2.c      **** 
7846:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 19203              		.loc 1 7846 0
 19204 001e 434B     		ldr	r3, .L1157
 19205 0020 1B68     		ldr	r3, [r3]
 19206 0022 002B     		cmp	r3, #0
 19207 0024 02D1     		bne	.L1147
7847:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
7848:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 19208              		.loc 1 7848 0
 19209 0026 7F23     		movs	r3, #127
 19210 0028 5B42     		rsbs	r3, r3, #0
 19211 002a 7BE0     		b	.L1156
 19212              	.L1147:
7849:bma2x2.c      **** 		} else {
7850:bma2x2.c      **** 		switch (channel_u8) {
 19213              		.loc 1 7850 0
 19214 002c FB1D     		adds	r3, r7, #7
 19215 002e 1B78     		ldrb	r3, [r3]
 19216 0030 012B     		cmp	r3, #1
 19217 0032 20D0     		beq	.L1150
 19218 0034 02DC     		bgt	.L1151
 19219 0036 002B     		cmp	r3, #0
 19220 0038 05D0     		beq	.L1152
 19221 003a 6AE0     		b	.L1149
 19222              	.L1151:
 19223 003c 022B     		cmp	r3, #2
 19224 003e 34D0     		beq	.L1153
 19225 0040 032B     		cmp	r3, #3
 19226 0042 4CD0     		beq	.L1154
 19227 0044 65E0     		b	.L1149
 19228              	.L1152:
7851:bma2x2.c      **** 		case BMA2x2_CUT_OFF:
7852:bma2x2.c      **** 			/*CUT-OFF*/
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 479


7853:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 19229              		.loc 1 7853 0
 19230 0046 394B     		ldr	r3, .L1157
 19231 0048 1B68     		ldr	r3, [r3]
 19232 004a DD68     		ldr	r5, [r3, #12]
 19233 004c 374B     		ldr	r3, .L1157
 19234 004e 1B68     		ldr	r3, [r3]
 19235 0050 1879     		ldrb	r0, [r3, #4]
 19236 0052 0F23     		movs	r3, #15
 19237 0054 FC18     		adds	r4, r7, r3
 19238 0056 0E23     		movs	r3, #14
 19239 0058 FA18     		adds	r2, r7, r3
 19240 005a 0123     		movs	r3, #1
 19241 005c 3721     		movs	r1, #55
 19242 005e A847     		blx	r5
 19243 0060 0300     		movs	r3, r0
 19244 0062 2370     		strb	r3, [r4]
7854:bma2x2.c      **** 			(p_bma2x2->dev_addr,
7855:bma2x2.c      **** 			BMA2x2_COMP_CUTOFF_REG, &data_u8,
7856:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
7857:bma2x2.c      **** 			*offset_u8 = BMA2x2_GET_BITSLICE(data_u8,
 19245              		.loc 1 7857 0
 19246 0064 0E23     		movs	r3, #14
 19247 0066 FB18     		adds	r3, r7, r3
 19248 0068 1B78     		ldrb	r3, [r3]
 19249 006a 0122     		movs	r2, #1
 19250 006c 1340     		ands	r3, r2
 19251 006e DAB2     		uxtb	r2, r3
 19252 0070 3B68     		ldr	r3, [r7]
 19253 0072 1A70     		strb	r2, [r3]
7858:bma2x2.c      **** 			BMA2x2_COMP_CUTOFF);
7859:bma2x2.c      **** 		break;
 19254              		.loc 1 7859 0
 19255 0074 52E0     		b	.L1155
 19256              	.L1150:
7860:bma2x2.c      **** 		case BMA2x2_OFFSET_TRIGGER_X:
7861:bma2x2.c      **** 			/*OFFSET TRIGGER X*/
7862:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 19257              		.loc 1 7862 0
 19258 0076 2D4B     		ldr	r3, .L1157
 19259 0078 1B68     		ldr	r3, [r3]
 19260 007a DD68     		ldr	r5, [r3, #12]
 19261 007c 2B4B     		ldr	r3, .L1157
 19262 007e 1B68     		ldr	r3, [r3]
 19263 0080 1879     		ldrb	r0, [r3, #4]
 19264 0082 0F23     		movs	r3, #15
 19265 0084 FC18     		adds	r4, r7, r3
 19266 0086 0E23     		movs	r3, #14
 19267 0088 FA18     		adds	r2, r7, r3
 19268 008a 0123     		movs	r3, #1
 19269 008c 3721     		movs	r1, #55
 19270 008e A847     		blx	r5
 19271 0090 0300     		movs	r3, r0
 19272 0092 2370     		strb	r3, [r4]
7863:bma2x2.c      **** 			(p_bma2x2->dev_addr,
7864:bma2x2.c      **** 			BMA2x2_COMP_TARGET_OFFSET_X_REG,
7865:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 480


7866:bma2x2.c      **** 			*offset_u8 = BMA2x2_GET_BITSLICE(data_u8,
 19273              		.loc 1 7866 0
 19274 0094 0E23     		movs	r3, #14
 19275 0096 FB18     		adds	r3, r7, r3
 19276 0098 1B78     		ldrb	r3, [r3]
 19277 009a 5B10     		asrs	r3, r3, #1
 19278 009c DBB2     		uxtb	r3, r3
 19279 009e 0322     		movs	r2, #3
 19280 00a0 1340     		ands	r3, r2
 19281 00a2 DAB2     		uxtb	r2, r3
 19282 00a4 3B68     		ldr	r3, [r7]
 19283 00a6 1A70     		strb	r2, [r3]
7867:bma2x2.c      **** 			BMA2x2_COMP_TARGET_OFFSET_X);
7868:bma2x2.c      **** 		break;
 19284              		.loc 1 7868 0
 19285 00a8 38E0     		b	.L1155
 19286              	.L1153:
7869:bma2x2.c      **** 		case BMA2x2_OFFSET_TRIGGER_Y:
7870:bma2x2.c      **** 			/*OFFSET TRIGGER Y*/
7871:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 19287              		.loc 1 7871 0
 19288 00aa 204B     		ldr	r3, .L1157
 19289 00ac 1B68     		ldr	r3, [r3]
 19290 00ae DD68     		ldr	r5, [r3, #12]
 19291 00b0 1E4B     		ldr	r3, .L1157
 19292 00b2 1B68     		ldr	r3, [r3]
 19293 00b4 1879     		ldrb	r0, [r3, #4]
 19294 00b6 0F23     		movs	r3, #15
 19295 00b8 FC18     		adds	r4, r7, r3
 19296 00ba 0E23     		movs	r3, #14
 19297 00bc FA18     		adds	r2, r7, r3
 19298 00be 0123     		movs	r3, #1
 19299 00c0 3721     		movs	r1, #55
 19300 00c2 A847     		blx	r5
 19301 00c4 0300     		movs	r3, r0
 19302 00c6 2370     		strb	r3, [r4]
7872:bma2x2.c      **** 			(p_bma2x2->dev_addr,
7873:bma2x2.c      **** 			BMA2x2_COMP_TARGET_OFFSET_Y_REG,
7874:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7875:bma2x2.c      **** 			*offset_u8 = BMA2x2_GET_BITSLICE(data_u8,
 19303              		.loc 1 7875 0
 19304 00c8 0E23     		movs	r3, #14
 19305 00ca FB18     		adds	r3, r7, r3
 19306 00cc 1B78     		ldrb	r3, [r3]
 19307 00ce DB10     		asrs	r3, r3, #3
 19308 00d0 DBB2     		uxtb	r3, r3
 19309 00d2 0322     		movs	r2, #3
 19310 00d4 1340     		ands	r3, r2
 19311 00d6 DAB2     		uxtb	r2, r3
 19312 00d8 3B68     		ldr	r3, [r7]
 19313 00da 1A70     		strb	r2, [r3]
7876:bma2x2.c      **** 			BMA2x2_COMP_TARGET_OFFSET_Y);
7877:bma2x2.c      **** 		break;
 19314              		.loc 1 7877 0
 19315 00dc 1EE0     		b	.L1155
 19316              	.L1154:
7878:bma2x2.c      **** 		case BMA2x2_OFFSET_TRIGGER_Z:
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 481


7879:bma2x2.c      **** 			/*OFFSET TRIGGER Z*/
7880:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 19317              		.loc 1 7880 0
 19318 00de 134B     		ldr	r3, .L1157
 19319 00e0 1B68     		ldr	r3, [r3]
 19320 00e2 DD68     		ldr	r5, [r3, #12]
 19321 00e4 114B     		ldr	r3, .L1157
 19322 00e6 1B68     		ldr	r3, [r3]
 19323 00e8 1879     		ldrb	r0, [r3, #4]
 19324 00ea 0F23     		movs	r3, #15
 19325 00ec FC18     		adds	r4, r7, r3
 19326 00ee 0E23     		movs	r3, #14
 19327 00f0 FA18     		adds	r2, r7, r3
 19328 00f2 0123     		movs	r3, #1
 19329 00f4 3721     		movs	r1, #55
 19330 00f6 A847     		blx	r5
 19331 00f8 0300     		movs	r3, r0
 19332 00fa 2370     		strb	r3, [r4]
7881:bma2x2.c      **** 			(p_bma2x2->dev_addr,
7882:bma2x2.c      **** 			BMA2x2_COMP_TARGET_OFFSET_Z_REG,
7883:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7884:bma2x2.c      **** 			*offset_u8 = BMA2x2_GET_BITSLICE
 19333              		.loc 1 7884 0
 19334 00fc 0E23     		movs	r3, #14
 19335 00fe FB18     		adds	r3, r7, r3
 19336 0100 1B78     		ldrb	r3, [r3]
 19337 0102 5B11     		asrs	r3, r3, #5
 19338 0104 DBB2     		uxtb	r3, r3
 19339 0106 0322     		movs	r2, #3
 19340 0108 1340     		ands	r3, r2
 19341 010a DAB2     		uxtb	r2, r3
 19342 010c 3B68     		ldr	r3, [r7]
 19343 010e 1A70     		strb	r2, [r3]
7885:bma2x2.c      **** 			(data_u8, BMA2x2_COMP_TARGET_OFFSET_Z);
7886:bma2x2.c      **** 		break;
 19344              		.loc 1 7886 0
 19345 0110 04E0     		b	.L1155
 19346              	.L1149:
7887:bma2x2.c      **** 		default:
7888:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 19347              		.loc 1 7888 0
 19348 0112 0F23     		movs	r3, #15
 19349 0114 FB18     		adds	r3, r7, r3
 19350 0116 FE22     		movs	r2, #254
 19351 0118 1A70     		strb	r2, [r3]
7889:bma2x2.c      **** 		break;
 19352              		.loc 1 7889 0
 19353 011a C046     		nop
 19354              	.L1155:
7890:bma2x2.c      **** 		}
7891:bma2x2.c      **** 	}
7892:bma2x2.c      **** 	return com_rslt;
 19355              		.loc 1 7892 0
 19356 011c 0F23     		movs	r3, #15
 19357 011e FB18     		adds	r3, r7, r3
 19358 0120 1B78     		ldrb	r3, [r3]
 19359 0122 5BB2     		sxtb	r3, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 482


 19360              	.L1156:
7893:bma2x2.c      **** }
 19361              		.loc 1 7893 0 discriminator 1
 19362 0124 1800     		movs	r0, r3
 19363 0126 BD46     		mov	sp, r7
 19364 0128 04B0     		add	sp, sp, #16
 19365              		@ sp needed
 19366 012a B0BD     		pop	{r4, r5, r7, pc}
 19367              	.L1158:
 19368              		.align	2
 19369              	.L1157:
 19370 012c 00000000 		.word	p_bma2x2
 19371              		.cfi_endproc
 19372              	.LFE130:
 19373              		.size	bma2x2_get_offset_target, .-bma2x2_get_offset_target
 19374              		.section	.text.bma2x2_set_offset_target,"ax",%progbits
 19375              		.align	2
 19376              		.global	bma2x2_set_offset_target
 19377              		.code	16
 19378              		.thumb_func
 19379              		.type	bma2x2_set_offset_target, %function
 19380              	bma2x2_set_offset_target:
 19381              	.LFB131:
7894:bma2x2.c      **** /*!
7895:bma2x2.c      ****  *	@brief This API is used to set
7896:bma2x2.c      ****  *	the status of offset target axis(offset_target_x, offset_target_y and
7897:bma2x2.c      ****  *	offset_target_z) and cut_off in the register 0x37
7898:bma2x2.c      ****  *	@note CUT_OFF -> bit 0
7899:bma2x2.c      ****  *	@note OFFSET_TRIGGER_X -> bit 1 and 2
7900:bma2x2.c      ****  *	@note OFFSET_TRIGGER_Y -> bit 3 and 4
7901:bma2x2.c      ****  *	@note OFFSET_TRIGGER_Z -> bit 5 and 6
7902:bma2x2.c      ****  *
7903:bma2x2.c      ****  *
7904:bma2x2.c      ****  *  @param channel_u8: The value of offset axis selection
7905:bma2x2.c      ****  *     channel_u8           |    result
7906:bma2x2.c      ****  *  ------------------------- |------------------
7907:bma2x2.c      ****  *        0                   |   BMA2x2_ACCEL_CUT_OFF
7908:bma2x2.c      ****  *        1                   |   BMA2x2_ACCEL_OFFSET_TRIGGER_X
7909:bma2x2.c      ****  *        2                   |   BMA2x2_ACCEL_OFFSET_TRIGGER_Y
7910:bma2x2.c      ****  *        2                   |   BMA2x2_ACCEL_OFFSET_TRIGGER_Z
7911:bma2x2.c      ****  *
7912:bma2x2.c      ****  *  @param  offset_u8: The offset target value
7913:bma2x2.c      ****  *     CUT_OFF                |    result
7914:bma2x2.c      ****  *  ------------------------- |------------------
7915:bma2x2.c      ****  *        0                   |   1Hz
7916:bma2x2.c      ****  *        1                   |   10Hz
7917:bma2x2.c      ****  *
7918:bma2x2.c      ****  *
7919:bma2x2.c      ****  *     OFFSET_TRIGGER         |    result
7920:bma2x2.c      ****  *  ------------------------- |------------------
7921:bma2x2.c      ****  *        0x00                |   0g
7922:bma2x2.c      ****  *        0x01                |   +1g
7923:bma2x2.c      ****  *        0x02                |   -1g
7924:bma2x2.c      ****  *        0x03                |   0g
7925:bma2x2.c      ****  *
7926:bma2x2.c      ****  *	@return results of bus communication function
7927:bma2x2.c      ****  *	@retval 0 -> Success
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 483


7928:bma2x2.c      ****  *	@retval -1 -> Error
7929:bma2x2.c      ****  *
7930:bma2x2.c      ****  *
7931:bma2x2.c      ****  */
7932:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_offset_target(u8 channel_u8,
7933:bma2x2.c      **** u8 offset_u8)
7934:bma2x2.c      **** {
 19382              		.loc 1 7934 0
 19383              		.cfi_startproc
 19384              		@ args = 0, pretend = 0, frame = 16
 19385              		@ frame_needed = 1, uses_anonymous_args = 0
 19386 0000 B0B5     		push	{r4, r5, r7, lr}
 19387              		.cfi_def_cfa_offset 16
 19388              		.cfi_offset 4, -16
 19389              		.cfi_offset 5, -12
 19390              		.cfi_offset 7, -8
 19391              		.cfi_offset 14, -4
 19392 0002 84B0     		sub	sp, sp, #16
 19393              		.cfi_def_cfa_offset 32
 19394 0004 00AF     		add	r7, sp, #0
 19395              		.cfi_def_cfa_register 7
 19396 0006 0200     		movs	r2, r0
 19397 0008 FB1D     		adds	r3, r7, #7
 19398 000a 1A70     		strb	r2, [r3]
 19399 000c BB1D     		adds	r3, r7, #6
 19400 000e 0A1C     		adds	r2, r1, #0
 19401 0010 1A70     		strb	r2, [r3]
7935:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 19402              		.loc 1 7935 0
 19403 0012 0E23     		movs	r3, #14
 19404 0014 FB18     		adds	r3, r7, r3
 19405 0016 0022     		movs	r2, #0
 19406 0018 1A70     		strb	r2, [r3]
7936:bma2x2.c      **** 	/*  Variable used to return value of
7937:bma2x2.c      **** 	communication routine*/
7938:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 19407              		.loc 1 7938 0
 19408 001a 0F23     		movs	r3, #15
 19409 001c FB18     		adds	r3, r7, r3
 19410 001e FF22     		movs	r2, #255
 19411 0020 1A70     		strb	r2, [r3]
7939:bma2x2.c      **** 
7940:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 19412              		.loc 1 7940 0
 19413 0022 7A4B     		ldr	r3, .L1170
 19414 0024 1B68     		ldr	r3, [r3]
 19415 0026 002B     		cmp	r3, #0
 19416 0028 02D1     		bne	.L1160
7941:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
7942:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 19417              		.loc 1 7942 0
 19418 002a 7F23     		movs	r3, #127
 19419 002c 5B42     		rsbs	r3, r3, #0
 19420 002e E9E0     		b	.L1169
 19421              	.L1160:
7943:bma2x2.c      **** 		} else {
7944:bma2x2.c      **** 		switch (channel_u8) {
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 484


 19422              		.loc 1 7944 0
 19423 0030 FB1D     		adds	r3, r7, #7
 19424 0032 1B78     		ldrb	r3, [r3]
 19425 0034 012B     		cmp	r3, #1
 19426 0036 3DD0     		beq	.L1163
 19427 0038 02DC     		bgt	.L1164
 19428 003a 002B     		cmp	r3, #0
 19429 003c 06D0     		beq	.L1165
 19430 003e D8E0     		b	.L1162
 19431              	.L1164:
 19432 0040 022B     		cmp	r3, #2
 19433 0042 6CD0     		beq	.L1166
 19434 0044 032B     		cmp	r3, #3
 19435 0046 00D1     		bne	.LCB18216
 19436 0048 9EE0     		b	.L1167	@long jump
 19437              	.LCB18216:
 19438 004a D2E0     		b	.L1162
 19439              	.L1165:
7945:bma2x2.c      **** 		case BMA2x2_CUT_OFF:
7946:bma2x2.c      **** 			/*CUT-OFF*/
7947:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 19440              		.loc 1 7947 0
 19441 004c 6F4B     		ldr	r3, .L1170
 19442 004e 1B68     		ldr	r3, [r3]
 19443 0050 DD68     		ldr	r5, [r3, #12]
 19444 0052 6E4B     		ldr	r3, .L1170
 19445 0054 1B68     		ldr	r3, [r3]
 19446 0056 1879     		ldrb	r0, [r3, #4]
 19447 0058 0F23     		movs	r3, #15
 19448 005a FC18     		adds	r4, r7, r3
 19449 005c 0E23     		movs	r3, #14
 19450 005e FA18     		adds	r2, r7, r3
 19451 0060 0123     		movs	r3, #1
 19452 0062 3721     		movs	r1, #55
 19453 0064 A847     		blx	r5
 19454 0066 0300     		movs	r3, r0
 19455 0068 2370     		strb	r3, [r4]
7948:bma2x2.c      **** 			(p_bma2x2->dev_addr,
7949:bma2x2.c      **** 			BMA2x2_COMP_CUTOFF_REG,
7950:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7951:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 19456              		.loc 1 7951 0
 19457 006a 0E23     		movs	r3, #14
 19458 006c FB18     		adds	r3, r7, r3
 19459 006e 1B78     		ldrb	r3, [r3]
 19460 0070 5BB2     		sxtb	r3, r3
 19461 0072 0122     		movs	r2, #1
 19462 0074 9343     		bics	r3, r2
 19463 0076 5AB2     		sxtb	r2, r3
 19464 0078 BB1D     		adds	r3, r7, #6
 19465 007a 1B78     		ldrb	r3, [r3]
 19466 007c 5BB2     		sxtb	r3, r3
 19467 007e 0121     		movs	r1, #1
 19468 0080 0B40     		ands	r3, r1
 19469 0082 5BB2     		sxtb	r3, r3
 19470 0084 1343     		orrs	r3, r2
 19471 0086 5BB2     		sxtb	r3, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 485


 19472 0088 DAB2     		uxtb	r2, r3
 19473 008a 0E23     		movs	r3, #14
 19474 008c FB18     		adds	r3, r7, r3
 19475 008e 1A70     		strb	r2, [r3]
7952:bma2x2.c      **** 			(data_u8, BMA2x2_COMP_CUTOFF, offset_u8);
7953:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 19476              		.loc 1 7953 0
 19477 0090 0E23     		movs	r3, #14
 19478 0092 FB18     		adds	r3, r7, r3
 19479 0094 0122     		movs	r2, #1
 19480 0096 1900     		movs	r1, r3
 19481 0098 3720     		movs	r0, #55
 19482 009a FFF7FEFF 		bl	bma2x2_write_reg
 19483 009e 0300     		movs	r3, r0
 19484 00a0 DAB2     		uxtb	r2, r3
 19485 00a2 0F23     		movs	r3, #15
 19486 00a4 FB18     		adds	r3, r7, r3
 19487 00a6 1B78     		ldrb	r3, [r3]
 19488 00a8 D318     		adds	r3, r2, r3
 19489 00aa DAB2     		uxtb	r2, r3
 19490 00ac 0F23     		movs	r3, #15
 19491 00ae FB18     		adds	r3, r7, r3
 19492 00b0 1A70     		strb	r2, [r3]
7954:bma2x2.c      **** 			BMA2x2_COMP_CUTOFF_REG,
7955:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7956:bma2x2.c      **** 		break;
 19493              		.loc 1 7956 0
 19494 00b2 A3E0     		b	.L1168
 19495              	.L1163:
7957:bma2x2.c      **** 		case BMA2x2_OFFSET_TRIGGER_X:
7958:bma2x2.c      **** 			/*OFFSET TARGET X*/
7959:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 19496              		.loc 1 7959 0
 19497 00b4 554B     		ldr	r3, .L1170
 19498 00b6 1B68     		ldr	r3, [r3]
 19499 00b8 DD68     		ldr	r5, [r3, #12]
 19500 00ba 544B     		ldr	r3, .L1170
 19501 00bc 1B68     		ldr	r3, [r3]
 19502 00be 1879     		ldrb	r0, [r3, #4]
 19503 00c0 0F23     		movs	r3, #15
 19504 00c2 FC18     		adds	r4, r7, r3
 19505 00c4 0E23     		movs	r3, #14
 19506 00c6 FA18     		adds	r2, r7, r3
 19507 00c8 0123     		movs	r3, #1
 19508 00ca 3721     		movs	r1, #55
 19509 00cc A847     		blx	r5
 19510 00ce 0300     		movs	r3, r0
 19511 00d0 2370     		strb	r3, [r4]
7960:bma2x2.c      **** 			(p_bma2x2->dev_addr,
7961:bma2x2.c      **** 			BMA2x2_COMP_TARGET_OFFSET_X_REG,
7962:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7963:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 19512              		.loc 1 7963 0
 19513 00d2 0E23     		movs	r3, #14
 19514 00d4 FB18     		adds	r3, r7, r3
 19515 00d6 1B78     		ldrb	r3, [r3]
 19516 00d8 5BB2     		sxtb	r3, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 486


 19517 00da 0622     		movs	r2, #6
 19518 00dc 9343     		bics	r3, r2
 19519 00de 5AB2     		sxtb	r2, r3
 19520 00e0 BB1D     		adds	r3, r7, #6
 19521 00e2 1B78     		ldrb	r3, [r3]
 19522 00e4 5B00     		lsls	r3, r3, #1
 19523 00e6 5BB2     		sxtb	r3, r3
 19524 00e8 0621     		movs	r1, #6
 19525 00ea 0B40     		ands	r3, r1
 19526 00ec 5BB2     		sxtb	r3, r3
 19527 00ee 1343     		orrs	r3, r2
 19528 00f0 5BB2     		sxtb	r3, r3
 19529 00f2 DAB2     		uxtb	r2, r3
 19530 00f4 0E23     		movs	r3, #14
 19531 00f6 FB18     		adds	r3, r7, r3
 19532 00f8 1A70     		strb	r2, [r3]
7964:bma2x2.c      **** 			(data_u8, BMA2x2_COMP_TARGET_OFFSET_X, offset_u8);
7965:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 19533              		.loc 1 7965 0
 19534 00fa 0E23     		movs	r3, #14
 19535 00fc FB18     		adds	r3, r7, r3
 19536 00fe 0122     		movs	r2, #1
 19537 0100 1900     		movs	r1, r3
 19538 0102 3720     		movs	r0, #55
 19539 0104 FFF7FEFF 		bl	bma2x2_write_reg
 19540 0108 0300     		movs	r3, r0
 19541 010a DAB2     		uxtb	r2, r3
 19542 010c 0F23     		movs	r3, #15
 19543 010e FB18     		adds	r3, r7, r3
 19544 0110 1B78     		ldrb	r3, [r3]
 19545 0112 D318     		adds	r3, r2, r3
 19546 0114 DAB2     		uxtb	r2, r3
 19547 0116 0F23     		movs	r3, #15
 19548 0118 FB18     		adds	r3, r7, r3
 19549 011a 1A70     		strb	r2, [r3]
7966:bma2x2.c      **** 			BMA2x2_COMP_TARGET_OFFSET_X_REG,
7967:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7968:bma2x2.c      **** 		break;
 19550              		.loc 1 7968 0
 19551 011c 6EE0     		b	.L1168
 19552              	.L1166:
7969:bma2x2.c      **** 		case BMA2x2_OFFSET_TRIGGER_Y:
7970:bma2x2.c      **** 			/*OFFSET TARGET Y*/
7971:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 19553              		.loc 1 7971 0
 19554 011e 3B4B     		ldr	r3, .L1170
 19555 0120 1B68     		ldr	r3, [r3]
 19556 0122 DD68     		ldr	r5, [r3, #12]
 19557 0124 394B     		ldr	r3, .L1170
 19558 0126 1B68     		ldr	r3, [r3]
 19559 0128 1879     		ldrb	r0, [r3, #4]
 19560 012a 0F23     		movs	r3, #15
 19561 012c FC18     		adds	r4, r7, r3
 19562 012e 0E23     		movs	r3, #14
 19563 0130 FA18     		adds	r2, r7, r3
 19564 0132 0123     		movs	r3, #1
 19565 0134 3721     		movs	r1, #55
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 487


 19566 0136 A847     		blx	r5
 19567 0138 0300     		movs	r3, r0
 19568 013a 2370     		strb	r3, [r4]
7972:bma2x2.c      **** 			(p_bma2x2->dev_addr,
7973:bma2x2.c      **** 			BMA2x2_COMP_TARGET_OFFSET_Y_REG,
7974:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7975:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 19569              		.loc 1 7975 0
 19570 013c 0E23     		movs	r3, #14
 19571 013e FB18     		adds	r3, r7, r3
 19572 0140 1B78     		ldrb	r3, [r3]
 19573 0142 5BB2     		sxtb	r3, r3
 19574 0144 1822     		movs	r2, #24
 19575 0146 9343     		bics	r3, r2
 19576 0148 5AB2     		sxtb	r2, r3
 19577 014a BB1D     		adds	r3, r7, #6
 19578 014c 1B78     		ldrb	r3, [r3]
 19579 014e DB00     		lsls	r3, r3, #3
 19580 0150 5BB2     		sxtb	r3, r3
 19581 0152 1821     		movs	r1, #24
 19582 0154 0B40     		ands	r3, r1
 19583 0156 5BB2     		sxtb	r3, r3
 19584 0158 1343     		orrs	r3, r2
 19585 015a 5BB2     		sxtb	r3, r3
 19586 015c DAB2     		uxtb	r2, r3
 19587 015e 0E23     		movs	r3, #14
 19588 0160 FB18     		adds	r3, r7, r3
 19589 0162 1A70     		strb	r2, [r3]
7976:bma2x2.c      **** 			(data_u8, BMA2x2_COMP_TARGET_OFFSET_Y, offset_u8);
7977:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 19590              		.loc 1 7977 0
 19591 0164 0E23     		movs	r3, #14
 19592 0166 FB18     		adds	r3, r7, r3
 19593 0168 0122     		movs	r2, #1
 19594 016a 1900     		movs	r1, r3
 19595 016c 3720     		movs	r0, #55
 19596 016e FFF7FEFF 		bl	bma2x2_write_reg
 19597 0172 0300     		movs	r3, r0
 19598 0174 DAB2     		uxtb	r2, r3
 19599 0176 0F23     		movs	r3, #15
 19600 0178 FB18     		adds	r3, r7, r3
 19601 017a 1B78     		ldrb	r3, [r3]
 19602 017c D318     		adds	r3, r2, r3
 19603 017e DAB2     		uxtb	r2, r3
 19604 0180 0F23     		movs	r3, #15
 19605 0182 FB18     		adds	r3, r7, r3
 19606 0184 1A70     		strb	r2, [r3]
7978:bma2x2.c      **** 			BMA2x2_COMP_TARGET_OFFSET_Y_REG,
7979:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7980:bma2x2.c      **** 		break;
 19607              		.loc 1 7980 0
 19608 0186 39E0     		b	.L1168
 19609              	.L1167:
7981:bma2x2.c      **** 		case BMA2x2_OFFSET_TRIGGER_Z:
7982:bma2x2.c      **** 			/*OFFSET TARGET Z*/
7983:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 19610              		.loc 1 7983 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 488


 19611 0188 204B     		ldr	r3, .L1170
 19612 018a 1B68     		ldr	r3, [r3]
 19613 018c DD68     		ldr	r5, [r3, #12]
 19614 018e 1F4B     		ldr	r3, .L1170
 19615 0190 1B68     		ldr	r3, [r3]
 19616 0192 1879     		ldrb	r0, [r3, #4]
 19617 0194 0F23     		movs	r3, #15
 19618 0196 FC18     		adds	r4, r7, r3
 19619 0198 0E23     		movs	r3, #14
 19620 019a FA18     		adds	r2, r7, r3
 19621 019c 0123     		movs	r3, #1
 19622 019e 3721     		movs	r1, #55
 19623 01a0 A847     		blx	r5
 19624 01a2 0300     		movs	r3, r0
 19625 01a4 2370     		strb	r3, [r4]
7984:bma2x2.c      **** 			(p_bma2x2->dev_addr,
7985:bma2x2.c      **** 			BMA2x2_COMP_TARGET_OFFSET_Z_REG,
7986:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7987:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 19626              		.loc 1 7987 0
 19627 01a6 0E23     		movs	r3, #14
 19628 01a8 FB18     		adds	r3, r7, r3
 19629 01aa 1B78     		ldrb	r3, [r3]
 19630 01ac 5BB2     		sxtb	r3, r3
 19631 01ae 6022     		movs	r2, #96
 19632 01b0 9343     		bics	r3, r2
 19633 01b2 5AB2     		sxtb	r2, r3
 19634 01b4 BB1D     		adds	r3, r7, #6
 19635 01b6 1B78     		ldrb	r3, [r3]
 19636 01b8 5B01     		lsls	r3, r3, #5
 19637 01ba 5BB2     		sxtb	r3, r3
 19638 01bc 6021     		movs	r1, #96
 19639 01be 0B40     		ands	r3, r1
 19640 01c0 5BB2     		sxtb	r3, r3
 19641 01c2 1343     		orrs	r3, r2
 19642 01c4 5BB2     		sxtb	r3, r3
 19643 01c6 DAB2     		uxtb	r2, r3
 19644 01c8 0E23     		movs	r3, #14
 19645 01ca FB18     		adds	r3, r7, r3
 19646 01cc 1A70     		strb	r2, [r3]
7988:bma2x2.c      **** 			(data_u8, BMA2x2_COMP_TARGET_OFFSET_Z, offset_u8);
7989:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 19647              		.loc 1 7989 0
 19648 01ce 0E23     		movs	r3, #14
 19649 01d0 FB18     		adds	r3, r7, r3
 19650 01d2 0122     		movs	r2, #1
 19651 01d4 1900     		movs	r1, r3
 19652 01d6 3720     		movs	r0, #55
 19653 01d8 FFF7FEFF 		bl	bma2x2_write_reg
 19654 01dc 0300     		movs	r3, r0
 19655 01de DAB2     		uxtb	r2, r3
 19656 01e0 0F23     		movs	r3, #15
 19657 01e2 FB18     		adds	r3, r7, r3
 19658 01e4 1B78     		ldrb	r3, [r3]
 19659 01e6 D318     		adds	r3, r2, r3
 19660 01e8 DAB2     		uxtb	r2, r3
 19661 01ea 0F23     		movs	r3, #15
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 489


 19662 01ec FB18     		adds	r3, r7, r3
 19663 01ee 1A70     		strb	r2, [r3]
7990:bma2x2.c      **** 			BMA2x2_COMP_TARGET_OFFSET_Z_REG,
7991:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
7992:bma2x2.c      **** 		break;
 19664              		.loc 1 7992 0
 19665 01f0 04E0     		b	.L1168
 19666              	.L1162:
7993:bma2x2.c      **** 		default:
7994:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 19667              		.loc 1 7994 0
 19668 01f2 0F23     		movs	r3, #15
 19669 01f4 FB18     		adds	r3, r7, r3
 19670 01f6 FE22     		movs	r2, #254
 19671 01f8 1A70     		strb	r2, [r3]
7995:bma2x2.c      **** 		break;
 19672              		.loc 1 7995 0
 19673 01fa C046     		nop
 19674              	.L1168:
7996:bma2x2.c      **** 		}
7997:bma2x2.c      **** 	}
7998:bma2x2.c      **** 	return com_rslt;
 19675              		.loc 1 7998 0
 19676 01fc 0F23     		movs	r3, #15
 19677 01fe FB18     		adds	r3, r7, r3
 19678 0200 1B78     		ldrb	r3, [r3]
 19679 0202 5BB2     		sxtb	r3, r3
 19680              	.L1169:
7999:bma2x2.c      **** }
 19681              		.loc 1 7999 0 discriminator 1
 19682 0204 1800     		movs	r0, r3
 19683 0206 BD46     		mov	sp, r7
 19684 0208 04B0     		add	sp, sp, #16
 19685              		@ sp needed
 19686 020a B0BD     		pop	{r4, r5, r7, pc}
 19687              	.L1171:
 19688              		.align	2
 19689              	.L1170:
 19690 020c 00000000 		.word	p_bma2x2
 19691              		.cfi_endproc
 19692              	.LFE131:
 19693              		.size	bma2x2_set_offset_target, .-bma2x2_set_offset_target
 19694              		.section	.text.bma2x2_get_offset,"ax",%progbits
 19695              		.align	2
 19696              		.global	bma2x2_get_offset
 19697              		.code	16
 19698              		.thumb_func
 19699              		.type	bma2x2_get_offset, %function
 19700              	bma2x2_get_offset:
 19701              	.LFB132:
8000:bma2x2.c      **** /*!
8001:bma2x2.c      ****  *	@brief This API is used to get the status of offset
8002:bma2x2.c      ****  *	(offset_x, offset_y and offset_z) in the registers 0x38,0x39 and 0x3A
8003:bma2x2.c      ****  *	@note offset_x -> register 0x38 bit 0 to 7
8004:bma2x2.c      ****  *	@note offset_y -> register 0x39 bit 0 to 7
8005:bma2x2.c      ****  *	@note offset_z -> register 0x3A bit 0 to 7
8006:bma2x2.c      ****  *
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 490


8007:bma2x2.c      ****  *
8008:bma2x2.c      ****  *  @param channel_u8: The value of offset selection
8009:bma2x2.c      ****  *     channel_u8           |    result
8010:bma2x2.c      ****  *  ------------------------- |------------------
8011:bma2x2.c      ****  *        0                   |   BMA2x2_ACCEL_X_AXIS
8012:bma2x2.c      ****  *        1                   |   BMA2x2_ACCEL_Y_AXIS
8013:bma2x2.c      ****  *        2                   |   BMA2x2_ACCEL_Z_AXIS
8014:bma2x2.c      ****  *
8015:bma2x2.c      ****  *  @param offset_u8: The value of offset
8016:bma2x2.c      ****  *
8017:bma2x2.c      ****  *
8018:bma2x2.c      ****  *
8019:bma2x2.c      ****  *	@return results of bus communication function
8020:bma2x2.c      ****  *	@retval 0 -> Success
8021:bma2x2.c      ****  *	@retval -1 -> Error
8022:bma2x2.c      ****  *
8023:bma2x2.c      ****  *
8024:bma2x2.c      ****  */
8025:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_offset(u8 channel_u8,
8026:bma2x2.c      **** s8 *offset_u8)
8027:bma2x2.c      **** {
 19702              		.loc 1 8027 0
 19703              		.cfi_startproc
 19704              		@ args = 0, pretend = 0, frame = 16
 19705              		@ frame_needed = 1, uses_anonymous_args = 0
 19706 0000 B0B5     		push	{r4, r5, r7, lr}
 19707              		.cfi_def_cfa_offset 16
 19708              		.cfi_offset 4, -16
 19709              		.cfi_offset 5, -12
 19710              		.cfi_offset 7, -8
 19711              		.cfi_offset 14, -4
 19712 0002 84B0     		sub	sp, sp, #16
 19713              		.cfi_def_cfa_offset 32
 19714 0004 00AF     		add	r7, sp, #0
 19715              		.cfi_def_cfa_register 7
 19716 0006 0200     		movs	r2, r0
 19717 0008 3960     		str	r1, [r7]
 19718 000a FB1D     		adds	r3, r7, #7
 19719 000c 1A70     		strb	r2, [r3]
8028:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 19720              		.loc 1 8028 0
 19721 000e 0E23     		movs	r3, #14
 19722 0010 FB18     		adds	r3, r7, r3
 19723 0012 0022     		movs	r2, #0
 19724 0014 1A70     		strb	r2, [r3]
8029:bma2x2.c      **** 	/*  Variable used to return value of
8030:bma2x2.c      **** 	communication routine*/
8031:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 19725              		.loc 1 8031 0
 19726 0016 0F23     		movs	r3, #15
 19727 0018 FB18     		adds	r3, r7, r3
 19728 001a FF22     		movs	r2, #255
 19729 001c 1A70     		strb	r2, [r3]
8032:bma2x2.c      **** 
8033:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 19730              		.loc 1 8033 0
 19731 001e 2F4B     		ldr	r3, .L1182
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 491


 19732 0020 1B68     		ldr	r3, [r3]
 19733 0022 002B     		cmp	r3, #0
 19734 0024 02D1     		bne	.L1173
8034:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
8035:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 19735              		.loc 1 8035 0
 19736 0026 7F23     		movs	r3, #127
 19737 0028 5B42     		rsbs	r3, r3, #0
 19738 002a 52E0     		b	.L1180
 19739              	.L1173:
8036:bma2x2.c      **** 		} else {
8037:bma2x2.c      **** 		switch (channel_u8) {
 19740              		.loc 1 8037 0
 19741 002c FB1D     		adds	r3, r7, #7
 19742 002e 1B78     		ldrb	r3, [r3]
 19743 0030 012B     		cmp	r3, #1
 19744 0032 19D0     		beq	.L1176
 19745 0034 022B     		cmp	r3, #2
 19746 0036 2DD0     		beq	.L1177
 19747 0038 002B     		cmp	r3, #0
 19748 003a 41D1     		bne	.L1181
8038:bma2x2.c      **** 		case BMA2x2_X_AXIS:
8039:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 19749              		.loc 1 8039 0
 19750 003c 274B     		ldr	r3, .L1182
 19751 003e 1B68     		ldr	r3, [r3]
 19752 0040 DD68     		ldr	r5, [r3, #12]
 19753 0042 264B     		ldr	r3, .L1182
 19754 0044 1B68     		ldr	r3, [r3]
 19755 0046 1879     		ldrb	r0, [r3, #4]
 19756 0048 0F23     		movs	r3, #15
 19757 004a FC18     		adds	r4, r7, r3
 19758 004c 0E23     		movs	r3, #14
 19759 004e FA18     		adds	r2, r7, r3
 19760 0050 0123     		movs	r3, #1
 19761 0052 3821     		movs	r1, #56
 19762 0054 A847     		blx	r5
 19763 0056 0300     		movs	r3, r0
 19764 0058 2370     		strb	r3, [r4]
8040:bma2x2.c      **** 			(p_bma2x2->dev_addr,
8041:bma2x2.c      **** 			BMA2x2_OFFSET_X_AXIS_ADDR, &data_u8,
8042:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
8043:bma2x2.c      **** 			*offset_u8 = (s8)data_u8;
 19765              		.loc 1 8043 0
 19766 005a 0E23     		movs	r3, #14
 19767 005c FB18     		adds	r3, r7, r3
 19768 005e 1B78     		ldrb	r3, [r3]
 19769 0060 5AB2     		sxtb	r2, r3
 19770 0062 3B68     		ldr	r3, [r7]
 19771 0064 1A70     		strb	r2, [r3]
8044:bma2x2.c      **** 		break;
 19772              		.loc 1 8044 0
 19773 0066 30E0     		b	.L1179
 19774              	.L1176:
8045:bma2x2.c      **** 		case BMA2x2_Y_AXIS:
8046:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 19775              		.loc 1 8046 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 492


 19776 0068 1C4B     		ldr	r3, .L1182
 19777 006a 1B68     		ldr	r3, [r3]
 19778 006c DD68     		ldr	r5, [r3, #12]
 19779 006e 1B4B     		ldr	r3, .L1182
 19780 0070 1B68     		ldr	r3, [r3]
 19781 0072 1879     		ldrb	r0, [r3, #4]
 19782 0074 0F23     		movs	r3, #15
 19783 0076 FC18     		adds	r4, r7, r3
 19784 0078 0E23     		movs	r3, #14
 19785 007a FA18     		adds	r2, r7, r3
 19786 007c 0123     		movs	r3, #1
 19787 007e 3921     		movs	r1, #57
 19788 0080 A847     		blx	r5
 19789 0082 0300     		movs	r3, r0
 19790 0084 2370     		strb	r3, [r4]
8047:bma2x2.c      **** 			(p_bma2x2->dev_addr,
8048:bma2x2.c      **** 			BMA2x2_OFFSET_Y_AXIS_ADDR, &data_u8,
8049:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
8050:bma2x2.c      **** 			*offset_u8 = (s8)data_u8;
 19791              		.loc 1 8050 0
 19792 0086 0E23     		movs	r3, #14
 19793 0088 FB18     		adds	r3, r7, r3
 19794 008a 1B78     		ldrb	r3, [r3]
 19795 008c 5AB2     		sxtb	r2, r3
 19796 008e 3B68     		ldr	r3, [r7]
 19797 0090 1A70     		strb	r2, [r3]
8051:bma2x2.c      **** 		break;
 19798              		.loc 1 8051 0
 19799 0092 1AE0     		b	.L1179
 19800              	.L1177:
8052:bma2x2.c      **** 		case BMA2x2_Z_AXIS:
8053:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 19801              		.loc 1 8053 0
 19802 0094 114B     		ldr	r3, .L1182
 19803 0096 1B68     		ldr	r3, [r3]
 19804 0098 DD68     		ldr	r5, [r3, #12]
 19805 009a 104B     		ldr	r3, .L1182
 19806 009c 1B68     		ldr	r3, [r3]
 19807 009e 1879     		ldrb	r0, [r3, #4]
 19808 00a0 0F23     		movs	r3, #15
 19809 00a2 FC18     		adds	r4, r7, r3
 19810 00a4 0E23     		movs	r3, #14
 19811 00a6 FA18     		adds	r2, r7, r3
 19812 00a8 0123     		movs	r3, #1
 19813 00aa 3A21     		movs	r1, #58
 19814 00ac A847     		blx	r5
 19815 00ae 0300     		movs	r3, r0
 19816 00b0 2370     		strb	r3, [r4]
8054:bma2x2.c      **** 			(p_bma2x2->dev_addr,
8055:bma2x2.c      **** 			BMA2x2_OFFSET_Z_AXIS_ADDR, &data_u8,
8056:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
8057:bma2x2.c      **** 			*offset_u8 = (s8)data_u8;
 19817              		.loc 1 8057 0
 19818 00b2 0E23     		movs	r3, #14
 19819 00b4 FB18     		adds	r3, r7, r3
 19820 00b6 1B78     		ldrb	r3, [r3]
 19821 00b8 5AB2     		sxtb	r2, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 493


 19822 00ba 3B68     		ldr	r3, [r7]
 19823 00bc 1A70     		strb	r2, [r3]
8058:bma2x2.c      **** 		break;
 19824              		.loc 1 8058 0
 19825 00be 04E0     		b	.L1179
 19826              	.L1181:
8059:bma2x2.c      **** 		default:
8060:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 19827              		.loc 1 8060 0
 19828 00c0 0F23     		movs	r3, #15
 19829 00c2 FB18     		adds	r3, r7, r3
 19830 00c4 FE22     		movs	r2, #254
 19831 00c6 1A70     		strb	r2, [r3]
8061:bma2x2.c      **** 		break;
 19832              		.loc 1 8061 0
 19833 00c8 C046     		nop
 19834              	.L1179:
8062:bma2x2.c      **** 		}
8063:bma2x2.c      **** 	}
8064:bma2x2.c      **** 	return com_rslt;
 19835              		.loc 1 8064 0
 19836 00ca 0F23     		movs	r3, #15
 19837 00cc FB18     		adds	r3, r7, r3
 19838 00ce 1B78     		ldrb	r3, [r3]
 19839 00d0 5BB2     		sxtb	r3, r3
 19840              	.L1180:
8065:bma2x2.c      **** }
 19841              		.loc 1 8065 0 discriminator 1
 19842 00d2 1800     		movs	r0, r3
 19843 00d4 BD46     		mov	sp, r7
 19844 00d6 04B0     		add	sp, sp, #16
 19845              		@ sp needed
 19846 00d8 B0BD     		pop	{r4, r5, r7, pc}
 19847              	.L1183:
 19848 00da C046     		.align	2
 19849              	.L1182:
 19850 00dc 00000000 		.word	p_bma2x2
 19851              		.cfi_endproc
 19852              	.LFE132:
 19853              		.size	bma2x2_get_offset, .-bma2x2_get_offset
 19854              		.section	.text.bma2x2_set_offset,"ax",%progbits
 19855              		.align	2
 19856              		.global	bma2x2_set_offset
 19857              		.code	16
 19858              		.thumb_func
 19859              		.type	bma2x2_set_offset, %function
 19860              	bma2x2_set_offset:
 19861              	.LFB133:
8066:bma2x2.c      **** /*!
8067:bma2x2.c      ****  *	@brief This API is used to set the status of offset
8068:bma2x2.c      ****  *	(offset_x, offset_y and offset_z) in the registers 0x38,0x39 and 0x3A
8069:bma2x2.c      ****  *	@note offset_x -> register 0x38 bit 0 to 7
8070:bma2x2.c      ****  *	@note offset_y -> register 0x39 bit 0 to 7
8071:bma2x2.c      ****  *	@note offset_z -> register 0x3A bit 0 to 7
8072:bma2x2.c      ****  *
8073:bma2x2.c      ****  *
8074:bma2x2.c      ****  *  @param channel_u8: The value of offset selection
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 494


8075:bma2x2.c      ****  *     channel_u8           |    result
8076:bma2x2.c      ****  *  ------------------------- |------------------
8077:bma2x2.c      ****  *        0                   |   BMA2x2_ACCEL_X_AXIS
8078:bma2x2.c      ****  *        1                   |   BMA2x2_ACCEL_Y_AXIS
8079:bma2x2.c      ****  *        2                   |   BMA2x2_ACCEL_Z_AXIS
8080:bma2x2.c      ****  *
8081:bma2x2.c      ****  *  @param offset_u8: The value of offset
8082:bma2x2.c      ****  *
8083:bma2x2.c      ****  *
8084:bma2x2.c      ****  *
8085:bma2x2.c      ****  *	@return results of bus communication function
8086:bma2x2.c      ****  *	@retval 0 -> Success
8087:bma2x2.c      ****  *	@retval -1 -> Error
8088:bma2x2.c      ****  *
8089:bma2x2.c      ****  *
8090:bma2x2.c      ****  */
8091:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_offset(u8 channel_u8,
8092:bma2x2.c      **** s8 offset_u8)
8093:bma2x2.c      **** {
 19862              		.loc 1 8093 0
 19863              		.cfi_startproc
 19864              		@ args = 0, pretend = 0, frame = 16
 19865              		@ frame_needed = 1, uses_anonymous_args = 0
 19866 0000 90B5     		push	{r4, r7, lr}
 19867              		.cfi_def_cfa_offset 12
 19868              		.cfi_offset 4, -12
 19869              		.cfi_offset 7, -8
 19870              		.cfi_offset 14, -4
 19871 0002 85B0     		sub	sp, sp, #20
 19872              		.cfi_def_cfa_offset 32
 19873 0004 00AF     		add	r7, sp, #0
 19874              		.cfi_def_cfa_register 7
 19875 0006 0200     		movs	r2, r0
 19876 0008 FB1D     		adds	r3, r7, #7
 19877 000a 1A70     		strb	r2, [r3]
 19878 000c BB1D     		adds	r3, r7, #6
 19879 000e 0A1C     		adds	r2, r1, #0
 19880 0010 1A70     		strb	r2, [r3]
8094:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 19881              		.loc 1 8094 0
 19882 0012 0E23     		movs	r3, #14
 19883 0014 FB18     		adds	r3, r7, r3
 19884 0016 0022     		movs	r2, #0
 19885 0018 1A70     		strb	r2, [r3]
8095:bma2x2.c      **** 	/*  Variable used to return value of
8096:bma2x2.c      **** 	communication routine*/
8097:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 19886              		.loc 1 8097 0
 19887 001a 0F23     		movs	r3, #15
 19888 001c FB18     		adds	r3, r7, r3
 19889 001e FF22     		movs	r2, #255
 19890 0020 1A70     		strb	r2, [r3]
8098:bma2x2.c      **** 
8099:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 19891              		.loc 1 8099 0
 19892 0022 274B     		ldr	r3, .L1194
 19893 0024 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 495


 19894 0026 002B     		cmp	r3, #0
 19895 0028 02D1     		bne	.L1185
8100:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
8101:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 19896              		.loc 1 8101 0
 19897 002a 7F23     		movs	r3, #127
 19898 002c 5B42     		rsbs	r3, r3, #0
 19899 002e 43E0     		b	.L1192
 19900              	.L1185:
8102:bma2x2.c      **** 		} else {
8103:bma2x2.c      **** 		switch (channel_u8) {
 19901              		.loc 1 8103 0
 19902 0030 FB1D     		adds	r3, r7, #7
 19903 0032 1B78     		ldrb	r3, [r3]
 19904 0034 012B     		cmp	r3, #1
 19905 0036 14D0     		beq	.L1188
 19906 0038 022B     		cmp	r3, #2
 19907 003a 23D0     		beq	.L1189
 19908 003c 002B     		cmp	r3, #0
 19909 003e 32D1     		bne	.L1193
8104:bma2x2.c      **** 		case BMA2x2_X_AXIS:
8105:bma2x2.c      **** 			data_u8 = offset_u8;
 19910              		.loc 1 8105 0
 19911 0040 BB1D     		adds	r3, r7, #6
 19912 0042 1A78     		ldrb	r2, [r3]
 19913 0044 0E23     		movs	r3, #14
 19914 0046 FB18     		adds	r3, r7, r3
 19915 0048 1A70     		strb	r2, [r3]
8106:bma2x2.c      **** 			com_rslt = bma2x2_write_reg(
 19916              		.loc 1 8106 0
 19917 004a 0F23     		movs	r3, #15
 19918 004c FC18     		adds	r4, r7, r3
 19919 004e 0E23     		movs	r3, #14
 19920 0050 FB18     		adds	r3, r7, r3
 19921 0052 0122     		movs	r2, #1
 19922 0054 1900     		movs	r1, r3
 19923 0056 3820     		movs	r0, #56
 19924 0058 FFF7FEFF 		bl	bma2x2_write_reg
 19925 005c 0300     		movs	r3, r0
 19926 005e 2370     		strb	r3, [r4]
8107:bma2x2.c      **** 			BMA2x2_OFFSET_X_AXIS_ADDR, &data_u8,
8108:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
8109:bma2x2.c      **** 		break;
 19927              		.loc 1 8109 0
 19928 0060 26E0     		b	.L1191
 19929              	.L1188:
8110:bma2x2.c      **** 		case BMA2x2_Y_AXIS:
8111:bma2x2.c      **** 			data_u8 = offset_u8;
 19930              		.loc 1 8111 0
 19931 0062 BB1D     		adds	r3, r7, #6
 19932 0064 1A78     		ldrb	r2, [r3]
 19933 0066 0E23     		movs	r3, #14
 19934 0068 FB18     		adds	r3, r7, r3
 19935 006a 1A70     		strb	r2, [r3]
8112:bma2x2.c      **** 			com_rslt = bma2x2_write_reg(
 19936              		.loc 1 8112 0
 19937 006c 0F23     		movs	r3, #15
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 496


 19938 006e FC18     		adds	r4, r7, r3
 19939 0070 0E23     		movs	r3, #14
 19940 0072 FB18     		adds	r3, r7, r3
 19941 0074 0122     		movs	r2, #1
 19942 0076 1900     		movs	r1, r3
 19943 0078 3920     		movs	r0, #57
 19944 007a FFF7FEFF 		bl	bma2x2_write_reg
 19945 007e 0300     		movs	r3, r0
 19946 0080 2370     		strb	r3, [r4]
8113:bma2x2.c      **** 			BMA2x2_OFFSET_Y_AXIS_ADDR, &data_u8,
8114:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
8115:bma2x2.c      **** 		break;
 19947              		.loc 1 8115 0
 19948 0082 15E0     		b	.L1191
 19949              	.L1189:
8116:bma2x2.c      **** 		case BMA2x2_Z_AXIS:
8117:bma2x2.c      **** 			data_u8 = offset_u8;
 19950              		.loc 1 8117 0
 19951 0084 BB1D     		adds	r3, r7, #6
 19952 0086 1A78     		ldrb	r2, [r3]
 19953 0088 0E23     		movs	r3, #14
 19954 008a FB18     		adds	r3, r7, r3
 19955 008c 1A70     		strb	r2, [r3]
8118:bma2x2.c      **** 			com_rslt = bma2x2_write_reg(
 19956              		.loc 1 8118 0
 19957 008e 0F23     		movs	r3, #15
 19958 0090 FC18     		adds	r4, r7, r3
 19959 0092 0E23     		movs	r3, #14
 19960 0094 FB18     		adds	r3, r7, r3
 19961 0096 0122     		movs	r2, #1
 19962 0098 1900     		movs	r1, r3
 19963 009a 3A20     		movs	r0, #58
 19964 009c FFF7FEFF 		bl	bma2x2_write_reg
 19965 00a0 0300     		movs	r3, r0
 19966 00a2 2370     		strb	r3, [r4]
8119:bma2x2.c      **** 			BMA2x2_OFFSET_Z_AXIS_ADDR, &data_u8,
8120:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
8121:bma2x2.c      **** 		break;
 19967              		.loc 1 8121 0
 19968 00a4 04E0     		b	.L1191
 19969              	.L1193:
8122:bma2x2.c      **** 		default:
8123:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 19970              		.loc 1 8123 0
 19971 00a6 0F23     		movs	r3, #15
 19972 00a8 FB18     		adds	r3, r7, r3
 19973 00aa FE22     		movs	r2, #254
 19974 00ac 1A70     		strb	r2, [r3]
8124:bma2x2.c      **** 		break;
 19975              		.loc 1 8124 0
 19976 00ae C046     		nop
 19977              	.L1191:
8125:bma2x2.c      **** 		}
8126:bma2x2.c      **** 	}
8127:bma2x2.c      **** 	return com_rslt;
 19978              		.loc 1 8127 0
 19979 00b0 0F23     		movs	r3, #15
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 497


 19980 00b2 FB18     		adds	r3, r7, r3
 19981 00b4 1B78     		ldrb	r3, [r3]
 19982 00b6 5BB2     		sxtb	r3, r3
 19983              	.L1192:
8128:bma2x2.c      **** }
 19984              		.loc 1 8128 0 discriminator 1
 19985 00b8 1800     		movs	r0, r3
 19986 00ba BD46     		mov	sp, r7
 19987 00bc 05B0     		add	sp, sp, #20
 19988              		@ sp needed
 19989 00be 90BD     		pop	{r4, r7, pc}
 19990              	.L1195:
 19991              		.align	2
 19992              	.L1194:
 19993 00c0 00000000 		.word	p_bma2x2
 19994              		.cfi_endproc
 19995              	.LFE133:
 19996              		.size	bma2x2_set_offset, .-bma2x2_set_offset
 19997              		.section	.text.bma2x2_get_fifo_mode,"ax",%progbits
 19998              		.align	2
 19999              		.global	bma2x2_get_fifo_mode
 20000              		.code	16
 20001              		.thumb_func
 20002              		.type	bma2x2_get_fifo_mode, %function
 20003              	bma2x2_get_fifo_mode:
 20004              	.LFB134:
8129:bma2x2.c      **** /*!
8130:bma2x2.c      ****  *	@brief This API is used to get
8131:bma2x2.c      ****  *	the status of fifo (fifo_mode) in the register 0x3E bit 6 and 7
8132:bma2x2.c      ****  *
8133:bma2x2.c      ****  *
8134:bma2x2.c      ****  *  @param fifo_mode_u8 : The value of fifo mode
8135:bma2x2.c      ****  *     fifo_mode_u8         |    result
8136:bma2x2.c      ****  *  ------------------------- |------------------
8137:bma2x2.c      ****  *        0x00                |   BYPASS
8138:bma2x2.c      ****  *        0x01                |   FIFO
8139:bma2x2.c      ****  *        0x02                |   STREAM
8140:bma2x2.c      ****  *        0x03                |   RESERVED
8141:bma2x2.c      ****  *
8142:bma2x2.c      ****  *
8143:bma2x2.c      ****  *
8144:bma2x2.c      ****  *	@return results of bus communication function
8145:bma2x2.c      ****  *	@retval 0 -> Success
8146:bma2x2.c      ****  *	@retval -1 -> Error
8147:bma2x2.c      ****  *
8148:bma2x2.c      ****  *
8149:bma2x2.c      **** */
8150:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_fifo_mode(u8 *fifo_mode_u8)
8151:bma2x2.c      **** {
 20005              		.loc 1 8151 0
 20006              		.cfi_startproc
 20007              		@ args = 0, pretend = 0, frame = 16
 20008              		@ frame_needed = 1, uses_anonymous_args = 0
 20009 0000 B0B5     		push	{r4, r5, r7, lr}
 20010              		.cfi_def_cfa_offset 16
 20011              		.cfi_offset 4, -16
 20012              		.cfi_offset 5, -12
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 498


 20013              		.cfi_offset 7, -8
 20014              		.cfi_offset 14, -4
 20015 0002 84B0     		sub	sp, sp, #16
 20016              		.cfi_def_cfa_offset 32
 20017 0004 00AF     		add	r7, sp, #0
 20018              		.cfi_def_cfa_register 7
 20019 0006 7860     		str	r0, [r7, #4]
8152:bma2x2.c      **** 	/*  Variable used to return value of
8153:bma2x2.c      **** 	communication routine*/
8154:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 20020              		.loc 1 8154 0
 20021 0008 0F23     		movs	r3, #15
 20022 000a FB18     		adds	r3, r7, r3
 20023 000c FF22     		movs	r2, #255
 20024 000e 1A70     		strb	r2, [r3]
8155:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 20025              		.loc 1 8155 0
 20026 0010 0E23     		movs	r3, #14
 20027 0012 FB18     		adds	r3, r7, r3
 20028 0014 0022     		movs	r2, #0
 20029 0016 1A70     		strb	r2, [r3]
8156:bma2x2.c      **** 
8157:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 20030              		.loc 1 8157 0
 20031 0018 124B     		ldr	r3, .L1200
 20032 001a 1B68     		ldr	r3, [r3]
 20033 001c 002B     		cmp	r3, #0
 20034 001e 02D1     		bne	.L1197
8158:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
8159:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 20035              		.loc 1 8159 0
 20036 0020 7F23     		movs	r3, #127
 20037 0022 5B42     		rsbs	r3, r3, #0
 20038 0024 19E0     		b	.L1199
 20039              	.L1197:
8160:bma2x2.c      **** 		} else {
8161:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC(
 20040              		.loc 1 8161 0
 20041 0026 0F4B     		ldr	r3, .L1200
 20042 0028 1B68     		ldr	r3, [r3]
 20043 002a DD68     		ldr	r5, [r3, #12]
 20044 002c 0D4B     		ldr	r3, .L1200
 20045 002e 1B68     		ldr	r3, [r3]
 20046 0030 1879     		ldrb	r0, [r3, #4]
 20047 0032 0F23     		movs	r3, #15
 20048 0034 FC18     		adds	r4, r7, r3
 20049 0036 0E23     		movs	r3, #14
 20050 0038 FA18     		adds	r2, r7, r3
 20051 003a 0123     		movs	r3, #1
 20052 003c 3E21     		movs	r1, #62
 20053 003e A847     		blx	r5
 20054 0040 0300     		movs	r3, r0
 20055 0042 2370     		strb	r3, [r4]
8162:bma2x2.c      **** 			p_bma2x2->dev_addr,
8163:bma2x2.c      **** 			BMA2x2_FIFO_MODE_REG, &data_u8,
8164:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
8165:bma2x2.c      **** 			*fifo_mode_u8 = BMA2x2_GET_BITSLICE(data_u8,
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 499


 20056              		.loc 1 8165 0
 20057 0044 0E23     		movs	r3, #14
 20058 0046 FB18     		adds	r3, r7, r3
 20059 0048 1B78     		ldrb	r3, [r3]
 20060 004a 9B09     		lsrs	r3, r3, #6
 20061 004c DAB2     		uxtb	r2, r3
 20062 004e 7B68     		ldr	r3, [r7, #4]
 20063 0050 1A70     		strb	r2, [r3]
8166:bma2x2.c      **** 			BMA2x2_FIFO_MODE);
8167:bma2x2.c      **** 		}
8168:bma2x2.c      **** 	return com_rslt;
 20064              		.loc 1 8168 0
 20065 0052 0F23     		movs	r3, #15
 20066 0054 FB18     		adds	r3, r7, r3
 20067 0056 1B78     		ldrb	r3, [r3]
 20068 0058 5BB2     		sxtb	r3, r3
 20069              	.L1199:
8169:bma2x2.c      **** }
 20070              		.loc 1 8169 0 discriminator 1
 20071 005a 1800     		movs	r0, r3
 20072 005c BD46     		mov	sp, r7
 20073 005e 04B0     		add	sp, sp, #16
 20074              		@ sp needed
 20075 0060 B0BD     		pop	{r4, r5, r7, pc}
 20076              	.L1201:
 20077 0062 C046     		.align	2
 20078              	.L1200:
 20079 0064 00000000 		.word	p_bma2x2
 20080              		.cfi_endproc
 20081              	.LFE134:
 20082              		.size	bma2x2_get_fifo_mode, .-bma2x2_get_fifo_mode
 20083              		.section	.text.bma2x2_set_fifo_mode,"ax",%progbits
 20084              		.align	2
 20085              		.global	bma2x2_set_fifo_mode
 20086              		.code	16
 20087              		.thumb_func
 20088              		.type	bma2x2_set_fifo_mode, %function
 20089              	bma2x2_set_fifo_mode:
 20090              	.LFB135:
8170:bma2x2.c      **** /*!
8171:bma2x2.c      ****  *	@brief This API is used to set
8172:bma2x2.c      ****  *	the status of fifo (fifo_mode) in the register 0x3E bit 6 and 7
8173:bma2x2.c      ****  *
8174:bma2x2.c      ****  *
8175:bma2x2.c      ****  *  @param fifo_mode_u8 : The value of fifo mode
8176:bma2x2.c      ****  *     fifo_mode_u8         |    result
8177:bma2x2.c      ****  *  ------------------------- |------------------
8178:bma2x2.c      ****  *        0x00                |   BYPASS
8179:bma2x2.c      ****  *        0x01                |   FIFO
8180:bma2x2.c      ****  *        0x02                |   STREAM
8181:bma2x2.c      ****  *        0x03                |   RESERVED
8182:bma2x2.c      ****  *
8183:bma2x2.c      ****  *
8184:bma2x2.c      ****  *
8185:bma2x2.c      ****  *	@return results of bus communication function
8186:bma2x2.c      ****  *	@retval 0 -> Success
8187:bma2x2.c      ****  *	@retval -1 -> Error
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 500


8188:bma2x2.c      ****  *	@retval -127 -> Null Pointer Error
8189:bma2x2.c      ****  *
8190:bma2x2.c      **** */
8191:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_fifo_mode(u8 fifo_mode_u8)
8192:bma2x2.c      **** {
 20091              		.loc 1 8192 0
 20092              		.cfi_startproc
 20093              		@ args = 0, pretend = 0, frame = 16
 20094              		@ frame_needed = 1, uses_anonymous_args = 0
 20095 0000 B0B5     		push	{r4, r5, r7, lr}
 20096              		.cfi_def_cfa_offset 16
 20097              		.cfi_offset 4, -16
 20098              		.cfi_offset 5, -12
 20099              		.cfi_offset 7, -8
 20100              		.cfi_offset 14, -4
 20101 0002 84B0     		sub	sp, sp, #16
 20102              		.cfi_def_cfa_offset 32
 20103 0004 00AF     		add	r7, sp, #0
 20104              		.cfi_def_cfa_register 7
 20105 0006 0200     		movs	r2, r0
 20106 0008 FB1D     		adds	r3, r7, #7
 20107 000a 1A70     		strb	r2, [r3]
8193:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 20108              		.loc 1 8193 0
 20109 000c 0E23     		movs	r3, #14
 20110 000e FB18     		adds	r3, r7, r3
 20111 0010 0022     		movs	r2, #0
 20112 0012 1A70     		strb	r2, [r3]
8194:bma2x2.c      **** 	u8 power_mode = BMA2x2_INIT_VALUE;
 20113              		.loc 1 8194 0
 20114 0014 0D23     		movs	r3, #13
 20115 0016 FB18     		adds	r3, r7, r3
 20116 0018 0022     		movs	r2, #0
 20117 001a 1A70     		strb	r2, [r3]
8195:bma2x2.c      **** 		/*  Variable used to return value of
8196:bma2x2.c      **** 	communication routine*/
8197:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 20118              		.loc 1 8197 0
 20119 001c 0F23     		movs	r3, #15
 20120 001e FB18     		adds	r3, r7, r3
 20121 0020 FF22     		movs	r2, #255
 20122 0022 1A70     		strb	r2, [r3]
8198:bma2x2.c      **** 
8199:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 20123              		.loc 1 8199 0
 20124 0024 454B     		ldr	r3, .L1208
 20125 0026 1B68     		ldr	r3, [r3]
 20126 0028 002B     		cmp	r3, #0
 20127 002a 04D1     		bne	.L1203
8200:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
8201:bma2x2.c      **** 		com_rslt = E_BMA2x2_NULL_PTR;
 20128              		.loc 1 8201 0
 20129 002c 0F23     		movs	r3, #15
 20130 002e FB18     		adds	r3, r7, r3
 20131 0030 8122     		movs	r2, #129
 20132 0032 1A70     		strb	r2, [r3]
 20133 0034 7AE0     		b	.L1204
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 501


 20134              	.L1203:
8202:bma2x2.c      **** 	} else {
8203:bma2x2.c      **** 		if (fifo_mode_u8 < BMA2x2_FIFO_MODE_RANGE) {
 20135              		.loc 1 8203 0
 20136 0036 FB1D     		adds	r3, r7, #7
 20137 0038 1B78     		ldrb	r3, [r3]
 20138 003a 032B     		cmp	r3, #3
 20139 003c 72D8     		bhi	.L1205
8204:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 20140              		.loc 1 8204 0
 20141 003e 3F4B     		ldr	r3, .L1208
 20142 0040 1B68     		ldr	r3, [r3]
 20143 0042 DD68     		ldr	r5, [r3, #12]
 20144 0044 3D4B     		ldr	r3, .L1208
 20145 0046 1B68     		ldr	r3, [r3]
 20146 0048 1879     		ldrb	r0, [r3, #4]
 20147 004a 0F23     		movs	r3, #15
 20148 004c FC18     		adds	r4, r7, r3
 20149 004e 0E23     		movs	r3, #14
 20150 0050 FA18     		adds	r2, r7, r3
 20151 0052 0123     		movs	r3, #1
 20152 0054 3E21     		movs	r1, #62
 20153 0056 A847     		blx	r5
 20154 0058 0300     		movs	r3, r0
 20155 005a 2370     		strb	r3, [r4]
8205:bma2x2.c      **** 			(p_bma2x2->dev_addr,
8206:bma2x2.c      **** 			BMA2x2_FIFO_MODE_REG, &data_u8,
8207:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
8208:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE(data_u8,
 20156              		.loc 1 8208 0
 20157 005c 0E23     		movs	r3, #14
 20158 005e FB18     		adds	r3, r7, r3
 20159 0060 1B78     		ldrb	r3, [r3]
 20160 0062 5BB2     		sxtb	r3, r3
 20161 0064 3F22     		movs	r2, #63
 20162 0066 1340     		ands	r3, r2
 20163 0068 5AB2     		sxtb	r2, r3
 20164 006a FB1D     		adds	r3, r7, #7
 20165 006c 1B78     		ldrb	r3, [r3]
 20166 006e 9B01     		lsls	r3, r3, #6
 20167 0070 5BB2     		sxtb	r3, r3
 20168 0072 1343     		orrs	r3, r2
 20169 0074 5BB2     		sxtb	r3, r3
 20170 0076 DAB2     		uxtb	r2, r3
 20171 0078 0E23     		movs	r3, #14
 20172 007a FB18     		adds	r3, r7, r3
 20173 007c 1A70     		strb	r2, [r3]
8209:bma2x2.c      **** 			BMA2x2_FIFO_MODE, fifo_mode_u8);
8210:bma2x2.c      **** 			data_u8 |= 0x0C;
 20174              		.loc 1 8210 0
 20175 007e 0E23     		movs	r3, #14
 20176 0080 FB18     		adds	r3, r7, r3
 20177 0082 1B78     		ldrb	r3, [r3]
 20178 0084 0C22     		movs	r2, #12
 20179 0086 1343     		orrs	r3, r2
 20180 0088 DAB2     		uxtb	r2, r3
 20181 008a 0E23     		movs	r3, #14
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 502


 20182 008c FB18     		adds	r3, r7, r3
 20183 008e 1A70     		strb	r2, [r3]
8211:bma2x2.c      **** 			/*Power mode is switched to Standby power mode*/
8212:bma2x2.c      **** 			com_rslt += bma2x2_get_power_mode(&power_mode);
 20184              		.loc 1 8212 0
 20185 0090 0D23     		movs	r3, #13
 20186 0092 FB18     		adds	r3, r7, r3
 20187 0094 1800     		movs	r0, r3
 20188 0096 FFF7FEFF 		bl	bma2x2_get_power_mode
 20189 009a 0300     		movs	r3, r0
 20190 009c DAB2     		uxtb	r2, r3
 20191 009e 0F23     		movs	r3, #15
 20192 00a0 FB18     		adds	r3, r7, r3
 20193 00a2 1B78     		ldrb	r3, [r3]
 20194 00a4 D318     		adds	r3, r2, r3
 20195 00a6 DAB2     		uxtb	r2, r3
 20196 00a8 0F23     		movs	r3, #15
 20197 00aa FB18     		adds	r3, r7, r3
 20198 00ac 1A70     		strb	r2, [r3]
8213:bma2x2.c      **** 			com_rslt += bma2x2_set_power_mode(BMA2x2_MODE_STANDBY);
 20199              		.loc 1 8213 0
 20200 00ae 0520     		movs	r0, #5
 20201 00b0 FFF7FEFF 		bl	bma2x2_set_power_mode
 20202 00b4 0300     		movs	r3, r0
 20203 00b6 DAB2     		uxtb	r2, r3
 20204 00b8 0F23     		movs	r3, #15
 20205 00ba FB18     		adds	r3, r7, r3
 20206 00bc 1B78     		ldrb	r3, [r3]
 20207 00be D318     		adds	r3, r2, r3
 20208 00c0 DAB2     		uxtb	r2, r3
 20209 00c2 0F23     		movs	r3, #15
 20210 00c4 FB18     		adds	r3, r7, r3
 20211 00c6 1A70     		strb	r2, [r3]
8214:bma2x2.c      **** 			/*Configure the mode in FIFO_CONFIG registers*/
8215:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 20212              		.loc 1 8215 0
 20213 00c8 0E23     		movs	r3, #14
 20214 00ca FB18     		adds	r3, r7, r3
 20215 00cc 0122     		movs	r2, #1
 20216 00ce 1900     		movs	r1, r3
 20217 00d0 3E20     		movs	r0, #62
 20218 00d2 FFF7FEFF 		bl	bma2x2_write_reg
 20219 00d6 0300     		movs	r3, r0
 20220 00d8 DAB2     		uxtb	r2, r3
 20221 00da 0F23     		movs	r3, #15
 20222 00dc FB18     		adds	r3, r7, r3
 20223 00de 1B78     		ldrb	r3, [r3]
 20224 00e0 D318     		adds	r3, r2, r3
 20225 00e2 DAB2     		uxtb	r2, r3
 20226 00e4 0F23     		movs	r3, #15
 20227 00e6 FB18     		adds	r3, r7, r3
 20228 00e8 1A70     		strb	r2, [r3]
8216:bma2x2.c      **** 			BMA2x2_FIFO_MODE_REG,
8217:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
8218:bma2x2.c      **** 			if (com_rslt == SUCCESS) {
 20229              		.loc 1 8218 0
 20230 00ea 0F23     		movs	r3, #15
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 503


 20231 00ec FB18     		adds	r3, r7, r3
 20232 00ee 1B78     		ldrb	r3, [r3]
 20233 00f0 5BB2     		sxtb	r3, r3
 20234 00f2 002B     		cmp	r3, #0
 20235 00f4 05D1     		bne	.L1206
8219:bma2x2.c      **** 				/*FIFO config is stored in struct p_bma2x2*/
8220:bma2x2.c      **** 				p_bma2x2->fifo_config = data_u8;
 20236              		.loc 1 8220 0
 20237 00f6 114B     		ldr	r3, .L1208
 20238 00f8 1B68     		ldr	r3, [r3]
 20239 00fa 0E22     		movs	r2, #14
 20240 00fc BA18     		adds	r2, r7, r2
 20241 00fe 1278     		ldrb	r2, [r2]
 20242 0100 5A71     		strb	r2, [r3, #5]
 20243              	.L1206:
8221:bma2x2.c      **** 			}
8222:bma2x2.c      **** 			/*Power mode is reverted to previously set mode */
8223:bma2x2.c      **** 			com_rslt += bma2x2_set_power_mode(power_mode);
 20244              		.loc 1 8223 0
 20245 0102 0D23     		movs	r3, #13
 20246 0104 FB18     		adds	r3, r7, r3
 20247 0106 1B78     		ldrb	r3, [r3]
 20248 0108 1800     		movs	r0, r3
 20249 010a FFF7FEFF 		bl	bma2x2_set_power_mode
 20250 010e 0300     		movs	r3, r0
 20251 0110 DAB2     		uxtb	r2, r3
 20252 0112 0F23     		movs	r3, #15
 20253 0114 FB18     		adds	r3, r7, r3
 20254 0116 1B78     		ldrb	r3, [r3]
 20255 0118 D318     		adds	r3, r2, r3
 20256 011a DAB2     		uxtb	r2, r3
 20257 011c 0F23     		movs	r3, #15
 20258 011e FB18     		adds	r3, r7, r3
 20259 0120 1A70     		strb	r2, [r3]
 20260 0122 03E0     		b	.L1204
 20261              	.L1205:
8224:bma2x2.c      **** 
8225:bma2x2.c      **** 		} else {
8226:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 20262              		.loc 1 8226 0
 20263 0124 0F23     		movs	r3, #15
 20264 0126 FB18     		adds	r3, r7, r3
 20265 0128 FE22     		movs	r2, #254
 20266 012a 1A70     		strb	r2, [r3]
 20267              	.L1204:
8227:bma2x2.c      **** 		}
8228:bma2x2.c      **** 	}
8229:bma2x2.c      **** 	return com_rslt;
 20268              		.loc 1 8229 0
 20269 012c 0F23     		movs	r3, #15
 20270 012e FB18     		adds	r3, r7, r3
 20271 0130 1B78     		ldrb	r3, [r3]
 20272 0132 5BB2     		sxtb	r3, r3
8230:bma2x2.c      **** }
 20273              		.loc 1 8230 0
 20274 0134 1800     		movs	r0, r3
 20275 0136 BD46     		mov	sp, r7
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 504


 20276 0138 04B0     		add	sp, sp, #16
 20277              		@ sp needed
 20278 013a B0BD     		pop	{r4, r5, r7, pc}
 20279              	.L1209:
 20280              		.align	2
 20281              	.L1208:
 20282 013c 00000000 		.word	p_bma2x2
 20283              		.cfi_endproc
 20284              	.LFE135:
 20285              		.size	bma2x2_set_fifo_mode, .-bma2x2_set_fifo_mode
 20286              		.section	.text.bma2x2_get_fifo_data_select,"ax",%progbits
 20287              		.align	2
 20288              		.global	bma2x2_get_fifo_data_select
 20289              		.code	16
 20290              		.thumb_func
 20291              		.type	bma2x2_get_fifo_data_select, %function
 20292              	bma2x2_get_fifo_data_select:
 20293              	.LFB136:
8231:bma2x2.c      **** /*!
8232:bma2x2.c      ****  * @brief This API is used to get
8233:bma2x2.c      ****  * the axis enable of fifo data select in the register 0x3E bit 0 and 1
8234:bma2x2.c      ****  *
8235:bma2x2.c      ****  *
8236:bma2x2.c      ****  *  @param fifo_data_select_u8 : The value of FIFO axis data select
8237:bma2x2.c      ****  *   fifo_data_select_u8    |    result
8238:bma2x2.c      ****  *  ------------------------- |------------------
8239:bma2x2.c      ****  *        0x00                |   XYZ
8240:bma2x2.c      ****  *        0x01                |   Y
8241:bma2x2.c      ****  *        0x02                |   X
8242:bma2x2.c      ****  *        0x03                |   Z
8243:bma2x2.c      ****  *
8244:bma2x2.c      ****  *
8245:bma2x2.c      ****  *
8246:bma2x2.c      ****  *	@return results of bus communication function
8247:bma2x2.c      ****  *	@retval 0 -> Success
8248:bma2x2.c      ****  *	@retval -1 -> Error
8249:bma2x2.c      ****  *
8250:bma2x2.c      ****  *
8251:bma2x2.c      ****  */
8252:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_fifo_data_select(
8253:bma2x2.c      **** u8 *fifo_data_select_u8)
8254:bma2x2.c      **** {
 20294              		.loc 1 8254 0
 20295              		.cfi_startproc
 20296              		@ args = 0, pretend = 0, frame = 16
 20297              		@ frame_needed = 1, uses_anonymous_args = 0
 20298 0000 B0B5     		push	{r4, r5, r7, lr}
 20299              		.cfi_def_cfa_offset 16
 20300              		.cfi_offset 4, -16
 20301              		.cfi_offset 5, -12
 20302              		.cfi_offset 7, -8
 20303              		.cfi_offset 14, -4
 20304 0002 84B0     		sub	sp, sp, #16
 20305              		.cfi_def_cfa_offset 32
 20306 0004 00AF     		add	r7, sp, #0
 20307              		.cfi_def_cfa_register 7
 20308 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 505


8255:bma2x2.c      **** 		/*  Variable used to return value of
8256:bma2x2.c      **** 	communication routine*/
8257:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 20309              		.loc 1 8257 0
 20310 0008 0F23     		movs	r3, #15
 20311 000a FB18     		adds	r3, r7, r3
 20312 000c FF22     		movs	r2, #255
 20313 000e 1A70     		strb	r2, [r3]
8258:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 20314              		.loc 1 8258 0
 20315 0010 0E23     		movs	r3, #14
 20316 0012 FB18     		adds	r3, r7, r3
 20317 0014 0022     		movs	r2, #0
 20318 0016 1A70     		strb	r2, [r3]
8259:bma2x2.c      **** 
8260:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 20319              		.loc 1 8260 0
 20320 0018 124B     		ldr	r3, .L1214
 20321 001a 1B68     		ldr	r3, [r3]
 20322 001c 002B     		cmp	r3, #0
 20323 001e 02D1     		bne	.L1211
8261:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
8262:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 20324              		.loc 1 8262 0
 20325 0020 7F23     		movs	r3, #127
 20326 0022 5B42     		rsbs	r3, r3, #0
 20327 0024 1AE0     		b	.L1213
 20328              	.L1211:
8263:bma2x2.c      **** 		} else {
8264:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC(
 20329              		.loc 1 8264 0
 20330 0026 0F4B     		ldr	r3, .L1214
 20331 0028 1B68     		ldr	r3, [r3]
 20332 002a DD68     		ldr	r5, [r3, #12]
 20333 002c 0D4B     		ldr	r3, .L1214
 20334 002e 1B68     		ldr	r3, [r3]
 20335 0030 1879     		ldrb	r0, [r3, #4]
 20336 0032 0F23     		movs	r3, #15
 20337 0034 FC18     		adds	r4, r7, r3
 20338 0036 0E23     		movs	r3, #14
 20339 0038 FA18     		adds	r2, r7, r3
 20340 003a 0123     		movs	r3, #1
 20341 003c 3E21     		movs	r1, #62
 20342 003e A847     		blx	r5
 20343 0040 0300     		movs	r3, r0
 20344 0042 2370     		strb	r3, [r4]
8265:bma2x2.c      **** 			p_bma2x2->dev_addr,
8266:bma2x2.c      **** 			BMA2x2_FIFO_DATA_SELECT_REG,
8267:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
8268:bma2x2.c      **** 			*fifo_data_select_u8 = BMA2x2_GET_BITSLICE(data_u8,
 20345              		.loc 1 8268 0
 20346 0044 0E23     		movs	r3, #14
 20347 0046 FB18     		adds	r3, r7, r3
 20348 0048 1B78     		ldrb	r3, [r3]
 20349 004a 0322     		movs	r2, #3
 20350 004c 1340     		ands	r3, r2
 20351 004e DAB2     		uxtb	r2, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 506


 20352 0050 7B68     		ldr	r3, [r7, #4]
 20353 0052 1A70     		strb	r2, [r3]
8269:bma2x2.c      **** 			BMA2x2_FIFO_DATA_SELECT);
8270:bma2x2.c      **** 		}
8271:bma2x2.c      **** 	return com_rslt;
 20354              		.loc 1 8271 0
 20355 0054 0F23     		movs	r3, #15
 20356 0056 FB18     		adds	r3, r7, r3
 20357 0058 1B78     		ldrb	r3, [r3]
 20358 005a 5BB2     		sxtb	r3, r3
 20359              	.L1213:
8272:bma2x2.c      **** }
 20360              		.loc 1 8272 0 discriminator 1
 20361 005c 1800     		movs	r0, r3
 20362 005e BD46     		mov	sp, r7
 20363 0060 04B0     		add	sp, sp, #16
 20364              		@ sp needed
 20365 0062 B0BD     		pop	{r4, r5, r7, pc}
 20366              	.L1215:
 20367              		.align	2
 20368              	.L1214:
 20369 0064 00000000 		.word	p_bma2x2
 20370              		.cfi_endproc
 20371              	.LFE136:
 20372              		.size	bma2x2_get_fifo_data_select, .-bma2x2_get_fifo_data_select
 20373              		.section	.text.bma2x2_set_fifo_data_select,"ax",%progbits
 20374              		.align	2
 20375              		.global	bma2x2_set_fifo_data_select
 20376              		.code	16
 20377              		.thumb_func
 20378              		.type	bma2x2_set_fifo_data_select, %function
 20379              	bma2x2_set_fifo_data_select:
 20380              	.LFB137:
8273:bma2x2.c      **** /*!
8274:bma2x2.c      ****  * @brief This API is used to set
8275:bma2x2.c      ****  * the axis enable of fifo data select in the register 0x3E bit 0 and 1
8276:bma2x2.c      ****  *
8277:bma2x2.c      ****  *
8278:bma2x2.c      ****  *  @param fifo_data_select_u8 : The value of FIFO axis data select
8279:bma2x2.c      ****  *   fifo_data_select_u8      |    result
8280:bma2x2.c      ****  *  ------------------------- |------------------
8281:bma2x2.c      ****  *        0x00                |   XYZ
8282:bma2x2.c      ****  *        0x01                |   Y
8283:bma2x2.c      ****  *        0x02                |   X
8284:bma2x2.c      ****  *        0x03                |   Z
8285:bma2x2.c      ****  *
8286:bma2x2.c      ****  *
8287:bma2x2.c      ****  *
8288:bma2x2.c      ****  *	@return results of bus communication function
8289:bma2x2.c      ****  *	@retval 0 -> Success
8290:bma2x2.c      ****  *	@retval -1 -> Error
8291:bma2x2.c      ****  *	@retval -127 -> Null Pointer Error
8292:bma2x2.c      ****  *
8293:bma2x2.c      ****  */
8294:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_set_fifo_data_select(
8295:bma2x2.c      **** u8 fifo_data_select_u8)
8296:bma2x2.c      **** {
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 507


 20381              		.loc 1 8296 0
 20382              		.cfi_startproc
 20383              		@ args = 0, pretend = 0, frame = 16
 20384              		@ frame_needed = 1, uses_anonymous_args = 0
 20385 0000 B0B5     		push	{r4, r5, r7, lr}
 20386              		.cfi_def_cfa_offset 16
 20387              		.cfi_offset 4, -16
 20388              		.cfi_offset 5, -12
 20389              		.cfi_offset 7, -8
 20390              		.cfi_offset 14, -4
 20391 0002 84B0     		sub	sp, sp, #16
 20392              		.cfi_def_cfa_offset 32
 20393 0004 00AF     		add	r7, sp, #0
 20394              		.cfi_def_cfa_register 7
 20395 0006 0200     		movs	r2, r0
 20396 0008 FB1D     		adds	r3, r7, #7
 20397 000a 1A70     		strb	r2, [r3]
8297:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 20398              		.loc 1 8297 0
 20399 000c 0E23     		movs	r3, #14
 20400 000e FB18     		adds	r3, r7, r3
 20401 0010 0022     		movs	r2, #0
 20402 0012 1A70     		strb	r2, [r3]
8298:bma2x2.c      **** 	u8 power_mode = BMA2x2_INIT_VALUE;
 20403              		.loc 1 8298 0
 20404 0014 0D23     		movs	r3, #13
 20405 0016 FB18     		adds	r3, r7, r3
 20406 0018 0022     		movs	r2, #0
 20407 001a 1A70     		strb	r2, [r3]
8299:bma2x2.c      **** 	/*  Variable used to return value of
8300:bma2x2.c      **** 	communication routine*/
8301:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 20408              		.loc 1 8301 0
 20409 001c 0F23     		movs	r3, #15
 20410 001e FB18     		adds	r3, r7, r3
 20411 0020 FF22     		movs	r2, #255
 20412 0022 1A70     		strb	r2, [r3]
8302:bma2x2.c      **** 
8303:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 20413              		.loc 1 8303 0
 20414 0024 464B     		ldr	r3, .L1222
 20415 0026 1B68     		ldr	r3, [r3]
 20416 0028 002B     		cmp	r3, #0
 20417 002a 04D1     		bne	.L1217
8304:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
8305:bma2x2.c      **** 		com_rslt = E_BMA2x2_NULL_PTR;
 20418              		.loc 1 8305 0
 20419 002c 0F23     		movs	r3, #15
 20420 002e FB18     		adds	r3, r7, r3
 20421 0030 8122     		movs	r2, #129
 20422 0032 1A70     		strb	r2, [r3]
 20423 0034 7CE0     		b	.L1218
 20424              	.L1217:
8306:bma2x2.c      **** 	} else {
8307:bma2x2.c      **** 		if (fifo_data_select_u8 < BMA2x2_FIFO_DATA_SELECT_RANGE) {
 20425              		.loc 1 8307 0
 20426 0036 FB1D     		adds	r3, r7, #7
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 508


 20427 0038 1B78     		ldrb	r3, [r3]
 20428 003a 032B     		cmp	r3, #3
 20429 003c 74D8     		bhi	.L1219
8308:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 20430              		.loc 1 8308 0
 20431 003e 404B     		ldr	r3, .L1222
 20432 0040 1B68     		ldr	r3, [r3]
 20433 0042 DD68     		ldr	r5, [r3, #12]
 20434 0044 3E4B     		ldr	r3, .L1222
 20435 0046 1B68     		ldr	r3, [r3]
 20436 0048 1879     		ldrb	r0, [r3, #4]
 20437 004a 0F23     		movs	r3, #15
 20438 004c FC18     		adds	r4, r7, r3
 20439 004e 0E23     		movs	r3, #14
 20440 0050 FA18     		adds	r2, r7, r3
 20441 0052 0123     		movs	r3, #1
 20442 0054 3E21     		movs	r1, #62
 20443 0056 A847     		blx	r5
 20444 0058 0300     		movs	r3, r0
 20445 005a 2370     		strb	r3, [r4]
8309:bma2x2.c      **** 			(p_bma2x2->dev_addr,
8310:bma2x2.c      **** 			BMA2x2_FIFO_DATA_SELECT_REG, &data_u8,
8311:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
8312:bma2x2.c      **** 			data_u8 = BMA2x2_SET_BITSLICE
 20446              		.loc 1 8312 0
 20447 005c 0E23     		movs	r3, #14
 20448 005e FB18     		adds	r3, r7, r3
 20449 0060 1B78     		ldrb	r3, [r3]
 20450 0062 5BB2     		sxtb	r3, r3
 20451 0064 0322     		movs	r2, #3
 20452 0066 9343     		bics	r3, r2
 20453 0068 5AB2     		sxtb	r2, r3
 20454 006a FB1D     		adds	r3, r7, #7
 20455 006c 1B78     		ldrb	r3, [r3]
 20456 006e 5BB2     		sxtb	r3, r3
 20457 0070 0321     		movs	r1, #3
 20458 0072 0B40     		ands	r3, r1
 20459 0074 5BB2     		sxtb	r3, r3
 20460 0076 1343     		orrs	r3, r2
 20461 0078 5BB2     		sxtb	r3, r3
 20462 007a DAB2     		uxtb	r2, r3
 20463 007c 0E23     		movs	r3, #14
 20464 007e FB18     		adds	r3, r7, r3
 20465 0080 1A70     		strb	r2, [r3]
8313:bma2x2.c      **** 			(data_u8,
8314:bma2x2.c      **** 			BMA2x2_FIFO_DATA_SELECT, fifo_data_select_u8);
8315:bma2x2.c      **** 			data_u8 |= 0x0C;
 20466              		.loc 1 8315 0
 20467 0082 0E23     		movs	r3, #14
 20468 0084 FB18     		adds	r3, r7, r3
 20469 0086 1B78     		ldrb	r3, [r3]
 20470 0088 0C22     		movs	r2, #12
 20471 008a 1343     		orrs	r3, r2
 20472 008c DAB2     		uxtb	r2, r3
 20473 008e 0E23     		movs	r3, #14
 20474 0090 FB18     		adds	r3, r7, r3
 20475 0092 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 509


8316:bma2x2.c      **** 			/*Power mode is switched to Standby power mode*/
8317:bma2x2.c      **** 			com_rslt += bma2x2_get_power_mode(&power_mode);
 20476              		.loc 1 8317 0
 20477 0094 0D23     		movs	r3, #13
 20478 0096 FB18     		adds	r3, r7, r3
 20479 0098 1800     		movs	r0, r3
 20480 009a FFF7FEFF 		bl	bma2x2_get_power_mode
 20481 009e 0300     		movs	r3, r0
 20482 00a0 DAB2     		uxtb	r2, r3
 20483 00a2 0F23     		movs	r3, #15
 20484 00a4 FB18     		adds	r3, r7, r3
 20485 00a6 1B78     		ldrb	r3, [r3]
 20486 00a8 D318     		adds	r3, r2, r3
 20487 00aa DAB2     		uxtb	r2, r3
 20488 00ac 0F23     		movs	r3, #15
 20489 00ae FB18     		adds	r3, r7, r3
 20490 00b0 1A70     		strb	r2, [r3]
8318:bma2x2.c      **** 			com_rslt += bma2x2_set_power_mode(BMA2x2_MODE_STANDBY);
 20491              		.loc 1 8318 0
 20492 00b2 0520     		movs	r0, #5
 20493 00b4 FFF7FEFF 		bl	bma2x2_set_power_mode
 20494 00b8 0300     		movs	r3, r0
 20495 00ba DAB2     		uxtb	r2, r3
 20496 00bc 0F23     		movs	r3, #15
 20497 00be FB18     		adds	r3, r7, r3
 20498 00c0 1B78     		ldrb	r3, [r3]
 20499 00c2 D318     		adds	r3, r2, r3
 20500 00c4 DAB2     		uxtb	r2, r3
 20501 00c6 0F23     		movs	r3, #15
 20502 00c8 FB18     		adds	r3, r7, r3
 20503 00ca 1A70     		strb	r2, [r3]
8319:bma2x2.c      **** 			/* Configure appropriate (X,Y,Z) axes data to be
8320:bma2x2.c      **** 			available in FIFO*/
8321:bma2x2.c      **** 			com_rslt += bma2x2_write_reg(
 20504              		.loc 1 8321 0
 20505 00cc 0E23     		movs	r3, #14
 20506 00ce FB18     		adds	r3, r7, r3
 20507 00d0 0122     		movs	r2, #1
 20508 00d2 1900     		movs	r1, r3
 20509 00d4 3E20     		movs	r0, #62
 20510 00d6 FFF7FEFF 		bl	bma2x2_write_reg
 20511 00da 0300     		movs	r3, r0
 20512 00dc DAB2     		uxtb	r2, r3
 20513 00de 0F23     		movs	r3, #15
 20514 00e0 FB18     		adds	r3, r7, r3
 20515 00e2 1B78     		ldrb	r3, [r3]
 20516 00e4 D318     		adds	r3, r2, r3
 20517 00e6 DAB2     		uxtb	r2, r3
 20518 00e8 0F23     		movs	r3, #15
 20519 00ea FB18     		adds	r3, r7, r3
 20520 00ec 1A70     		strb	r2, [r3]
8322:bma2x2.c      **** 				BMA2x2_FIFO_DATA_SELECT_REG, &data_u8, 1);
8323:bma2x2.c      **** 			if (com_rslt == SUCCESS) {
 20521              		.loc 1 8323 0
 20522 00ee 0F23     		movs	r3, #15
 20523 00f0 FB18     		adds	r3, r7, r3
 20524 00f2 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 510


 20525 00f4 5BB2     		sxtb	r3, r3
 20526 00f6 002B     		cmp	r3, #0
 20527 00f8 05D1     		bne	.L1220
8324:bma2x2.c      **** 				/*FIFO config is stored in struct p_bma2x2*/
8325:bma2x2.c      **** 				p_bma2x2->fifo_config = data_u8;
 20528              		.loc 1 8325 0
 20529 00fa 114B     		ldr	r3, .L1222
 20530 00fc 1B68     		ldr	r3, [r3]
 20531 00fe 0E22     		movs	r2, #14
 20532 0100 BA18     		adds	r2, r7, r2
 20533 0102 1278     		ldrb	r2, [r2]
 20534 0104 5A71     		strb	r2, [r3, #5]
 20535              	.L1220:
8326:bma2x2.c      **** 			}
8327:bma2x2.c      **** 			/*Power mode is reverted to previously set mode */
8328:bma2x2.c      **** 			com_rslt += bma2x2_set_power_mode(power_mode);
 20536              		.loc 1 8328 0
 20537 0106 0D23     		movs	r3, #13
 20538 0108 FB18     		adds	r3, r7, r3
 20539 010a 1B78     		ldrb	r3, [r3]
 20540 010c 1800     		movs	r0, r3
 20541 010e FFF7FEFF 		bl	bma2x2_set_power_mode
 20542 0112 0300     		movs	r3, r0
 20543 0114 DAB2     		uxtb	r2, r3
 20544 0116 0F23     		movs	r3, #15
 20545 0118 FB18     		adds	r3, r7, r3
 20546 011a 1B78     		ldrb	r3, [r3]
 20547 011c D318     		adds	r3, r2, r3
 20548 011e DAB2     		uxtb	r2, r3
 20549 0120 0F23     		movs	r3, #15
 20550 0122 FB18     		adds	r3, r7, r3
 20551 0124 1A70     		strb	r2, [r3]
 20552 0126 03E0     		b	.L1218
 20553              	.L1219:
8329:bma2x2.c      **** 		} else {
8330:bma2x2.c      **** 			com_rslt = E_OUT_OF_RANGE;
 20554              		.loc 1 8330 0
 20555 0128 0F23     		movs	r3, #15
 20556 012a FB18     		adds	r3, r7, r3
 20557 012c FE22     		movs	r2, #254
 20558 012e 1A70     		strb	r2, [r3]
 20559              	.L1218:
8331:bma2x2.c      **** 		}
8332:bma2x2.c      **** 	}
8333:bma2x2.c      **** 	return com_rslt;
 20560              		.loc 1 8333 0
 20561 0130 0F23     		movs	r3, #15
 20562 0132 FB18     		adds	r3, r7, r3
 20563 0134 1B78     		ldrb	r3, [r3]
 20564 0136 5BB2     		sxtb	r3, r3
8334:bma2x2.c      **** }
 20565              		.loc 1 8334 0
 20566 0138 1800     		movs	r0, r3
 20567 013a BD46     		mov	sp, r7
 20568 013c 04B0     		add	sp, sp, #16
 20569              		@ sp needed
 20570 013e B0BD     		pop	{r4, r5, r7, pc}
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 511


 20571              	.L1223:
 20572              		.align	2
 20573              	.L1222:
 20574 0140 00000000 		.word	p_bma2x2
 20575              		.cfi_endproc
 20576              	.LFE137:
 20577              		.size	bma2x2_set_fifo_data_select, .-bma2x2_set_fifo_data_select
 20578              		.section	.text.bma2x2_read_fifo_data,"ax",%progbits
 20579              		.align	2
 20580              		.global	bma2x2_read_fifo_data
 20581              		.code	16
 20582              		.thumb_func
 20583              		.type	bma2x2_read_fifo_data, %function
 20584              	bma2x2_read_fifo_data:
 20585              	.LFB138:
8335:bma2x2.c      **** 
8336:bma2x2.c      **** /*!
8337:bma2x2.c      ****  *  @brief This API reads the FIFO data from the register 0x3F
8338:bma2x2.c      ****  *  and store the data in the user defined buffer mapped to the member
8339:bma2x2.c      ****  *  of structure "fifo_configuration"
8340:bma2x2.c      ****  *
8341:bma2x2.c      ****  *  @note Before calling this API user must map the following FIFO settings
8342:bma2x2.c      ****  *  required to read the FIFO data to the structure "fifo_configuration"
8343:bma2x2.c      ****  *    - Data buffer to store the FIFO data is mapped to
8344:bma2x2.c      ****  *      the structure member "fifo_data"
8345:bma2x2.c      ****  *    - Number of bytes to be read from FIFO is mapped to
8346:bma2x2.c      ****  *      the structure member "fifo_length"
8347:bma2x2.c      ****  *
8348:bma2x2.c      ****  *  @note The number of bytes to be read from the FIFO is specified in the
8349:bma2x2.c      ****  *  member "fifo_length" of the structure "fifo_configuration"
8350:bma2x2.c      ****  *
8351:bma2x2.c      ****  *  @param[in,out] fifo_conf : Structure containing the FIFO configurations
8352:bma2x2.c      ****  *  is passed as input and FIFO data of specified length is obtained as output
8353:bma2x2.c      ****  *
8354:bma2x2.c      ****  *  @return results of bus communication function
8355:bma2x2.c      ****  *  @retval 0 -> Success
8356:bma2x2.c      ****  *  @retval -1 -> Error
8357:bma2x2.c      ****  *  @retval -127 -> Null Pointer Error
8358:bma2x2.c      ****  *
8359:bma2x2.c      ****  */
8360:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_read_fifo_data(
8361:bma2x2.c      **** 				struct fifo_configuration *fifo_conf)
8362:bma2x2.c      **** {
 20586              		.loc 1 8362 0
 20587              		.cfi_startproc
 20588              		@ args = 0, pretend = 0, frame = 16
 20589              		@ frame_needed = 1, uses_anonymous_args = 0
 20590 0000 90B5     		push	{r4, r7, lr}
 20591              		.cfi_def_cfa_offset 12
 20592              		.cfi_offset 4, -12
 20593              		.cfi_offset 7, -8
 20594              		.cfi_offset 14, -4
 20595 0002 85B0     		sub	sp, sp, #20
 20596              		.cfi_def_cfa_offset 32
 20597 0004 00AF     		add	r7, sp, #0
 20598              		.cfi_def_cfa_register 7
 20599 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 512


8363:bma2x2.c      **** 	u8 fifo_frame_count = 0;
 20600              		.loc 1 8363 0
 20601 0008 0D23     		movs	r3, #13
 20602 000a FB18     		adds	r3, r7, r3
 20603 000c 0022     		movs	r2, #0
 20604 000e 1A70     		strb	r2, [r3]
8364:bma2x2.c      **** 	u8 fifo_data_bytes = 0;
 20605              		.loc 1 8364 0
 20606 0010 0F23     		movs	r3, #15
 20607 0012 FB18     		adds	r3, r7, r3
 20608 0014 0022     		movs	r2, #0
 20609 0016 1A70     		strb	r2, [r3]
8365:bma2x2.c      **** 	u8 fifo_data_select = 0;
 20610              		.loc 1 8365 0
 20611 0018 0C23     		movs	r3, #12
 20612 001a FB18     		adds	r3, r7, r3
 20613 001c 0022     		movs	r2, #0
 20614 001e 1A70     		strb	r2, [r3]
8366:bma2x2.c      **** 	/*  Variable used to return value of
8367:bma2x2.c      **** 	communication routine*/
8368:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 20615              		.loc 1 8368 0
 20616 0020 0E23     		movs	r3, #14
 20617 0022 FB18     		adds	r3, r7, r3
 20618 0024 FF22     		movs	r2, #255
 20619 0026 1A70     		strb	r2, [r3]
8369:bma2x2.c      **** 
8370:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL || fifo_conf->fifo_data == BMA2x2_NULL) {
 20620              		.loc 1 8370 0
 20621 0028 344B     		ldr	r3, .L1232
 20622 002a 1B68     		ldr	r3, [r3]
 20623 002c 002B     		cmp	r3, #0
 20624 002e 03D0     		beq	.L1225
 20625              		.loc 1 8370 0 is_stmt 0 discriminator 1
 20626 0030 7B68     		ldr	r3, [r7, #4]
 20627 0032 1B68     		ldr	r3, [r3]
 20628 0034 002B     		cmp	r3, #0
 20629 0036 04D1     		bne	.L1226
 20630              	.L1225:
8371:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
8372:bma2x2.c      **** 		com_rslt = E_BMA2x2_NULL_PTR;
 20631              		.loc 1 8372 0 is_stmt 1
 20632 0038 0E23     		movs	r3, #14
 20633 003a FB18     		adds	r3, r7, r3
 20634 003c 8122     		movs	r2, #129
 20635 003e 1A70     		strb	r2, [r3]
 20636 0040 54E0     		b	.L1227
 20637              	.L1226:
8373:bma2x2.c      **** 	} else {
8374:bma2x2.c      **** 		/*Resetting the FIFO data byte index*/
8375:bma2x2.c      **** 		fifo_conf->accel_byte_start_index = 0;
 20638              		.loc 1 8375 0
 20639 0042 7B68     		ldr	r3, [r7, #4]
 20640 0044 0022     		movs	r2, #0
 20641 0046 1A71     		strb	r2, [r3, #4]
8376:bma2x2.c      **** 		/*Frames in FIFO is stored */
8377:bma2x2.c      **** 		com_rslt = bma2x2_get_fifo_frame_count(&fifo_frame_count);
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 513


 20642              		.loc 1 8377 0
 20643 0048 0E23     		movs	r3, #14
 20644 004a FC18     		adds	r4, r7, r3
 20645 004c 0D23     		movs	r3, #13
 20646 004e FB18     		adds	r3, r7, r3
 20647 0050 1800     		movs	r0, r3
 20648 0052 FFF7FEFF 		bl	bma2x2_get_fifo_frame_count
 20649 0056 0300     		movs	r3, r0
 20650 0058 2370     		strb	r3, [r4]
8378:bma2x2.c      **** 		/*FIFO data select value is stored*/
8379:bma2x2.c      **** 		com_rslt += bma2x2_get_fifo_data_select(&fifo_data_select);
 20651              		.loc 1 8379 0
 20652 005a 0C23     		movs	r3, #12
 20653 005c FB18     		adds	r3, r7, r3
 20654 005e 1800     		movs	r0, r3
 20655 0060 FFF7FEFF 		bl	bma2x2_get_fifo_data_select
 20656 0064 0300     		movs	r3, r0
 20657 0066 DAB2     		uxtb	r2, r3
 20658 0068 0E23     		movs	r3, #14
 20659 006a FB18     		adds	r3, r7, r3
 20660 006c 1B78     		ldrb	r3, [r3]
 20661 006e D318     		adds	r3, r2, r3
 20662 0070 DAB2     		uxtb	r2, r3
 20663 0072 0E23     		movs	r3, #14
 20664 0074 FB18     		adds	r3, r7, r3
 20665 0076 1A70     		strb	r2, [r3]
8380:bma2x2.c      **** 		/*Number of bytes in FIFO is calculated*/
8381:bma2x2.c      **** 		if (fifo_data_select == BMA2x2_FIFO_XYZ_DATA_ENABLED) {
 20666              		.loc 1 8381 0
 20667 0078 0C23     		movs	r3, #12
 20668 007a FB18     		adds	r3, r7, r3
 20669 007c 1B78     		ldrb	r3, [r3]
 20670 007e 002B     		cmp	r3, #0
 20671 0080 0BD1     		bne	.L1228
8382:bma2x2.c      **** 			/*Number of bytes in FIFO when XYZ data are enabled*/
8383:bma2x2.c      **** 			fifo_data_bytes = fifo_frame_count *
 20672              		.loc 1 8383 0
 20673 0082 0D23     		movs	r3, #13
 20674 0084 FB18     		adds	r3, r7, r3
 20675 0086 1B78     		ldrb	r3, [r3]
 20676 0088 0F22     		movs	r2, #15
 20677 008a BA18     		adds	r2, r7, r2
 20678 008c 191C     		adds	r1, r3, #0
 20679 008e 0B1C     		adds	r3, r1, #0
 20680 0090 DB18     		adds	r3, r3, r3
 20681 0092 5B18     		adds	r3, r3, r1
 20682 0094 DB18     		adds	r3, r3, r3
 20683 0096 1370     		strb	r3, [r2]
 20684 0098 06E0     		b	.L1229
 20685              	.L1228:
8384:bma2x2.c      **** 					BMA2x2_FIFO_XYZ_AXES_FRAME_SIZE;
8385:bma2x2.c      **** 		} else {
8386:bma2x2.c      **** 			/*No of bytes in FIFO when single axis data enabled*/
8387:bma2x2.c      **** 			fifo_data_bytes = fifo_frame_count *
 20686              		.loc 1 8387 0
 20687 009a 0D23     		movs	r3, #13
 20688 009c FB18     		adds	r3, r7, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 514


 20689 009e 1B78     		ldrb	r3, [r3]
 20690 00a0 0F22     		movs	r2, #15
 20691 00a2 BA18     		adds	r2, r7, r2
 20692 00a4 DB18     		adds	r3, r3, r3
 20693 00a6 1370     		strb	r3, [r2]
 20694              	.L1229:
8388:bma2x2.c      **** 					BMA2x2_FIFO_SINGLE_AXIS_FRAME_SIZE;
8389:bma2x2.c      **** 		}
8390:bma2x2.c      **** 		/*Handled the case where user requests to read more FIFO
8391:bma2x2.c      **** 		length than available FIFO data*/
8392:bma2x2.c      **** 		if (fifo_conf->fifo_length > fifo_data_bytes) {
 20695              		.loc 1 8392 0
 20696 00a8 7B68     		ldr	r3, [r7, #4]
 20697 00aa 5B79     		ldrb	r3, [r3, #5]
 20698 00ac 0F22     		movs	r2, #15
 20699 00ae BA18     		adds	r2, r7, r2
 20700 00b0 1278     		ldrb	r2, [r2]
 20701 00b2 9A42     		cmp	r2, r3
 20702 00b4 04D2     		bcs	.L1230
8393:bma2x2.c      **** 			/*Number of bytes in FIFO is read entirely when user
8394:bma2x2.c      **** 			reads more FIFO data than available*/
8395:bma2x2.c      **** 			fifo_conf->fifo_length = fifo_data_bytes;
 20703              		.loc 1 8395 0
 20704 00b6 7B68     		ldr	r3, [r7, #4]
 20705 00b8 0F22     		movs	r2, #15
 20706 00ba BA18     		adds	r2, r7, r2
 20707 00bc 1278     		ldrb	r2, [r2]
 20708 00be 5A71     		strb	r2, [r3, #5]
 20709              	.L1230:
8396:bma2x2.c      **** 		}
8397:bma2x2.c      **** 		/*Read the FIFO data*/
8398:bma2x2.c      **** 		com_rslt += p_bma2x2->BMA2x2_BUS_READ_FUNC(p_bma2x2->dev_addr,
 20710              		.loc 1 8398 0
 20711 00c0 0E4B     		ldr	r3, .L1232
 20712 00c2 1B68     		ldr	r3, [r3]
 20713 00c4 DC68     		ldr	r4, [r3, #12]
 20714 00c6 0D4B     		ldr	r3, .L1232
 20715 00c8 1B68     		ldr	r3, [r3]
 20716 00ca 1879     		ldrb	r0, [r3, #4]
 20717 00cc 7B68     		ldr	r3, [r7, #4]
 20718 00ce 1A68     		ldr	r2, [r3]
 20719 00d0 7B68     		ldr	r3, [r7, #4]
 20720 00d2 5B79     		ldrb	r3, [r3, #5]
 20721 00d4 3F21     		movs	r1, #63
 20722 00d6 A047     		blx	r4
 20723 00d8 0300     		movs	r3, r0
 20724 00da DAB2     		uxtb	r2, r3
 20725 00dc 0E23     		movs	r3, #14
 20726 00de FB18     		adds	r3, r7, r3
 20727 00e0 1B78     		ldrb	r3, [r3]
 20728 00e2 D318     		adds	r3, r2, r3
 20729 00e4 DAB2     		uxtb	r2, r3
 20730 00e6 0E23     		movs	r3, #14
 20731 00e8 FB18     		adds	r3, r7, r3
 20732 00ea 1A70     		strb	r2, [r3]
 20733              	.L1227:
8399:bma2x2.c      **** 			BMA2x2_FIFO_DATA_OUTPUT_ADDR, fifo_conf->fifo_data,
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 515


8400:bma2x2.c      **** 			fifo_conf->fifo_length);
8401:bma2x2.c      **** 	}
8402:bma2x2.c      **** 	return com_rslt;
 20734              		.loc 1 8402 0
 20735 00ec 0E23     		movs	r3, #14
 20736 00ee FB18     		adds	r3, r7, r3
 20737 00f0 1B78     		ldrb	r3, [r3]
 20738 00f2 5BB2     		sxtb	r3, r3
8403:bma2x2.c      **** }
 20739              		.loc 1 8403 0
 20740 00f4 1800     		movs	r0, r3
 20741 00f6 BD46     		mov	sp, r7
 20742 00f8 05B0     		add	sp, sp, #20
 20743              		@ sp needed
 20744 00fa 90BD     		pop	{r4, r7, pc}
 20745              	.L1233:
 20746              		.align	2
 20747              	.L1232:
 20748 00fc 00000000 		.word	p_bma2x2
 20749              		.cfi_endproc
 20750              	.LFE138:
 20751              		.size	bma2x2_read_fifo_data, .-bma2x2_read_fifo_data
 20752              		.section	.text.bma2x2_extract_accel,"ax",%progbits
 20753              		.align	2
 20754              		.global	bma2x2_extract_accel
 20755              		.code	16
 20756              		.thumb_func
 20757              		.type	bma2x2_extract_accel, %function
 20758              	bma2x2_extract_accel:
 20759              	.LFB139:
8404:bma2x2.c      **** 
8405:bma2x2.c      **** /*!
8406:bma2x2.c      ****  *  @brief This API extracts the accel data from the FIFO frames
8407:bma2x2.c      ****  *
8408:bma2x2.c      ****  *  @note The bma2x2_extract_accel() API should be called only after reading
8409:bma2x2.c      ****  *  the FIFO data by calling the bma2x2_read_fifo_data() API
8410:bma2x2.c      ****  *
8411:bma2x2.c      ****  *  @param[in,out] accel_frame      : Instance of the union where accel data
8412:bma2x2.c      ****  *                                    in FIFO is parsed and stored
8413:bma2x2.c      ****  *
8414:bma2x2.c      ****  *  @param[in,out] accel_frame_count: Number of Accel frames requested by user
8415:bma2x2.c      ****  *                                    is got as input and number of
8416:bma2x2.c      ****  *                                    accel frames parsed and stored is
8417:bma2x2.c      ****  *                                    returned as output to user
8418:bma2x2.c      ****  *
8419:bma2x2.c      ****  *  @param[in, out] fifo_conf       : FIFO configuration structure.
8420:bma2x2.c      ****  *                                    It provides the following as input
8421:bma2x2.c      ****  *                                        - user defined buffer
8422:bma2x2.c      ****  *                                        - length of FIFO data read
8423:bma2x2.c      ****  *                                    It returns the accel_byte_start_index
8424:bma2x2.c      ****  *                                    (index of accel bytes parsed from FIFO)
8425:bma2x2.c      ****  *
8426:bma2x2.c      ****  *  @return results of API execution status
8427:bma2x2.c      ****  *  @retval 0 -> Success
8428:bma2x2.c      ****  *  @retval -127 -> Error
8429:bma2x2.c      ****  *
8430:bma2x2.c      ****  */
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 516


8431:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_extract_accel(union fifo_frame *accel_frame,
8432:bma2x2.c      **** 	u8 *accel_frame_count, struct fifo_configuration *fifo_conf)
8433:bma2x2.c      **** {
 20760              		.loc 1 8433 0
 20761              		.cfi_startproc
 20762              		@ args = 0, pretend = 0, frame = 24
 20763              		@ frame_needed = 1, uses_anonymous_args = 0
 20764 0000 90B5     		push	{r4, r7, lr}
 20765              		.cfi_def_cfa_offset 12
 20766              		.cfi_offset 4, -12
 20767              		.cfi_offset 7, -8
 20768              		.cfi_offset 14, -4
 20769 0002 89B0     		sub	sp, sp, #36
 20770              		.cfi_def_cfa_offset 48
 20771 0004 02AF     		add	r7, sp, #8
 20772              		.cfi_def_cfa 7, 40
 20773 0006 F860     		str	r0, [r7, #12]
 20774 0008 B960     		str	r1, [r7, #8]
 20775 000a 7A60     		str	r2, [r7, #4]
8434:bma2x2.c      **** 	u8 data_index = 0;
 20776              		.loc 1 8434 0
 20777 000c 1523     		movs	r3, #21
 20778 000e FB18     		adds	r3, r7, r3
 20779 0010 0022     		movs	r2, #0
 20780 0012 1A70     		strb	r2, [r3]
8435:bma2x2.c      **** 	u8 accel_index = 0;
 20781              		.loc 1 8435 0
 20782 0014 1423     		movs	r3, #20
 20783 0016 FB18     		adds	r3, r7, r3
 20784 0018 0022     		movs	r2, #0
 20785 001a 1A70     		strb	r2, [r3]
8436:bma2x2.c      **** 	u8 data_read_length = 0;
 20786              		.loc 1 8436 0
 20787 001c 1323     		movs	r3, #19
 20788 001e FB18     		adds	r3, r7, r3
 20789 0020 0022     		movs	r2, #0
 20790 0022 1A70     		strb	r2, [r3]
8437:bma2x2.c      **** 	u8 fifo_data_select = 0;
 20791              		.loc 1 8437 0
 20792 0024 1623     		movs	r3, #22
 20793 0026 FB18     		adds	r3, r7, r3
 20794 0028 0022     		movs	r2, #0
 20795 002a 1A70     		strb	r2, [r3]
8438:bma2x2.c      **** 	/*  Variable used to return value of communication routine*/
8439:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = 0;
 20796              		.loc 1 8439 0
 20797 002c 1723     		movs	r3, #23
 20798 002e FB18     		adds	r3, r7, r3
 20799 0030 0022     		movs	r2, #0
 20800 0032 1A70     		strb	r2, [r3]
8440:bma2x2.c      **** 
8441:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL || fifo_conf->fifo_data == BMA2x2_NULL) {
 20801              		.loc 1 8441 0
 20802 0034 254B     		ldr	r3, .L1241
 20803 0036 1B68     		ldr	r3, [r3]
 20804 0038 002B     		cmp	r3, #0
 20805 003a 03D0     		beq	.L1235
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 517


 20806              		.loc 1 8441 0 is_stmt 0 discriminator 1
 20807 003c 7B68     		ldr	r3, [r7, #4]
 20808 003e 1B68     		ldr	r3, [r3]
 20809 0040 002B     		cmp	r3, #0
 20810 0042 04D1     		bne	.L1236
 20811              	.L1235:
8442:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty and FIFO data buffer
8443:bma2x2.c      **** 		not being mapped to  fifo_configuration structure */
8444:bma2x2.c      **** 		com_rslt = E_BMA2x2_NULL_PTR;
 20812              		.loc 1 8444 0 is_stmt 1
 20813 0044 1723     		movs	r3, #23
 20814 0046 FB18     		adds	r3, r7, r3
 20815 0048 8122     		movs	r2, #129
 20816 004a 1A70     		strb	r2, [r3]
 20817 004c 35E0     		b	.L1237
 20818              	.L1236:
8445:bma2x2.c      **** 	} else {
8446:bma2x2.c      **** 		/* FIFO data enable value is stored in fifo_data_select*/
8447:bma2x2.c      **** 		fifo_data_select = p_bma2x2->fifo_config &
 20819              		.loc 1 8447 0
 20820 004e 1F4B     		ldr	r3, .L1241
 20821 0050 1B68     		ldr	r3, [r3]
 20822 0052 5A79     		ldrb	r2, [r3, #5]
 20823 0054 1623     		movs	r3, #22
 20824 0056 FB18     		adds	r3, r7, r3
 20825 0058 0321     		movs	r1, #3
 20826 005a 0A40     		ands	r2, r1
 20827 005c 1A70     		strb	r2, [r3]
8448:bma2x2.c      **** 						BMA2x2_FIFO_DATA_ENABLED_MASK;
8449:bma2x2.c      **** 		/* FIFO bytes available for parsing is obtained in
8450:bma2x2.c      **** 		data_read_length*/
8451:bma2x2.c      **** 		get_accel_len_to_parse(&data_index, &data_read_length,
 20828              		.loc 1 8451 0
 20829 005e BB68     		ldr	r3, [r7, #8]
 20830 0060 1A78     		ldrb	r2, [r3]
 20831 0062 1623     		movs	r3, #22
 20832 0064 FB18     		adds	r3, r7, r3
 20833 0066 1C78     		ldrb	r4, [r3]
 20834 0068 1323     		movs	r3, #19
 20835 006a F918     		adds	r1, r7, r3
 20836 006c 1523     		movs	r3, #21
 20837 006e F818     		adds	r0, r7, r3
 20838 0070 7B68     		ldr	r3, [r7, #4]
 20839 0072 0093     		str	r3, [sp]
 20840 0074 2300     		movs	r3, r4
 20841 0076 FFF7FEFF 		bl	get_accel_len_to_parse
8452:bma2x2.c      **** 			*accel_frame_count, fifo_data_select, fifo_conf);
8453:bma2x2.c      **** 		/*Parse the FIFO data from accel byte start index to
8454:bma2x2.c      **** 		data_read_length*/
8455:bma2x2.c      **** 		for (; data_index < data_read_length; ) {
 20842              		.loc 1 8455 0
 20843 007a 0CE0     		b	.L1238
 20844              	.L1239:
8456:bma2x2.c      **** 			unpack_accel_frame(accel_frame, &data_index,
 20845              		.loc 1 8456 0
 20846 007c 1623     		movs	r3, #22
 20847 007e FB18     		adds	r3, r7, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 518


 20848 0080 1C78     		ldrb	r4, [r3]
 20849 0082 1423     		movs	r3, #20
 20850 0084 FA18     		adds	r2, r7, r3
 20851 0086 1523     		movs	r3, #21
 20852 0088 F918     		adds	r1, r7, r3
 20853 008a F868     		ldr	r0, [r7, #12]
 20854 008c 7B68     		ldr	r3, [r7, #4]
 20855 008e 0093     		str	r3, [sp]
 20856 0090 2300     		movs	r3, r4
 20857 0092 FFF7FEFF 		bl	unpack_accel_frame
 20858              	.L1238:
8455:bma2x2.c      **** 			unpack_accel_frame(accel_frame, &data_index,
 20859              		.loc 1 8455 0
 20860 0096 1523     		movs	r3, #21
 20861 0098 FB18     		adds	r3, r7, r3
 20862 009a 1A78     		ldrb	r2, [r3]
 20863 009c 1323     		movs	r3, #19
 20864 009e FB18     		adds	r3, r7, r3
 20865 00a0 1B78     		ldrb	r3, [r3]
 20866 00a2 9A42     		cmp	r2, r3
 20867 00a4 EAD3     		bcc	.L1239
8457:bma2x2.c      **** 				&accel_index, fifo_data_select, fifo_conf);
8458:bma2x2.c      **** 		}
8459:bma2x2.c      **** 		/* update number of accel data read*/
8460:bma2x2.c      **** 		*accel_frame_count = accel_index;
 20868              		.loc 1 8460 0
 20869 00a6 1423     		movs	r3, #20
 20870 00a8 FB18     		adds	r3, r7, r3
 20871 00aa 1A78     		ldrb	r2, [r3]
 20872 00ac BB68     		ldr	r3, [r7, #8]
 20873 00ae 1A70     		strb	r2, [r3]
8461:bma2x2.c      **** 		/*update the accel byte index*/
8462:bma2x2.c      **** 		fifo_conf->accel_byte_start_index = data_index;
 20874              		.loc 1 8462 0
 20875 00b0 1523     		movs	r3, #21
 20876 00b2 FB18     		adds	r3, r7, r3
 20877 00b4 1A78     		ldrb	r2, [r3]
 20878 00b6 7B68     		ldr	r3, [r7, #4]
 20879 00b8 1A71     		strb	r2, [r3, #4]
 20880              	.L1237:
8463:bma2x2.c      **** 	}
8464:bma2x2.c      **** 	return com_rslt;
 20881              		.loc 1 8464 0
 20882 00ba 1723     		movs	r3, #23
 20883 00bc FB18     		adds	r3, r7, r3
 20884 00be 1B78     		ldrb	r3, [r3]
 20885 00c0 5BB2     		sxtb	r3, r3
8465:bma2x2.c      **** }
 20886              		.loc 1 8465 0
 20887 00c2 1800     		movs	r0, r3
 20888 00c4 BD46     		mov	sp, r7
 20889 00c6 07B0     		add	sp, sp, #28
 20890              		@ sp needed
 20891 00c8 90BD     		pop	{r4, r7, pc}
 20892              	.L1242:
 20893 00ca C046     		.align	2
 20894              	.L1241:
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 519


 20895 00cc 00000000 		.word	p_bma2x2
 20896              		.cfi_endproc
 20897              	.LFE139:
 20898              		.size	bma2x2_extract_accel, .-bma2x2_extract_accel
 20899              		.section	.text.get_accel_len_to_parse,"ax",%progbits
 20900              		.align	2
 20901              		.code	16
 20902              		.thumb_func
 20903              		.type	get_accel_len_to_parse, %function
 20904              	get_accel_len_to_parse:
 20905              	.LFB140:
8466:bma2x2.c      **** 
8467:bma2x2.c      **** /*!
8468:bma2x2.c      ****  *  @brief This API computes the number of bytes of accel FIFO data
8469:bma2x2.c      ****  *  which is to be parsed.
8470:bma2x2.c      ****  */
8471:bma2x2.c      **** static void get_accel_len_to_parse(u8 *data_index, u8 *data_read_length,
8472:bma2x2.c      **** 	u8 accel_frame_count, u8 fifo_data_select,
8473:bma2x2.c      **** 	struct fifo_configuration *fifo_conf)
8474:bma2x2.c      **** {
 20906              		.loc 1 8474 0
 20907              		.cfi_startproc
 20908              		@ args = 4, pretend = 0, frame = 16
 20909              		@ frame_needed = 1, uses_anonymous_args = 0
 20910 0000 80B5     		push	{r7, lr}
 20911              		.cfi_def_cfa_offset 8
 20912              		.cfi_offset 7, -8
 20913              		.cfi_offset 14, -4
 20914 0002 84B0     		sub	sp, sp, #16
 20915              		.cfi_def_cfa_offset 24
 20916 0004 00AF     		add	r7, sp, #0
 20917              		.cfi_def_cfa_register 7
 20918 0006 F860     		str	r0, [r7, #12]
 20919 0008 B960     		str	r1, [r7, #8]
 20920 000a 1900     		movs	r1, r3
 20921 000c FB1D     		adds	r3, r7, #7
 20922 000e 1A70     		strb	r2, [r3]
 20923 0010 BB1D     		adds	r3, r7, #6
 20924 0012 0A1C     		adds	r2, r1, #0
 20925 0014 1A70     		strb	r2, [r3]
8475:bma2x2.c      **** 	/*Current data index is set to accel_byte_start_index*/
8476:bma2x2.c      **** 	*data_index = fifo_conf->accel_byte_start_index;
 20926              		.loc 1 8476 0
 20927 0016 BB69     		ldr	r3, [r7, #24]
 20928 0018 1A79     		ldrb	r2, [r3, #4]
 20929 001a FB68     		ldr	r3, [r7, #12]
 20930 001c 1A70     		strb	r2, [r3]
8477:bma2x2.c      **** 	/* FIFO bytes corresponding to the requested FIFO frames is obtained*/
8478:bma2x2.c      **** 	if (fifo_data_select == BMA2x2_FIFO_XYZ_DATA_ENABLED) {
 20931              		.loc 1 8478 0
 20932 001e BB1D     		adds	r3, r7, #6
 20933 0020 1B78     		ldrb	r3, [r3]
 20934 0022 002B     		cmp	r3, #0
 20935 0024 09D1     		bne	.L1244
8479:bma2x2.c      **** 		/*Number of bytes in FIFO when XYZ data are enabled*/
8480:bma2x2.c      **** 		*data_read_length = accel_frame_count *
 20936              		.loc 1 8480 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 520


 20937 0026 FB1D     		adds	r3, r7, #7
 20938 0028 1B78     		ldrb	r3, [r3]
 20939 002a 1A1C     		adds	r2, r3, #0
 20940 002c 9218     		adds	r2, r2, r2
 20941 002e D318     		adds	r3, r2, r3
 20942 0030 DB18     		adds	r3, r3, r3
 20943 0032 DAB2     		uxtb	r2, r3
 20944 0034 BB68     		ldr	r3, [r7, #8]
 20945 0036 1A70     		strb	r2, [r3]
 20946 0038 05E0     		b	.L1245
 20947              	.L1244:
8481:bma2x2.c      **** 					BMA2x2_FIFO_XYZ_AXES_FRAME_SIZE;
8482:bma2x2.c      **** 	} else {
8483:bma2x2.c      **** 		/*No of bytes in FIFO when single axis data enabled*/
8484:bma2x2.c      **** 		*data_read_length = accel_frame_count *
 20948              		.loc 1 8484 0
 20949 003a FB1D     		adds	r3, r7, #7
 20950 003c 1B78     		ldrb	r3, [r3]
 20951 003e DB18     		adds	r3, r3, r3
 20952 0040 DAB2     		uxtb	r2, r3
 20953 0042 BB68     		ldr	r3, [r7, #8]
 20954 0044 1A70     		strb	r2, [r3]
 20955              	.L1245:
8485:bma2x2.c      **** 					BMA2x2_FIFO_SINGLE_AXIS_FRAME_SIZE;
8486:bma2x2.c      **** 	}
8487:bma2x2.c      **** 	if ((*data_read_length) > fifo_conf->fifo_length) {
 20956              		.loc 1 8487 0
 20957 0046 BB68     		ldr	r3, [r7, #8]
 20958 0048 1A78     		ldrb	r2, [r3]
 20959 004a BB69     		ldr	r3, [r7, #24]
 20960 004c 5B79     		ldrb	r3, [r3, #5]
 20961 004e 9A42     		cmp	r2, r3
 20962 0050 03D9     		bls	.L1247
8488:bma2x2.c      **** 		/*Handling the case where more FIFO frame is requested
8489:bma2x2.c      **** 		than available*/
8490:bma2x2.c      **** 		*data_read_length = fifo_conf->fifo_length;
 20963              		.loc 1 8490 0
 20964 0052 BB69     		ldr	r3, [r7, #24]
 20965 0054 5A79     		ldrb	r2, [r3, #5]
 20966 0056 BB68     		ldr	r3, [r7, #8]
 20967 0058 1A70     		strb	r2, [r3]
 20968              	.L1247:
8491:bma2x2.c      **** 	}
8492:bma2x2.c      **** }
 20969              		.loc 1 8492 0
 20970 005a C046     		nop
 20971 005c BD46     		mov	sp, r7
 20972 005e 04B0     		add	sp, sp, #16
 20973              		@ sp needed
 20974 0060 80BD     		pop	{r7, pc}
 20975              		.cfi_endproc
 20976              	.LFE140:
 20977              		.size	get_accel_len_to_parse, .-get_accel_len_to_parse
 20978 0062 C046     		.section	.text.unpack_accel_frame,"ax",%progbits
 20979              		.align	2
 20980              		.code	16
 20981              		.thumb_func
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 521


 20982              		.type	unpack_accel_frame, %function
 20983              	unpack_accel_frame:
 20984              	.LFB141:
8493:bma2x2.c      **** 
8494:bma2x2.c      **** /*!
8495:bma2x2.c      ****  *  @brief This API is used to parse the accelerometer frame from the
8496:bma2x2.c      ****  *  user defined FIFO data buffer mapped to the structure fifo_conf and store
8497:bma2x2.c      ****  *  it in the union fifo_frame
8498:bma2x2.c      ****  *
8499:bma2x2.c      ****  *  @note It update the data_index value which is used to store the index of
8500:bma2x2.c      ****  *  the current data byte which is parsed.
8501:bma2x2.c      ****  *
8502:bma2x2.c      ****  *  @note The parsed accel frames stored in the union fifo_conf contains data
8503:bma2x2.c      ****  *  in accordance with the enabled data axes to be stored in FIFO
8504:bma2x2.c      ****  *  (XYZ axes or individual axis)
8505:bma2x2.c      ****  */
8506:bma2x2.c      **** static void unpack_accel_frame(union fifo_frame *accel_frame, u8 *data_index,
8507:bma2x2.c      **** 	u8 *accel_index, u8 fifo_data_select,
8508:bma2x2.c      **** 	struct fifo_configuration *fifo_conf)
8509:bma2x2.c      **** {
 20985              		.loc 1 8509 0
 20986              		.cfi_startproc
 20987              		@ args = 4, pretend = 0, frame = 24
 20988              		@ frame_needed = 1, uses_anonymous_args = 0
 20989 0000 80B5     		push	{r7, lr}
 20990              		.cfi_def_cfa_offset 8
 20991              		.cfi_offset 7, -8
 20992              		.cfi_offset 14, -4
 20993 0002 86B0     		sub	sp, sp, #24
 20994              		.cfi_def_cfa_offset 32
 20995 0004 00AF     		add	r7, sp, #0
 20996              		.cfi_def_cfa_register 7
 20997 0006 F860     		str	r0, [r7, #12]
 20998 0008 B960     		str	r1, [r7, #8]
 20999 000a 7A60     		str	r2, [r7, #4]
 21000 000c 1A00     		movs	r2, r3
 21001 000e FB1C     		adds	r3, r7, #3
 21002 0010 1A70     		strb	r2, [r3]
8510:bma2x2.c      **** 	u16 data_lsb = 0;
 21003              		.loc 1 8510 0
 21004 0012 1623     		movs	r3, #22
 21005 0014 FB18     		adds	r3, r7, r3
 21006 0016 0022     		movs	r2, #0
 21007 0018 1A80     		strh	r2, [r3]
8511:bma2x2.c      **** 	u16 data_msb = 0;
 21008              		.loc 1 8511 0
 21009 001a 1423     		movs	r3, #20
 21010 001c FB18     		adds	r3, r7, r3
 21011 001e 0022     		movs	r2, #0
 21012 0020 1A80     		strh	r2, [r3]
8512:bma2x2.c      **** 
8513:bma2x2.c      **** 	switch (fifo_data_select) {
 21013              		.loc 1 8513 0
 21014 0022 FB1C     		adds	r3, r7, #3
 21015 0024 1B78     		ldrb	r3, [r3]
 21016 0026 012B     		cmp	r3, #1
 21017 0028 20D0     		beq	.L1250
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 522


 21018 002a 02DC     		bgt	.L1251
 21019 002c 002B     		cmp	r3, #0
 21020 002e 07D0     		beq	.L1252
8514:bma2x2.c      **** 
8515:bma2x2.c      **** 	case BMA2x2_FIFO_XYZ_DATA_ENABLED:
8516:bma2x2.c      **** 		unpack_accel_xyz(&accel_frame[*accel_index], data_index,
8517:bma2x2.c      **** 								fifo_conf);
8518:bma2x2.c      **** 		/* Accel index is updated*/
8519:bma2x2.c      **** 		(*accel_index)++;
8520:bma2x2.c      **** 	break;
8521:bma2x2.c      **** 
8522:bma2x2.c      **** 	case BMA2x2_FIFO_X_DATA_ENABLED:
8523:bma2x2.c      **** 		/* Accel raw x data */
8524:bma2x2.c      **** 		data_lsb = fifo_conf->fifo_data[(*data_index)++];
8525:bma2x2.c      **** 		data_msb = fifo_conf->fifo_data[(*data_index)++];
8526:bma2x2.c      **** 		accel_frame[*accel_index].x = (u16)((data_msb << 8) | data_lsb);
8527:bma2x2.c      **** 
8528:bma2x2.c      **** 		/* Resolution based data from FIFO is updated */
8529:bma2x2.c      **** 		if (V_BMA2x2RESOLUTION_U8 == BMA2x2_12_RESOLUTION) {
8530:bma2x2.c      **** 			accel_frame[*accel_index].x =
8531:bma2x2.c      **** 					(accel_frame[*accel_index].x >> 4);
8532:bma2x2.c      **** 		} else if (V_BMA2x2RESOLUTION_U8 == BMA2x2_14_RESOLUTION) {
8533:bma2x2.c      **** 			accel_frame[*accel_index].x =
8534:bma2x2.c      **** 					(accel_frame[*accel_index].x >> 2);
8535:bma2x2.c      **** 		} else if (V_BMA2x2RESOLUTION_U8 == BMA2x2_10_RESOLUTION) {
8536:bma2x2.c      **** 			accel_frame[*accel_index].x =
8537:bma2x2.c      **** 					(accel_frame[*accel_index].x >> 6);
8538:bma2x2.c      **** 		}
8539:bma2x2.c      **** 		/* Accel index is updated*/
8540:bma2x2.c      **** 		(*accel_index)++;
8541:bma2x2.c      **** 	break;
8542:bma2x2.c      **** 
8543:bma2x2.c      **** 	case BMA2x2_FIFO_Y_DATA_ENABLED:
8544:bma2x2.c      **** 		/* Accel raw y data */
8545:bma2x2.c      **** 		data_lsb = fifo_conf->fifo_data[(*data_index)++];
8546:bma2x2.c      **** 		data_msb = fifo_conf->fifo_data[(*data_index)++];
8547:bma2x2.c      **** 		accel_frame[*accel_index].y = (u16)((data_msb << 8) | data_lsb);
8548:bma2x2.c      **** 
8549:bma2x2.c      **** 		/* Resolution based data from FIFO is updated */
8550:bma2x2.c      **** 		if (V_BMA2x2RESOLUTION_U8 == BMA2x2_12_RESOLUTION) {
8551:bma2x2.c      **** 			accel_frame[*accel_index].y =
8552:bma2x2.c      **** 					(accel_frame[*accel_index].y >> 4);
8553:bma2x2.c      **** 		} else if (V_BMA2x2RESOLUTION_U8 == BMA2x2_14_RESOLUTION) {
8554:bma2x2.c      **** 			accel_frame[*accel_index].y =
8555:bma2x2.c      **** 					(accel_frame[*accel_index].y >> 2);
8556:bma2x2.c      **** 		} else if (V_BMA2x2RESOLUTION_U8 == BMA2x2_10_RESOLUTION) {
8557:bma2x2.c      **** 			accel_frame[*accel_index].y =
8558:bma2x2.c      **** 					(accel_frame[*accel_index].y >> 6);
8559:bma2x2.c      **** 		}
8560:bma2x2.c      **** 		/* Accel index is updated*/
8561:bma2x2.c      **** 		(*accel_index)++;
8562:bma2x2.c      **** 	break;
8563:bma2x2.c      **** 
8564:bma2x2.c      **** 	case BMA2x2_FIFO_Z_DATA_ENABLED:
8565:bma2x2.c      **** 		/* Accel raw z data */
8566:bma2x2.c      **** 		data_lsb = fifo_conf->fifo_data[(*data_index)++];
8567:bma2x2.c      **** 		data_msb = fifo_conf->fifo_data[(*data_index)++];
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 523


8568:bma2x2.c      **** 		accel_frame[*accel_index].z = (u16)((data_msb << 8) | data_lsb);
8569:bma2x2.c      **** 
8570:bma2x2.c      **** 		/* Resolution based data from FIFO is updated */
8571:bma2x2.c      **** 		if (V_BMA2x2RESOLUTION_U8 == BMA2x2_12_RESOLUTION) {
8572:bma2x2.c      **** 			accel_frame[*accel_index].z =
8573:bma2x2.c      **** 					(accel_frame[*accel_index].z >> 4);
8574:bma2x2.c      **** 		} else if (V_BMA2x2RESOLUTION_U8 == BMA2x2_14_RESOLUTION) {
8575:bma2x2.c      **** 			accel_frame[*accel_index].z =
8576:bma2x2.c      **** 					(accel_frame[*accel_index].z >> 2);
8577:bma2x2.c      **** 		} else if (V_BMA2x2RESOLUTION_U8 == BMA2x2_10_RESOLUTION) {
8578:bma2x2.c      **** 			accel_frame[*accel_index].z =
8579:bma2x2.c      **** 					(accel_frame[*accel_index].z >> 6);
8580:bma2x2.c      **** 		}
8581:bma2x2.c      **** 		/* Accel index is updated*/
8582:bma2x2.c      **** 		(*accel_index)++;
8583:bma2x2.c      **** 	break;
8584:bma2x2.c      **** 
8585:bma2x2.c      **** 	default:
8586:bma2x2.c      **** 	break;
 21021              		.loc 1 8586 0
 21022 0030 CCE1     		b	.L1255
 21023              	.L1251:
8513:bma2x2.c      **** 
 21024              		.loc 1 8513 0
 21025 0032 022B     		cmp	r3, #2
 21026 0034 00D1     		bne	.LCB19705
 21027 0036 A9E0     		b	.L1253	@long jump
 21028              	.LCB19705:
 21029 0038 032B     		cmp	r3, #3
 21030 003a 00D1     		bne	.LCB19707
 21031 003c 36E1     		b	.L1254	@long jump
 21032              	.LCB19707:
 21033              		.loc 1 8586 0
 21034 003e C5E1     		b	.L1255
 21035              	.L1252:
8516:bma2x2.c      **** 								fifo_conf);
 21036              		.loc 1 8516 0
 21037 0040 7B68     		ldr	r3, [r7, #4]
 21038 0042 1B78     		ldrb	r3, [r3]
 21039 0044 1A00     		movs	r2, r3
 21040 0046 1300     		movs	r3, r2
 21041 0048 5B00     		lsls	r3, r3, #1
 21042 004a 9B18     		adds	r3, r3, r2
 21043 004c 5B00     		lsls	r3, r3, #1
 21044 004e 1A00     		movs	r2, r3
 21045 0050 FB68     		ldr	r3, [r7, #12]
 21046 0052 9B18     		adds	r3, r3, r2
 21047 0054 3A6A     		ldr	r2, [r7, #32]
 21048 0056 B968     		ldr	r1, [r7, #8]
 21049 0058 1800     		movs	r0, r3
 21050 005a FFF7FEFF 		bl	unpack_accel_xyz
8519:bma2x2.c      **** 	break;
 21051              		.loc 1 8519 0
 21052 005e 7B68     		ldr	r3, [r7, #4]
 21053 0060 1B78     		ldrb	r3, [r3]
 21054 0062 0133     		adds	r3, r3, #1
 21055 0064 DAB2     		uxtb	r2, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 524


 21056 0066 7B68     		ldr	r3, [r7, #4]
 21057 0068 1A70     		strb	r2, [r3]
8520:bma2x2.c      **** 
 21058              		.loc 1 8520 0
 21059 006a AFE1     		b	.L1255
 21060              	.L1250:
8524:bma2x2.c      **** 		data_msb = fifo_conf->fifo_data[(*data_index)++];
 21061              		.loc 1 8524 0
 21062 006c 3B6A     		ldr	r3, [r7, #32]
 21063 006e 1A68     		ldr	r2, [r3]
 21064 0070 BB68     		ldr	r3, [r7, #8]
 21065 0072 1B78     		ldrb	r3, [r3]
 21066 0074 591C     		adds	r1, r3, #1
 21067 0076 C8B2     		uxtb	r0, r1
 21068 0078 B968     		ldr	r1, [r7, #8]
 21069 007a 0870     		strb	r0, [r1]
 21070 007c D318     		adds	r3, r2, r3
 21071 007e 1A78     		ldrb	r2, [r3]
 21072 0080 1623     		movs	r3, #22
 21073 0082 FB18     		adds	r3, r7, r3
 21074 0084 1A80     		strh	r2, [r3]
8525:bma2x2.c      **** 		accel_frame[*accel_index].x = (u16)((data_msb << 8) | data_lsb);
 21075              		.loc 1 8525 0
 21076 0086 3B6A     		ldr	r3, [r7, #32]
 21077 0088 1A68     		ldr	r2, [r3]
 21078 008a BB68     		ldr	r3, [r7, #8]
 21079 008c 1B78     		ldrb	r3, [r3]
 21080 008e 591C     		adds	r1, r3, #1
 21081 0090 C8B2     		uxtb	r0, r1
 21082 0092 B968     		ldr	r1, [r7, #8]
 21083 0094 0870     		strb	r0, [r1]
 21084 0096 D318     		adds	r3, r2, r3
 21085 0098 1A78     		ldrb	r2, [r3]
 21086 009a 1423     		movs	r3, #20
 21087 009c FB18     		adds	r3, r7, r3
 21088 009e 1A80     		strh	r2, [r3]
8526:bma2x2.c      **** 
 21089              		.loc 1 8526 0
 21090 00a0 7B68     		ldr	r3, [r7, #4]
 21091 00a2 1B78     		ldrb	r3, [r3]
 21092 00a4 1A00     		movs	r2, r3
 21093 00a6 1300     		movs	r3, r2
 21094 00a8 5B00     		lsls	r3, r3, #1
 21095 00aa 9B18     		adds	r3, r3, r2
 21096 00ac 5B00     		lsls	r3, r3, #1
 21097 00ae 1A00     		movs	r2, r3
 21098 00b0 FB68     		ldr	r3, [r7, #12]
 21099 00b2 9B18     		adds	r3, r3, r2
 21100 00b4 1422     		movs	r2, #20
 21101 00b6 BA18     		adds	r2, r7, r2
 21102 00b8 1288     		ldrh	r2, [r2]
 21103 00ba 1202     		lsls	r2, r2, #8
 21104 00bc 11B2     		sxth	r1, r2
 21105 00be 1622     		movs	r2, #22
 21106 00c0 BA18     		adds	r2, r7, r2
 21107 00c2 0020     		movs	r0, #0
 21108 00c4 125E     		ldrsh	r2, [r2, r0]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 525


 21109 00c6 0A43     		orrs	r2, r1
 21110 00c8 12B2     		sxth	r2, r2
 21111 00ca 1A80     		strh	r2, [r3]
8529:bma2x2.c      **** 			accel_frame[*accel_index].x =
 21112              		.loc 1 8529 0
 21113 00cc C14B     		ldr	r3, .L1265
 21114 00ce 1B78     		ldrb	r3, [r3]
 21115 00d0 002B     		cmp	r3, #0
 21116 00d2 19D1     		bne	.L1256
8530:bma2x2.c      **** 					(accel_frame[*accel_index].x >> 4);
 21117              		.loc 1 8530 0
 21118 00d4 7B68     		ldr	r3, [r7, #4]
 21119 00d6 1B78     		ldrb	r3, [r3]
 21120 00d8 1A00     		movs	r2, r3
 21121 00da 1300     		movs	r3, r2
 21122 00dc 5B00     		lsls	r3, r3, #1
 21123 00de 9B18     		adds	r3, r3, r2
 21124 00e0 5B00     		lsls	r3, r3, #1
 21125 00e2 1A00     		movs	r2, r3
 21126 00e4 FB68     		ldr	r3, [r7, #12]
 21127 00e6 9A18     		adds	r2, r3, r2
8531:bma2x2.c      **** 		} else if (V_BMA2x2RESOLUTION_U8 == BMA2x2_14_RESOLUTION) {
 21128              		.loc 1 8531 0
 21129 00e8 7B68     		ldr	r3, [r7, #4]
 21130 00ea 1B78     		ldrb	r3, [r3]
 21131 00ec 1900     		movs	r1, r3
 21132 00ee 0B00     		movs	r3, r1
 21133 00f0 5B00     		lsls	r3, r3, #1
 21134 00f2 5B18     		adds	r3, r3, r1
 21135 00f4 5B00     		lsls	r3, r3, #1
 21136 00f6 1900     		movs	r1, r3
 21137 00f8 FB68     		ldr	r3, [r7, #12]
 21138 00fa 5B18     		adds	r3, r3, r1
 21139 00fc 0021     		movs	r1, #0
 21140 00fe 5B5E     		ldrsh	r3, [r3, r1]
8530:bma2x2.c      **** 					(accel_frame[*accel_index].x >> 4);
 21141              		.loc 1 8530 0
 21142 0100 1B11     		asrs	r3, r3, #4
 21143 0102 1BB2     		sxth	r3, r3
 21144 0104 1380     		strh	r3, [r2]
 21145 0106 3AE0     		b	.L1257
 21146              	.L1256:
8532:bma2x2.c      **** 			accel_frame[*accel_index].x =
 21147              		.loc 1 8532 0
 21148 0108 B24B     		ldr	r3, .L1265
 21149 010a 1B78     		ldrb	r3, [r3]
 21150 010c 022B     		cmp	r3, #2
 21151 010e 19D1     		bne	.L1258
8533:bma2x2.c      **** 					(accel_frame[*accel_index].x >> 2);
 21152              		.loc 1 8533 0
 21153 0110 7B68     		ldr	r3, [r7, #4]
 21154 0112 1B78     		ldrb	r3, [r3]
 21155 0114 1A00     		movs	r2, r3
 21156 0116 1300     		movs	r3, r2
 21157 0118 5B00     		lsls	r3, r3, #1
 21158 011a 9B18     		adds	r3, r3, r2
 21159 011c 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 526


 21160 011e 1A00     		movs	r2, r3
 21161 0120 FB68     		ldr	r3, [r7, #12]
 21162 0122 9A18     		adds	r2, r3, r2
8534:bma2x2.c      **** 		} else if (V_BMA2x2RESOLUTION_U8 == BMA2x2_10_RESOLUTION) {
 21163              		.loc 1 8534 0
 21164 0124 7B68     		ldr	r3, [r7, #4]
 21165 0126 1B78     		ldrb	r3, [r3]
 21166 0128 1900     		movs	r1, r3
 21167 012a 0B00     		movs	r3, r1
 21168 012c 5B00     		lsls	r3, r3, #1
 21169 012e 5B18     		adds	r3, r3, r1
 21170 0130 5B00     		lsls	r3, r3, #1
 21171 0132 1900     		movs	r1, r3
 21172 0134 FB68     		ldr	r3, [r7, #12]
 21173 0136 5B18     		adds	r3, r3, r1
 21174 0138 0021     		movs	r1, #0
 21175 013a 5B5E     		ldrsh	r3, [r3, r1]
8533:bma2x2.c      **** 					(accel_frame[*accel_index].x >> 2);
 21176              		.loc 1 8533 0
 21177 013c 9B10     		asrs	r3, r3, #2
 21178 013e 1BB2     		sxth	r3, r3
 21179 0140 1380     		strh	r3, [r2]
 21180 0142 1CE0     		b	.L1257
 21181              	.L1258:
8535:bma2x2.c      **** 			accel_frame[*accel_index].x =
 21182              		.loc 1 8535 0
 21183 0144 A34B     		ldr	r3, .L1265
 21184 0146 1B78     		ldrb	r3, [r3]
 21185 0148 012B     		cmp	r3, #1
 21186 014a 18D1     		bne	.L1257
8536:bma2x2.c      **** 					(accel_frame[*accel_index].x >> 6);
 21187              		.loc 1 8536 0
 21188 014c 7B68     		ldr	r3, [r7, #4]
 21189 014e 1B78     		ldrb	r3, [r3]
 21190 0150 1A00     		movs	r2, r3
 21191 0152 1300     		movs	r3, r2
 21192 0154 5B00     		lsls	r3, r3, #1
 21193 0156 9B18     		adds	r3, r3, r2
 21194 0158 5B00     		lsls	r3, r3, #1
 21195 015a 1A00     		movs	r2, r3
 21196 015c FB68     		ldr	r3, [r7, #12]
 21197 015e 9A18     		adds	r2, r3, r2
8537:bma2x2.c      **** 		}
 21198              		.loc 1 8537 0
 21199 0160 7B68     		ldr	r3, [r7, #4]
 21200 0162 1B78     		ldrb	r3, [r3]
 21201 0164 1900     		movs	r1, r3
 21202 0166 0B00     		movs	r3, r1
 21203 0168 5B00     		lsls	r3, r3, #1
 21204 016a 5B18     		adds	r3, r3, r1
 21205 016c 5B00     		lsls	r3, r3, #1
 21206 016e 1900     		movs	r1, r3
 21207 0170 FB68     		ldr	r3, [r7, #12]
 21208 0172 5B18     		adds	r3, r3, r1
 21209 0174 0021     		movs	r1, #0
 21210 0176 5B5E     		ldrsh	r3, [r3, r1]
8536:bma2x2.c      **** 					(accel_frame[*accel_index].x >> 6);
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 527


 21211              		.loc 1 8536 0
 21212 0178 9B11     		asrs	r3, r3, #6
 21213 017a 1BB2     		sxth	r3, r3
 21214 017c 1380     		strh	r3, [r2]
 21215              	.L1257:
8540:bma2x2.c      **** 	break;
 21216              		.loc 1 8540 0
 21217 017e 7B68     		ldr	r3, [r7, #4]
 21218 0180 1B78     		ldrb	r3, [r3]
 21219 0182 0133     		adds	r3, r3, #1
 21220 0184 DAB2     		uxtb	r2, r3
 21221 0186 7B68     		ldr	r3, [r7, #4]
 21222 0188 1A70     		strb	r2, [r3]
8541:bma2x2.c      **** 
 21223              		.loc 1 8541 0
 21224 018a 1FE1     		b	.L1255
 21225              	.L1253:
8545:bma2x2.c      **** 		data_msb = fifo_conf->fifo_data[(*data_index)++];
 21226              		.loc 1 8545 0
 21227 018c 3B6A     		ldr	r3, [r7, #32]
 21228 018e 1A68     		ldr	r2, [r3]
 21229 0190 BB68     		ldr	r3, [r7, #8]
 21230 0192 1B78     		ldrb	r3, [r3]
 21231 0194 591C     		adds	r1, r3, #1
 21232 0196 C8B2     		uxtb	r0, r1
 21233 0198 B968     		ldr	r1, [r7, #8]
 21234 019a 0870     		strb	r0, [r1]
 21235 019c D318     		adds	r3, r2, r3
 21236 019e 1A78     		ldrb	r2, [r3]
 21237 01a0 1623     		movs	r3, #22
 21238 01a2 FB18     		adds	r3, r7, r3
 21239 01a4 1A80     		strh	r2, [r3]
8546:bma2x2.c      **** 		accel_frame[*accel_index].y = (u16)((data_msb << 8) | data_lsb);
 21240              		.loc 1 8546 0
 21241 01a6 3B6A     		ldr	r3, [r7, #32]
 21242 01a8 1A68     		ldr	r2, [r3]
 21243 01aa BB68     		ldr	r3, [r7, #8]
 21244 01ac 1B78     		ldrb	r3, [r3]
 21245 01ae 591C     		adds	r1, r3, #1
 21246 01b0 C8B2     		uxtb	r0, r1
 21247 01b2 B968     		ldr	r1, [r7, #8]
 21248 01b4 0870     		strb	r0, [r1]
 21249 01b6 D318     		adds	r3, r2, r3
 21250 01b8 1A78     		ldrb	r2, [r3]
 21251 01ba 1423     		movs	r3, #20
 21252 01bc FB18     		adds	r3, r7, r3
 21253 01be 1A80     		strh	r2, [r3]
8547:bma2x2.c      **** 
 21254              		.loc 1 8547 0
 21255 01c0 7B68     		ldr	r3, [r7, #4]
 21256 01c2 1B78     		ldrb	r3, [r3]
 21257 01c4 1A00     		movs	r2, r3
 21258 01c6 1300     		movs	r3, r2
 21259 01c8 5B00     		lsls	r3, r3, #1
 21260 01ca 9B18     		adds	r3, r3, r2
 21261 01cc 5B00     		lsls	r3, r3, #1
 21262 01ce 1A00     		movs	r2, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 528


 21263 01d0 FB68     		ldr	r3, [r7, #12]
 21264 01d2 9B18     		adds	r3, r3, r2
 21265 01d4 1422     		movs	r2, #20
 21266 01d6 BA18     		adds	r2, r7, r2
 21267 01d8 1288     		ldrh	r2, [r2]
 21268 01da 1202     		lsls	r2, r2, #8
 21269 01dc 11B2     		sxth	r1, r2
 21270 01de 1622     		movs	r2, #22
 21271 01e0 BA18     		adds	r2, r7, r2
 21272 01e2 0020     		movs	r0, #0
 21273 01e4 125E     		ldrsh	r2, [r2, r0]
 21274 01e6 0A43     		orrs	r2, r1
 21275 01e8 12B2     		sxth	r2, r2
 21276 01ea 1A80     		strh	r2, [r3]
8550:bma2x2.c      **** 			accel_frame[*accel_index].y =
 21277              		.loc 1 8550 0
 21278 01ec 794B     		ldr	r3, .L1265
 21279 01ee 1B78     		ldrb	r3, [r3]
 21280 01f0 002B     		cmp	r3, #0
 21281 01f2 19D1     		bne	.L1259
8551:bma2x2.c      **** 					(accel_frame[*accel_index].y >> 4);
 21282              		.loc 1 8551 0
 21283 01f4 7B68     		ldr	r3, [r7, #4]
 21284 01f6 1B78     		ldrb	r3, [r3]
 21285 01f8 1A00     		movs	r2, r3
 21286 01fa 1300     		movs	r3, r2
 21287 01fc 5B00     		lsls	r3, r3, #1
 21288 01fe 9B18     		adds	r3, r3, r2
 21289 0200 5B00     		lsls	r3, r3, #1
 21290 0202 1A00     		movs	r2, r3
 21291 0204 FB68     		ldr	r3, [r7, #12]
 21292 0206 9A18     		adds	r2, r3, r2
8552:bma2x2.c      **** 		} else if (V_BMA2x2RESOLUTION_U8 == BMA2x2_14_RESOLUTION) {
 21293              		.loc 1 8552 0
 21294 0208 7B68     		ldr	r3, [r7, #4]
 21295 020a 1B78     		ldrb	r3, [r3]
 21296 020c 1900     		movs	r1, r3
 21297 020e 0B00     		movs	r3, r1
 21298 0210 5B00     		lsls	r3, r3, #1
 21299 0212 5B18     		adds	r3, r3, r1
 21300 0214 5B00     		lsls	r3, r3, #1
 21301 0216 1900     		movs	r1, r3
 21302 0218 FB68     		ldr	r3, [r7, #12]
 21303 021a 5B18     		adds	r3, r3, r1
 21304 021c 0021     		movs	r1, #0
 21305 021e 5B5E     		ldrsh	r3, [r3, r1]
8551:bma2x2.c      **** 					(accel_frame[*accel_index].y >> 4);
 21306              		.loc 1 8551 0
 21307 0220 1B11     		asrs	r3, r3, #4
 21308 0222 1BB2     		sxth	r3, r3
 21309 0224 1380     		strh	r3, [r2]
 21310 0226 3AE0     		b	.L1260
 21311              	.L1259:
8553:bma2x2.c      **** 			accel_frame[*accel_index].y =
 21312              		.loc 1 8553 0
 21313 0228 6A4B     		ldr	r3, .L1265
 21314 022a 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 529


 21315 022c 022B     		cmp	r3, #2
 21316 022e 19D1     		bne	.L1261
8554:bma2x2.c      **** 					(accel_frame[*accel_index].y >> 2);
 21317              		.loc 1 8554 0
 21318 0230 7B68     		ldr	r3, [r7, #4]
 21319 0232 1B78     		ldrb	r3, [r3]
 21320 0234 1A00     		movs	r2, r3
 21321 0236 1300     		movs	r3, r2
 21322 0238 5B00     		lsls	r3, r3, #1
 21323 023a 9B18     		adds	r3, r3, r2
 21324 023c 5B00     		lsls	r3, r3, #1
 21325 023e 1A00     		movs	r2, r3
 21326 0240 FB68     		ldr	r3, [r7, #12]
 21327 0242 9A18     		adds	r2, r3, r2
8555:bma2x2.c      **** 		} else if (V_BMA2x2RESOLUTION_U8 == BMA2x2_10_RESOLUTION) {
 21328              		.loc 1 8555 0
 21329 0244 7B68     		ldr	r3, [r7, #4]
 21330 0246 1B78     		ldrb	r3, [r3]
 21331 0248 1900     		movs	r1, r3
 21332 024a 0B00     		movs	r3, r1
 21333 024c 5B00     		lsls	r3, r3, #1
 21334 024e 5B18     		adds	r3, r3, r1
 21335 0250 5B00     		lsls	r3, r3, #1
 21336 0252 1900     		movs	r1, r3
 21337 0254 FB68     		ldr	r3, [r7, #12]
 21338 0256 5B18     		adds	r3, r3, r1
 21339 0258 0021     		movs	r1, #0
 21340 025a 5B5E     		ldrsh	r3, [r3, r1]
8554:bma2x2.c      **** 					(accel_frame[*accel_index].y >> 2);
 21341              		.loc 1 8554 0
 21342 025c 9B10     		asrs	r3, r3, #2
 21343 025e 1BB2     		sxth	r3, r3
 21344 0260 1380     		strh	r3, [r2]
 21345 0262 1CE0     		b	.L1260
 21346              	.L1261:
8556:bma2x2.c      **** 			accel_frame[*accel_index].y =
 21347              		.loc 1 8556 0
 21348 0264 5B4B     		ldr	r3, .L1265
 21349 0266 1B78     		ldrb	r3, [r3]
 21350 0268 012B     		cmp	r3, #1
 21351 026a 18D1     		bne	.L1260
8557:bma2x2.c      **** 					(accel_frame[*accel_index].y >> 6);
 21352              		.loc 1 8557 0
 21353 026c 7B68     		ldr	r3, [r7, #4]
 21354 026e 1B78     		ldrb	r3, [r3]
 21355 0270 1A00     		movs	r2, r3
 21356 0272 1300     		movs	r3, r2
 21357 0274 5B00     		lsls	r3, r3, #1
 21358 0276 9B18     		adds	r3, r3, r2
 21359 0278 5B00     		lsls	r3, r3, #1
 21360 027a 1A00     		movs	r2, r3
 21361 027c FB68     		ldr	r3, [r7, #12]
 21362 027e 9A18     		adds	r2, r3, r2
8558:bma2x2.c      **** 		}
 21363              		.loc 1 8558 0
 21364 0280 7B68     		ldr	r3, [r7, #4]
 21365 0282 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 530


 21366 0284 1900     		movs	r1, r3
 21367 0286 0B00     		movs	r3, r1
 21368 0288 5B00     		lsls	r3, r3, #1
 21369 028a 5B18     		adds	r3, r3, r1
 21370 028c 5B00     		lsls	r3, r3, #1
 21371 028e 1900     		movs	r1, r3
 21372 0290 FB68     		ldr	r3, [r7, #12]
 21373 0292 5B18     		adds	r3, r3, r1
 21374 0294 0021     		movs	r1, #0
 21375 0296 5B5E     		ldrsh	r3, [r3, r1]
8557:bma2x2.c      **** 					(accel_frame[*accel_index].y >> 6);
 21376              		.loc 1 8557 0
 21377 0298 9B11     		asrs	r3, r3, #6
 21378 029a 1BB2     		sxth	r3, r3
 21379 029c 1380     		strh	r3, [r2]
 21380              	.L1260:
8561:bma2x2.c      **** 	break;
 21381              		.loc 1 8561 0
 21382 029e 7B68     		ldr	r3, [r7, #4]
 21383 02a0 1B78     		ldrb	r3, [r3]
 21384 02a2 0133     		adds	r3, r3, #1
 21385 02a4 DAB2     		uxtb	r2, r3
 21386 02a6 7B68     		ldr	r3, [r7, #4]
 21387 02a8 1A70     		strb	r2, [r3]
8562:bma2x2.c      **** 
 21388              		.loc 1 8562 0
 21389 02aa 8FE0     		b	.L1255
 21390              	.L1254:
8566:bma2x2.c      **** 		data_msb = fifo_conf->fifo_data[(*data_index)++];
 21391              		.loc 1 8566 0
 21392 02ac 3B6A     		ldr	r3, [r7, #32]
 21393 02ae 1A68     		ldr	r2, [r3]
 21394 02b0 BB68     		ldr	r3, [r7, #8]
 21395 02b2 1B78     		ldrb	r3, [r3]
 21396 02b4 591C     		adds	r1, r3, #1
 21397 02b6 C8B2     		uxtb	r0, r1
 21398 02b8 B968     		ldr	r1, [r7, #8]
 21399 02ba 0870     		strb	r0, [r1]
 21400 02bc D318     		adds	r3, r2, r3
 21401 02be 1A78     		ldrb	r2, [r3]
 21402 02c0 1623     		movs	r3, #22
 21403 02c2 FB18     		adds	r3, r7, r3
 21404 02c4 1A80     		strh	r2, [r3]
8567:bma2x2.c      **** 		accel_frame[*accel_index].z = (u16)((data_msb << 8) | data_lsb);
 21405              		.loc 1 8567 0
 21406 02c6 3B6A     		ldr	r3, [r7, #32]
 21407 02c8 1A68     		ldr	r2, [r3]
 21408 02ca BB68     		ldr	r3, [r7, #8]
 21409 02cc 1B78     		ldrb	r3, [r3]
 21410 02ce 591C     		adds	r1, r3, #1
 21411 02d0 C8B2     		uxtb	r0, r1
 21412 02d2 B968     		ldr	r1, [r7, #8]
 21413 02d4 0870     		strb	r0, [r1]
 21414 02d6 D318     		adds	r3, r2, r3
 21415 02d8 1A78     		ldrb	r2, [r3]
 21416 02da 1423     		movs	r3, #20
 21417 02dc FB18     		adds	r3, r7, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 531


 21418 02de 1A80     		strh	r2, [r3]
8568:bma2x2.c      **** 
 21419              		.loc 1 8568 0
 21420 02e0 7B68     		ldr	r3, [r7, #4]
 21421 02e2 1B78     		ldrb	r3, [r3]
 21422 02e4 1A00     		movs	r2, r3
 21423 02e6 1300     		movs	r3, r2
 21424 02e8 5B00     		lsls	r3, r3, #1
 21425 02ea 9B18     		adds	r3, r3, r2
 21426 02ec 5B00     		lsls	r3, r3, #1
 21427 02ee 1A00     		movs	r2, r3
 21428 02f0 FB68     		ldr	r3, [r7, #12]
 21429 02f2 9B18     		adds	r3, r3, r2
 21430 02f4 1422     		movs	r2, #20
 21431 02f6 BA18     		adds	r2, r7, r2
 21432 02f8 1288     		ldrh	r2, [r2]
 21433 02fa 1202     		lsls	r2, r2, #8
 21434 02fc 11B2     		sxth	r1, r2
 21435 02fe 1622     		movs	r2, #22
 21436 0300 BA18     		adds	r2, r7, r2
 21437 0302 0020     		movs	r0, #0
 21438 0304 125E     		ldrsh	r2, [r2, r0]
 21439 0306 0A43     		orrs	r2, r1
 21440 0308 12B2     		sxth	r2, r2
 21441 030a 1A80     		strh	r2, [r3]
8571:bma2x2.c      **** 			accel_frame[*accel_index].z =
 21442              		.loc 1 8571 0
 21443 030c 314B     		ldr	r3, .L1265
 21444 030e 1B78     		ldrb	r3, [r3]
 21445 0310 002B     		cmp	r3, #0
 21446 0312 19D1     		bne	.L1262
8572:bma2x2.c      **** 					(accel_frame[*accel_index].z >> 4);
 21447              		.loc 1 8572 0
 21448 0314 7B68     		ldr	r3, [r7, #4]
 21449 0316 1B78     		ldrb	r3, [r3]
 21450 0318 1A00     		movs	r2, r3
 21451 031a 1300     		movs	r3, r2
 21452 031c 5B00     		lsls	r3, r3, #1
 21453 031e 9B18     		adds	r3, r3, r2
 21454 0320 5B00     		lsls	r3, r3, #1
 21455 0322 1A00     		movs	r2, r3
 21456 0324 FB68     		ldr	r3, [r7, #12]
 21457 0326 9A18     		adds	r2, r3, r2
8573:bma2x2.c      **** 		} else if (V_BMA2x2RESOLUTION_U8 == BMA2x2_14_RESOLUTION) {
 21458              		.loc 1 8573 0
 21459 0328 7B68     		ldr	r3, [r7, #4]
 21460 032a 1B78     		ldrb	r3, [r3]
 21461 032c 1900     		movs	r1, r3
 21462 032e 0B00     		movs	r3, r1
 21463 0330 5B00     		lsls	r3, r3, #1
 21464 0332 5B18     		adds	r3, r3, r1
 21465 0334 5B00     		lsls	r3, r3, #1
 21466 0336 1900     		movs	r1, r3
 21467 0338 FB68     		ldr	r3, [r7, #12]
 21468 033a 5B18     		adds	r3, r3, r1
 21469 033c 0021     		movs	r1, #0
 21470 033e 5B5E     		ldrsh	r3, [r3, r1]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 532


8572:bma2x2.c      **** 					(accel_frame[*accel_index].z >> 4);
 21471              		.loc 1 8572 0
 21472 0340 1B11     		asrs	r3, r3, #4
 21473 0342 1BB2     		sxth	r3, r3
 21474 0344 1380     		strh	r3, [r2]
 21475 0346 3AE0     		b	.L1263
 21476              	.L1262:
8574:bma2x2.c      **** 			accel_frame[*accel_index].z =
 21477              		.loc 1 8574 0
 21478 0348 224B     		ldr	r3, .L1265
 21479 034a 1B78     		ldrb	r3, [r3]
 21480 034c 022B     		cmp	r3, #2
 21481 034e 19D1     		bne	.L1264
8575:bma2x2.c      **** 					(accel_frame[*accel_index].z >> 2);
 21482              		.loc 1 8575 0
 21483 0350 7B68     		ldr	r3, [r7, #4]
 21484 0352 1B78     		ldrb	r3, [r3]
 21485 0354 1A00     		movs	r2, r3
 21486 0356 1300     		movs	r3, r2
 21487 0358 5B00     		lsls	r3, r3, #1
 21488 035a 9B18     		adds	r3, r3, r2
 21489 035c 5B00     		lsls	r3, r3, #1
 21490 035e 1A00     		movs	r2, r3
 21491 0360 FB68     		ldr	r3, [r7, #12]
 21492 0362 9A18     		adds	r2, r3, r2
8576:bma2x2.c      **** 		} else if (V_BMA2x2RESOLUTION_U8 == BMA2x2_10_RESOLUTION) {
 21493              		.loc 1 8576 0
 21494 0364 7B68     		ldr	r3, [r7, #4]
 21495 0366 1B78     		ldrb	r3, [r3]
 21496 0368 1900     		movs	r1, r3
 21497 036a 0B00     		movs	r3, r1
 21498 036c 5B00     		lsls	r3, r3, #1
 21499 036e 5B18     		adds	r3, r3, r1
 21500 0370 5B00     		lsls	r3, r3, #1
 21501 0372 1900     		movs	r1, r3
 21502 0374 FB68     		ldr	r3, [r7, #12]
 21503 0376 5B18     		adds	r3, r3, r1
 21504 0378 0021     		movs	r1, #0
 21505 037a 5B5E     		ldrsh	r3, [r3, r1]
8575:bma2x2.c      **** 					(accel_frame[*accel_index].z >> 2);
 21506              		.loc 1 8575 0
 21507 037c 9B10     		asrs	r3, r3, #2
 21508 037e 1BB2     		sxth	r3, r3
 21509 0380 1380     		strh	r3, [r2]
 21510 0382 1CE0     		b	.L1263
 21511              	.L1264:
8577:bma2x2.c      **** 			accel_frame[*accel_index].z =
 21512              		.loc 1 8577 0
 21513 0384 134B     		ldr	r3, .L1265
 21514 0386 1B78     		ldrb	r3, [r3]
 21515 0388 012B     		cmp	r3, #1
 21516 038a 18D1     		bne	.L1263
8578:bma2x2.c      **** 					(accel_frame[*accel_index].z >> 6);
 21517              		.loc 1 8578 0
 21518 038c 7B68     		ldr	r3, [r7, #4]
 21519 038e 1B78     		ldrb	r3, [r3]
 21520 0390 1A00     		movs	r2, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 533


 21521 0392 1300     		movs	r3, r2
 21522 0394 5B00     		lsls	r3, r3, #1
 21523 0396 9B18     		adds	r3, r3, r2
 21524 0398 5B00     		lsls	r3, r3, #1
 21525 039a 1A00     		movs	r2, r3
 21526 039c FB68     		ldr	r3, [r7, #12]
 21527 039e 9A18     		adds	r2, r3, r2
8579:bma2x2.c      **** 		}
 21528              		.loc 1 8579 0
 21529 03a0 7B68     		ldr	r3, [r7, #4]
 21530 03a2 1B78     		ldrb	r3, [r3]
 21531 03a4 1900     		movs	r1, r3
 21532 03a6 0B00     		movs	r3, r1
 21533 03a8 5B00     		lsls	r3, r3, #1
 21534 03aa 5B18     		adds	r3, r3, r1
 21535 03ac 5B00     		lsls	r3, r3, #1
 21536 03ae 1900     		movs	r1, r3
 21537 03b0 FB68     		ldr	r3, [r7, #12]
 21538 03b2 5B18     		adds	r3, r3, r1
 21539 03b4 0021     		movs	r1, #0
 21540 03b6 5B5E     		ldrsh	r3, [r3, r1]
8578:bma2x2.c      **** 					(accel_frame[*accel_index].z >> 6);
 21541              		.loc 1 8578 0
 21542 03b8 9B11     		asrs	r3, r3, #6
 21543 03ba 1BB2     		sxth	r3, r3
 21544 03bc 1380     		strh	r3, [r2]
 21545              	.L1263:
8582:bma2x2.c      **** 	break;
 21546              		.loc 1 8582 0
 21547 03be 7B68     		ldr	r3, [r7, #4]
 21548 03c0 1B78     		ldrb	r3, [r3]
 21549 03c2 0133     		adds	r3, r3, #1
 21550 03c4 DAB2     		uxtb	r2, r3
 21551 03c6 7B68     		ldr	r3, [r7, #4]
 21552 03c8 1A70     		strb	r2, [r3]
8583:bma2x2.c      **** 
 21553              		.loc 1 8583 0
 21554 03ca C046     		nop
 21555              	.L1255:
8587:bma2x2.c      **** 	}
8588:bma2x2.c      **** }
 21556              		.loc 1 8588 0
 21557 03cc C046     		nop
 21558 03ce BD46     		mov	sp, r7
 21559 03d0 06B0     		add	sp, sp, #24
 21560              		@ sp needed
 21561 03d2 80BD     		pop	{r7, pc}
 21562              	.L1266:
 21563              		.align	2
 21564              	.L1265:
 21565 03d4 00000000 		.word	V_BMA2x2RESOLUTION_U8
 21566              		.cfi_endproc
 21567              	.LFE141:
 21568              		.size	unpack_accel_frame, .-unpack_accel_frame
 21569              		.section	.text.unpack_accel_xyz,"ax",%progbits
 21570              		.align	2
 21571              		.code	16
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 534


 21572              		.thumb_func
 21573              		.type	unpack_accel_xyz, %function
 21574              	unpack_accel_xyz:
 21575              	.LFB142:
8589:bma2x2.c      **** 
8590:bma2x2.c      **** /*!
8591:bma2x2.c      ****  *  @brief This API is used to parse the accelerometer data and
8592:bma2x2.c      ****  *  store it in the union fifo_frame
8593:bma2x2.c      ****  *  It also updates the data_index value which stores the index of
8594:bma2x2.c      ****  *  the current data byte which is parsed
8595:bma2x2.c      ****  *
8596:bma2x2.c      ****  */
8597:bma2x2.c      **** static void unpack_accel_xyz(union fifo_frame *accel_frame, u8 *data_index,
8598:bma2x2.c      **** 	struct fifo_configuration *fifo_conf)
8599:bma2x2.c      **** {
 21576              		.loc 1 8599 0
 21577              		.cfi_startproc
 21578              		@ args = 0, pretend = 0, frame = 24
 21579              		@ frame_needed = 1, uses_anonymous_args = 0
 21580 0000 80B5     		push	{r7, lr}
 21581              		.cfi_def_cfa_offset 8
 21582              		.cfi_offset 7, -8
 21583              		.cfi_offset 14, -4
 21584 0002 86B0     		sub	sp, sp, #24
 21585              		.cfi_def_cfa_offset 32
 21586 0004 00AF     		add	r7, sp, #0
 21587              		.cfi_def_cfa_register 7
 21588 0006 F860     		str	r0, [r7, #12]
 21589 0008 B960     		str	r1, [r7, #8]
 21590 000a 7A60     		str	r2, [r7, #4]
8600:bma2x2.c      **** 	u16 data_lsb = 0;
 21591              		.loc 1 8600 0
 21592 000c 1623     		movs	r3, #22
 21593 000e FB18     		adds	r3, r7, r3
 21594 0010 0022     		movs	r2, #0
 21595 0012 1A80     		strh	r2, [r3]
8601:bma2x2.c      **** 	u16 data_msb = 0;
 21596              		.loc 1 8601 0
 21597 0014 1423     		movs	r3, #20
 21598 0016 FB18     		adds	r3, r7, r3
 21599 0018 0022     		movs	r2, #0
 21600 001a 1A80     		strh	r2, [r3]
8602:bma2x2.c      **** 
8603:bma2x2.c      **** 	/* Accel raw x data */
8604:bma2x2.c      **** 	data_lsb = fifo_conf->fifo_data[(*data_index)++];
 21601              		.loc 1 8604 0
 21602 001c 7B68     		ldr	r3, [r7, #4]
 21603 001e 1A68     		ldr	r2, [r3]
 21604 0020 BB68     		ldr	r3, [r7, #8]
 21605 0022 1B78     		ldrb	r3, [r3]
 21606 0024 591C     		adds	r1, r3, #1
 21607 0026 C8B2     		uxtb	r0, r1
 21608 0028 B968     		ldr	r1, [r7, #8]
 21609 002a 0870     		strb	r0, [r1]
 21610 002c D318     		adds	r3, r2, r3
 21611 002e 1A78     		ldrb	r2, [r3]
 21612 0030 1623     		movs	r3, #22
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 535


 21613 0032 FB18     		adds	r3, r7, r3
 21614 0034 1A80     		strh	r2, [r3]
8605:bma2x2.c      **** 	data_msb = fifo_conf->fifo_data[(*data_index)++];
 21615              		.loc 1 8605 0
 21616 0036 7B68     		ldr	r3, [r7, #4]
 21617 0038 1A68     		ldr	r2, [r3]
 21618 003a BB68     		ldr	r3, [r7, #8]
 21619 003c 1B78     		ldrb	r3, [r3]
 21620 003e 591C     		adds	r1, r3, #1
 21621 0040 C8B2     		uxtb	r0, r1
 21622 0042 B968     		ldr	r1, [r7, #8]
 21623 0044 0870     		strb	r0, [r1]
 21624 0046 D318     		adds	r3, r2, r3
 21625 0048 1A78     		ldrb	r2, [r3]
 21626 004a 1423     		movs	r3, #20
 21627 004c FB18     		adds	r3, r7, r3
 21628 004e 1A80     		strh	r2, [r3]
8606:bma2x2.c      **** 	accel_frame->accel_data.x = (u16)((data_msb << 8) | data_lsb);
 21629              		.loc 1 8606 0
 21630 0050 1423     		movs	r3, #20
 21631 0052 FB18     		adds	r3, r7, r3
 21632 0054 1B88     		ldrh	r3, [r3]
 21633 0056 1B02     		lsls	r3, r3, #8
 21634 0058 1AB2     		sxth	r2, r3
 21635 005a 1623     		movs	r3, #22
 21636 005c FB18     		adds	r3, r7, r3
 21637 005e 0021     		movs	r1, #0
 21638 0060 5B5E     		ldrsh	r3, [r3, r1]
 21639 0062 1343     		orrs	r3, r2
 21640 0064 1AB2     		sxth	r2, r3
 21641 0066 FB68     		ldr	r3, [r7, #12]
 21642 0068 1A80     		strh	r2, [r3]
8607:bma2x2.c      **** 
8608:bma2x2.c      **** 	/* Accel raw y data */
8609:bma2x2.c      **** 	data_lsb = fifo_conf->fifo_data[(*data_index)++];
 21643              		.loc 1 8609 0
 21644 006a 7B68     		ldr	r3, [r7, #4]
 21645 006c 1A68     		ldr	r2, [r3]
 21646 006e BB68     		ldr	r3, [r7, #8]
 21647 0070 1B78     		ldrb	r3, [r3]
 21648 0072 591C     		adds	r1, r3, #1
 21649 0074 C8B2     		uxtb	r0, r1
 21650 0076 B968     		ldr	r1, [r7, #8]
 21651 0078 0870     		strb	r0, [r1]
 21652 007a D318     		adds	r3, r2, r3
 21653 007c 1A78     		ldrb	r2, [r3]
 21654 007e 1623     		movs	r3, #22
 21655 0080 FB18     		adds	r3, r7, r3
 21656 0082 1A80     		strh	r2, [r3]
8610:bma2x2.c      **** 	data_msb = fifo_conf->fifo_data[(*data_index)++];
 21657              		.loc 1 8610 0
 21658 0084 7B68     		ldr	r3, [r7, #4]
 21659 0086 1A68     		ldr	r2, [r3]
 21660 0088 BB68     		ldr	r3, [r7, #8]
 21661 008a 1B78     		ldrb	r3, [r3]
 21662 008c 591C     		adds	r1, r3, #1
 21663 008e C8B2     		uxtb	r0, r1
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 536


 21664 0090 B968     		ldr	r1, [r7, #8]
 21665 0092 0870     		strb	r0, [r1]
 21666 0094 D318     		adds	r3, r2, r3
 21667 0096 1A78     		ldrb	r2, [r3]
 21668 0098 1423     		movs	r3, #20
 21669 009a FB18     		adds	r3, r7, r3
 21670 009c 1A80     		strh	r2, [r3]
8611:bma2x2.c      **** 	accel_frame->accel_data.y = (u16)((data_msb << 8) | data_lsb);
 21671              		.loc 1 8611 0
 21672 009e 1423     		movs	r3, #20
 21673 00a0 FB18     		adds	r3, r7, r3
 21674 00a2 1B88     		ldrh	r3, [r3]
 21675 00a4 1B02     		lsls	r3, r3, #8
 21676 00a6 1AB2     		sxth	r2, r3
 21677 00a8 1623     		movs	r3, #22
 21678 00aa FB18     		adds	r3, r7, r3
 21679 00ac 0021     		movs	r1, #0
 21680 00ae 5B5E     		ldrsh	r3, [r3, r1]
 21681 00b0 1343     		orrs	r3, r2
 21682 00b2 1AB2     		sxth	r2, r3
 21683 00b4 FB68     		ldr	r3, [r7, #12]
 21684 00b6 5A80     		strh	r2, [r3, #2]
8612:bma2x2.c      **** 
8613:bma2x2.c      **** 	/* Accel raw z data */
8614:bma2x2.c      **** 	data_lsb = fifo_conf->fifo_data[(*data_index)++];
 21685              		.loc 1 8614 0
 21686 00b8 7B68     		ldr	r3, [r7, #4]
 21687 00ba 1A68     		ldr	r2, [r3]
 21688 00bc BB68     		ldr	r3, [r7, #8]
 21689 00be 1B78     		ldrb	r3, [r3]
 21690 00c0 591C     		adds	r1, r3, #1
 21691 00c2 C8B2     		uxtb	r0, r1
 21692 00c4 B968     		ldr	r1, [r7, #8]
 21693 00c6 0870     		strb	r0, [r1]
 21694 00c8 D318     		adds	r3, r2, r3
 21695 00ca 1A78     		ldrb	r2, [r3]
 21696 00cc 1623     		movs	r3, #22
 21697 00ce FB18     		adds	r3, r7, r3
 21698 00d0 1A80     		strh	r2, [r3]
8615:bma2x2.c      **** 	data_msb = fifo_conf->fifo_data[(*data_index)++];
 21699              		.loc 1 8615 0
 21700 00d2 7B68     		ldr	r3, [r7, #4]
 21701 00d4 1A68     		ldr	r2, [r3]
 21702 00d6 BB68     		ldr	r3, [r7, #8]
 21703 00d8 1B78     		ldrb	r3, [r3]
 21704 00da 591C     		adds	r1, r3, #1
 21705 00dc C8B2     		uxtb	r0, r1
 21706 00de B968     		ldr	r1, [r7, #8]
 21707 00e0 0870     		strb	r0, [r1]
 21708 00e2 D318     		adds	r3, r2, r3
 21709 00e4 1A78     		ldrb	r2, [r3]
 21710 00e6 1423     		movs	r3, #20
 21711 00e8 FB18     		adds	r3, r7, r3
 21712 00ea 1A80     		strh	r2, [r3]
8616:bma2x2.c      **** 	accel_frame->accel_data.z = (u16)((data_msb << 8) | data_lsb);
 21713              		.loc 1 8616 0
 21714 00ec 1423     		movs	r3, #20
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 537


 21715 00ee FB18     		adds	r3, r7, r3
 21716 00f0 1B88     		ldrh	r3, [r3]
 21717 00f2 1B02     		lsls	r3, r3, #8
 21718 00f4 1AB2     		sxth	r2, r3
 21719 00f6 1623     		movs	r3, #22
 21720 00f8 FB18     		adds	r3, r7, r3
 21721 00fa 0021     		movs	r1, #0
 21722 00fc 5B5E     		ldrsh	r3, [r3, r1]
 21723 00fe 1343     		orrs	r3, r2
 21724 0100 1AB2     		sxth	r2, r3
 21725 0102 FB68     		ldr	r3, [r7, #12]
 21726 0104 9A80     		strh	r2, [r3, #4]
8617:bma2x2.c      **** 
8618:bma2x2.c      **** 	/* Resolution based data from FIFO is updated */
8619:bma2x2.c      **** 	if (V_BMA2x2RESOLUTION_U8 == BMA2x2_12_RESOLUTION) {
 21727              		.loc 1 8619 0
 21728 0106 284B     		ldr	r3, .L1272
 21729 0108 1B78     		ldrb	r3, [r3]
 21730 010a 002B     		cmp	r3, #0
 21731 010c 15D1     		bne	.L1268
8620:bma2x2.c      **** 		accel_frame->accel_data.x = (accel_frame->accel_data.x >> 4);
 21732              		.loc 1 8620 0
 21733 010e FB68     		ldr	r3, [r7, #12]
 21734 0110 0022     		movs	r2, #0
 21735 0112 9B5E     		ldrsh	r3, [r3, r2]
 21736 0114 1B11     		asrs	r3, r3, #4
 21737 0116 1AB2     		sxth	r2, r3
 21738 0118 FB68     		ldr	r3, [r7, #12]
 21739 011a 1A80     		strh	r2, [r3]
8621:bma2x2.c      **** 		accel_frame->accel_data.y = (accel_frame->accel_data.y >> 4);
 21740              		.loc 1 8621 0
 21741 011c FB68     		ldr	r3, [r7, #12]
 21742 011e 0222     		movs	r2, #2
 21743 0120 9B5E     		ldrsh	r3, [r3, r2]
 21744 0122 1B11     		asrs	r3, r3, #4
 21745 0124 1AB2     		sxth	r2, r3
 21746 0126 FB68     		ldr	r3, [r7, #12]
 21747 0128 5A80     		strh	r2, [r3, #2]
8622:bma2x2.c      **** 		accel_frame->accel_data.z = (accel_frame->accel_data.z >> 4);
 21748              		.loc 1 8622 0
 21749 012a FB68     		ldr	r3, [r7, #12]
 21750 012c 0422     		movs	r2, #4
 21751 012e 9B5E     		ldrsh	r3, [r3, r2]
 21752 0130 1B11     		asrs	r3, r3, #4
 21753 0132 1AB2     		sxth	r2, r3
 21754 0134 FB68     		ldr	r3, [r7, #12]
 21755 0136 9A80     		strh	r2, [r3, #4]
8623:bma2x2.c      **** 	} else if (V_BMA2x2RESOLUTION_U8 == BMA2x2_14_RESOLUTION) {
8624:bma2x2.c      **** 		accel_frame->accel_data.x = (accel_frame->accel_data.x >> 2);
8625:bma2x2.c      **** 		accel_frame->accel_data.y = (accel_frame->accel_data.y >> 2);
8626:bma2x2.c      **** 		accel_frame->accel_data.z = (accel_frame->accel_data.z >> 2);
8627:bma2x2.c      **** 	} else if (V_BMA2x2RESOLUTION_U8 == BMA2x2_10_RESOLUTION) {
8628:bma2x2.c      **** 		accel_frame->accel_data.x = (accel_frame->accel_data.x >> 6);
8629:bma2x2.c      **** 		accel_frame->accel_data.y = (accel_frame->accel_data.y >> 6);
8630:bma2x2.c      **** 		accel_frame->accel_data.z = (accel_frame->accel_data.z >> 6);
8631:bma2x2.c      **** 	}
8632:bma2x2.c      **** }
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 538


 21756              		.loc 1 8632 0
 21757 0138 32E0     		b	.L1271
 21758              	.L1268:
8623:bma2x2.c      **** 	} else if (V_BMA2x2RESOLUTION_U8 == BMA2x2_14_RESOLUTION) {
 21759              		.loc 1 8623 0
 21760 013a 1B4B     		ldr	r3, .L1272
 21761 013c 1B78     		ldrb	r3, [r3]
 21762 013e 022B     		cmp	r3, #2
 21763 0140 15D1     		bne	.L1270
8624:bma2x2.c      **** 		accel_frame->accel_data.y = (accel_frame->accel_data.y >> 2);
 21764              		.loc 1 8624 0
 21765 0142 FB68     		ldr	r3, [r7, #12]
 21766 0144 0022     		movs	r2, #0
 21767 0146 9B5E     		ldrsh	r3, [r3, r2]
 21768 0148 9B10     		asrs	r3, r3, #2
 21769 014a 1AB2     		sxth	r2, r3
 21770 014c FB68     		ldr	r3, [r7, #12]
 21771 014e 1A80     		strh	r2, [r3]
8625:bma2x2.c      **** 		accel_frame->accel_data.z = (accel_frame->accel_data.z >> 2);
 21772              		.loc 1 8625 0
 21773 0150 FB68     		ldr	r3, [r7, #12]
 21774 0152 0222     		movs	r2, #2
 21775 0154 9B5E     		ldrsh	r3, [r3, r2]
 21776 0156 9B10     		asrs	r3, r3, #2
 21777 0158 1AB2     		sxth	r2, r3
 21778 015a FB68     		ldr	r3, [r7, #12]
 21779 015c 5A80     		strh	r2, [r3, #2]
8626:bma2x2.c      **** 	} else if (V_BMA2x2RESOLUTION_U8 == BMA2x2_10_RESOLUTION) {
 21780              		.loc 1 8626 0
 21781 015e FB68     		ldr	r3, [r7, #12]
 21782 0160 0422     		movs	r2, #4
 21783 0162 9B5E     		ldrsh	r3, [r3, r2]
 21784 0164 9B10     		asrs	r3, r3, #2
 21785 0166 1AB2     		sxth	r2, r3
 21786 0168 FB68     		ldr	r3, [r7, #12]
 21787 016a 9A80     		strh	r2, [r3, #4]
 21788              		.loc 1 8632 0
 21789 016c 18E0     		b	.L1271
 21790              	.L1270:
8627:bma2x2.c      **** 		accel_frame->accel_data.x = (accel_frame->accel_data.x >> 6);
 21791              		.loc 1 8627 0
 21792 016e 0E4B     		ldr	r3, .L1272
 21793 0170 1B78     		ldrb	r3, [r3]
 21794 0172 012B     		cmp	r3, #1
 21795 0174 14D1     		bne	.L1271
8628:bma2x2.c      **** 		accel_frame->accel_data.y = (accel_frame->accel_data.y >> 6);
 21796              		.loc 1 8628 0
 21797 0176 FB68     		ldr	r3, [r7, #12]
 21798 0178 0022     		movs	r2, #0
 21799 017a 9B5E     		ldrsh	r3, [r3, r2]
 21800 017c 9B11     		asrs	r3, r3, #6
 21801 017e 1AB2     		sxth	r2, r3
 21802 0180 FB68     		ldr	r3, [r7, #12]
 21803 0182 1A80     		strh	r2, [r3]
8629:bma2x2.c      **** 		accel_frame->accel_data.z = (accel_frame->accel_data.z >> 6);
 21804              		.loc 1 8629 0
 21805 0184 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 539


 21806 0186 0222     		movs	r2, #2
 21807 0188 9B5E     		ldrsh	r3, [r3, r2]
 21808 018a 9B11     		asrs	r3, r3, #6
 21809 018c 1AB2     		sxth	r2, r3
 21810 018e FB68     		ldr	r3, [r7, #12]
 21811 0190 5A80     		strh	r2, [r3, #2]
8630:bma2x2.c      **** 	}
 21812              		.loc 1 8630 0
 21813 0192 FB68     		ldr	r3, [r7, #12]
 21814 0194 0422     		movs	r2, #4
 21815 0196 9B5E     		ldrsh	r3, [r3, r2]
 21816 0198 9B11     		asrs	r3, r3, #6
 21817 019a 1AB2     		sxth	r2, r3
 21818 019c FB68     		ldr	r3, [r7, #12]
 21819 019e 9A80     		strh	r2, [r3, #4]
 21820              	.L1271:
 21821              		.loc 1 8632 0
 21822 01a0 C046     		nop
 21823 01a2 BD46     		mov	sp, r7
 21824 01a4 06B0     		add	sp, sp, #24
 21825              		@ sp needed
 21826 01a6 80BD     		pop	{r7, pc}
 21827              	.L1273:
 21828              		.align	2
 21829              	.L1272:
 21830 01a8 00000000 		.word	V_BMA2x2RESOLUTION_U8
 21831              		.cfi_endproc
 21832              	.LFE142:
 21833              		.size	unpack_accel_xyz, .-unpack_accel_xyz
 21834              		.section	.text.bma2x2_read_temp,"ax",%progbits
 21835              		.align	2
 21836              		.global	bma2x2_read_temp
 21837              		.code	16
 21838              		.thumb_func
 21839              		.type	bma2x2_read_temp, %function
 21840              	bma2x2_read_temp:
 21841              	.LFB143:
8633:bma2x2.c      **** 
8634:bma2x2.c      **** /*!
8635:bma2x2.c      ****  * @brief This API is used to read the temp
8636:bma2x2.c      ****  * from register 0x08
8637:bma2x2.c      ****  *
8638:bma2x2.c      ****  *
8639:bma2x2.c      ****  *
8640:bma2x2.c      ****  *  @param  temp_s8: The value of temperature
8641:bma2x2.c      ****  *
8642:bma2x2.c      ****  *
8643:bma2x2.c      ****  *
8644:bma2x2.c      ****  *	@return results of bus communication function
8645:bma2x2.c      ****  *	@retval 0 -> Success
8646:bma2x2.c      ****  *	@retval -1 -> Error
8647:bma2x2.c      ****  *
8648:bma2x2.c      ****  *
8649:bma2x2.c      **** */
8650:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_read_temp(s8 *temp_s8)
8651:bma2x2.c      **** {
 21842              		.loc 1 8651 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 540


 21843              		.cfi_startproc
 21844              		@ args = 0, pretend = 0, frame = 16
 21845              		@ frame_needed = 1, uses_anonymous_args = 0
 21846 0000 B0B5     		push	{r4, r5, r7, lr}
 21847              		.cfi_def_cfa_offset 16
 21848              		.cfi_offset 4, -16
 21849              		.cfi_offset 5, -12
 21850              		.cfi_offset 7, -8
 21851              		.cfi_offset 14, -4
 21852 0002 84B0     		sub	sp, sp, #16
 21853              		.cfi_def_cfa_offset 32
 21854 0004 00AF     		add	r7, sp, #0
 21855              		.cfi_def_cfa_register 7
 21856 0006 7860     		str	r0, [r7, #4]
8652:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 21857              		.loc 1 8652 0
 21858 0008 0E23     		movs	r3, #14
 21859 000a FB18     		adds	r3, r7, r3
 21860 000c 0022     		movs	r2, #0
 21861 000e 1A70     		strb	r2, [r3]
8653:bma2x2.c      **** 		/*  Variable used to return value of
8654:bma2x2.c      **** 	communication routine*/
8655:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 21862              		.loc 1 8655 0
 21863 0010 0F23     		movs	r3, #15
 21864 0012 FB18     		adds	r3, r7, r3
 21865 0014 FF22     		movs	r2, #255
 21866 0016 1A70     		strb	r2, [r3]
8656:bma2x2.c      **** 
8657:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 21867              		.loc 1 8657 0
 21868 0018 114B     		ldr	r3, .L1278
 21869 001a 1B68     		ldr	r3, [r3]
 21870 001c 002B     		cmp	r3, #0
 21871 001e 02D1     		bne	.L1275
8658:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
8659:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 21872              		.loc 1 8659 0
 21873 0020 7F23     		movs	r3, #127
 21874 0022 5B42     		rsbs	r3, r3, #0
 21875 0024 18E0     		b	.L1277
 21876              	.L1275:
8660:bma2x2.c      **** 		} else {
8661:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC(
 21877              		.loc 1 8661 0
 21878 0026 0E4B     		ldr	r3, .L1278
 21879 0028 1B68     		ldr	r3, [r3]
 21880 002a DD68     		ldr	r5, [r3, #12]
 21881 002c 0C4B     		ldr	r3, .L1278
 21882 002e 1B68     		ldr	r3, [r3]
 21883 0030 1879     		ldrb	r0, [r3, #4]
 21884 0032 0F23     		movs	r3, #15
 21885 0034 FC18     		adds	r4, r7, r3
 21886 0036 0E23     		movs	r3, #14
 21887 0038 FA18     		adds	r2, r7, r3
 21888 003a 0123     		movs	r3, #1
 21889 003c 0821     		movs	r1, #8
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 541


 21890 003e A847     		blx	r5
 21891 0040 0300     		movs	r3, r0
 21892 0042 2370     		strb	r3, [r4]
8662:bma2x2.c      **** 			p_bma2x2->dev_addr,
8663:bma2x2.c      **** 			BMA2x2_TEMP_ADDR,
8664:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
8665:bma2x2.c      **** 			*temp_s8 = (s8)data_u8;
 21893              		.loc 1 8665 0
 21894 0044 0E23     		movs	r3, #14
 21895 0046 FB18     		adds	r3, r7, r3
 21896 0048 1B78     		ldrb	r3, [r3]
 21897 004a 5AB2     		sxtb	r2, r3
 21898 004c 7B68     		ldr	r3, [r7, #4]
 21899 004e 1A70     		strb	r2, [r3]
8666:bma2x2.c      **** 		}
8667:bma2x2.c      **** 	return com_rslt;
 21900              		.loc 1 8667 0
 21901 0050 0F23     		movs	r3, #15
 21902 0052 FB18     		adds	r3, r7, r3
 21903 0054 1B78     		ldrb	r3, [r3]
 21904 0056 5BB2     		sxtb	r3, r3
 21905              	.L1277:
8668:bma2x2.c      **** }
 21906              		.loc 1 8668 0 discriminator 1
 21907 0058 1800     		movs	r0, r3
 21908 005a BD46     		mov	sp, r7
 21909 005c 04B0     		add	sp, sp, #16
 21910              		@ sp needed
 21911 005e B0BD     		pop	{r4, r5, r7, pc}
 21912              	.L1279:
 21913              		.align	2
 21914              	.L1278:
 21915 0060 00000000 		.word	p_bma2x2
 21916              		.cfi_endproc
 21917              	.LFE143:
 21918              		.size	bma2x2_read_temp, .-bma2x2_read_temp
 21919              		.section	.text.bma2x2_read_accel_xyzt,"ax",%progbits
 21920              		.align	2
 21921              		.global	bma2x2_read_accel_xyzt
 21922              		.code	16
 21923              		.thumb_func
 21924              		.type	bma2x2_read_accel_xyzt, %function
 21925              	bma2x2_read_accel_xyzt:
 21926              	.LFB144:
8669:bma2x2.c      **** /*!
8670:bma2x2.c      ****  * @brief This API reads accelerometer data X,Y,Z values and
8671:bma2x2.c      ****  * temperature data from location 02h to 08h
8672:bma2x2.c      ****  *
8673:bma2x2.c      ****  *
8674:bma2x2.c      ****  *
8675:bma2x2.c      ****  *
8676:bma2x2.c      ****  *  @param accel : The value of accel xyz and temperature data
8677:bma2x2.c      ****  *
8678:bma2x2.c      ****  *	@return results of bus communication function
8679:bma2x2.c      ****  *	@retval 0 -> Success
8680:bma2x2.c      ****  *	@retval -1 -> Error
8681:bma2x2.c      ****  *
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 542


8682:bma2x2.c      ****  *
8683:bma2x2.c      **** */
8684:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_read_accel_xyzt(
8685:bma2x2.c      **** struct bma2x2_accel_data_temp *accel)
8686:bma2x2.c      **** {
 21927              		.loc 1 8686 0
 21928              		.cfi_startproc
 21929              		@ args = 0, pretend = 0, frame = 16
 21930              		@ frame_needed = 1, uses_anonymous_args = 0
 21931 0000 B0B5     		push	{r4, r5, r7, lr}
 21932              		.cfi_def_cfa_offset 16
 21933              		.cfi_offset 4, -16
 21934              		.cfi_offset 5, -12
 21935              		.cfi_offset 7, -8
 21936              		.cfi_offset 14, -4
 21937 0002 84B0     		sub	sp, sp, #16
 21938              		.cfi_def_cfa_offset 32
 21939 0004 00AF     		add	r7, sp, #0
 21940              		.cfi_def_cfa_register 7
 21941 0006 7860     		str	r0, [r7, #4]
8687:bma2x2.c      **** 	/*  Variable used to return value of
8688:bma2x2.c      **** 	communication routine*/
8689:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 21942              		.loc 1 8689 0
 21943 0008 0F23     		movs	r3, #15
 21944 000a FB18     		adds	r3, r7, r3
 21945 000c FF22     		movs	r2, #255
 21946 000e 1A70     		strb	r2, [r3]
8690:bma2x2.c      **** 	u8 data_u8[BMA2x2_ACCEL_XYZ_TEMP_DATA_SIZE] = {
 21947              		.loc 1 8690 0
 21948 0010 0823     		movs	r3, #8
 21949 0012 FB18     		adds	r3, r7, r3
 21950 0014 1800     		movs	r0, r3
 21951 0016 0723     		movs	r3, #7
 21952 0018 1A00     		movs	r2, r3
 21953 001a 0021     		movs	r1, #0
 21954 001c FFF7FEFF 		bl	memset
8691:bma2x2.c      **** 	BMA2x2_INIT_VALUE, BMA2x2_INIT_VALUE,
8692:bma2x2.c      **** 	BMA2x2_INIT_VALUE, BMA2x2_INIT_VALUE,
8693:bma2x2.c      **** 	BMA2x2_INIT_VALUE, BMA2x2_INIT_VALUE,
8694:bma2x2.c      **** 	BMA2x2_INIT_VALUE};
8695:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 21955              		.loc 1 8695 0
 21956 0020 994B     		ldr	r3, .L1289
 21957 0022 1B68     		ldr	r3, [r3]
 21958 0024 002B     		cmp	r3, #0
 21959 0026 02D1     		bne	.L1281
8696:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
8697:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 21960              		.loc 1 8697 0
 21961 0028 7F23     		movs	r3, #127
 21962 002a 5B42     		rsbs	r3, r3, #0
 21963 002c 27E1     		b	.L1288
 21964              	.L1281:
8698:bma2x2.c      **** 		} else {
8699:bma2x2.c      **** 		switch (V_BMA2x2RESOLUTION_U8) {
 21965              		.loc 1 8699 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 543


 21966 002e 974B     		ldr	r3, .L1289+4
 21967 0030 1B78     		ldrb	r3, [r3]
 21968 0032 012B     		cmp	r3, #1
 21969 0034 63D0     		beq	.L1284
 21970 0036 022B     		cmp	r3, #2
 21971 0038 00D1     		bne	.LCB20554
 21972 003a BEE0     		b	.L1285	@long jump
 21973              	.LCB20554:
 21974 003c 002B     		cmp	r3, #0
 21975 003e 00D0     		beq	.L1286
8700:bma2x2.c      **** 		case BMA2x2_12_RESOLUTION:
8701:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
8702:bma2x2.c      **** 			(p_bma2x2->dev_addr, BMA2x2_ACCEL_X12_LSB_REG,
8703:bma2x2.c      **** 			data_u8, BMA2x2_ACCEL_BW_MIN_RANGE);
8704:bma2x2.c      **** 
8705:bma2x2.c      **** 			/* read x data_u8*/
8706:bma2x2.c      **** 			accel->x = (s16)((((s32)((s8)
8707:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_X_MSB]))
8708:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS)|
8709:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_XYZ_X_LSB]
8710:bma2x2.c      **** 			& BMA2x2_12_BIT_SHIFT));
8711:bma2x2.c      **** 			accel->x = accel->x >> BMA2x2_SHIFT_FOUR_BITS;
8712:bma2x2.c      **** 
8713:bma2x2.c      **** 			/* read y data_u8*/
8714:bma2x2.c      **** 			accel->y = (s16)((((s32)((s8)
8715:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Y_MSB]))
8716:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS)|
8717:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_XYZ_Y_LSB]
8718:bma2x2.c      **** 			& BMA2x2_12_BIT_SHIFT));
8719:bma2x2.c      **** 			accel->y = accel->y >> BMA2x2_SHIFT_FOUR_BITS;
8720:bma2x2.c      **** 
8721:bma2x2.c      **** 			/* read z data_u8*/
8722:bma2x2.c      **** 			accel->z = (s16)((((s32)((s8)
8723:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Z_MSB]))
8724:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS)|
8725:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_XYZ_Z_LSB]
8726:bma2x2.c      **** 			& BMA2x2_12_BIT_SHIFT));
8727:bma2x2.c      **** 			accel->z = accel->z >> BMA2x2_SHIFT_FOUR_BITS;
8728:bma2x2.c      **** 			/*Accessing the sixth element of array*/
8729:bma2x2.c      **** 			accel->temp = (s8)data_u8[BMA2x2_SENSOR_DATA_TEMP];
8730:bma2x2.c      **** 		break;
8731:bma2x2.c      **** 		case BMA2x2_10_RESOLUTION:
8732:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
8733:bma2x2.c      **** 			(p_bma2x2->dev_addr, BMA2x2_ACCEL_X10_LSB_REG,
8734:bma2x2.c      **** 			data_u8, BMA2x2_ACCEL_BW_MIN_RANGE);
8735:bma2x2.c      **** 
8736:bma2x2.c      **** 			/* read x data_u8*/
8737:bma2x2.c      **** 			accel->x = (s16)((((s32)((s8)
8738:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_X_MSB]))<<
8739:bma2x2.c      **** 			BMA2x2_SHIFT_EIGHT_BITS)|
8740:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_XYZ_X_LSB]
8741:bma2x2.c      **** 			& BMA2x2_10_BIT_SHIFT));
8742:bma2x2.c      **** 			accel->x = accel->x >> BMA2x2_SHIFT_SIX_BITS;
8743:bma2x2.c      **** 
8744:bma2x2.c      **** 			/* read y data_u8*/
8745:bma2x2.c      **** 			accel->y = (s16)((((s32)((s8)
8746:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Y_MSB]))<<
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 544


8747:bma2x2.c      **** 			BMA2x2_SHIFT_EIGHT_BITS)|
8748:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_XYZ_Y_LSB]
8749:bma2x2.c      **** 			& BMA2x2_10_BIT_SHIFT));
8750:bma2x2.c      **** 			accel->y = accel->y >> BMA2x2_SHIFT_SIX_BITS;
8751:bma2x2.c      **** 
8752:bma2x2.c      **** 			/* read z data_u8*/
8753:bma2x2.c      **** 			accel->z = (s16)((((s32)((s8)
8754:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Z_MSB]))<<
8755:bma2x2.c      **** 			BMA2x2_SHIFT_EIGHT_BITS)|
8756:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_XYZ_Z_LSB]
8757:bma2x2.c      **** 			& BMA2x2_10_BIT_SHIFT));
8758:bma2x2.c      **** 			accel->z = accel->z >> BMA2x2_SHIFT_SIX_BITS;
8759:bma2x2.c      **** 
8760:bma2x2.c      **** 			/* read temp_s8 data_u8*/
8761:bma2x2.c      **** 			/*Accessing the sixth element of array*/
8762:bma2x2.c      **** 			accel->temp = (s8)data_u8[BMA2x2_SENSOR_DATA_TEMP];
8763:bma2x2.c      **** 		break;
8764:bma2x2.c      **** 		case BMA2x2_14_RESOLUTION:
8765:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
8766:bma2x2.c      **** 			(p_bma2x2->dev_addr, BMA2x2_ACCEL_X14_LSB_REG,
8767:bma2x2.c      **** 			data_u8, BMA2x2_ACCEL_BW_MIN_RANGE);
8768:bma2x2.c      **** 
8769:bma2x2.c      **** 			/* read x data_u8*/
8770:bma2x2.c      **** 			accel->x = (s16)((((s32)((s8)
8771:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_X_MSB]))<<
8772:bma2x2.c      **** 			BMA2x2_SHIFT_EIGHT_BITS)|
8773:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_XYZ_X_LSB]
8774:bma2x2.c      **** 			& BMA2x2_14_BIT_SHIFT));
8775:bma2x2.c      **** 			accel->x = accel->x >> BMA2x2_SHIFT_TWO_BITS;
8776:bma2x2.c      **** 
8777:bma2x2.c      **** 			/* read y data_u8*/
8778:bma2x2.c      **** 			accel->y = (s16)((((s32)((s8)
8779:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Y_MSB]))<<
8780:bma2x2.c      **** 			BMA2x2_SHIFT_EIGHT_BITS)|
8781:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_XYZ_Y_LSB]
8782:bma2x2.c      **** 			& BMA2x2_14_BIT_SHIFT));
8783:bma2x2.c      **** 			accel->y = accel->y >> BMA2x2_SHIFT_TWO_BITS;
8784:bma2x2.c      **** 
8785:bma2x2.c      **** 			/* read z data_u8*/
8786:bma2x2.c      **** 			accel->z = (s16)((((s32)((s8)
8787:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Z_MSB]))<<
8788:bma2x2.c      **** 			BMA2x2_SHIFT_EIGHT_BITS)|
8789:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_XYZ_Z_LSB]
8790:bma2x2.c      **** 			& BMA2x2_14_BIT_SHIFT));
8791:bma2x2.c      **** 			accel->z = accel->z >> BMA2x2_SHIFT_TWO_BITS;
8792:bma2x2.c      **** 			/* read temp data_u8*/
8793:bma2x2.c      **** 			/*Accessing the sixth element of array*/
8794:bma2x2.c      **** 			accel->temp = (s8)data_u8[BMA2x2_SENSOR_DATA_TEMP];
8795:bma2x2.c      **** 		break;
8796:bma2x2.c      **** 		default:
8797:bma2x2.c      **** 		break;
 21976              		.loc 1 8797 0
 21977 0040 19E1     		b	.L1287
 21978              	.L1286:
8701:bma2x2.c      **** 			(p_bma2x2->dev_addr, BMA2x2_ACCEL_X12_LSB_REG,
 21979              		.loc 1 8701 0
 21980 0042 914B     		ldr	r3, .L1289
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 545


 21981 0044 1B68     		ldr	r3, [r3]
 21982 0046 DD68     		ldr	r5, [r3, #12]
 21983 0048 8F4B     		ldr	r3, .L1289
 21984 004a 1B68     		ldr	r3, [r3]
 21985 004c 1879     		ldrb	r0, [r3, #4]
 21986 004e 0F23     		movs	r3, #15
 21987 0050 FC18     		adds	r4, r7, r3
 21988 0052 0823     		movs	r3, #8
 21989 0054 FA18     		adds	r2, r7, r3
 21990 0056 0723     		movs	r3, #7
 21991 0058 0221     		movs	r1, #2
 21992 005a A847     		blx	r5
 21993 005c 0300     		movs	r3, r0
 21994 005e 2370     		strb	r3, [r4]
8707:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS)|
 21995              		.loc 1 8707 0
 21996 0060 0823     		movs	r3, #8
 21997 0062 FB18     		adds	r3, r7, r3
 21998 0064 5B78     		ldrb	r3, [r3, #1]
8706:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_X_MSB]))
 21999              		.loc 1 8706 0
 22000 0066 5BB2     		sxtb	r3, r3
8708:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_XYZ_X_LSB]
 22001              		.loc 1 8708 0
 22002 0068 1B02     		lsls	r3, r3, #8
8706:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_X_MSB]))
 22003              		.loc 1 8706 0
 22004 006a 1AB2     		sxth	r2, r3
8709:bma2x2.c      **** 			& BMA2x2_12_BIT_SHIFT));
 22005              		.loc 1 8709 0
 22006 006c 0823     		movs	r3, #8
 22007 006e FB18     		adds	r3, r7, r3
 22008 0070 1B78     		ldrb	r3, [r3]
8706:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_X_MSB]))
 22009              		.loc 1 8706 0
 22010 0072 1BB2     		sxth	r3, r3
 22011 0074 F021     		movs	r1, #240
 22012 0076 0B40     		ands	r3, r1
 22013 0078 1BB2     		sxth	r3, r3
 22014 007a 1343     		orrs	r3, r2
 22015 007c 1AB2     		sxth	r2, r3
 22016 007e 7B68     		ldr	r3, [r7, #4]
 22017 0080 1A80     		strh	r2, [r3]
8711:bma2x2.c      **** 
 22018              		.loc 1 8711 0
 22019 0082 7B68     		ldr	r3, [r7, #4]
 22020 0084 0022     		movs	r2, #0
 22021 0086 9B5E     		ldrsh	r3, [r3, r2]
 22022 0088 1B11     		asrs	r3, r3, #4
 22023 008a 1AB2     		sxth	r2, r3
 22024 008c 7B68     		ldr	r3, [r7, #4]
 22025 008e 1A80     		strh	r2, [r3]
8715:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS)|
 22026              		.loc 1 8715 0
 22027 0090 0823     		movs	r3, #8
 22028 0092 FB18     		adds	r3, r7, r3
 22029 0094 DB78     		ldrb	r3, [r3, #3]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 546


8714:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Y_MSB]))
 22030              		.loc 1 8714 0
 22031 0096 5BB2     		sxtb	r3, r3
8716:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_XYZ_Y_LSB]
 22032              		.loc 1 8716 0
 22033 0098 1B02     		lsls	r3, r3, #8
8714:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Y_MSB]))
 22034              		.loc 1 8714 0
 22035 009a 1AB2     		sxth	r2, r3
8717:bma2x2.c      **** 			& BMA2x2_12_BIT_SHIFT));
 22036              		.loc 1 8717 0
 22037 009c 0823     		movs	r3, #8
 22038 009e FB18     		adds	r3, r7, r3
 22039 00a0 9B78     		ldrb	r3, [r3, #2]
8714:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Y_MSB]))
 22040              		.loc 1 8714 0
 22041 00a2 1BB2     		sxth	r3, r3
 22042 00a4 F021     		movs	r1, #240
 22043 00a6 0B40     		ands	r3, r1
 22044 00a8 1BB2     		sxth	r3, r3
 22045 00aa 1343     		orrs	r3, r2
 22046 00ac 1AB2     		sxth	r2, r3
 22047 00ae 7B68     		ldr	r3, [r7, #4]
 22048 00b0 5A80     		strh	r2, [r3, #2]
8719:bma2x2.c      **** 
 22049              		.loc 1 8719 0
 22050 00b2 7B68     		ldr	r3, [r7, #4]
 22051 00b4 0222     		movs	r2, #2
 22052 00b6 9B5E     		ldrsh	r3, [r3, r2]
 22053 00b8 1B11     		asrs	r3, r3, #4
 22054 00ba 1AB2     		sxth	r2, r3
 22055 00bc 7B68     		ldr	r3, [r7, #4]
 22056 00be 5A80     		strh	r2, [r3, #2]
8723:bma2x2.c      **** 			<< BMA2x2_SHIFT_EIGHT_BITS)|
 22057              		.loc 1 8723 0
 22058 00c0 0823     		movs	r3, #8
 22059 00c2 FB18     		adds	r3, r7, r3
 22060 00c4 5B79     		ldrb	r3, [r3, #5]
8722:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Z_MSB]))
 22061              		.loc 1 8722 0
 22062 00c6 5BB2     		sxtb	r3, r3
8724:bma2x2.c      **** 			(data_u8[BMA2x2_SENSOR_DATA_XYZ_Z_LSB]
 22063              		.loc 1 8724 0
 22064 00c8 1B02     		lsls	r3, r3, #8
8722:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Z_MSB]))
 22065              		.loc 1 8722 0
 22066 00ca 1AB2     		sxth	r2, r3
8725:bma2x2.c      **** 			& BMA2x2_12_BIT_SHIFT));
 22067              		.loc 1 8725 0
 22068 00cc 0823     		movs	r3, #8
 22069 00ce FB18     		adds	r3, r7, r3
 22070 00d0 1B79     		ldrb	r3, [r3, #4]
8722:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Z_MSB]))
 22071              		.loc 1 8722 0
 22072 00d2 1BB2     		sxth	r3, r3
 22073 00d4 F021     		movs	r1, #240
 22074 00d6 0B40     		ands	r3, r1
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 547


 22075 00d8 1BB2     		sxth	r3, r3
 22076 00da 1343     		orrs	r3, r2
 22077 00dc 1AB2     		sxth	r2, r3
 22078 00de 7B68     		ldr	r3, [r7, #4]
 22079 00e0 9A80     		strh	r2, [r3, #4]
8727:bma2x2.c      **** 			/*Accessing the sixth element of array*/
 22080              		.loc 1 8727 0
 22081 00e2 7B68     		ldr	r3, [r7, #4]
 22082 00e4 0422     		movs	r2, #4
 22083 00e6 9B5E     		ldrsh	r3, [r3, r2]
 22084 00e8 1B11     		asrs	r3, r3, #4
 22085 00ea 1AB2     		sxth	r2, r3
 22086 00ec 7B68     		ldr	r3, [r7, #4]
 22087 00ee 9A80     		strh	r2, [r3, #4]
8729:bma2x2.c      **** 		break;
 22088              		.loc 1 8729 0
 22089 00f0 0823     		movs	r3, #8
 22090 00f2 FB18     		adds	r3, r7, r3
 22091 00f4 9B79     		ldrb	r3, [r3, #6]
 22092 00f6 5AB2     		sxtb	r2, r3
 22093 00f8 7B68     		ldr	r3, [r7, #4]
 22094 00fa 9A71     		strb	r2, [r3, #6]
8730:bma2x2.c      **** 		case BMA2x2_10_RESOLUTION:
 22095              		.loc 1 8730 0
 22096 00fc BBE0     		b	.L1287
 22097              	.L1284:
8732:bma2x2.c      **** 			(p_bma2x2->dev_addr, BMA2x2_ACCEL_X10_LSB_REG,
 22098              		.loc 1 8732 0
 22099 00fe 624B     		ldr	r3, .L1289
 22100 0100 1B68     		ldr	r3, [r3]
 22101 0102 DD68     		ldr	r5, [r3, #12]
 22102 0104 604B     		ldr	r3, .L1289
 22103 0106 1B68     		ldr	r3, [r3]
 22104 0108 1879     		ldrb	r0, [r3, #4]
 22105 010a 0F23     		movs	r3, #15
 22106 010c FC18     		adds	r4, r7, r3
 22107 010e 0823     		movs	r3, #8
 22108 0110 FA18     		adds	r2, r7, r3
 22109 0112 0723     		movs	r3, #7
 22110 0114 0221     		movs	r1, #2
 22111 0116 A847     		blx	r5
 22112 0118 0300     		movs	r3, r0
 22113 011a 2370     		strb	r3, [r4]
8738:bma2x2.c      **** 			BMA2x2_SHIFT_EIGHT_BITS)|
 22114              		.loc 1 8738 0
 22115 011c 0823     		movs	r3, #8
 22116 011e FB18     		adds	r3, r7, r3
 22117 0120 5B78     		ldrb	r3, [r3, #1]
8737:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_X_MSB]))<<
 22118              		.loc 1 8737 0
 22119 0122 5BB2     		sxtb	r3, r3
8738:bma2x2.c      **** 			BMA2x2_SHIFT_EIGHT_BITS)|
 22120              		.loc 1 8738 0
 22121 0124 1B02     		lsls	r3, r3, #8
8737:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_X_MSB]))<<
 22122              		.loc 1 8737 0
 22123 0126 1AB2     		sxth	r2, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 548


8740:bma2x2.c      **** 			& BMA2x2_10_BIT_SHIFT));
 22124              		.loc 1 8740 0
 22125 0128 0823     		movs	r3, #8
 22126 012a FB18     		adds	r3, r7, r3
 22127 012c 1B78     		ldrb	r3, [r3]
8737:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_X_MSB]))<<
 22128              		.loc 1 8737 0
 22129 012e 1BB2     		sxth	r3, r3
 22130 0130 C021     		movs	r1, #192
 22131 0132 0B40     		ands	r3, r1
 22132 0134 1BB2     		sxth	r3, r3
 22133 0136 1343     		orrs	r3, r2
 22134 0138 1AB2     		sxth	r2, r3
 22135 013a 7B68     		ldr	r3, [r7, #4]
 22136 013c 1A80     		strh	r2, [r3]
8742:bma2x2.c      **** 
 22137              		.loc 1 8742 0
 22138 013e 7B68     		ldr	r3, [r7, #4]
 22139 0140 0022     		movs	r2, #0
 22140 0142 9B5E     		ldrsh	r3, [r3, r2]
 22141 0144 9B11     		asrs	r3, r3, #6
 22142 0146 1AB2     		sxth	r2, r3
 22143 0148 7B68     		ldr	r3, [r7, #4]
 22144 014a 1A80     		strh	r2, [r3]
8746:bma2x2.c      **** 			BMA2x2_SHIFT_EIGHT_BITS)|
 22145              		.loc 1 8746 0
 22146 014c 0823     		movs	r3, #8
 22147 014e FB18     		adds	r3, r7, r3
 22148 0150 DB78     		ldrb	r3, [r3, #3]
8745:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Y_MSB]))<<
 22149              		.loc 1 8745 0
 22150 0152 5BB2     		sxtb	r3, r3
8746:bma2x2.c      **** 			BMA2x2_SHIFT_EIGHT_BITS)|
 22151              		.loc 1 8746 0
 22152 0154 1B02     		lsls	r3, r3, #8
8745:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Y_MSB]))<<
 22153              		.loc 1 8745 0
 22154 0156 1AB2     		sxth	r2, r3
8748:bma2x2.c      **** 			& BMA2x2_10_BIT_SHIFT));
 22155              		.loc 1 8748 0
 22156 0158 0823     		movs	r3, #8
 22157 015a FB18     		adds	r3, r7, r3
 22158 015c 9B78     		ldrb	r3, [r3, #2]
8745:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Y_MSB]))<<
 22159              		.loc 1 8745 0
 22160 015e 1BB2     		sxth	r3, r3
 22161 0160 C021     		movs	r1, #192
 22162 0162 0B40     		ands	r3, r1
 22163 0164 1BB2     		sxth	r3, r3
 22164 0166 1343     		orrs	r3, r2
 22165 0168 1AB2     		sxth	r2, r3
 22166 016a 7B68     		ldr	r3, [r7, #4]
 22167 016c 5A80     		strh	r2, [r3, #2]
8750:bma2x2.c      **** 
 22168              		.loc 1 8750 0
 22169 016e 7B68     		ldr	r3, [r7, #4]
 22170 0170 0222     		movs	r2, #2
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 549


 22171 0172 9B5E     		ldrsh	r3, [r3, r2]
 22172 0174 9B11     		asrs	r3, r3, #6
 22173 0176 1AB2     		sxth	r2, r3
 22174 0178 7B68     		ldr	r3, [r7, #4]
 22175 017a 5A80     		strh	r2, [r3, #2]
8754:bma2x2.c      **** 			BMA2x2_SHIFT_EIGHT_BITS)|
 22176              		.loc 1 8754 0
 22177 017c 0823     		movs	r3, #8
 22178 017e FB18     		adds	r3, r7, r3
 22179 0180 5B79     		ldrb	r3, [r3, #5]
8753:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Z_MSB]))<<
 22180              		.loc 1 8753 0
 22181 0182 5BB2     		sxtb	r3, r3
8754:bma2x2.c      **** 			BMA2x2_SHIFT_EIGHT_BITS)|
 22182              		.loc 1 8754 0
 22183 0184 1B02     		lsls	r3, r3, #8
8753:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Z_MSB]))<<
 22184              		.loc 1 8753 0
 22185 0186 1AB2     		sxth	r2, r3
8756:bma2x2.c      **** 			& BMA2x2_10_BIT_SHIFT));
 22186              		.loc 1 8756 0
 22187 0188 0823     		movs	r3, #8
 22188 018a FB18     		adds	r3, r7, r3
 22189 018c 1B79     		ldrb	r3, [r3, #4]
8753:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Z_MSB]))<<
 22190              		.loc 1 8753 0
 22191 018e 1BB2     		sxth	r3, r3
 22192 0190 C021     		movs	r1, #192
 22193 0192 0B40     		ands	r3, r1
 22194 0194 1BB2     		sxth	r3, r3
 22195 0196 1343     		orrs	r3, r2
 22196 0198 1AB2     		sxth	r2, r3
 22197 019a 7B68     		ldr	r3, [r7, #4]
 22198 019c 9A80     		strh	r2, [r3, #4]
8758:bma2x2.c      **** 
 22199              		.loc 1 8758 0
 22200 019e 7B68     		ldr	r3, [r7, #4]
 22201 01a0 0422     		movs	r2, #4
 22202 01a2 9B5E     		ldrsh	r3, [r3, r2]
 22203 01a4 9B11     		asrs	r3, r3, #6
 22204 01a6 1AB2     		sxth	r2, r3
 22205 01a8 7B68     		ldr	r3, [r7, #4]
 22206 01aa 9A80     		strh	r2, [r3, #4]
8762:bma2x2.c      **** 		break;
 22207              		.loc 1 8762 0
 22208 01ac 0823     		movs	r3, #8
 22209 01ae FB18     		adds	r3, r7, r3
 22210 01b0 9B79     		ldrb	r3, [r3, #6]
 22211 01b2 5AB2     		sxtb	r2, r3
 22212 01b4 7B68     		ldr	r3, [r7, #4]
 22213 01b6 9A71     		strb	r2, [r3, #6]
8763:bma2x2.c      **** 		case BMA2x2_14_RESOLUTION:
 22214              		.loc 1 8763 0
 22215 01b8 5DE0     		b	.L1287
 22216              	.L1285:
8765:bma2x2.c      **** 			(p_bma2x2->dev_addr, BMA2x2_ACCEL_X14_LSB_REG,
 22217              		.loc 1 8765 0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 550


 22218 01ba 334B     		ldr	r3, .L1289
 22219 01bc 1B68     		ldr	r3, [r3]
 22220 01be DD68     		ldr	r5, [r3, #12]
 22221 01c0 314B     		ldr	r3, .L1289
 22222 01c2 1B68     		ldr	r3, [r3]
 22223 01c4 1879     		ldrb	r0, [r3, #4]
 22224 01c6 0F23     		movs	r3, #15
 22225 01c8 FC18     		adds	r4, r7, r3
 22226 01ca 0823     		movs	r3, #8
 22227 01cc FA18     		adds	r2, r7, r3
 22228 01ce 0723     		movs	r3, #7
 22229 01d0 0221     		movs	r1, #2
 22230 01d2 A847     		blx	r5
 22231 01d4 0300     		movs	r3, r0
 22232 01d6 2370     		strb	r3, [r4]
8771:bma2x2.c      **** 			BMA2x2_SHIFT_EIGHT_BITS)|
 22233              		.loc 1 8771 0
 22234 01d8 0823     		movs	r3, #8
 22235 01da FB18     		adds	r3, r7, r3
 22236 01dc 5B78     		ldrb	r3, [r3, #1]
8770:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_X_MSB]))<<
 22237              		.loc 1 8770 0
 22238 01de 5BB2     		sxtb	r3, r3
8771:bma2x2.c      **** 			BMA2x2_SHIFT_EIGHT_BITS)|
 22239              		.loc 1 8771 0
 22240 01e0 1B02     		lsls	r3, r3, #8
8770:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_X_MSB]))<<
 22241              		.loc 1 8770 0
 22242 01e2 1AB2     		sxth	r2, r3
8773:bma2x2.c      **** 			& BMA2x2_14_BIT_SHIFT));
 22243              		.loc 1 8773 0
 22244 01e4 0823     		movs	r3, #8
 22245 01e6 FB18     		adds	r3, r7, r3
 22246 01e8 1B78     		ldrb	r3, [r3]
8770:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_X_MSB]))<<
 22247              		.loc 1 8770 0
 22248 01ea 1BB2     		sxth	r3, r3
 22249 01ec FC21     		movs	r1, #252
 22250 01ee 0B40     		ands	r3, r1
 22251 01f0 1BB2     		sxth	r3, r3
 22252 01f2 1343     		orrs	r3, r2
 22253 01f4 1AB2     		sxth	r2, r3
 22254 01f6 7B68     		ldr	r3, [r7, #4]
 22255 01f8 1A80     		strh	r2, [r3]
8775:bma2x2.c      **** 
 22256              		.loc 1 8775 0
 22257 01fa 7B68     		ldr	r3, [r7, #4]
 22258 01fc 0022     		movs	r2, #0
 22259 01fe 9B5E     		ldrsh	r3, [r3, r2]
 22260 0200 9B10     		asrs	r3, r3, #2
 22261 0202 1AB2     		sxth	r2, r3
 22262 0204 7B68     		ldr	r3, [r7, #4]
 22263 0206 1A80     		strh	r2, [r3]
8779:bma2x2.c      **** 			BMA2x2_SHIFT_EIGHT_BITS)|
 22264              		.loc 1 8779 0
 22265 0208 0823     		movs	r3, #8
 22266 020a FB18     		adds	r3, r7, r3
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 551


 22267 020c DB78     		ldrb	r3, [r3, #3]
8778:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Y_MSB]))<<
 22268              		.loc 1 8778 0
 22269 020e 5BB2     		sxtb	r3, r3
8779:bma2x2.c      **** 			BMA2x2_SHIFT_EIGHT_BITS)|
 22270              		.loc 1 8779 0
 22271 0210 1B02     		lsls	r3, r3, #8
8778:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Y_MSB]))<<
 22272              		.loc 1 8778 0
 22273 0212 1AB2     		sxth	r2, r3
8781:bma2x2.c      **** 			& BMA2x2_14_BIT_SHIFT));
 22274              		.loc 1 8781 0
 22275 0214 0823     		movs	r3, #8
 22276 0216 FB18     		adds	r3, r7, r3
 22277 0218 9B78     		ldrb	r3, [r3, #2]
8778:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Y_MSB]))<<
 22278              		.loc 1 8778 0
 22279 021a 1BB2     		sxth	r3, r3
 22280 021c FC21     		movs	r1, #252
 22281 021e 0B40     		ands	r3, r1
 22282 0220 1BB2     		sxth	r3, r3
 22283 0222 1343     		orrs	r3, r2
 22284 0224 1AB2     		sxth	r2, r3
 22285 0226 7B68     		ldr	r3, [r7, #4]
 22286 0228 5A80     		strh	r2, [r3, #2]
8783:bma2x2.c      **** 
 22287              		.loc 1 8783 0
 22288 022a 7B68     		ldr	r3, [r7, #4]
 22289 022c 0222     		movs	r2, #2
 22290 022e 9B5E     		ldrsh	r3, [r3, r2]
 22291 0230 9B10     		asrs	r3, r3, #2
 22292 0232 1AB2     		sxth	r2, r3
 22293 0234 7B68     		ldr	r3, [r7, #4]
 22294 0236 5A80     		strh	r2, [r3, #2]
8787:bma2x2.c      **** 			BMA2x2_SHIFT_EIGHT_BITS)|
 22295              		.loc 1 8787 0
 22296 0238 0823     		movs	r3, #8
 22297 023a FB18     		adds	r3, r7, r3
 22298 023c 5B79     		ldrb	r3, [r3, #5]
8786:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Z_MSB]))<<
 22299              		.loc 1 8786 0
 22300 023e 5BB2     		sxtb	r3, r3
8787:bma2x2.c      **** 			BMA2x2_SHIFT_EIGHT_BITS)|
 22301              		.loc 1 8787 0
 22302 0240 1B02     		lsls	r3, r3, #8
8786:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Z_MSB]))<<
 22303              		.loc 1 8786 0
 22304 0242 1AB2     		sxth	r2, r3
8789:bma2x2.c      **** 			& BMA2x2_14_BIT_SHIFT));
 22305              		.loc 1 8789 0
 22306 0244 0823     		movs	r3, #8
 22307 0246 FB18     		adds	r3, r7, r3
 22308 0248 1B79     		ldrb	r3, [r3, #4]
8786:bma2x2.c      **** 			data_u8[BMA2x2_SENSOR_DATA_XYZ_Z_MSB]))<<
 22309              		.loc 1 8786 0
 22310 024a 1BB2     		sxth	r3, r3
 22311 024c FC21     		movs	r1, #252
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 552


 22312 024e 0B40     		ands	r3, r1
 22313 0250 1BB2     		sxth	r3, r3
 22314 0252 1343     		orrs	r3, r2
 22315 0254 1AB2     		sxth	r2, r3
 22316 0256 7B68     		ldr	r3, [r7, #4]
 22317 0258 9A80     		strh	r2, [r3, #4]
8791:bma2x2.c      **** 			/* read temp data_u8*/
 22318              		.loc 1 8791 0
 22319 025a 7B68     		ldr	r3, [r7, #4]
 22320 025c 0422     		movs	r2, #4
 22321 025e 9B5E     		ldrsh	r3, [r3, r2]
 22322 0260 9B10     		asrs	r3, r3, #2
 22323 0262 1AB2     		sxth	r2, r3
 22324 0264 7B68     		ldr	r3, [r7, #4]
 22325 0266 9A80     		strh	r2, [r3, #4]
8794:bma2x2.c      **** 		break;
 22326              		.loc 1 8794 0
 22327 0268 0823     		movs	r3, #8
 22328 026a FB18     		adds	r3, r7, r3
 22329 026c 9B79     		ldrb	r3, [r3, #6]
 22330 026e 5AB2     		sxtb	r2, r3
 22331 0270 7B68     		ldr	r3, [r7, #4]
 22332 0272 9A71     		strb	r2, [r3, #6]
8795:bma2x2.c      **** 		default:
 22333              		.loc 1 8795 0
 22334 0274 C046     		nop
 22335              	.L1287:
8798:bma2x2.c      **** 		}
8799:bma2x2.c      **** 	}
8800:bma2x2.c      **** 	return com_rslt;
 22336              		.loc 1 8800 0
 22337 0276 0F23     		movs	r3, #15
 22338 0278 FB18     		adds	r3, r7, r3
 22339 027a 1B78     		ldrb	r3, [r3]
 22340 027c 5BB2     		sxtb	r3, r3
 22341              	.L1288:
8801:bma2x2.c      **** }
 22342              		.loc 1 8801 0 discriminator 1
 22343 027e 1800     		movs	r0, r3
 22344 0280 BD46     		mov	sp, r7
 22345 0282 04B0     		add	sp, sp, #16
 22346              		@ sp needed
 22347 0284 B0BD     		pop	{r4, r5, r7, pc}
 22348              	.L1290:
 22349 0286 C046     		.align	2
 22350              	.L1289:
 22351 0288 00000000 		.word	p_bma2x2
 22352 028c 00000000 		.word	V_BMA2x2RESOLUTION_U8
 22353              		.cfi_endproc
 22354              	.LFE144:
 22355              		.size	bma2x2_read_accel_xyzt, .-bma2x2_read_accel_xyzt
 22356              		.section	.text.bma2x2_read_accel_eight_resolution_xyzt,"ax",%progbits
 22357              		.align	2
 22358              		.global	bma2x2_read_accel_eight_resolution_xyzt
 22359              		.code	16
 22360              		.thumb_func
 22361              		.type	bma2x2_read_accel_eight_resolution_xyzt, %function
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 553


 22362              	bma2x2_read_accel_eight_resolution_xyzt:
 22363              	.LFB145:
8802:bma2x2.c      **** /*!
8803:bma2x2.c      ****  * @brief This API reads accelerometer data X,Y,Z values and
8804:bma2x2.c      ****  * temperature data from location 0x02 to 0x08
8805:bma2x2.c      ****  *
8806:bma2x2.c      ****  *
8807:bma2x2.c      ****  *
8808:bma2x2.c      ****  *
8809:bma2x2.c      ****  *  @param accel : The value of accel xyz and temperature data
8810:bma2x2.c      ****  *
8811:bma2x2.c      ****  *	@return results of bus communication function
8812:bma2x2.c      ****  *	@retval 0 -> Success
8813:bma2x2.c      ****  *	@retval -1 -> Error
8814:bma2x2.c      ****  *
8815:bma2x2.c      ****  *
8816:bma2x2.c      **** */
8817:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_read_accel_eight_resolution_xyzt(
8818:bma2x2.c      **** struct bma2x2_accel_eight_resolution_temp *accel)
8819:bma2x2.c      **** {
 22364              		.loc 1 8819 0
 22365              		.cfi_startproc
 22366              		@ args = 0, pretend = 0, frame = 16
 22367              		@ frame_needed = 1, uses_anonymous_args = 0
 22368 0000 B0B5     		push	{r4, r5, r7, lr}
 22369              		.cfi_def_cfa_offset 16
 22370              		.cfi_offset 4, -16
 22371              		.cfi_offset 5, -12
 22372              		.cfi_offset 7, -8
 22373              		.cfi_offset 14, -4
 22374 0002 84B0     		sub	sp, sp, #16
 22375              		.cfi_def_cfa_offset 32
 22376 0004 00AF     		add	r7, sp, #0
 22377              		.cfi_def_cfa_register 7
 22378 0006 7860     		str	r0, [r7, #4]
8820:bma2x2.c      **** 	/*  Variable used to return value of
8821:bma2x2.c      **** 	communication routine*/
8822:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 22379              		.loc 1 8822 0
 22380 0008 0F23     		movs	r3, #15
 22381 000a FB18     		adds	r3, r7, r3
 22382 000c FF22     		movs	r2, #255
 22383 000e 1A70     		strb	r2, [r3]
8823:bma2x2.c      **** 	u8	data_u8 = BMA2x2_INIT_VALUE;
 22384              		.loc 1 8823 0
 22385 0010 0E23     		movs	r3, #14
 22386 0012 FB18     		adds	r3, r7, r3
 22387 0014 0022     		movs	r2, #0
 22388 0016 1A70     		strb	r2, [r3]
8824:bma2x2.c      **** 
8825:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 22389              		.loc 1 8825 0
 22390 0018 314B     		ldr	r3, .L1295
 22391 001a 1B68     		ldr	r3, [r3]
 22392 001c 002B     		cmp	r3, #0
 22393 001e 02D1     		bne	.L1292
8826:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 554


8827:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 22394              		.loc 1 8827 0
 22395 0020 7F23     		movs	r3, #127
 22396 0022 5B42     		rsbs	r3, r3, #0
 22397 0024 57E0     		b	.L1294
 22398              	.L1292:
8828:bma2x2.c      **** 		} else {
8829:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 22399              		.loc 1 8829 0
 22400 0026 2E4B     		ldr	r3, .L1295
 22401 0028 1B68     		ldr	r3, [r3]
 22402 002a DD68     		ldr	r5, [r3, #12]
 22403 002c 2C4B     		ldr	r3, .L1295
 22404 002e 1B68     		ldr	r3, [r3]
 22405 0030 1879     		ldrb	r0, [r3, #4]
 22406 0032 0F23     		movs	r3, #15
 22407 0034 FC18     		adds	r4, r7, r3
 22408 0036 0E23     		movs	r3, #14
 22409 0038 FA18     		adds	r2, r7, r3
 22410 003a 0123     		movs	r3, #1
 22411 003c 0321     		movs	r1, #3
 22412 003e A847     		blx	r5
 22413 0040 0300     		movs	r3, r0
 22414 0042 2370     		strb	r3, [r4]
8830:bma2x2.c      **** 			(p_bma2x2->dev_addr,
8831:bma2x2.c      **** 			BMA2x2_X_AXIS_MSB_ADDR, &data_u8,
8832:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
8833:bma2x2.c      **** 			accel->x = BMA2x2_GET_BITSLICE(data_u8,
 22415              		.loc 1 8833 0
 22416 0044 0E23     		movs	r3, #14
 22417 0046 FB18     		adds	r3, r7, r3
 22418 0048 1B78     		ldrb	r3, [r3]
 22419 004a 5AB2     		sxtb	r2, r3
 22420 004c 7B68     		ldr	r3, [r7, #4]
 22421 004e 1A70     		strb	r2, [r3]
8834:bma2x2.c      **** 			BMA2x2_ACCEL_X_MSB);
8835:bma2x2.c      **** 
8836:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 22422              		.loc 1 8836 0
 22423 0050 234B     		ldr	r3, .L1295
 22424 0052 1B68     		ldr	r3, [r3]
 22425 0054 DD68     		ldr	r5, [r3, #12]
 22426 0056 224B     		ldr	r3, .L1295
 22427 0058 1B68     		ldr	r3, [r3]
 22428 005a 1879     		ldrb	r0, [r3, #4]
 22429 005c 0F23     		movs	r3, #15
 22430 005e FC18     		adds	r4, r7, r3
 22431 0060 0E23     		movs	r3, #14
 22432 0062 FA18     		adds	r2, r7, r3
 22433 0064 0123     		movs	r3, #1
 22434 0066 0521     		movs	r1, #5
 22435 0068 A847     		blx	r5
 22436 006a 0300     		movs	r3, r0
 22437 006c 2370     		strb	r3, [r4]
8837:bma2x2.c      **** 			(p_bma2x2->dev_addr,
8838:bma2x2.c      **** 			BMA2x2_Y_AXIS_MSB_ADDR, &data_u8,
8839:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 555


8840:bma2x2.c      **** 			accel->y = BMA2x2_GET_BITSLICE(data_u8,
 22438              		.loc 1 8840 0
 22439 006e 0E23     		movs	r3, #14
 22440 0070 FB18     		adds	r3, r7, r3
 22441 0072 1B78     		ldrb	r3, [r3]
 22442 0074 5AB2     		sxtb	r2, r3
 22443 0076 7B68     		ldr	r3, [r7, #4]
 22444 0078 5A70     		strb	r2, [r3, #1]
8841:bma2x2.c      **** 			BMA2x2_ACCEL_Y_MSB);
8842:bma2x2.c      **** 
8843:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC
 22445              		.loc 1 8843 0
 22446 007a 194B     		ldr	r3, .L1295
 22447 007c 1B68     		ldr	r3, [r3]
 22448 007e DD68     		ldr	r5, [r3, #12]
 22449 0080 174B     		ldr	r3, .L1295
 22450 0082 1B68     		ldr	r3, [r3]
 22451 0084 1879     		ldrb	r0, [r3, #4]
 22452 0086 0F23     		movs	r3, #15
 22453 0088 FC18     		adds	r4, r7, r3
 22454 008a 0E23     		movs	r3, #14
 22455 008c FA18     		adds	r2, r7, r3
 22456 008e 0123     		movs	r3, #1
 22457 0090 0721     		movs	r1, #7
 22458 0092 A847     		blx	r5
 22459 0094 0300     		movs	r3, r0
 22460 0096 2370     		strb	r3, [r4]
8844:bma2x2.c      **** 			(p_bma2x2->dev_addr,
8845:bma2x2.c      **** 			BMA2x2_Z_AXIS_MSB_ADDR, &data_u8,
8846:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
8847:bma2x2.c      **** 			accel->z = BMA2x2_GET_BITSLICE(data_u8,
 22461              		.loc 1 8847 0
 22462 0098 0E23     		movs	r3, #14
 22463 009a FB18     		adds	r3, r7, r3
 22464 009c 1B78     		ldrb	r3, [r3]
 22465 009e 5AB2     		sxtb	r2, r3
 22466 00a0 7B68     		ldr	r3, [r7, #4]
 22467 00a2 9A70     		strb	r2, [r3, #2]
8848:bma2x2.c      **** 			BMA2x2_ACCEL_Z_MSB);
8849:bma2x2.c      **** 
8850:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC(
 22468              		.loc 1 8850 0
 22469 00a4 0E4B     		ldr	r3, .L1295
 22470 00a6 1B68     		ldr	r3, [r3]
 22471 00a8 DD68     		ldr	r5, [r3, #12]
 22472 00aa 0D4B     		ldr	r3, .L1295
 22473 00ac 1B68     		ldr	r3, [r3]
 22474 00ae 1879     		ldrb	r0, [r3, #4]
 22475 00b0 0F23     		movs	r3, #15
 22476 00b2 FC18     		adds	r4, r7, r3
 22477 00b4 0E23     		movs	r3, #14
 22478 00b6 FA18     		adds	r2, r7, r3
 22479 00b8 0123     		movs	r3, #1
 22480 00ba 0821     		movs	r1, #8
 22481 00bc A847     		blx	r5
 22482 00be 0300     		movs	r3, r0
 22483 00c0 2370     		strb	r3, [r4]
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 556


8851:bma2x2.c      **** 			p_bma2x2->dev_addr, BMA2x2_TEMP_ADDR, &data_u8,
8852:bma2x2.c      **** 			BMA2x2_GEN_READ_WRITE_LENGTH);
8853:bma2x2.c      **** 			accel->temp = (s8)data_u8;
 22484              		.loc 1 8853 0
 22485 00c2 0E23     		movs	r3, #14
 22486 00c4 FB18     		adds	r3, r7, r3
 22487 00c6 1B78     		ldrb	r3, [r3]
 22488 00c8 5AB2     		sxtb	r2, r3
 22489 00ca 7B68     		ldr	r3, [r7, #4]
 22490 00cc DA70     		strb	r2, [r3, #3]
8854:bma2x2.c      **** 		}
8855:bma2x2.c      **** 	return com_rslt;
 22491              		.loc 1 8855 0
 22492 00ce 0F23     		movs	r3, #15
 22493 00d0 FB18     		adds	r3, r7, r3
 22494 00d2 1B78     		ldrb	r3, [r3]
 22495 00d4 5BB2     		sxtb	r3, r3
 22496              	.L1294:
8856:bma2x2.c      **** }
 22497              		.loc 1 8856 0 discriminator 1
 22498 00d6 1800     		movs	r0, r3
 22499 00d8 BD46     		mov	sp, r7
 22500 00da 04B0     		add	sp, sp, #16
 22501              		@ sp needed
 22502 00dc B0BD     		pop	{r4, r5, r7, pc}
 22503              	.L1296:
 22504 00de C046     		.align	2
 22505              	.L1295:
 22506 00e0 00000000 		.word	p_bma2x2
 22507              		.cfi_endproc
 22508              	.LFE145:
 22509              		.size	bma2x2_read_accel_eight_resolution_xyzt, .-bma2x2_read_accel_eight_resolution_xyzt
 22510              		.section	.text.bma2x2_get_fifo_data_output_reg,"ax",%progbits
 22511              		.align	2
 22512              		.global	bma2x2_get_fifo_data_output_reg
 22513              		.code	16
 22514              		.thumb_func
 22515              		.type	bma2x2_get_fifo_data_output_reg, %function
 22516              	bma2x2_get_fifo_data_output_reg:
 22517              	.LFB146:
8857:bma2x2.c      **** 
8858:bma2x2.c      **** /*!
8859:bma2x2.c      ****  *	@brief This API is used to get
8860:bma2x2.c      ****  *	the fifo data in the register 0x3F bit 0 to 7
8861:bma2x2.c      ****  *
8862:bma2x2.c      ****  *
8863:bma2x2.c      ****  *  @param  output_reg_u8 : The value of fifo data
8864:bma2x2.c      ****  *
8865:bma2x2.c      ****  *
8866:bma2x2.c      ****  *
8867:bma2x2.c      ****  *	@return results of bus communication function
8868:bma2x2.c      ****  *	@retval 0 -> Success
8869:bma2x2.c      ****  *	@retval -1 -> Error
8870:bma2x2.c      ****  *
8871:bma2x2.c      ****  *
8872:bma2x2.c      **** */
8873:bma2x2.c      **** BMA2x2_RETURN_FUNCTION_TYPE bma2x2_get_fifo_data_output_reg(u8 *output_reg_u8)
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 557


8874:bma2x2.c      **** {
 22518              		.loc 1 8874 0
 22519              		.cfi_startproc
 22520              		@ args = 0, pretend = 0, frame = 16
 22521              		@ frame_needed = 1, uses_anonymous_args = 0
 22522 0000 B0B5     		push	{r4, r5, r7, lr}
 22523              		.cfi_def_cfa_offset 16
 22524              		.cfi_offset 4, -16
 22525              		.cfi_offset 5, -12
 22526              		.cfi_offset 7, -8
 22527              		.cfi_offset 14, -4
 22528 0002 84B0     		sub	sp, sp, #16
 22529              		.cfi_def_cfa_offset 32
 22530 0004 00AF     		add	r7, sp, #0
 22531              		.cfi_def_cfa_register 7
 22532 0006 7860     		str	r0, [r7, #4]
8875:bma2x2.c      ****     /*
8876:bma2x2.c      **** 	warning This API is deprecated ,Instead use the \
8877:bma2x2.c      **** 	"bma2x2_read_fifo_data" API for reading FIFO data
8878:bma2x2.c      ****     */
8879:bma2x2.c      **** 
8880:bma2x2.c      **** 	u8 data_u8 = BMA2x2_INIT_VALUE;
 22533              		.loc 1 8880 0
 22534 0008 0E23     		movs	r3, #14
 22535 000a FB18     		adds	r3, r7, r3
 22536 000c 0022     		movs	r2, #0
 22537 000e 1A70     		strb	r2, [r3]
8881:bma2x2.c      **** 	/*Variable used to return value of
8882:bma2x2.c      **** 	communication routine*/
8883:bma2x2.c      **** 	BMA2x2_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 22538              		.loc 1 8883 0
 22539 0010 0F23     		movs	r3, #15
 22540 0012 FB18     		adds	r3, r7, r3
 22541 0014 FF22     		movs	r2, #255
 22542 0016 1A70     		strb	r2, [r3]
8884:bma2x2.c      **** 
8885:bma2x2.c      **** 	if (p_bma2x2 == BMA2x2_NULL) {
 22543              		.loc 1 8885 0
 22544 0018 114B     		ldr	r3, .L1301
 22545 001a 1B68     		ldr	r3, [r3]
 22546 001c 002B     		cmp	r3, #0
 22547 001e 02D1     		bne	.L1298
8886:bma2x2.c      **** 		/* Check the struct p_bma2x2 is empty */
8887:bma2x2.c      **** 		return E_BMA2x2_NULL_PTR;
 22548              		.loc 1 8887 0
 22549 0020 7F23     		movs	r3, #127
 22550 0022 5B42     		rsbs	r3, r3, #0
 22551 0024 17E0     		b	.L1300
 22552              	.L1298:
8888:bma2x2.c      **** 		} else {
8889:bma2x2.c      **** 			/*GET FIFO DATA OUTPUT REGISTER*/
8890:bma2x2.c      **** 			com_rslt = p_bma2x2->BMA2x2_BUS_READ_FUNC(
 22553              		.loc 1 8890 0
 22554 0026 0E4B     		ldr	r3, .L1301
 22555 0028 1B68     		ldr	r3, [r3]
 22556 002a DD68     		ldr	r5, [r3, #12]
 22557 002c 0C4B     		ldr	r3, .L1301
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 558


 22558 002e 1B68     		ldr	r3, [r3]
 22559 0030 1879     		ldrb	r0, [r3, #4]
 22560 0032 0F23     		movs	r3, #15
 22561 0034 FC18     		adds	r4, r7, r3
 22562 0036 0E23     		movs	r3, #14
 22563 0038 FA18     		adds	r2, r7, r3
 22564 003a 0123     		movs	r3, #1
 22565 003c 3F21     		movs	r1, #63
 22566 003e A847     		blx	r5
 22567 0040 0300     		movs	r3, r0
 22568 0042 2370     		strb	r3, [r4]
8891:bma2x2.c      **** 			p_bma2x2->dev_addr,
8892:bma2x2.c      **** 			BMA2x2_FIFO_DATA_OUTPUT_ADDR,
8893:bma2x2.c      **** 			&data_u8, BMA2x2_GEN_READ_WRITE_LENGTH);
8894:bma2x2.c      **** 			*output_reg_u8 = data_u8;
 22569              		.loc 1 8894 0
 22570 0044 0E23     		movs	r3, #14
 22571 0046 FB18     		adds	r3, r7, r3
 22572 0048 1A78     		ldrb	r2, [r3]
 22573 004a 7B68     		ldr	r3, [r7, #4]
 22574 004c 1A70     		strb	r2, [r3]
8895:bma2x2.c      **** 		}
8896:bma2x2.c      **** 	return com_rslt;
 22575              		.loc 1 8896 0
 22576 004e 0F23     		movs	r3, #15
 22577 0050 FB18     		adds	r3, r7, r3
 22578 0052 1B78     		ldrb	r3, [r3]
 22579 0054 5BB2     		sxtb	r3, r3
 22580              	.L1300:
8897:bma2x2.c      **** }
 22581              		.loc 1 8897 0 discriminator 1
 22582 0056 1800     		movs	r0, r3
 22583 0058 BD46     		mov	sp, r7
 22584 005a 04B0     		add	sp, sp, #16
 22585              		@ sp needed
 22586 005c B0BD     		pop	{r4, r5, r7, pc}
 22587              	.L1302:
 22588 005e C046     		.align	2
 22589              	.L1301:
 22590 0060 00000000 		.word	p_bma2x2
 22591              		.cfi_endproc
 22592              	.LFE146:
 22593              		.size	bma2x2_get_fifo_data_output_reg, .-bma2x2_get_fifo_data_output_reg
 22594              		.text
 22595              	.Letext0:
 22596              		.file 2 "bma2x2.h"
 22597              		.section	.debug_info,"",%progbits
 22598              	.Ldebug_info0:
 22599 0000 9A300000 		.4byte	0x309a
 22600 0004 0400     		.2byte	0x4
 22601 0006 00000000 		.4byte	.Ldebug_abbrev0
 22602 000a 04       		.byte	0x4
 22603 000b 01       		.uleb128 0x1
 22604 000c EB080000 		.4byte	.LASF283
 22605 0010 0C       		.byte	0xc
 22606 0011 CB050000 		.4byte	.LASF284
 22607 0015 A3010000 		.4byte	.LASF285
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 559


 22608 0019 00000000 		.4byte	.Ldebug_ranges0+0
 22609 001d 00000000 		.4byte	0
 22610 0021 00000000 		.4byte	.Ldebug_line0
 22611 0025 02       		.uleb128 0x2
 22612 0026 733800   		.ascii	"s8\000"
 22613 0029 02       		.byte	0x2
 22614 002a 2001     		.2byte	0x120
 22615 002c 30000000 		.4byte	0x30
 22616 0030 03       		.uleb128 0x3
 22617 0031 01       		.byte	0x1
 22618 0032 06       		.byte	0x6
 22619 0033 B5020000 		.4byte	.LASF0
 22620 0037 02       		.uleb128 0x2
 22621 0038 73313600 		.ascii	"s16\000"
 22622 003c 02       		.byte	0x2
 22623 003d 2101     		.2byte	0x121
 22624 003f 43000000 		.4byte	0x43
 22625 0043 03       		.uleb128 0x3
 22626 0044 02       		.byte	0x2
 22627 0045 05       		.byte	0x5
 22628 0046 D20D0000 		.4byte	.LASF1
 22629 004a 02       		.uleb128 0x2
 22630 004b 73333200 		.ascii	"s32\000"
 22631 004f 02       		.byte	0x2
 22632 0050 2201     		.2byte	0x122
 22633 0052 56000000 		.4byte	0x56
 22634 0056 04       		.uleb128 0x4
 22635 0057 04       		.byte	0x4
 22636 0058 05       		.byte	0x5
 22637 0059 696E7400 		.ascii	"int\000"
 22638 005d 03       		.uleb128 0x3
 22639 005e 08       		.byte	0x8
 22640 005f 05       		.byte	0x5
 22641 0060 A7020000 		.4byte	.LASF2
 22642 0064 02       		.uleb128 0x2
 22643 0065 753800   		.ascii	"u8\000"
 22644 0068 02       		.byte	0x2
 22645 0069 2601     		.2byte	0x126
 22646 006b 6F000000 		.4byte	0x6f
 22647 006f 03       		.uleb128 0x3
 22648 0070 01       		.byte	0x1
 22649 0071 08       		.byte	0x8
 22650 0072 400D0000 		.4byte	.LASF3
 22651 0076 02       		.uleb128 0x2
 22652 0077 75313600 		.ascii	"u16\000"
 22653 007b 02       		.byte	0x2
 22654 007c 2701     		.2byte	0x127
 22655 007e 82000000 		.4byte	0x82
 22656 0082 03       		.uleb128 0x3
 22657 0083 02       		.byte	0x2
 22658 0084 07       		.byte	0x7
 22659 0085 C4070000 		.4byte	.LASF4
 22660 0089 02       		.uleb128 0x2
 22661 008a 75333200 		.ascii	"u32\000"
 22662 008e 02       		.byte	0x2
 22663 008f 2801     		.2byte	0x128
 22664 0091 95000000 		.4byte	0x95
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 560


 22665 0095 03       		.uleb128 0x3
 22666 0096 04       		.byte	0x4
 22667 0097 07       		.byte	0x7
 22668 0098 89060000 		.4byte	.LASF5
 22669 009c 03       		.uleb128 0x3
 22670 009d 08       		.byte	0x8
 22671 009e 07       		.byte	0x7
 22672 009f 77010000 		.4byte	.LASF6
 22673 00a3 05       		.uleb128 0x5
 22674 00a4 680F0000 		.4byte	.LASF7
 22675 00a8 06       		.byte	0x6
 22676 00a9 02       		.byte	0x2
 22677 00aa 5102     		.2byte	0x251
 22678 00ac D2000000 		.4byte	0xd2
 22679 00b0 06       		.uleb128 0x6
 22680 00b1 7800     		.ascii	"x\000"
 22681 00b3 02       		.byte	0x2
 22682 00b4 5202     		.2byte	0x252
 22683 00b6 37000000 		.4byte	0x37
 22684 00ba 00       		.byte	0
 22685 00bb 06       		.uleb128 0x6
 22686 00bc 7900     		.ascii	"y\000"
 22687 00be 02       		.byte	0x2
 22688 00bf 5302     		.2byte	0x253
 22689 00c1 37000000 		.4byte	0x37
 22690 00c5 02       		.byte	0x2
 22691 00c6 06       		.uleb128 0x6
 22692 00c7 7A00     		.ascii	"z\000"
 22693 00c9 02       		.byte	0x2
 22694 00ca 5402     		.2byte	0x254
 22695 00cc 37000000 		.4byte	0x37
 22696 00d0 04       		.byte	0x4
 22697 00d1 00       		.byte	0
 22698 00d2 05       		.uleb128 0x5
 22699 00d3 52060000 		.4byte	.LASF8
 22700 00d7 08       		.byte	0x8
 22701 00d8 02       		.byte	0x2
 22702 00d9 5A02     		.2byte	0x25a
 22703 00db 0E010000 		.4byte	0x10e
 22704 00df 06       		.uleb128 0x6
 22705 00e0 7800     		.ascii	"x\000"
 22706 00e2 02       		.byte	0x2
 22707 00e3 5B02     		.2byte	0x25b
 22708 00e5 37000000 		.4byte	0x37
 22709 00e9 00       		.byte	0
 22710 00ea 06       		.uleb128 0x6
 22711 00eb 7900     		.ascii	"y\000"
 22712 00ed 02       		.byte	0x2
 22713 00ee 5C02     		.2byte	0x25c
 22714 00f0 37000000 		.4byte	0x37
 22715 00f4 02       		.byte	0x2
 22716 00f5 06       		.uleb128 0x6
 22717 00f6 7A00     		.ascii	"z\000"
 22718 00f8 02       		.byte	0x2
 22719 00f9 5D02     		.2byte	0x25d
 22720 00fb 37000000 		.4byte	0x37
 22721 00ff 04       		.byte	0x4
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 561


 22722 0100 07       		.uleb128 0x7
 22723 0101 4D060000 		.4byte	.LASF9
 22724 0105 02       		.byte	0x2
 22725 0106 5E02     		.2byte	0x25e
 22726 0108 25000000 		.4byte	0x25
 22727 010c 06       		.byte	0x6
 22728 010d 00       		.byte	0
 22729 010e 05       		.uleb128 0x5
 22730 010f 3E0A0000 		.4byte	.LASF10
 22731 0113 03       		.byte	0x3
 22732 0114 02       		.byte	0x2
 22733 0115 6402     		.2byte	0x264
 22734 0117 3D010000 		.4byte	0x13d
 22735 011b 06       		.uleb128 0x6
 22736 011c 7800     		.ascii	"x\000"
 22737 011e 02       		.byte	0x2
 22738 011f 6502     		.2byte	0x265
 22739 0121 25000000 		.4byte	0x25
 22740 0125 00       		.byte	0
 22741 0126 06       		.uleb128 0x6
 22742 0127 7900     		.ascii	"y\000"
 22743 0129 02       		.byte	0x2
 22744 012a 6602     		.2byte	0x266
 22745 012c 25000000 		.4byte	0x25
 22746 0130 01       		.byte	0x1
 22747 0131 06       		.uleb128 0x6
 22748 0132 7A00     		.ascii	"z\000"
 22749 0134 02       		.byte	0x2
 22750 0135 6702     		.2byte	0x267
 22751 0137 25000000 		.4byte	0x25
 22752 013b 02       		.byte	0x2
 22753 013c 00       		.byte	0
 22754 013d 05       		.uleb128 0x5
 22755 013e 72000000 		.4byte	.LASF11
 22756 0142 04       		.byte	0x4
 22757 0143 02       		.byte	0x2
 22758 0144 6C02     		.2byte	0x26c
 22759 0146 79010000 		.4byte	0x179
 22760 014a 06       		.uleb128 0x6
 22761 014b 7800     		.ascii	"x\000"
 22762 014d 02       		.byte	0x2
 22763 014e 6D02     		.2byte	0x26d
 22764 0150 25000000 		.4byte	0x25
 22765 0154 00       		.byte	0
 22766 0155 06       		.uleb128 0x6
 22767 0156 7900     		.ascii	"y\000"
 22768 0158 02       		.byte	0x2
 22769 0159 6E02     		.2byte	0x26e
 22770 015b 25000000 		.4byte	0x25
 22771 015f 01       		.byte	0x1
 22772 0160 06       		.uleb128 0x6
 22773 0161 7A00     		.ascii	"z\000"
 22774 0163 02       		.byte	0x2
 22775 0164 6F02     		.2byte	0x26f
 22776 0166 25000000 		.4byte	0x25
 22777 016a 02       		.byte	0x2
 22778 016b 07       		.uleb128 0x7
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 562


 22779 016c 4D060000 		.4byte	.LASF9
 22780 0170 02       		.byte	0x2
 22781 0171 7002     		.2byte	0x270
 22782 0173 25000000 		.4byte	0x25
 22783 0177 03       		.byte	0x3
 22784 0178 00       		.byte	0
 22785 0179 08       		.uleb128 0x8
 22786 017a 24010000 		.4byte	.LASF286
 22787 017e 06       		.byte	0x6
 22788 017f 02       		.byte	0x2
 22789 0180 8102     		.2byte	0x281
 22790 0182 B1010000 		.4byte	0x1b1
 22791 0186 09       		.uleb128 0x9
 22792 0187 70100000 		.4byte	.LASF12
 22793 018b 02       		.byte	0x2
 22794 018c 8402     		.2byte	0x284
 22795 018e A3000000 		.4byte	0xa3
 22796 0192 0A       		.uleb128 0xa
 22797 0193 7800     		.ascii	"x\000"
 22798 0195 02       		.byte	0x2
 22799 0196 8702     		.2byte	0x287
 22800 0198 37000000 		.4byte	0x37
 22801 019c 0A       		.uleb128 0xa
 22802 019d 7900     		.ascii	"y\000"
 22803 019f 02       		.byte	0x2
 22804 01a0 8A02     		.2byte	0x28a
 22805 01a2 37000000 		.4byte	0x37
 22806 01a6 0A       		.uleb128 0xa
 22807 01a7 7A00     		.ascii	"z\000"
 22808 01a9 02       		.byte	0x2
 22809 01aa 8D02     		.2byte	0x28d
 22810 01ac 37000000 		.4byte	0x37
 22811 01b0 00       		.byte	0
 22812 01b1 05       		.uleb128 0x5
 22813 01b2 67100000 		.4byte	.LASF13
 22814 01b6 18       		.byte	0x18
 22815 01b7 02       		.byte	0x2
 22816 01b8 9B02     		.2byte	0x29b
 22817 01ba 41020000 		.4byte	0x241
 22818 01be 07       		.uleb128 0x7
 22819 01bf CF090000 		.4byte	.LASF14
 22820 01c3 02       		.byte	0x2
 22821 01c4 9D02     		.2byte	0x29d
 22822 01c6 64000000 		.4byte	0x64
 22823 01ca 00       		.byte	0
 22824 01cb 07       		.uleb128 0x7
 22825 01cc 0F100000 		.4byte	.LASF15
 22826 01d0 02       		.byte	0x2
 22827 01d1 9F02     		.2byte	0x29f
 22828 01d3 64000000 		.4byte	0x64
 22829 01d7 01       		.byte	0x1
 22830 01d8 07       		.uleb128 0x7
 22831 01d9 740C0000 		.4byte	.LASF16
 22832 01dd 02       		.byte	0x2
 22833 01de A102     		.2byte	0x2a1
 22834 01e0 64000000 		.4byte	0x64
 22835 01e4 02       		.byte	0x2
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 563


 22836 01e5 07       		.uleb128 0x7
 22837 01e6 820B0000 		.4byte	.LASF17
 22838 01ea 02       		.byte	0x2
 22839 01eb A302     		.2byte	0x2a3
 22840 01ed 64000000 		.4byte	0x64
 22841 01f1 03       		.byte	0x3
 22842 01f2 07       		.uleb128 0x7
 22843 01f3 C1020000 		.4byte	.LASF18
 22844 01f7 02       		.byte	0x2
 22845 01f8 A502     		.2byte	0x2a5
 22846 01fa 64000000 		.4byte	0x64
 22847 01fe 04       		.byte	0x4
 22848 01ff 07       		.uleb128 0x7
 22849 0200 29060000 		.4byte	.LASF19
 22850 0204 02       		.byte	0x2
 22851 0205 A702     		.2byte	0x2a7
 22852 0207 64000000 		.4byte	0x64
 22853 020b 05       		.byte	0x5
 22854 020c 07       		.uleb128 0x7
 22855 020d F4000000 		.4byte	.LASF20
 22856 0211 02       		.byte	0x2
 22857 0212 A902     		.2byte	0x2a9
 22858 0214 65020000 		.4byte	0x265
 22859 0218 08       		.byte	0x8
 22860 0219 07       		.uleb128 0x7
 22861 021a 97120000 		.4byte	.LASF21
 22862 021e 02       		.byte	0x2
 22863 021f AB02     		.2byte	0x2ab
 22864 0221 65020000 		.4byte	0x265
 22865 0225 0C       		.byte	0xc
 22866 0226 07       		.uleb128 0x7
 22867 0227 5E0C0000 		.4byte	.LASF22
 22868 022b 02       		.byte	0x2
 22869 022c AD02     		.2byte	0x2ad
 22870 022e 89020000 		.4byte	0x289
 22871 0232 10       		.byte	0x10
 22872 0233 07       		.uleb128 0x7
 22873 0234 D5120000 		.4byte	.LASF23
 22874 0238 02       		.byte	0x2
 22875 0239 AF02     		.2byte	0x2af
 22876 023b 9A020000 		.4byte	0x29a
 22877 023f 14       		.byte	0x14
 22878 0240 00       		.byte	0
 22879 0241 0B       		.uleb128 0xb
 22880 0242 25000000 		.4byte	0x25
 22881 0246 5F020000 		.4byte	0x25f
 22882 024a 0C       		.uleb128 0xc
 22883 024b 64000000 		.4byte	0x64
 22884 024f 0C       		.uleb128 0xc
 22885 0250 64000000 		.4byte	0x64
 22886 0254 0C       		.uleb128 0xc
 22887 0255 5F020000 		.4byte	0x25f
 22888 0259 0C       		.uleb128 0xc
 22889 025a 64000000 		.4byte	0x64
 22890 025e 00       		.byte	0
 22891 025f 0D       		.uleb128 0xd
 22892 0260 04       		.byte	0x4
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 564


 22893 0261 64000000 		.4byte	0x64
 22894 0265 0D       		.uleb128 0xd
 22895 0266 04       		.byte	0x4
 22896 0267 41020000 		.4byte	0x241
 22897 026b 0B       		.uleb128 0xb
 22898 026c 25000000 		.4byte	0x25
 22899 0270 89020000 		.4byte	0x289
 22900 0274 0C       		.uleb128 0xc
 22901 0275 64000000 		.4byte	0x64
 22902 0279 0C       		.uleb128 0xc
 22903 027a 64000000 		.4byte	0x64
 22904 027e 0C       		.uleb128 0xc
 22905 027f 5F020000 		.4byte	0x25f
 22906 0283 0C       		.uleb128 0xc
 22907 0284 89000000 		.4byte	0x89
 22908 0288 00       		.byte	0
 22909 0289 0D       		.uleb128 0xd
 22910 028a 04       		.byte	0x4
 22911 028b 6B020000 		.4byte	0x26b
 22912 028f 0E       		.uleb128 0xe
 22913 0290 9A020000 		.4byte	0x29a
 22914 0294 0C       		.uleb128 0xc
 22915 0295 89000000 		.4byte	0x89
 22916 0299 00       		.byte	0
 22917 029a 0D       		.uleb128 0xd
 22918 029b 04       		.byte	0x4
 22919 029c 8F020000 		.4byte	0x28f
 22920 02a0 05       		.uleb128 0x5
 22921 02a1 91140000 		.4byte	.LASF24
 22922 02a5 08       		.byte	0x8
 22923 02a6 02       		.byte	0x2
 22924 02a7 BB02     		.2byte	0x2bb
 22925 02a9 D5020000 		.4byte	0x2d5
 22926 02ad 07       		.uleb128 0x7
 22927 02ae D6060000 		.4byte	.LASF25
 22928 02b2 02       		.byte	0x2
 22929 02b3 BD02     		.2byte	0x2bd
 22930 02b5 5F020000 		.4byte	0x25f
 22931 02b9 00       		.byte	0
 22932 02ba 07       		.uleb128 0x7
 22933 02bb 970A0000 		.4byte	.LASF26
 22934 02bf 02       		.byte	0x2
 22935 02c0 BF02     		.2byte	0x2bf
 22936 02c2 64000000 		.4byte	0x64
 22937 02c6 04       		.byte	0x4
 22938 02c7 07       		.uleb128 0x7
 22939 02c8 06060000 		.4byte	.LASF27
 22940 02cc 02       		.byte	0x2
 22941 02cd C102     		.2byte	0x2c1
 22942 02cf 64000000 		.4byte	0x64
 22943 02d3 05       		.byte	0x5
 22944 02d4 00       		.byte	0
 22945 02d5 0F       		.uleb128 0xf
 22946 02d6 5B110000 		.4byte	.LASF31
 22947 02da 01       		.byte	0x1
 22948 02db A0       		.byte	0xa0
 22949 02dc 25000000 		.4byte	0x25
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 565


 22950 02e0 00000000 		.4byte	.LFB0
 22951 02e4 60000000 		.4byte	.LFE0-.LFB0
 22952 02e8 01       		.uleb128 0x1
 22953 02e9 9C       		.byte	0x9c
 22954 02ea 27030000 		.4byte	0x327
 22955 02ee 10       		.uleb128 0x10
 22956 02ef 48100000 		.4byte	.LASF28
 22957 02f3 01       		.byte	0x1
 22958 02f4 A0       		.byte	0xa0
 22959 02f5 64000000 		.4byte	0x64
 22960 02f9 02       		.uleb128 0x2
 22961 02fa 91       		.byte	0x91
 22962 02fb 5F       		.sleb128 -33
 22963 02fc 10       		.uleb128 0x10
 22964 02fd A0120000 		.4byte	.LASF29
 22965 0301 01       		.byte	0x1
 22966 0302 A1       		.byte	0xa1
 22967 0303 5F020000 		.4byte	0x25f
 22968 0307 02       		.uleb128 0x2
 22969 0308 91       		.byte	0x91
 22970 0309 58       		.sleb128 -40
 22971 030a 10       		.uleb128 0x10
 22972 030b 580B0000 		.4byte	.LASF30
 22973 030f 01       		.byte	0x1
 22974 0310 A1       		.byte	0xa1
 22975 0311 89000000 		.4byte	0x89
 22976 0315 02       		.uleb128 0x2
 22977 0316 91       		.byte	0x91
 22978 0317 54       		.sleb128 -44
 22979 0318 11       		.uleb128 0x11
 22980 0319 2F010000 		.4byte	.LASF34
 22981 031d 01       		.byte	0x1
 22982 031e A5       		.byte	0xa5
 22983 031f 25000000 		.4byte	0x25
 22984 0323 02       		.uleb128 0x2
 22985 0324 91       		.byte	0x91
 22986 0325 67       		.sleb128 -25
 22987 0326 00       		.byte	0
 22988 0327 0F       		.uleb128 0xf
 22989 0328 FE040000 		.4byte	.LASF32
 22990 032c 01       		.byte	0x1
 22991 032d C8       		.byte	0xc8
 22992 032e 25000000 		.4byte	0x25
 22993 0332 00000000 		.4byte	.LFB1
 22994 0336 A4000000 		.4byte	.LFE1-.LFB1
 22995 033a 01       		.uleb128 0x1
 22996 033b 9C       		.byte	0x9c
 22997 033c 79030000 		.4byte	0x379
 22998 0340 10       		.uleb128 0x10
 22999 0341 0C000000 		.4byte	.LASF33
 23000 0345 01       		.byte	0x1
 23001 0346 C8       		.byte	0xc8
 23002 0347 79030000 		.4byte	0x379
 23003 034b 02       		.uleb128 0x2
 23004 034c 91       		.byte	0x91
 23005 034d 64       		.sleb128 -28
 23006 034e 11       		.uleb128 0x11
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 566


 23007 034f 2F010000 		.4byte	.LASF34
 23008 0353 01       		.byte	0x1
 23009 0354 CC       		.byte	0xcc
 23010 0355 25000000 		.4byte	0x25
 23011 0359 02       		.uleb128 0x2
 23012 035a 91       		.byte	0x91
 23013 035b 6F       		.sleb128 -17
 23014 035c 11       		.uleb128 0x11
 23015 035d A0120000 		.4byte	.LASF29
 23016 0361 01       		.byte	0x1
 23017 0362 CD       		.byte	0xcd
 23018 0363 64000000 		.4byte	0x64
 23019 0367 02       		.uleb128 0x2
 23020 0368 91       		.byte	0x91
 23021 0369 6E       		.sleb128 -18
 23022 036a 11       		.uleb128 0x11
 23023 036b 4C110000 		.4byte	.LASF35
 23024 036f 01       		.byte	0x1
 23025 0370 CE       		.byte	0xce
 23026 0371 64000000 		.4byte	0x64
 23027 0375 02       		.uleb128 0x2
 23028 0376 91       		.byte	0x91
 23029 0377 6D       		.sleb128 -19
 23030 0378 00       		.byte	0
 23031 0379 0D       		.uleb128 0xd
 23032 037a 04       		.byte	0x4
 23033 037b B1010000 		.4byte	0x1b1
 23034 037f 0F       		.uleb128 0xf
 23035 0380 0E070000 		.4byte	.LASF36
 23036 0384 01       		.byte	0x1
 23037 0385 F4       		.byte	0xf4
 23038 0386 25000000 		.4byte	0x25
 23039 038a 00000000 		.4byte	.LFB2
 23040 038e 78000000 		.4byte	.LFE2-.LFB2
 23041 0392 01       		.uleb128 0x1
 23042 0393 9C       		.byte	0x9c
 23043 0394 D1030000 		.4byte	0x3d1
 23044 0398 10       		.uleb128 0x10
 23045 0399 DD0C0000 		.4byte	.LASF37
 23046 039d 01       		.byte	0x1
 23047 039e F4       		.byte	0xf4
 23048 039f 64000000 		.4byte	0x64
 23049 03a3 02       		.uleb128 0x2
 23050 03a4 91       		.byte	0x91
 23051 03a5 5F       		.sleb128 -33
 23052 03a6 10       		.uleb128 0x10
 23053 03a7 A0120000 		.4byte	.LASF29
 23054 03ab 01       		.byte	0x1
 23055 03ac F5       		.byte	0xf5
 23056 03ad 5F020000 		.4byte	0x25f
 23057 03b1 02       		.uleb128 0x2
 23058 03b2 91       		.byte	0x91
 23059 03b3 58       		.sleb128 -40
 23060 03b4 10       		.uleb128 0x10
 23061 03b5 DD040000 		.4byte	.LASF38
 23062 03b9 01       		.byte	0x1
 23063 03ba F5       		.byte	0xf5
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 567


 23064 03bb 64000000 		.4byte	0x64
 23065 03bf 02       		.uleb128 0x2
 23066 03c0 91       		.byte	0x91
 23067 03c1 5E       		.sleb128 -34
 23068 03c2 11       		.uleb128 0x11
 23069 03c3 2F010000 		.4byte	.LASF34
 23070 03c7 01       		.byte	0x1
 23071 03c8 F9       		.byte	0xf9
 23072 03c9 25000000 		.4byte	0x25
 23073 03cd 02       		.uleb128 0x2
 23074 03ce 91       		.byte	0x91
 23075 03cf 67       		.sleb128 -25
 23076 03d0 00       		.byte	0
 23077 03d1 12       		.uleb128 0x12
 23078 03d2 2A130000 		.4byte	.LASF39
 23079 03d6 01       		.byte	0x1
 23080 03d7 1C01     		.2byte	0x11c
 23081 03d9 25000000 		.4byte	0x25
 23082 03dd 00000000 		.4byte	.LFB3
 23083 03e1 64000000 		.4byte	.LFE3-.LFB3
 23084 03e5 01       		.uleb128 0x1
 23085 03e6 9C       		.byte	0x9c
 23086 03e7 28040000 		.4byte	0x428
 23087 03eb 13       		.uleb128 0x13
 23088 03ec DD0C0000 		.4byte	.LASF37
 23089 03f0 01       		.byte	0x1
 23090 03f1 1C01     		.2byte	0x11c
 23091 03f3 64000000 		.4byte	0x64
 23092 03f7 02       		.uleb128 0x2
 23093 03f8 91       		.byte	0x91
 23094 03f9 5F       		.sleb128 -33
 23095 03fa 13       		.uleb128 0x13
 23096 03fb A0120000 		.4byte	.LASF29
 23097 03ff 01       		.byte	0x1
 23098 0400 1D01     		.2byte	0x11d
 23099 0402 5F020000 		.4byte	0x25f
 23100 0406 02       		.uleb128 0x2
 23101 0407 91       		.byte	0x91
 23102 0408 58       		.sleb128 -40
 23103 0409 13       		.uleb128 0x13
 23104 040a DD040000 		.4byte	.LASF38
 23105 040e 01       		.byte	0x1
 23106 040f 1D01     		.2byte	0x11d
 23107 0411 64000000 		.4byte	0x64
 23108 0415 02       		.uleb128 0x2
 23109 0416 91       		.byte	0x91
 23110 0417 5E       		.sleb128 -34
 23111 0418 14       		.uleb128 0x14
 23112 0419 2F010000 		.4byte	.LASF34
 23113 041d 01       		.byte	0x1
 23114 041e 2101     		.2byte	0x121
 23115 0420 25000000 		.4byte	0x25
 23116 0424 02       		.uleb128 0x2
 23117 0425 91       		.byte	0x91
 23118 0426 67       		.sleb128 -25
 23119 0427 00       		.byte	0
 23120 0428 12       		.uleb128 0x12
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 568


 23121 0429 36000000 		.4byte	.LASF40
 23122 042d 01       		.byte	0x1
 23123 042e 4101     		.2byte	0x141
 23124 0430 25000000 		.4byte	0x25
 23125 0434 00000000 		.4byte	.LFB4
 23126 0438 48010000 		.4byte	.LFE4-.LFB4
 23127 043c 01       		.uleb128 0x1
 23128 043d 9C       		.byte	0x9c
 23129 043e 70040000 		.4byte	0x470
 23130 0442 13       		.uleb128 0x13
 23131 0443 06080000 		.4byte	.LASF41
 23132 0447 01       		.byte	0x1
 23133 0448 4101     		.2byte	0x141
 23134 044a 70040000 		.4byte	0x470
 23135 044e 02       		.uleb128 0x2
 23136 044f 91       		.byte	0x91
 23137 0450 64       		.sleb128 -28
 23138 0451 14       		.uleb128 0x14
 23139 0452 2F010000 		.4byte	.LASF34
 23140 0456 01       		.byte	0x1
 23141 0457 4501     		.2byte	0x145
 23142 0459 25000000 		.4byte	0x25
 23143 045d 02       		.uleb128 0x2
 23144 045e 91       		.byte	0x91
 23145 045f 6F       		.sleb128 -17
 23146 0460 14       		.uleb128 0x14
 23147 0461 A0120000 		.4byte	.LASF29
 23148 0465 01       		.byte	0x1
 23149 0466 4A01     		.2byte	0x14a
 23150 0468 76040000 		.4byte	0x476
 23151 046c 02       		.uleb128 0x2
 23152 046d 91       		.byte	0x91
 23153 046e 6C       		.sleb128 -20
 23154 046f 00       		.byte	0
 23155 0470 0D       		.uleb128 0xd
 23156 0471 04       		.byte	0x4
 23157 0472 37000000 		.4byte	0x37
 23158 0476 15       		.uleb128 0x15
 23159 0477 64000000 		.4byte	0x64
 23160 047b 86040000 		.4byte	0x486
 23161 047f 16       		.uleb128 0x16
 23162 0480 86040000 		.4byte	0x486
 23163 0484 01       		.byte	0x1
 23164 0485 00       		.byte	0
 23165 0486 03       		.uleb128 0x3
 23166 0487 04       		.byte	0x4
 23167 0488 07       		.byte	0x7
 23168 0489 8E0A0000 		.4byte	.LASF42
 23169 048d 12       		.uleb128 0x12
 23170 048e 5D0E0000 		.4byte	.LASF43
 23171 0492 01       		.byte	0x1
 23172 0493 9101     		.2byte	0x191
 23173 0495 25000000 		.4byte	0x25
 23174 0499 00000000 		.4byte	.LFB5
 23175 049d 64000000 		.4byte	.LFE5-.LFB5
 23176 04a1 01       		.uleb128 0x1
 23177 04a2 9C       		.byte	0x9c
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 569


 23178 04a3 D5040000 		.4byte	0x4d5
 23179 04a7 13       		.uleb128 0x13
 23180 04a8 260F0000 		.4byte	.LASF44
 23181 04ac 01       		.byte	0x1
 23182 04ad 9201     		.2byte	0x192
 23183 04af D5040000 		.4byte	0x4d5
 23184 04b3 02       		.uleb128 0x2
 23185 04b4 91       		.byte	0x91
 23186 04b5 64       		.sleb128 -28
 23187 04b6 14       		.uleb128 0x14
 23188 04b7 2F010000 		.4byte	.LASF34
 23189 04bb 01       		.byte	0x1
 23190 04bc 9601     		.2byte	0x196
 23191 04be 25000000 		.4byte	0x25
 23192 04c2 02       		.uleb128 0x2
 23193 04c3 91       		.byte	0x91
 23194 04c4 6F       		.sleb128 -17
 23195 04c5 14       		.uleb128 0x14
 23196 04c6 AA070000 		.4byte	.LASF45
 23197 04ca 01       		.byte	0x1
 23198 04cb 9701     		.2byte	0x197
 23199 04cd 64000000 		.4byte	0x64
 23200 04d1 02       		.uleb128 0x2
 23201 04d2 91       		.byte	0x91
 23202 04d3 6E       		.sleb128 -18
 23203 04d4 00       		.byte	0
 23204 04d5 0D       		.uleb128 0xd
 23205 04d6 04       		.byte	0x4
 23206 04d7 25000000 		.4byte	0x25
 23207 04db 12       		.uleb128 0x12
 23208 04dc 4A000000 		.4byte	.LASF46
 23209 04e0 01       		.byte	0x1
 23210 04e1 BA01     		.2byte	0x1ba
 23211 04e3 25000000 		.4byte	0x25
 23212 04e7 00000000 		.4byte	.LFB6
 23213 04eb 48010000 		.4byte	.LFE6-.LFB6
 23214 04ef 01       		.uleb128 0x1
 23215 04f0 9C       		.byte	0x9c
 23216 04f1 23050000 		.4byte	0x523
 23217 04f5 13       		.uleb128 0x13
 23218 04f6 2B040000 		.4byte	.LASF47
 23219 04fa 01       		.byte	0x1
 23220 04fb BA01     		.2byte	0x1ba
 23221 04fd 70040000 		.4byte	0x470
 23222 0501 02       		.uleb128 0x2
 23223 0502 91       		.byte	0x91
 23224 0503 64       		.sleb128 -28
 23225 0504 14       		.uleb128 0x14
 23226 0505 2F010000 		.4byte	.LASF34
 23227 0509 01       		.byte	0x1
 23228 050a BE01     		.2byte	0x1be
 23229 050c 25000000 		.4byte	0x25
 23230 0510 02       		.uleb128 0x2
 23231 0511 91       		.byte	0x91
 23232 0512 6F       		.sleb128 -17
 23233 0513 14       		.uleb128 0x14
 23234 0514 A0120000 		.4byte	.LASF29
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 570


 23235 0518 01       		.byte	0x1
 23236 0519 C301     		.2byte	0x1c3
 23237 051b 76040000 		.4byte	0x476
 23238 051f 02       		.uleb128 0x2
 23239 0520 91       		.byte	0x91
 23240 0521 6C       		.sleb128 -20
 23241 0522 00       		.byte	0
 23242 0523 12       		.uleb128 0x12
 23243 0524 820E0000 		.4byte	.LASF48
 23244 0528 01       		.byte	0x1
 23245 0529 0C02     		.2byte	0x20c
 23246 052b 25000000 		.4byte	0x25
 23247 052f 00000000 		.4byte	.LFB7
 23248 0533 64000000 		.4byte	.LFE7-.LFB7
 23249 0537 01       		.uleb128 0x1
 23250 0538 9C       		.byte	0x9c
 23251 0539 6B050000 		.4byte	0x56b
 23252 053d 13       		.uleb128 0x13
 23253 053e 690C0000 		.4byte	.LASF49
 23254 0542 01       		.byte	0x1
 23255 0543 0D02     		.2byte	0x20d
 23256 0545 D5040000 		.4byte	0x4d5
 23257 0549 02       		.uleb128 0x2
 23258 054a 91       		.byte	0x91
 23259 054b 64       		.sleb128 -28
 23260 054c 14       		.uleb128 0x14
 23261 054d 2F010000 		.4byte	.LASF34
 23262 0551 01       		.byte	0x1
 23263 0552 1102     		.2byte	0x211
 23264 0554 25000000 		.4byte	0x25
 23265 0558 02       		.uleb128 0x2
 23266 0559 91       		.byte	0x91
 23267 055a 6F       		.sleb128 -17
 23268 055b 14       		.uleb128 0x14
 23269 055c AA070000 		.4byte	.LASF45
 23270 0560 01       		.byte	0x1
 23271 0561 1202     		.2byte	0x212
 23272 0563 64000000 		.4byte	0x64
 23273 0567 02       		.uleb128 0x2
 23274 0568 91       		.byte	0x91
 23275 0569 6E       		.sleb128 -18
 23276 056a 00       		.byte	0
 23277 056b 12       		.uleb128 0x12
 23278 056c 5E000000 		.4byte	.LASF50
 23279 0570 01       		.byte	0x1
 23280 0571 3402     		.2byte	0x234
 23281 0573 25000000 		.4byte	0x25
 23282 0577 00000000 		.4byte	.LFB8
 23283 057b 48010000 		.4byte	.LFE8-.LFB8
 23284 057f 01       		.uleb128 0x1
 23285 0580 9C       		.byte	0x9c
 23286 0581 B3050000 		.4byte	0x5b3
 23287 0585 13       		.uleb128 0x13
 23288 0586 900D0000 		.4byte	.LASF51
 23289 058a 01       		.byte	0x1
 23290 058b 3402     		.2byte	0x234
 23291 058d 70040000 		.4byte	0x470
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 571


 23292 0591 02       		.uleb128 0x2
 23293 0592 91       		.byte	0x91
 23294 0593 64       		.sleb128 -28
 23295 0594 14       		.uleb128 0x14
 23296 0595 2F010000 		.4byte	.LASF34
 23297 0599 01       		.byte	0x1
 23298 059a 3802     		.2byte	0x238
 23299 059c 25000000 		.4byte	0x25
 23300 05a0 02       		.uleb128 0x2
 23301 05a1 91       		.byte	0x91
 23302 05a2 6F       		.sleb128 -17
 23303 05a3 14       		.uleb128 0x14
 23304 05a4 A0120000 		.4byte	.LASF29
 23305 05a8 01       		.byte	0x1
 23306 05a9 3D02     		.2byte	0x23d
 23307 05ab 76040000 		.4byte	0x476
 23308 05af 02       		.uleb128 0x2
 23309 05b0 91       		.byte	0x91
 23310 05b1 6C       		.sleb128 -20
 23311 05b2 00       		.byte	0
 23312 05b3 12       		.uleb128 0x12
 23313 05b4 A70E0000 		.4byte	.LASF52
 23314 05b8 01       		.byte	0x1
 23315 05b9 8602     		.2byte	0x286
 23316 05bb 25000000 		.4byte	0x25
 23317 05bf 00000000 		.4byte	.LFB9
 23318 05c3 64000000 		.4byte	.LFE9-.LFB9
 23319 05c7 01       		.uleb128 0x1
 23320 05c8 9C       		.byte	0x9c
 23321 05c9 FB050000 		.4byte	0x5fb
 23322 05cd 13       		.uleb128 0x13
 23323 05ce A7110000 		.4byte	.LASF53
 23324 05d2 01       		.byte	0x1
 23325 05d3 8702     		.2byte	0x287
 23326 05d5 D5040000 		.4byte	0x4d5
 23327 05d9 02       		.uleb128 0x2
 23328 05da 91       		.byte	0x91
 23329 05db 64       		.sleb128 -28
 23330 05dc 14       		.uleb128 0x14
 23331 05dd 2F010000 		.4byte	.LASF34
 23332 05e1 01       		.byte	0x1
 23333 05e2 8B02     		.2byte	0x28b
 23334 05e4 25000000 		.4byte	0x25
 23335 05e8 02       		.uleb128 0x2
 23336 05e9 91       		.byte	0x91
 23337 05ea 6F       		.sleb128 -17
 23338 05eb 14       		.uleb128 0x14
 23339 05ec AA070000 		.4byte	.LASF45
 23340 05f0 01       		.byte	0x1
 23341 05f1 8C02     		.2byte	0x28c
 23342 05f3 64000000 		.4byte	0x64
 23343 05f7 02       		.uleb128 0x2
 23344 05f8 91       		.byte	0x91
 23345 05f9 6E       		.sleb128 -18
 23346 05fa 00       		.byte	0
 23347 05fb 12       		.uleb128 0x12
 23348 05fc A30B0000 		.4byte	.LASF54
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 572


 23349 0600 01       		.byte	0x1
 23350 0601 AC02     		.2byte	0x2ac
 23351 0603 25000000 		.4byte	0x25
 23352 0607 00000000 		.4byte	.LFB10
 23353 060b 6C020000 		.4byte	.LFE10-.LFB10
 23354 060f 01       		.uleb128 0x1
 23355 0610 9C       		.byte	0x9c
 23356 0611 43060000 		.4byte	0x643
 23357 0615 13       		.uleb128 0x13
 23358 0616 2B020000 		.4byte	.LASF55
 23359 061a 01       		.byte	0x1
 23360 061b AD02     		.2byte	0x2ad
 23361 061d 43060000 		.4byte	0x643
 23362 0621 02       		.uleb128 0x2
 23363 0622 91       		.byte	0x91
 23364 0623 64       		.sleb128 -28
 23365 0624 14       		.uleb128 0x14
 23366 0625 2F010000 		.4byte	.LASF34
 23367 0629 01       		.byte	0x1
 23368 062a B102     		.2byte	0x2b1
 23369 062c 25000000 		.4byte	0x25
 23370 0630 02       		.uleb128 0x2
 23371 0631 91       		.byte	0x91
 23372 0632 6F       		.sleb128 -17
 23373 0633 14       		.uleb128 0x14
 23374 0634 A0120000 		.4byte	.LASF29
 23375 0638 01       		.byte	0x1
 23376 0639 BA02     		.2byte	0x2ba
 23377 063b 49060000 		.4byte	0x649
 23378 063f 02       		.uleb128 0x2
 23379 0640 91       		.byte	0x91
 23380 0641 68       		.sleb128 -24
 23381 0642 00       		.byte	0
 23382 0643 0D       		.uleb128 0xd
 23383 0644 04       		.byte	0x4
 23384 0645 A3000000 		.4byte	0xa3
 23385 0649 15       		.uleb128 0x15
 23386 064a 64000000 		.4byte	0x64
 23387 064e 59060000 		.4byte	0x659
 23388 0652 16       		.uleb128 0x16
 23389 0653 86040000 		.4byte	0x486
 23390 0657 05       		.byte	0x5
 23391 0658 00       		.byte	0
 23392 0659 12       		.uleb128 0x12
 23393 065a D7070000 		.4byte	.LASF56
 23394 065e 01       		.byte	0x1
 23395 065f 3503     		.2byte	0x335
 23396 0661 25000000 		.4byte	0x25
 23397 0665 00000000 		.4byte	.LFB11
 23398 0669 B8000000 		.4byte	.LFE11-.LFB11
 23399 066d 01       		.uleb128 0x1
 23400 066e 9C       		.byte	0x9c
 23401 066f A1060000 		.4byte	0x6a1
 23402 0673 13       		.uleb128 0x13
 23403 0674 2B020000 		.4byte	.LASF55
 23404 0678 01       		.byte	0x1
 23405 0679 3603     		.2byte	0x336
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 573


 23406 067b A1060000 		.4byte	0x6a1
 23407 067f 02       		.uleb128 0x2
 23408 0680 91       		.byte	0x91
 23409 0681 64       		.sleb128 -28
 23410 0682 14       		.uleb128 0x14
 23411 0683 2F010000 		.4byte	.LASF34
 23412 0687 01       		.byte	0x1
 23413 0688 3A03     		.2byte	0x33a
 23414 068a 25000000 		.4byte	0x25
 23415 068e 02       		.uleb128 0x2
 23416 068f 91       		.byte	0x91
 23417 0690 6F       		.sleb128 -17
 23418 0691 14       		.uleb128 0x14
 23419 0692 A0120000 		.4byte	.LASF29
 23420 0696 01       		.byte	0x1
 23421 0697 3B03     		.2byte	0x33b
 23422 0699 64000000 		.4byte	0x64
 23423 069d 02       		.uleb128 0x2
 23424 069e 91       		.byte	0x91
 23425 069f 6E       		.sleb128 -18
 23426 06a0 00       		.byte	0
 23427 06a1 0D       		.uleb128 0xd
 23428 06a2 04       		.byte	0x4
 23429 06a3 0E010000 		.4byte	0x10e
 23430 06a7 12       		.uleb128 0x12
 23431 06a8 BF000000 		.4byte	.LASF57
 23432 06ac 01       		.byte	0x1
 23433 06ad 6703     		.2byte	0x367
 23434 06af 25000000 		.4byte	0x25
 23435 06b3 00000000 		.4byte	.LFB12
 23436 06b7 50000000 		.4byte	.LFE12-.LFB12
 23437 06bb 01       		.uleb128 0x1
 23438 06bc 9C       		.byte	0x9c
 23439 06bd E0060000 		.4byte	0x6e0
 23440 06c1 13       		.uleb128 0x13
 23441 06c2 91080000 		.4byte	.LASF58
 23442 06c6 01       		.byte	0x1
 23443 06c7 6803     		.2byte	0x368
 23444 06c9 5F020000 		.4byte	0x25f
 23445 06cd 02       		.uleb128 0x2
 23446 06ce 91       		.byte	0x91
 23447 06cf 64       		.sleb128 -28
 23448 06d0 14       		.uleb128 0x14
 23449 06d1 2F010000 		.4byte	.LASF34
 23450 06d5 01       		.byte	0x1
 23451 06d6 6C03     		.2byte	0x36c
 23452 06d8 25000000 		.4byte	0x25
 23453 06dc 02       		.uleb128 0x2
 23454 06dd 91       		.byte	0x91
 23455 06de 6F       		.sleb128 -17
 23456 06df 00       		.byte	0
 23457 06e0 12       		.uleb128 0x12
 23458 06e1 110C0000 		.4byte	.LASF59
 23459 06e5 01       		.byte	0x1
 23460 06e6 8803     		.2byte	0x388
 23461 06e8 25000000 		.4byte	0x25
 23462 06ec 00000000 		.4byte	.LFB13
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 574


 23463 06f0 50000000 		.4byte	.LFE13-.LFB13
 23464 06f4 01       		.uleb128 0x1
 23465 06f5 9C       		.byte	0x9c
 23466 06f6 19070000 		.4byte	0x719
 23467 06fa 13       		.uleb128 0x13
 23468 06fb E40F0000 		.4byte	.LASF60
 23469 06ff 01       		.byte	0x1
 23470 0700 8903     		.2byte	0x389
 23471 0702 5F020000 		.4byte	0x25f
 23472 0706 02       		.uleb128 0x2
 23473 0707 91       		.byte	0x91
 23474 0708 64       		.sleb128 -28
 23475 0709 14       		.uleb128 0x14
 23476 070a 2F010000 		.4byte	.LASF34
 23477 070e 01       		.byte	0x1
 23478 070f 8D03     		.2byte	0x38d
 23479 0711 25000000 		.4byte	0x25
 23480 0715 02       		.uleb128 0x2
 23481 0716 91       		.byte	0x91
 23482 0717 6F       		.sleb128 -17
 23483 0718 00       		.byte	0
 23484 0719 12       		.uleb128 0x12
 23485 071a 8D0C0000 		.4byte	.LASF61
 23486 071e 01       		.byte	0x1
 23487 071f A803     		.2byte	0x3a8
 23488 0721 25000000 		.4byte	0x25
 23489 0725 00000000 		.4byte	.LFB14
 23490 0729 50000000 		.4byte	.LFE14-.LFB14
 23491 072d 01       		.uleb128 0x1
 23492 072e 9C       		.byte	0x9c
 23493 072f 52070000 		.4byte	0x752
 23494 0733 13       		.uleb128 0x13
 23495 0734 A50F0000 		.4byte	.LASF62
 23496 0738 01       		.byte	0x1
 23497 0739 A903     		.2byte	0x3a9
 23498 073b 5F020000 		.4byte	0x25f
 23499 073f 02       		.uleb128 0x2
 23500 0740 91       		.byte	0x91
 23501 0741 64       		.sleb128 -28
 23502 0742 14       		.uleb128 0x14
 23503 0743 2F010000 		.4byte	.LASF34
 23504 0747 01       		.byte	0x1
 23505 0748 AD03     		.2byte	0x3ad
 23506 074a 25000000 		.4byte	0x25
 23507 074e 02       		.uleb128 0x2
 23508 074f 91       		.byte	0x91
 23509 0750 6F       		.sleb128 -17
 23510 0751 00       		.byte	0
 23511 0752 12       		.uleb128 0x12
 23512 0753 D8000000 		.4byte	.LASF63
 23513 0757 01       		.byte	0x1
 23514 0758 CA03     		.2byte	0x3ca
 23515 075a 25000000 		.4byte	0x25
 23516 075e 00000000 		.4byte	.LFB15
 23517 0762 68000000 		.4byte	.LFE15-.LFB15
 23518 0766 01       		.uleb128 0x1
 23519 0767 9C       		.byte	0x9c
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 575


 23520 0768 9A070000 		.4byte	0x79a
 23521 076c 13       		.uleb128 0x13
 23522 076d 78040000 		.4byte	.LASF64
 23523 0771 01       		.byte	0x1
 23524 0772 CB03     		.2byte	0x3cb
 23525 0774 5F020000 		.4byte	0x25f
 23526 0778 02       		.uleb128 0x2
 23527 0779 91       		.byte	0x91
 23528 077a 64       		.sleb128 -28
 23529 077b 14       		.uleb128 0x14
 23530 077c 2F010000 		.4byte	.LASF34
 23531 0780 01       		.byte	0x1
 23532 0781 CF03     		.2byte	0x3cf
 23533 0783 25000000 		.4byte	0x25
 23534 0787 02       		.uleb128 0x2
 23535 0788 91       		.byte	0x91
 23536 0789 6F       		.sleb128 -17
 23537 078a 14       		.uleb128 0x14
 23538 078b A0120000 		.4byte	.LASF29
 23539 078f 01       		.byte	0x1
 23540 0790 D003     		.2byte	0x3d0
 23541 0792 64000000 		.4byte	0x64
 23542 0796 02       		.uleb128 0x2
 23543 0797 91       		.byte	0x91
 23544 0798 6E       		.sleb128 -18
 23545 0799 00       		.byte	0
 23546 079a 12       		.uleb128 0x12
 23547 079b F50C0000 		.4byte	.LASF65
 23548 079f 01       		.byte	0x1
 23549 07a0 EF03     		.2byte	0x3ef
 23550 07a2 25000000 		.4byte	0x25
 23551 07a6 00000000 		.4byte	.LFB16
 23552 07aa 68000000 		.4byte	.LFE16-.LFB16
 23553 07ae 01       		.uleb128 0x1
 23554 07af 9C       		.byte	0x9c
 23555 07b0 E2070000 		.4byte	0x7e2
 23556 07b4 13       		.uleb128 0x13
 23557 07b5 E8110000 		.4byte	.LASF66
 23558 07b9 01       		.byte	0x1
 23559 07ba F003     		.2byte	0x3f0
 23560 07bc 5F020000 		.4byte	0x25f
 23561 07c0 02       		.uleb128 0x2
 23562 07c1 91       		.byte	0x91
 23563 07c2 64       		.sleb128 -28
 23564 07c3 14       		.uleb128 0x14
 23565 07c4 2F010000 		.4byte	.LASF34
 23566 07c8 01       		.byte	0x1
 23567 07c9 F403     		.2byte	0x3f4
 23568 07cb 25000000 		.4byte	0x25
 23569 07cf 02       		.uleb128 0x2
 23570 07d0 91       		.byte	0x91
 23571 07d1 6F       		.sleb128 -17
 23572 07d2 14       		.uleb128 0x14
 23573 07d3 A0120000 		.4byte	.LASF29
 23574 07d7 01       		.byte	0x1
 23575 07d8 F503     		.2byte	0x3f5
 23576 07da 64000000 		.4byte	0x64
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 576


 23577 07de 02       		.uleb128 0x2
 23578 07df 91       		.byte	0x91
 23579 07e0 6E       		.sleb128 -18
 23580 07e1 00       		.byte	0
 23581 07e2 12       		.uleb128 0x12
 23582 07e3 F1030000 		.4byte	.LASF67
 23583 07e7 01       		.byte	0x1
 23584 07e8 1504     		.2byte	0x415
 23585 07ea 25000000 		.4byte	0x25
 23586 07ee 00000000 		.4byte	.LFB17
 23587 07f2 50000000 		.4byte	.LFE17-.LFB17
 23588 07f6 01       		.uleb128 0x1
 23589 07f7 9C       		.byte	0x9c
 23590 07f8 1B080000 		.4byte	0x81b
 23591 07fc 13       		.uleb128 0x13
 23592 07fd 460F0000 		.4byte	.LASF68
 23593 0801 01       		.byte	0x1
 23594 0802 1604     		.2byte	0x416
 23595 0804 5F020000 		.4byte	0x25f
 23596 0808 02       		.uleb128 0x2
 23597 0809 91       		.byte	0x91
 23598 080a 64       		.sleb128 -28
 23599 080b 14       		.uleb128 0x14
 23600 080c 2F010000 		.4byte	.LASF34
 23601 0810 01       		.byte	0x1
 23602 0811 1A04     		.2byte	0x41a
 23603 0813 25000000 		.4byte	0x25
 23604 0817 02       		.uleb128 0x2
 23605 0818 91       		.byte	0x91
 23606 0819 6F       		.sleb128 -17
 23607 081a 00       		.byte	0
 23608 081b 12       		.uleb128 0x12
 23609 081c 6D110000 		.4byte	.LASF69
 23610 0820 01       		.byte	0x1
 23611 0821 3D04     		.2byte	0x43d
 23612 0823 25000000 		.4byte	0x25
 23613 0827 00000000 		.4byte	.LFB18
 23614 082b 74000000 		.4byte	.LFE18-.LFB18
 23615 082f 01       		.uleb128 0x1
 23616 0830 9C       		.byte	0x9c
 23617 0831 63080000 		.4byte	0x863
 23618 0835 13       		.uleb128 0x13
 23619 0836 D3030000 		.4byte	.LASF70
 23620 083a 01       		.byte	0x1
 23621 083b 3D04     		.2byte	0x43d
 23622 083d 5F020000 		.4byte	0x25f
 23623 0841 02       		.uleb128 0x2
 23624 0842 91       		.byte	0x91
 23625 0843 64       		.sleb128 -28
 23626 0844 14       		.uleb128 0x14
 23627 0845 2F010000 		.4byte	.LASF34
 23628 0849 01       		.byte	0x1
 23629 084a 4104     		.2byte	0x441
 23630 084c 25000000 		.4byte	0x25
 23631 0850 02       		.uleb128 0x2
 23632 0851 91       		.byte	0x91
 23633 0852 6F       		.sleb128 -17
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 577


 23634 0853 14       		.uleb128 0x14
 23635 0854 A0120000 		.4byte	.LASF29
 23636 0858 01       		.byte	0x1
 23637 0859 4204     		.2byte	0x442
 23638 085b 64000000 		.4byte	0x64
 23639 085f 02       		.uleb128 0x2
 23640 0860 91       		.byte	0x91
 23641 0861 6E       		.sleb128 -18
 23642 0862 00       		.byte	0
 23643 0863 12       		.uleb128 0x12
 23644 0864 07030000 		.4byte	.LASF71
 23645 0868 01       		.byte	0x1
 23646 0869 6604     		.2byte	0x466
 23647 086b 25000000 		.4byte	0x25
 23648 086f 00000000 		.4byte	.LFB19
 23649 0873 3C010000 		.4byte	.LFE19-.LFB19
 23650 0877 01       		.uleb128 0x1
 23651 0878 9C       		.byte	0x9c
 23652 0879 AB080000 		.4byte	0x8ab
 23653 087d 13       		.uleb128 0x13
 23654 087e D3030000 		.4byte	.LASF70
 23655 0882 01       		.byte	0x1
 23656 0883 6604     		.2byte	0x466
 23657 0885 64000000 		.4byte	0x64
 23658 0889 02       		.uleb128 0x2
 23659 088a 91       		.byte	0x91
 23660 088b 67       		.sleb128 -25
 23661 088c 14       		.uleb128 0x14
 23662 088d 2F010000 		.4byte	.LASF34
 23663 0891 01       		.byte	0x1
 23664 0892 6A04     		.2byte	0x46a
 23665 0894 25000000 		.4byte	0x25
 23666 0898 02       		.uleb128 0x2
 23667 0899 91       		.byte	0x91
 23668 089a 6F       		.sleb128 -17
 23669 089b 14       		.uleb128 0x14
 23670 089c A0120000 		.4byte	.LASF29
 23671 08a0 01       		.byte	0x1
 23672 08a1 6B04     		.2byte	0x46b
 23673 08a3 64000000 		.4byte	0x64
 23674 08a7 02       		.uleb128 0x2
 23675 08a8 91       		.byte	0x91
 23676 08a9 6E       		.sleb128 -18
 23677 08aa 00       		.byte	0
 23678 08ab 12       		.uleb128 0x12
 23679 08ac A20C0000 		.4byte	.LASF72
 23680 08b0 01       		.byte	0x1
 23681 08b1 B304     		.2byte	0x4b3
 23682 08b3 25000000 		.4byte	0x25
 23683 08b7 00000000 		.4byte	.LFB20
 23684 08bb 74000000 		.4byte	.LFE20-.LFB20
 23685 08bf 01       		.uleb128 0x1
 23686 08c0 9C       		.byte	0x9c
 23687 08c1 F3080000 		.4byte	0x8f3
 23688 08c5 13       		.uleb128 0x13
 23689 08c6 D4050000 		.4byte	.LASF73
 23690 08ca 01       		.byte	0x1
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 578


 23691 08cb B304     		.2byte	0x4b3
 23692 08cd 5F020000 		.4byte	0x25f
 23693 08d1 02       		.uleb128 0x2
 23694 08d2 91       		.byte	0x91
 23695 08d3 64       		.sleb128 -28
 23696 08d4 14       		.uleb128 0x14
 23697 08d5 2F010000 		.4byte	.LASF34
 23698 08d9 01       		.byte	0x1
 23699 08da B704     		.2byte	0x4b7
 23700 08dc 25000000 		.4byte	0x25
 23701 08e0 02       		.uleb128 0x2
 23702 08e1 91       		.byte	0x91
 23703 08e2 6F       		.sleb128 -17
 23704 08e3 14       		.uleb128 0x14
 23705 08e4 A0120000 		.4byte	.LASF29
 23706 08e8 01       		.byte	0x1
 23707 08e9 B804     		.2byte	0x4b8
 23708 08eb 64000000 		.4byte	0x64
 23709 08ef 02       		.uleb128 0x2
 23710 08f0 91       		.byte	0x91
 23711 08f1 6E       		.sleb128 -18
 23712 08f2 00       		.byte	0
 23713 08f3 12       		.uleb128 0x12
 23714 08f4 C8140000 		.4byte	.LASF74
 23715 08f8 01       		.byte	0x1
 23716 08f9 E204     		.2byte	0x4e2
 23717 08fb 25000000 		.4byte	0x25
 23718 08ff 00000000 		.4byte	.LFB21
 23719 0903 24020000 		.4byte	.LFE21-.LFB21
 23720 0907 01       		.uleb128 0x1
 23721 0908 9C       		.byte	0x9c
 23722 0909 4A090000 		.4byte	0x94a
 23723 090d 13       		.uleb128 0x13
 23724 090e D4050000 		.4byte	.LASF73
 23725 0912 01       		.byte	0x1
 23726 0913 E204     		.2byte	0x4e2
 23727 0915 64000000 		.4byte	0x64
 23728 0919 02       		.uleb128 0x2
 23729 091a 91       		.byte	0x91
 23730 091b 67       		.sleb128 -25
 23731 091c 14       		.uleb128 0x14
 23732 091d 2F010000 		.4byte	.LASF34
 23733 0921 01       		.byte	0x1
 23734 0922 E604     		.2byte	0x4e6
 23735 0924 25000000 		.4byte	0x25
 23736 0928 02       		.uleb128 0x2
 23737 0929 91       		.byte	0x91
 23738 092a 6F       		.sleb128 -17
 23739 092b 14       		.uleb128 0x14
 23740 092c A0120000 		.4byte	.LASF29
 23741 0930 01       		.byte	0x1
 23742 0931 E704     		.2byte	0x4e7
 23743 0933 64000000 		.4byte	0x64
 23744 0937 02       		.uleb128 0x2
 23745 0938 91       		.byte	0x91
 23746 0939 6D       		.sleb128 -19
 23747 093a 14       		.uleb128 0x14
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 579


 23748 093b 10150000 		.4byte	.LASF75
 23749 093f 01       		.byte	0x1
 23750 0940 E804     		.2byte	0x4e8
 23751 0942 64000000 		.4byte	0x64
 23752 0946 02       		.uleb128 0x2
 23753 0947 91       		.byte	0x91
 23754 0948 6E       		.sleb128 -18
 23755 0949 00       		.byte	0
 23756 094a 12       		.uleb128 0x12
 23757 094b 94070000 		.4byte	.LASF76
 23758 094f 01       		.byte	0x1
 23759 0950 7E05     		.2byte	0x57e
 23760 0952 25000000 		.4byte	0x25
 23761 0956 00000000 		.4byte	.LFB22
 23762 095a 70010000 		.4byte	.LFE22-.LFB22
 23763 095e 01       		.uleb128 0x1
 23764 095f 9C       		.byte	0x9c
 23765 0960 A1090000 		.4byte	0x9a1
 23766 0964 13       		.uleb128 0x13
 23767 0965 CF090000 		.4byte	.LASF14
 23768 0969 01       		.byte	0x1
 23769 096a 7F05     		.2byte	0x57f
 23770 096c 5F020000 		.4byte	0x25f
 23771 0970 02       		.uleb128 0x2
 23772 0971 91       		.byte	0x91
 23773 0972 64       		.sleb128 -28
 23774 0973 14       		.uleb128 0x14
 23775 0974 2F010000 		.4byte	.LASF34
 23776 0978 01       		.byte	0x1
 23777 0979 8305     		.2byte	0x583
 23778 097b 25000000 		.4byte	0x25
 23779 097f 02       		.uleb128 0x2
 23780 0980 91       		.byte	0x91
 23781 0981 6F       		.sleb128 -17
 23782 0982 14       		.uleb128 0x14
 23783 0983 A0120000 		.4byte	.LASF29
 23784 0987 01       		.byte	0x1
 23785 0988 8405     		.2byte	0x584
 23786 098a 64000000 		.4byte	0x64
 23787 098e 02       		.uleb128 0x2
 23788 098f 91       		.byte	0x91
 23789 0990 6E       		.sleb128 -18
 23790 0991 14       		.uleb128 0x14
 23791 0992 40150000 		.4byte	.LASF77
 23792 0996 01       		.byte	0x1
 23793 0997 8505     		.2byte	0x585
 23794 0999 64000000 		.4byte	0x64
 23795 099d 02       		.uleb128 0x2
 23796 099e 91       		.byte	0x91
 23797 099f 6D       		.sleb128 -19
 23798 09a0 00       		.byte	0
 23799 09a1 12       		.uleb128 0x12
 23800 09a2 1B0D0000 		.4byte	.LASF78
 23801 09a6 01       		.byte	0x1
 23802 09a7 E605     		.2byte	0x5e6
 23803 09a9 25000000 		.4byte	0x25
 23804 09ad 00000000 		.4byte	.LFB23
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 580


 23805 09b1 50020000 		.4byte	.LFE23-.LFB23
 23806 09b5 01       		.uleb128 0x1
 23807 09b6 9C       		.byte	0x9c
 23808 09b7 250A0000 		.4byte	0xa25
 23809 09bb 13       		.uleb128 0x13
 23810 09bc CF090000 		.4byte	.LASF14
 23811 09c0 01       		.byte	0x1
 23812 09c1 E605     		.2byte	0x5e6
 23813 09c3 64000000 		.4byte	0x64
 23814 09c7 02       		.uleb128 0x2
 23815 09c8 91       		.byte	0x91
 23816 09c9 67       		.sleb128 -25
 23817 09ca 14       		.uleb128 0x14
 23818 09cb 2F010000 		.4byte	.LASF34
 23819 09cf 01       		.byte	0x1
 23820 09d0 EA05     		.2byte	0x5ea
 23821 09d2 25000000 		.4byte	0x25
 23822 09d6 02       		.uleb128 0x2
 23823 09d7 91       		.byte	0x91
 23824 09d8 6F       		.sleb128 -17
 23825 09d9 14       		.uleb128 0x14
 23826 09da 80070000 		.4byte	.LASF79
 23827 09de 01       		.byte	0x1
 23828 09df EB05     		.2byte	0x5eb
 23829 09e1 64000000 		.4byte	0x64
 23830 09e5 02       		.uleb128 0x2
 23831 09e6 91       		.byte	0x91
 23832 09e7 6E       		.sleb128 -18
 23833 09e8 14       		.uleb128 0x14
 23834 09e9 CC0E0000 		.4byte	.LASF80
 23835 09ed 01       		.byte	0x1
 23836 09ee EC05     		.2byte	0x5ec
 23837 09f0 64000000 		.4byte	0x64
 23838 09f4 02       		.uleb128 0x2
 23839 09f5 91       		.byte	0x91
 23840 09f6 6D       		.sleb128 -19
 23841 09f7 14       		.uleb128 0x14
 23842 09f8 A0120000 		.4byte	.LASF29
 23843 09fc 01       		.byte	0x1
 23844 09fd ED05     		.2byte	0x5ed
 23845 09ff 64000000 		.4byte	0x64
 23846 0a03 02       		.uleb128 0x2
 23847 0a04 91       		.byte	0x91
 23848 0a05 6C       		.sleb128 -20
 23849 0a06 14       		.uleb128 0x14
 23850 0a07 40150000 		.4byte	.LASF77
 23851 0a0b 01       		.byte	0x1
 23852 0a0c EE05     		.2byte	0x5ee
 23853 0a0e 64000000 		.4byte	0x64
 23854 0a12 02       		.uleb128 0x2
 23855 0a13 91       		.byte	0x91
 23856 0a14 6B       		.sleb128 -21
 23857 0a15 14       		.uleb128 0x14
 23858 0a16 1B150000 		.4byte	.LASF81
 23859 0a1a 01       		.byte	0x1
 23860 0a1b EF05     		.2byte	0x5ef
 23861 0a1d 64000000 		.4byte	0x64
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 581


 23862 0a21 02       		.uleb128 0x2
 23863 0a22 91       		.byte	0x91
 23864 0a23 6A       		.sleb128 -22
 23865 0a24 00       		.byte	0
 23866 0a25 17       		.uleb128 0x17
 23867 0a26 95030000 		.4byte	.LASF82
 23868 0a2a 01       		.byte	0x1
 23869 0a2b 4406     		.2byte	0x644
 23870 0a2d 25000000 		.4byte	0x25
 23871 0a31 00000000 		.4byte	.LFB24
 23872 0a35 C8000000 		.4byte	.LFE24-.LFB24
 23873 0a39 01       		.uleb128 0x1
 23874 0a3a 9C       		.byte	0x9c
 23875 0a3b 5E0A0000 		.4byte	0xa5e
 23876 0a3f 13       		.uleb128 0x13
 23877 0a40 CF090000 		.4byte	.LASF14
 23878 0a44 01       		.byte	0x1
 23879 0a45 4406     		.2byte	0x644
 23880 0a47 64000000 		.4byte	0x64
 23881 0a4b 02       		.uleb128 0x2
 23882 0a4c 91       		.byte	0x91
 23883 0a4d 6F       		.sleb128 -17
 23884 0a4e 14       		.uleb128 0x14
 23885 0a4f 2F010000 		.4byte	.LASF34
 23886 0a53 01       		.byte	0x1
 23887 0a54 4606     		.2byte	0x646
 23888 0a56 25000000 		.4byte	0x25
 23889 0a5a 02       		.uleb128 0x2
 23890 0a5b 91       		.byte	0x91
 23891 0a5c 77       		.sleb128 -9
 23892 0a5d 00       		.byte	0
 23893 0a5e 12       		.uleb128 0x12
 23894 0a5f 74130000 		.4byte	.LASF83
 23895 0a63 01       		.byte	0x1
 23896 0a64 9406     		.2byte	0x694
 23897 0a66 25000000 		.4byte	0x25
 23898 0a6a 00000000 		.4byte	.LFB25
 23899 0a6e 6C000000 		.4byte	.LFE25-.LFB25
 23900 0a72 01       		.uleb128 0x1
 23901 0a73 9C       		.byte	0x9c
 23902 0a74 A60A0000 		.4byte	0xaa6
 23903 0a78 13       		.uleb128 0x13
 23904 0a79 0E010000 		.4byte	.LASF84
 23905 0a7d 01       		.byte	0x1
 23906 0a7e 9406     		.2byte	0x694
 23907 0a80 5F020000 		.4byte	0x25f
 23908 0a84 02       		.uleb128 0x2
 23909 0a85 91       		.byte	0x91
 23910 0a86 64       		.sleb128 -28
 23911 0a87 14       		.uleb128 0x14
 23912 0a88 A0120000 		.4byte	.LASF29
 23913 0a8c 01       		.byte	0x1
 23914 0a8d 9606     		.2byte	0x696
 23915 0a8f 64000000 		.4byte	0x64
 23916 0a93 02       		.uleb128 0x2
 23917 0a94 91       		.byte	0x91
 23918 0a95 6E       		.sleb128 -18
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 582


 23919 0a96 14       		.uleb128 0x14
 23920 0a97 2F010000 		.4byte	.LASF34
 23921 0a9b 01       		.byte	0x1
 23922 0a9c 9906     		.2byte	0x699
 23923 0a9e 25000000 		.4byte	0x25
 23924 0aa2 02       		.uleb128 0x2
 23925 0aa3 91       		.byte	0x91
 23926 0aa4 6F       		.sleb128 -17
 23927 0aa5 00       		.byte	0
 23928 0aa6 12       		.uleb128 0x12
 23929 0aa7 63050000 		.4byte	.LASF85
 23930 0aab 01       		.byte	0x1
 23931 0aac C706     		.2byte	0x6c7
 23932 0aae 25000000 		.4byte	0x25
 23933 0ab2 00000000 		.4byte	.LFB26
 23934 0ab6 58010000 		.4byte	.LFE26-.LFB26
 23935 0aba 01       		.uleb128 0x1
 23936 0abb 9C       		.byte	0x9c
 23937 0abc FD0A0000 		.4byte	0xafd
 23938 0ac0 13       		.uleb128 0x13
 23939 0ac1 0E010000 		.4byte	.LASF84
 23940 0ac5 01       		.byte	0x1
 23941 0ac6 C706     		.2byte	0x6c7
 23942 0ac8 64000000 		.4byte	0x64
 23943 0acc 02       		.uleb128 0x2
 23944 0acd 91       		.byte	0x91
 23945 0ace 67       		.sleb128 -25
 23946 0acf 14       		.uleb128 0x14
 23947 0ad0 A0120000 		.4byte	.LASF29
 23948 0ad4 01       		.byte	0x1
 23949 0ad5 C906     		.2byte	0x6c9
 23950 0ad7 64000000 		.4byte	0x64
 23951 0adb 02       		.uleb128 0x2
 23952 0adc 91       		.byte	0x91
 23953 0add 6D       		.sleb128 -19
 23954 0ade 14       		.uleb128 0x14
 23955 0adf 2F010000 		.4byte	.LASF34
 23956 0ae3 01       		.byte	0x1
 23957 0ae4 CC06     		.2byte	0x6cc
 23958 0ae6 25000000 		.4byte	0x25
 23959 0aea 02       		.uleb128 0x2
 23960 0aeb 91       		.byte	0x91
 23961 0aec 6F       		.sleb128 -17
 23962 0aed 14       		.uleb128 0x14
 23963 0aee 38010000 		.4byte	.LASF86
 23964 0af2 01       		.byte	0x1
 23965 0af3 CD06     		.2byte	0x6cd
 23966 0af5 64000000 		.4byte	0x64
 23967 0af9 02       		.uleb128 0x2
 23968 0afa 91       		.byte	0x91
 23969 0afb 6E       		.sleb128 -18
 23970 0afc 00       		.byte	0
 23971 0afd 12       		.uleb128 0x12
 23972 0afe B00C0000 		.4byte	.LASF87
 23973 0b02 01       		.byte	0x1
 23974 0b03 3207     		.2byte	0x732
 23975 0b05 25000000 		.4byte	0x25
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 583


 23976 0b09 00000000 		.4byte	.LFB27
 23977 0b0d 6C000000 		.4byte	.LFE27-.LFB27
 23978 0b11 01       		.uleb128 0x1
 23979 0b12 9C       		.byte	0x9c
 23980 0b13 450B0000 		.4byte	0xb45
 23981 0b17 13       		.uleb128 0x13
 23982 0b18 DE0E0000 		.4byte	.LASF88
 23983 0b1c 01       		.byte	0x1
 23984 0b1d 3307     		.2byte	0x733
 23985 0b1f 5F020000 		.4byte	0x25f
 23986 0b23 02       		.uleb128 0x2
 23987 0b24 91       		.byte	0x91
 23988 0b25 64       		.sleb128 -28
 23989 0b26 14       		.uleb128 0x14
 23990 0b27 A0120000 		.4byte	.LASF29
 23991 0b2b 01       		.byte	0x1
 23992 0b2c 3507     		.2byte	0x735
 23993 0b2e 64000000 		.4byte	0x64
 23994 0b32 02       		.uleb128 0x2
 23995 0b33 91       		.byte	0x91
 23996 0b34 6E       		.sleb128 -18
 23997 0b35 14       		.uleb128 0x14
 23998 0b36 2F010000 		.4byte	.LASF34
 23999 0b3a 01       		.byte	0x1
 24000 0b3b 3807     		.2byte	0x738
 24001 0b3d 25000000 		.4byte	0x25
 24002 0b41 02       		.uleb128 0x2
 24003 0b42 91       		.byte	0x91
 24004 0b43 6F       		.sleb128 -17
 24005 0b44 00       		.byte	0
 24006 0b45 12       		.uleb128 0x12
 24007 0b46 1F070000 		.4byte	.LASF89
 24008 0b4a 01       		.byte	0x1
 24009 0b4b 5B07     		.2byte	0x75b
 24010 0b4d 25000000 		.4byte	0x25
 24011 0b51 00000000 		.4byte	.LFB28
 24012 0b55 B8000000 		.4byte	.LFE28-.LFB28
 24013 0b59 01       		.uleb128 0x1
 24014 0b5a 9C       		.byte	0x9c
 24015 0b5b 8D0B0000 		.4byte	0xb8d
 24016 0b5f 13       		.uleb128 0x13
 24017 0b60 DE0E0000 		.4byte	.LASF88
 24018 0b64 01       		.byte	0x1
 24019 0b65 5B07     		.2byte	0x75b
 24020 0b67 64000000 		.4byte	0x64
 24021 0b6b 02       		.uleb128 0x2
 24022 0b6c 91       		.byte	0x91
 24023 0b6d 67       		.sleb128 -25
 24024 0b6e 14       		.uleb128 0x14
 24025 0b6f A0120000 		.4byte	.LASF29
 24026 0b73 01       		.byte	0x1
 24027 0b74 5D07     		.2byte	0x75d
 24028 0b76 64000000 		.4byte	0x64
 24029 0b7a 02       		.uleb128 0x2
 24030 0b7b 91       		.byte	0x91
 24031 0b7c 6E       		.sleb128 -18
 24032 0b7d 14       		.uleb128 0x14
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 584


 24033 0b7e 2F010000 		.4byte	.LASF34
 24034 0b82 01       		.byte	0x1
 24035 0b83 6007     		.2byte	0x760
 24036 0b85 25000000 		.4byte	0x25
 24037 0b89 02       		.uleb128 0x2
 24038 0b8a 91       		.byte	0x91
 24039 0b8b 6F       		.sleb128 -17
 24040 0b8c 00       		.byte	0
 24041 0b8d 12       		.uleb128 0x12
 24042 0b8e F1010000 		.4byte	.LASF90
 24043 0b92 01       		.byte	0x1
 24044 0b93 8607     		.2byte	0x786
 24045 0b95 25000000 		.4byte	0x25
 24046 0b99 00000000 		.4byte	.LFB29
 24047 0b9d 68000000 		.4byte	.LFE29-.LFB29
 24048 0ba1 01       		.uleb128 0x1
 24049 0ba2 9C       		.byte	0x9c
 24050 0ba3 D50B0000 		.4byte	0xbd5
 24051 0ba7 13       		.uleb128 0x13
 24052 0ba8 9D080000 		.4byte	.LASF91
 24053 0bac 01       		.byte	0x1
 24054 0bad 8607     		.2byte	0x786
 24055 0baf 5F020000 		.4byte	0x25f
 24056 0bb3 02       		.uleb128 0x2
 24057 0bb4 91       		.byte	0x91
 24058 0bb5 64       		.sleb128 -28
 24059 0bb6 14       		.uleb128 0x14
 24060 0bb7 2F010000 		.4byte	.LASF34
 24061 0bbb 01       		.byte	0x1
 24062 0bbc 8A07     		.2byte	0x78a
 24063 0bbe 25000000 		.4byte	0x25
 24064 0bc2 02       		.uleb128 0x2
 24065 0bc3 91       		.byte	0x91
 24066 0bc4 6F       		.sleb128 -17
 24067 0bc5 14       		.uleb128 0x14
 24068 0bc6 A0120000 		.4byte	.LASF29
 24069 0bca 01       		.byte	0x1
 24070 0bcb 8B07     		.2byte	0x78b
 24071 0bcd 64000000 		.4byte	0x64
 24072 0bd1 02       		.uleb128 0x2
 24073 0bd2 91       		.byte	0x91
 24074 0bd3 6E       		.sleb128 -18
 24075 0bd4 00       		.byte	0
 24076 0bd5 12       		.uleb128 0x12
 24077 0bd6 65040000 		.4byte	.LASF92
 24078 0bda 01       		.byte	0x1
 24079 0bdb AA07     		.2byte	0x7aa
 24080 0bdd 25000000 		.4byte	0x25
 24081 0be1 00000000 		.4byte	.LFB30
 24082 0be5 A0000000 		.4byte	.LFE30-.LFB30
 24083 0be9 01       		.uleb128 0x1
 24084 0bea 9C       		.byte	0x9c
 24085 0beb 1D0C0000 		.4byte	0xc1d
 24086 0bef 13       		.uleb128 0x13
 24087 0bf0 9D080000 		.4byte	.LASF91
 24088 0bf4 01       		.byte	0x1
 24089 0bf5 AA07     		.2byte	0x7aa
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 585


 24090 0bf7 64000000 		.4byte	0x64
 24091 0bfb 02       		.uleb128 0x2
 24092 0bfc 91       		.byte	0x91
 24093 0bfd 67       		.sleb128 -25
 24094 0bfe 14       		.uleb128 0x14
 24095 0bff 2F010000 		.4byte	.LASF34
 24096 0c03 01       		.byte	0x1
 24097 0c04 AE07     		.2byte	0x7ae
 24098 0c06 25000000 		.4byte	0x25
 24099 0c0a 02       		.uleb128 0x2
 24100 0c0b 91       		.byte	0x91
 24101 0c0c 6F       		.sleb128 -17
 24102 0c0d 14       		.uleb128 0x14
 24103 0c0e A0120000 		.4byte	.LASF29
 24104 0c12 01       		.byte	0x1
 24105 0c13 AF07     		.2byte	0x7af
 24106 0c15 64000000 		.4byte	0x64
 24107 0c19 02       		.uleb128 0x2
 24108 0c1a 91       		.byte	0x91
 24109 0c1b 6E       		.sleb128 -18
 24110 0c1c 00       		.byte	0
 24111 0c1d 12       		.uleb128 0x12
 24112 0c1e 4F040000 		.4byte	.LASF93
 24113 0c22 01       		.byte	0x1
 24114 0c23 D207     		.2byte	0x7d2
 24115 0c25 25000000 		.4byte	0x25
 24116 0c29 00000000 		.4byte	.LFB31
 24117 0c2d 6C000000 		.4byte	.LFE31-.LFB31
 24118 0c31 01       		.uleb128 0x1
 24119 0c32 9C       		.byte	0x9c
 24120 0c33 650C0000 		.4byte	0xc65
 24121 0c37 13       		.uleb128 0x13
 24122 0c38 0D0D0000 		.4byte	.LASF94
 24123 0c3c 01       		.byte	0x1
 24124 0c3d D207     		.2byte	0x7d2
 24125 0c3f 5F020000 		.4byte	0x25f
 24126 0c43 02       		.uleb128 0x2
 24127 0c44 91       		.byte	0x91
 24128 0c45 64       		.sleb128 -28
 24129 0c46 14       		.uleb128 0x14
 24130 0c47 2F010000 		.4byte	.LASF34
 24131 0c4b 01       		.byte	0x1
 24132 0c4c D607     		.2byte	0x7d6
 24133 0c4e 25000000 		.4byte	0x25
 24134 0c52 02       		.uleb128 0x2
 24135 0c53 91       		.byte	0x91
 24136 0c54 6F       		.sleb128 -17
 24137 0c55 14       		.uleb128 0x14
 24138 0c56 A0120000 		.4byte	.LASF29
 24139 0c5a 01       		.byte	0x1
 24140 0c5b D707     		.2byte	0x7d7
 24141 0c5d 64000000 		.4byte	0x64
 24142 0c61 02       		.uleb128 0x2
 24143 0c62 91       		.byte	0x91
 24144 0c63 6E       		.sleb128 -18
 24145 0c64 00       		.byte	0
 24146 0c65 12       		.uleb128 0x12
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 586


 24147 0c66 8C100000 		.4byte	.LASF95
 24148 0c6a 01       		.byte	0x1
 24149 0c6b F807     		.2byte	0x7f8
 24150 0c6d 25000000 		.4byte	0x25
 24151 0c71 00000000 		.4byte	.LFB32
 24152 0c75 A8000000 		.4byte	.LFE32-.LFB32
 24153 0c79 01       		.uleb128 0x1
 24154 0c7a 9C       		.byte	0x9c
 24155 0c7b AD0C0000 		.4byte	0xcad
 24156 0c7f 13       		.uleb128 0x13
 24157 0c80 0D0D0000 		.4byte	.LASF94
 24158 0c84 01       		.byte	0x1
 24159 0c85 F807     		.2byte	0x7f8
 24160 0c87 64000000 		.4byte	0x64
 24161 0c8b 02       		.uleb128 0x2
 24162 0c8c 91       		.byte	0x91
 24163 0c8d 67       		.sleb128 -25
 24164 0c8e 14       		.uleb128 0x14
 24165 0c8f 2F010000 		.4byte	.LASF34
 24166 0c93 01       		.byte	0x1
 24167 0c94 FC07     		.2byte	0x7fc
 24168 0c96 25000000 		.4byte	0x25
 24169 0c9a 02       		.uleb128 0x2
 24170 0c9b 91       		.byte	0x91
 24171 0c9c 6F       		.sleb128 -17
 24172 0c9d 14       		.uleb128 0x14
 24173 0c9e A0120000 		.4byte	.LASF29
 24174 0ca2 01       		.byte	0x1
 24175 0ca3 FD07     		.2byte	0x7fd
 24176 0ca5 64000000 		.4byte	0x64
 24177 0ca9 02       		.uleb128 0x2
 24178 0caa 91       		.byte	0x91
 24179 0cab 6E       		.sleb128 -18
 24180 0cac 00       		.byte	0
 24181 0cad 12       		.uleb128 0x12
 24182 0cae 49030000 		.4byte	.LASF96
 24183 0cb2 01       		.byte	0x1
 24184 0cb3 1C08     		.2byte	0x81c
 24185 0cb5 25000000 		.4byte	0x25
 24186 0cb9 00000000 		.4byte	.LFB33
 24187 0cbd 44000000 		.4byte	.LFE33-.LFB33
 24188 0cc1 01       		.uleb128 0x1
 24189 0cc2 9C       		.byte	0x9c
 24190 0cc3 E60C0000 		.4byte	0xce6
 24191 0cc7 14       		.uleb128 0x14
 24192 0cc8 2F010000 		.4byte	.LASF34
 24193 0ccc 01       		.byte	0x1
 24194 0ccd 2008     		.2byte	0x820
 24195 0ccf 25000000 		.4byte	0x25
 24196 0cd3 02       		.uleb128 0x2
 24197 0cd4 91       		.byte	0x91
 24198 0cd5 6F       		.sleb128 -17
 24199 0cd6 14       		.uleb128 0x14
 24200 0cd7 A0120000 		.4byte	.LASF29
 24201 0cdb 01       		.byte	0x1
 24202 0cdc 2108     		.2byte	0x821
 24203 0cde 64000000 		.4byte	0x64
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 587


 24204 0ce2 02       		.uleb128 0x2
 24205 0ce3 91       		.byte	0x91
 24206 0ce4 6E       		.sleb128 -18
 24207 0ce5 00       		.byte	0
 24208 0ce6 12       		.uleb128 0x12
 24209 0ce7 54140000 		.4byte	.LASF97
 24210 0ceb 01       		.byte	0x1
 24211 0cec 3E08     		.2byte	0x83e
 24212 0cee 25000000 		.4byte	0x25
 24213 0cf2 00000000 		.4byte	.LFB34
 24214 0cf6 78000000 		.4byte	.LFE34-.LFB34
 24215 0cfa 01       		.uleb128 0x1
 24216 0cfb 9C       		.byte	0x9c
 24217 0cfc 1F0D0000 		.4byte	0xd1f
 24218 0d00 14       		.uleb128 0x14
 24219 0d01 2F010000 		.4byte	.LASF34
 24220 0d05 01       		.byte	0x1
 24221 0d06 4208     		.2byte	0x842
 24222 0d08 25000000 		.4byte	0x25
 24223 0d0c 02       		.uleb128 0x2
 24224 0d0d 91       		.byte	0x91
 24225 0d0e 6F       		.sleb128 -17
 24226 0d0f 14       		.uleb128 0x14
 24227 0d10 A0120000 		.4byte	.LASF29
 24228 0d14 01       		.byte	0x1
 24229 0d15 4308     		.2byte	0x843
 24230 0d17 64000000 		.4byte	0x64
 24231 0d1b 02       		.uleb128 0x2
 24232 0d1c 91       		.byte	0x91
 24233 0d1d 6E       		.sleb128 -18
 24234 0d1e 00       		.byte	0
 24235 0d1f 12       		.uleb128 0x12
 24236 0d20 4B080000 		.4byte	.LASF98
 24237 0d24 01       		.byte	0x1
 24238 0d25 8008     		.2byte	0x880
 24239 0d27 25000000 		.4byte	0x25
 24240 0d2b 00000000 		.4byte	.LFB35
 24241 0d2f C4020000 		.4byte	.LFE35-.LFB35
 24242 0d33 01       		.uleb128 0x1
 24243 0d34 9C       		.byte	0x9c
 24244 0d35 760D0000 		.4byte	0xd76
 24245 0d39 13       		.uleb128 0x13
 24246 0d3a 01110000 		.4byte	.LASF99
 24247 0d3e 01       		.byte	0x1
 24248 0d3f 8008     		.2byte	0x880
 24249 0d41 64000000 		.4byte	0x64
 24250 0d45 02       		.uleb128 0x2
 24251 0d46 91       		.byte	0x91
 24252 0d47 67       		.sleb128 -25
 24253 0d48 13       		.uleb128 0x13
 24254 0d49 600B0000 		.4byte	.LASF100
 24255 0d4d 01       		.byte	0x1
 24256 0d4e 8108     		.2byte	0x881
 24257 0d50 5F020000 		.4byte	0x25f
 24258 0d54 02       		.uleb128 0x2
 24259 0d55 91       		.byte	0x91
 24260 0d56 60       		.sleb128 -32
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 588


 24261 0d57 14       		.uleb128 0x14
 24262 0d58 A0120000 		.4byte	.LASF29
 24263 0d5c 01       		.byte	0x1
 24264 0d5d 8308     		.2byte	0x883
 24265 0d5f 64000000 		.4byte	0x64
 24266 0d63 02       		.uleb128 0x2
 24267 0d64 91       		.byte	0x91
 24268 0d65 6E       		.sleb128 -18
 24269 0d66 14       		.uleb128 0x14
 24270 0d67 2F010000 		.4byte	.LASF34
 24271 0d6b 01       		.byte	0x1
 24272 0d6c 8608     		.2byte	0x886
 24273 0d6e 25000000 		.4byte	0x25
 24274 0d72 02       		.uleb128 0x2
 24275 0d73 91       		.byte	0x91
 24276 0d74 6F       		.sleb128 -17
 24277 0d75 00       		.byte	0
 24278 0d76 12       		.uleb128 0x12
 24279 0d77 50100000 		.4byte	.LASF101
 24280 0d7b 01       		.byte	0x1
 24281 0d7c 2009     		.2byte	0x920
 24282 0d7e 25000000 		.4byte	0x25
 24283 0d82 00000000 		.4byte	.LFB36
 24284 0d86 F4020000 		.4byte	.LFE36-.LFB36
 24285 0d8a 01       		.uleb128 0x1
 24286 0d8b 9C       		.byte	0x9c
 24287 0d8c DC0D0000 		.4byte	0xddc
 24288 0d90 13       		.uleb128 0x13
 24289 0d91 01110000 		.4byte	.LASF99
 24290 0d95 01       		.byte	0x1
 24291 0d96 2009     		.2byte	0x920
 24292 0d98 64000000 		.4byte	0x64
 24293 0d9c 02       		.uleb128 0x2
 24294 0d9d 91       		.byte	0x91
 24295 0d9e 67       		.sleb128 -25
 24296 0d9f 13       		.uleb128 0x13
 24297 0da0 600B0000 		.4byte	.LASF100
 24298 0da4 01       		.byte	0x1
 24299 0da5 2109     		.2byte	0x921
 24300 0da7 64000000 		.4byte	0x64
 24301 0dab 02       		.uleb128 0x2
 24302 0dac 91       		.byte	0x91
 24303 0dad 66       		.sleb128 -26
 24304 0dae 14       		.uleb128 0x14
 24305 0daf 2F010000 		.4byte	.LASF34
 24306 0db3 01       		.byte	0x1
 24307 0db4 2509     		.2byte	0x925
 24308 0db6 25000000 		.4byte	0x25
 24309 0dba 02       		.uleb128 0x2
 24310 0dbb 91       		.byte	0x91
 24311 0dbc 6F       		.sleb128 -17
 24312 0dbd 14       		.uleb128 0x14
 24313 0dbe A0120000 		.4byte	.LASF29
 24314 0dc2 01       		.byte	0x1
 24315 0dc3 2609     		.2byte	0x926
 24316 0dc5 64000000 		.4byte	0x64
 24317 0dc9 02       		.uleb128 0x2
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 589


 24318 0dca 91       		.byte	0x91
 24319 0dcb 6E       		.sleb128 -18
 24320 0dcc 14       		.uleb128 0x14
 24321 0dcd 40150000 		.4byte	.LASF77
 24322 0dd1 01       		.byte	0x1
 24323 0dd2 2709     		.2byte	0x927
 24324 0dd4 64000000 		.4byte	0x64
 24325 0dd8 02       		.uleb128 0x2
 24326 0dd9 91       		.byte	0x91
 24327 0dda 6D       		.sleb128 -19
 24328 0ddb 00       		.byte	0
 24329 0ddc 12       		.uleb128 0x12
 24330 0ddd D10A0000 		.4byte	.LASF102
 24331 0de1 01       		.byte	0x1
 24332 0de2 9309     		.2byte	0x993
 24333 0de4 25000000 		.4byte	0x25
 24334 0de8 00000000 		.4byte	.LFB37
 24335 0dec 6C000000 		.4byte	.LFE37-.LFB37
 24336 0df0 01       		.uleb128 0x1
 24337 0df1 9C       		.byte	0x9c
 24338 0df2 240E0000 		.4byte	0xe24
 24339 0df6 13       		.uleb128 0x13
 24340 0df7 CF100000 		.4byte	.LASF103
 24341 0dfb 01       		.byte	0x1
 24342 0dfc 9309     		.2byte	0x993
 24343 0dfe 5F020000 		.4byte	0x25f
 24344 0e02 02       		.uleb128 0x2
 24345 0e03 91       		.byte	0x91
 24346 0e04 64       		.sleb128 -28
 24347 0e05 14       		.uleb128 0x14
 24348 0e06 2F010000 		.4byte	.LASF34
 24349 0e0a 01       		.byte	0x1
 24350 0e0b 9709     		.2byte	0x997
 24351 0e0d 25000000 		.4byte	0x25
 24352 0e11 02       		.uleb128 0x2
 24353 0e12 91       		.byte	0x91
 24354 0e13 6F       		.sleb128 -17
 24355 0e14 14       		.uleb128 0x14
 24356 0e15 A0120000 		.4byte	.LASF29
 24357 0e19 01       		.byte	0x1
 24358 0e1a 9809     		.2byte	0x998
 24359 0e1c 64000000 		.4byte	0x64
 24360 0e20 02       		.uleb128 0x2
 24361 0e21 91       		.byte	0x91
 24362 0e22 6E       		.sleb128 -18
 24363 0e23 00       		.byte	0
 24364 0e24 12       		.uleb128 0x12
 24365 0e25 C3040000 		.4byte	.LASF104
 24366 0e29 01       		.byte	0x1
 24367 0e2a BC09     		.2byte	0x9bc
 24368 0e2c 25000000 		.4byte	0x25
 24369 0e30 00000000 		.4byte	.LFB38
 24370 0e34 B8000000 		.4byte	.LFE38-.LFB38
 24371 0e38 01       		.uleb128 0x1
 24372 0e39 9C       		.byte	0x9c
 24373 0e3a 6C0E0000 		.4byte	0xe6c
 24374 0e3e 13       		.uleb128 0x13
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 590


 24375 0e3f CF100000 		.4byte	.LASF103
 24376 0e43 01       		.byte	0x1
 24377 0e44 BC09     		.2byte	0x9bc
 24378 0e46 64000000 		.4byte	0x64
 24379 0e4a 02       		.uleb128 0x2
 24380 0e4b 91       		.byte	0x91
 24381 0e4c 67       		.sleb128 -25
 24382 0e4d 14       		.uleb128 0x14
 24383 0e4e A0120000 		.4byte	.LASF29
 24384 0e52 01       		.byte	0x1
 24385 0e53 BE09     		.2byte	0x9be
 24386 0e55 64000000 		.4byte	0x64
 24387 0e59 02       		.uleb128 0x2
 24388 0e5a 91       		.byte	0x91
 24389 0e5b 6E       		.sleb128 -18
 24390 0e5c 14       		.uleb128 0x14
 24391 0e5d 2F010000 		.4byte	.LASF34
 24392 0e61 01       		.byte	0x1
 24393 0e62 C109     		.2byte	0x9c1
 24394 0e64 25000000 		.4byte	0x25
 24395 0e68 02       		.uleb128 0x2
 24396 0e69 91       		.byte	0x91
 24397 0e6a 6F       		.sleb128 -17
 24398 0e6b 00       		.byte	0
 24399 0e6c 12       		.uleb128 0x12
 24400 0e6d 35060000 		.4byte	.LASF105
 24401 0e71 01       		.byte	0x1
 24402 0e72 EF09     		.2byte	0x9ef
 24403 0e74 25000000 		.4byte	0x25
 24404 0e78 00000000 		.4byte	.LFB39
 24405 0e7c 6C000000 		.4byte	.LFE39-.LFB39
 24406 0e80 01       		.uleb128 0x1
 24407 0e81 9C       		.byte	0x9c
 24408 0e82 B40E0000 		.4byte	0xeb4
 24409 0e86 13       		.uleb128 0x13
 24410 0e87 40080000 		.4byte	.LASF106
 24411 0e8b 01       		.byte	0x1
 24412 0e8c EF09     		.2byte	0x9ef
 24413 0e8e 5F020000 		.4byte	0x25f
 24414 0e92 02       		.uleb128 0x2
 24415 0e93 91       		.byte	0x91
 24416 0e94 64       		.sleb128 -28
 24417 0e95 14       		.uleb128 0x14
 24418 0e96 A0120000 		.4byte	.LASF29
 24419 0e9a 01       		.byte	0x1
 24420 0e9b F109     		.2byte	0x9f1
 24421 0e9d 64000000 		.4byte	0x64
 24422 0ea1 02       		.uleb128 0x2
 24423 0ea2 91       		.byte	0x91
 24424 0ea3 6E       		.sleb128 -18
 24425 0ea4 14       		.uleb128 0x14
 24426 0ea5 2F010000 		.4byte	.LASF34
 24427 0ea9 01       		.byte	0x1
 24428 0eaa F409     		.2byte	0x9f4
 24429 0eac 25000000 		.4byte	0x25
 24430 0eb0 02       		.uleb128 0x2
 24431 0eb1 91       		.byte	0x91
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 591


 24432 0eb2 6F       		.sleb128 -17
 24433 0eb3 00       		.byte	0
 24434 0eb4 12       		.uleb128 0x12
 24435 0eb5 A8120000 		.4byte	.LASF107
 24436 0eb9 01       		.byte	0x1
 24437 0eba 1A0A     		.2byte	0xa1a
 24438 0ebc 25000000 		.4byte	0x25
 24439 0ec0 00000000 		.4byte	.LFB40
 24440 0ec4 B8000000 		.4byte	.LFE40-.LFB40
 24441 0ec8 01       		.uleb128 0x1
 24442 0ec9 9C       		.byte	0x9c
 24443 0eca FC0E0000 		.4byte	0xefc
 24444 0ece 13       		.uleb128 0x13
 24445 0ecf 40080000 		.4byte	.LASF106
 24446 0ed3 01       		.byte	0x1
 24447 0ed4 1A0A     		.2byte	0xa1a
 24448 0ed6 64000000 		.4byte	0x64
 24449 0eda 02       		.uleb128 0x2
 24450 0edb 91       		.byte	0x91
 24451 0edc 67       		.sleb128 -25
 24452 0edd 14       		.uleb128 0x14
 24453 0ede A0120000 		.4byte	.LASF29
 24454 0ee2 01       		.byte	0x1
 24455 0ee3 1C0A     		.2byte	0xa1c
 24456 0ee5 64000000 		.4byte	0x64
 24457 0ee9 02       		.uleb128 0x2
 24458 0eea 91       		.byte	0x91
 24459 0eeb 6E       		.sleb128 -18
 24460 0eec 14       		.uleb128 0x14
 24461 0eed 2F010000 		.4byte	.LASF34
 24462 0ef1 01       		.byte	0x1
 24463 0ef2 1F0A     		.2byte	0xa1f
 24464 0ef4 25000000 		.4byte	0x25
 24465 0ef8 02       		.uleb128 0x2
 24466 0ef9 91       		.byte	0x91
 24467 0efa 6F       		.sleb128 -17
 24468 0efb 00       		.byte	0
 24469 0efc 12       		.uleb128 0x12
 24470 0efd B20F0000 		.4byte	.LASF108
 24471 0f01 01       		.byte	0x1
 24472 0f02 520A     		.2byte	0xa52
 24473 0f04 25000000 		.4byte	0x25
 24474 0f08 00000000 		.4byte	.LFB41
 24475 0f0c 30010000 		.4byte	.LFE41-.LFB41
 24476 0f10 01       		.uleb128 0x1
 24477 0f11 9C       		.byte	0x9c
 24478 0f12 530F0000 		.4byte	0xf53
 24479 0f16 13       		.uleb128 0x13
 24480 0f17 820C0000 		.4byte	.LASF109
 24481 0f1b 01       		.byte	0x1
 24482 0f1c 520A     		.2byte	0xa52
 24483 0f1e 64000000 		.4byte	0x64
 24484 0f22 02       		.uleb128 0x2
 24485 0f23 91       		.byte	0x91
 24486 0f24 67       		.sleb128 -25
 24487 0f25 13       		.uleb128 0x13
 24488 0f26 460B0000 		.4byte	.LASF110
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 592


 24489 0f2a 01       		.byte	0x1
 24490 0f2b 530A     		.2byte	0xa53
 24491 0f2d 5F020000 		.4byte	0x25f
 24492 0f31 02       		.uleb128 0x2
 24493 0f32 91       		.byte	0x91
 24494 0f33 60       		.sleb128 -32
 24495 0f34 14       		.uleb128 0x14
 24496 0f35 A0120000 		.4byte	.LASF29
 24497 0f39 01       		.byte	0x1
 24498 0f3a 550A     		.2byte	0xa55
 24499 0f3c 64000000 		.4byte	0x64
 24500 0f40 02       		.uleb128 0x2
 24501 0f41 91       		.byte	0x91
 24502 0f42 6E       		.sleb128 -18
 24503 0f43 14       		.uleb128 0x14
 24504 0f44 2F010000 		.4byte	.LASF34
 24505 0f48 01       		.byte	0x1
 24506 0f49 580A     		.2byte	0xa58
 24507 0f4b 25000000 		.4byte	0x25
 24508 0f4f 02       		.uleb128 0x2
 24509 0f50 91       		.byte	0x91
 24510 0f51 6F       		.sleb128 -17
 24511 0f52 00       		.byte	0
 24512 0f53 12       		.uleb128 0x12
 24513 0f54 E4040000 		.4byte	.LASF111
 24514 0f58 01       		.byte	0x1
 24515 0f59 A40A     		.2byte	0xaa4
 24516 0f5b 25000000 		.4byte	0x25
 24517 0f5f 00000000 		.4byte	.LFB42
 24518 0f63 10020000 		.4byte	.LFE42-.LFB42
 24519 0f67 01       		.uleb128 0x1
 24520 0f68 9C       		.byte	0x9c
 24521 0f69 AA0F0000 		.4byte	0xfaa
 24522 0f6d 13       		.uleb128 0x13
 24523 0f6e 820C0000 		.4byte	.LASF109
 24524 0f72 01       		.byte	0x1
 24525 0f73 A40A     		.2byte	0xaa4
 24526 0f75 64000000 		.4byte	0x64
 24527 0f79 02       		.uleb128 0x2
 24528 0f7a 91       		.byte	0x91
 24529 0f7b 67       		.sleb128 -25
 24530 0f7c 13       		.uleb128 0x13
 24531 0f7d 460B0000 		.4byte	.LASF110
 24532 0f81 01       		.byte	0x1
 24533 0f82 A50A     		.2byte	0xaa5
 24534 0f84 64000000 		.4byte	0x64
 24535 0f88 02       		.uleb128 0x2
 24536 0f89 91       		.byte	0x91
 24537 0f8a 66       		.sleb128 -26
 24538 0f8b 14       		.uleb128 0x14
 24539 0f8c A0120000 		.4byte	.LASF29
 24540 0f90 01       		.byte	0x1
 24541 0f91 A70A     		.2byte	0xaa7
 24542 0f93 64000000 		.4byte	0x64
 24543 0f97 02       		.uleb128 0x2
 24544 0f98 91       		.byte	0x91
 24545 0f99 6E       		.sleb128 -18
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 593


 24546 0f9a 14       		.uleb128 0x14
 24547 0f9b 2F010000 		.4byte	.LASF34
 24548 0f9f 01       		.byte	0x1
 24549 0fa0 AA0A     		.2byte	0xaaa
 24550 0fa2 25000000 		.4byte	0x25
 24551 0fa6 02       		.uleb128 0x2
 24552 0fa7 91       		.byte	0x91
 24553 0fa8 6F       		.sleb128 -17
 24554 0fa9 00       		.byte	0
 24555 0faa 12       		.uleb128 0x12
 24556 0fab D2110000 		.4byte	.LASF112
 24557 0faf 01       		.byte	0x1
 24558 0fb0 0A0B     		.2byte	0xb0a
 24559 0fb2 25000000 		.4byte	0x25
 24560 0fb6 00000000 		.4byte	.LFB43
 24561 0fba B8000000 		.4byte	.LFE43-.LFB43
 24562 0fbe 01       		.uleb128 0x1
 24563 0fbf 9C       		.byte	0x9c
 24564 0fc0 01100000 		.4byte	0x1001
 24565 0fc4 13       		.uleb128 0x13
 24566 0fc5 820C0000 		.4byte	.LASF109
 24567 0fc9 01       		.byte	0x1
 24568 0fca 0A0B     		.2byte	0xb0a
 24569 0fcc 64000000 		.4byte	0x64
 24570 0fd0 02       		.uleb128 0x2
 24571 0fd1 91       		.byte	0x91
 24572 0fd2 67       		.sleb128 -25
 24573 0fd3 13       		.uleb128 0x13
 24574 0fd4 83140000 		.4byte	.LASF113
 24575 0fd8 01       		.byte	0x1
 24576 0fd9 0B0B     		.2byte	0xb0b
 24577 0fdb 5F020000 		.4byte	0x25f
 24578 0fdf 02       		.uleb128 0x2
 24579 0fe0 91       		.byte	0x91
 24580 0fe1 60       		.sleb128 -32
 24581 0fe2 14       		.uleb128 0x14
 24582 0fe3 A0120000 		.4byte	.LASF29
 24583 0fe7 01       		.byte	0x1
 24584 0fe8 0D0B     		.2byte	0xb0d
 24585 0fea 64000000 		.4byte	0x64
 24586 0fee 02       		.uleb128 0x2
 24587 0fef 91       		.byte	0x91
 24588 0ff0 6E       		.sleb128 -18
 24589 0ff1 14       		.uleb128 0x14
 24590 0ff2 2F010000 		.4byte	.LASF34
 24591 0ff6 01       		.byte	0x1
 24592 0ff7 100B     		.2byte	0xb10
 24593 0ff9 25000000 		.4byte	0x25
 24594 0ffd 02       		.uleb128 0x2
 24595 0ffe 91       		.byte	0x91
 24596 0fff 6F       		.sleb128 -17
 24597 1000 00       		.byte	0
 24598 1001 12       		.uleb128 0x12
 24599 1002 4B010000 		.4byte	.LASF114
 24600 1006 01       		.byte	0x1
 24601 1007 4C0B     		.2byte	0xb4c
 24602 1009 25000000 		.4byte	0x25
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 594


 24603 100d 00000000 		.4byte	.LFB44
 24604 1011 2C010000 		.4byte	.LFE44-.LFB44
 24605 1015 01       		.uleb128 0x1
 24606 1016 9C       		.byte	0x9c
 24607 1017 58100000 		.4byte	0x1058
 24608 101b 13       		.uleb128 0x13
 24609 101c 820C0000 		.4byte	.LASF109
 24610 1020 01       		.byte	0x1
 24611 1021 4C0B     		.2byte	0xb4c
 24612 1023 64000000 		.4byte	0x64
 24613 1027 02       		.uleb128 0x2
 24614 1028 91       		.byte	0x91
 24615 1029 67       		.sleb128 -25
 24616 102a 13       		.uleb128 0x13
 24617 102b AD130000 		.4byte	.LASF115
 24618 102f 01       		.byte	0x1
 24619 1030 4D0B     		.2byte	0xb4d
 24620 1032 64000000 		.4byte	0x64
 24621 1036 02       		.uleb128 0x2
 24622 1037 91       		.byte	0x91
 24623 1038 66       		.sleb128 -26
 24624 1039 14       		.uleb128 0x14
 24625 103a A0120000 		.4byte	.LASF29
 24626 103e 01       		.byte	0x1
 24627 103f 4F0B     		.2byte	0xb4f
 24628 1041 64000000 		.4byte	0x64
 24629 1045 02       		.uleb128 0x2
 24630 1046 91       		.byte	0x91
 24631 1047 6E       		.sleb128 -18
 24632 1048 14       		.uleb128 0x14
 24633 1049 2F010000 		.4byte	.LASF34
 24634 104d 01       		.byte	0x1
 24635 104e 520B     		.2byte	0xb52
 24636 1050 25000000 		.4byte	0x25
 24637 1054 02       		.uleb128 0x2
 24638 1055 91       		.byte	0x91
 24639 1056 6F       		.sleb128 -17
 24640 1057 00       		.byte	0
 24641 1058 12       		.uleb128 0x12
 24642 1059 12060000 		.4byte	.LASF116
 24643 105d 01       		.byte	0x1
 24644 105e 910B     		.2byte	0xb91
 24645 1060 25000000 		.4byte	0x25
 24646 1064 00000000 		.4byte	.LFB45
 24647 1068 C0000000 		.4byte	.LFE45-.LFB45
 24648 106c 01       		.uleb128 0x1
 24649 106d 9C       		.byte	0x9c
 24650 106e AF100000 		.4byte	0x10af
 24651 1072 13       		.uleb128 0x13
 24652 1073 820C0000 		.4byte	.LASF109
 24653 1077 01       		.byte	0x1
 24654 1078 910B     		.2byte	0xb91
 24655 107a 64000000 		.4byte	0x64
 24656 107e 02       		.uleb128 0x2
 24657 107f 91       		.byte	0x91
 24658 1080 67       		.sleb128 -25
 24659 1081 13       		.uleb128 0x13
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 595


 24660 1082 ED0E0000 		.4byte	.LASF117
 24661 1086 01       		.byte	0x1
 24662 1087 920B     		.2byte	0xb92
 24663 1089 5F020000 		.4byte	0x25f
 24664 108d 02       		.uleb128 0x2
 24665 108e 91       		.byte	0x91
 24666 108f 60       		.sleb128 -32
 24667 1090 14       		.uleb128 0x14
 24668 1091 A0120000 		.4byte	.LASF29
 24669 1095 01       		.byte	0x1
 24670 1096 940B     		.2byte	0xb94
 24671 1098 64000000 		.4byte	0x64
 24672 109c 02       		.uleb128 0x2
 24673 109d 91       		.byte	0x91
 24674 109e 6E       		.sleb128 -18
 24675 109f 14       		.uleb128 0x14
 24676 10a0 2F010000 		.4byte	.LASF34
 24677 10a4 01       		.byte	0x1
 24678 10a5 970B     		.2byte	0xb97
 24679 10a7 25000000 		.4byte	0x25
 24680 10ab 02       		.uleb128 0x2
 24681 10ac 91       		.byte	0x91
 24682 10ad 6F       		.sleb128 -17
 24683 10ae 00       		.byte	0
 24684 10af 12       		.uleb128 0x12
 24685 10b0 B9130000 		.4byte	.LASF118
 24686 10b4 01       		.byte	0x1
 24687 10b5 D00B     		.2byte	0xbd0
 24688 10b7 25000000 		.4byte	0x25
 24689 10bb 00000000 		.4byte	.LFB46
 24690 10bf 30010000 		.4byte	.LFE46-.LFB46
 24691 10c3 01       		.uleb128 0x1
 24692 10c4 9C       		.byte	0x9c
 24693 10c5 06110000 		.4byte	0x1106
 24694 10c9 13       		.uleb128 0x13
 24695 10ca 820C0000 		.4byte	.LASF109
 24696 10ce 01       		.byte	0x1
 24697 10cf D00B     		.2byte	0xbd0
 24698 10d1 64000000 		.4byte	0x64
 24699 10d5 02       		.uleb128 0x2
 24700 10d6 91       		.byte	0x91
 24701 10d7 67       		.sleb128 -25
 24702 10d8 13       		.uleb128 0x13
 24703 10d9 ED0E0000 		.4byte	.LASF117
 24704 10dd 01       		.byte	0x1
 24705 10de D10B     		.2byte	0xbd1
 24706 10e0 64000000 		.4byte	0x64
 24707 10e4 02       		.uleb128 0x2
 24708 10e5 91       		.byte	0x91
 24709 10e6 66       		.sleb128 -26
 24710 10e7 14       		.uleb128 0x14
 24711 10e8 A0120000 		.4byte	.LASF29
 24712 10ec 01       		.byte	0x1
 24713 10ed D30B     		.2byte	0xbd3
 24714 10ef 64000000 		.4byte	0x64
 24715 10f3 02       		.uleb128 0x2
 24716 10f4 91       		.byte	0x91
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 596


 24717 10f5 6E       		.sleb128 -18
 24718 10f6 14       		.uleb128 0x14
 24719 10f7 2F010000 		.4byte	.LASF34
 24720 10fb 01       		.byte	0x1
 24721 10fc D60B     		.2byte	0xbd6
 24722 10fe 25000000 		.4byte	0x25
 24723 1102 02       		.uleb128 0x2
 24724 1103 91       		.byte	0x91
 24725 1104 6F       		.sleb128 -17
 24726 1105 00       		.byte	0
 24727 1106 12       		.uleb128 0x12
 24728 1107 AD040000 		.4byte	.LASF119
 24729 110b 01       		.byte	0x1
 24730 110c 190C     		.2byte	0xc19
 24731 110e 25000000 		.4byte	0x25
 24732 1112 00000000 		.4byte	.LFB47
 24733 1116 C0000000 		.4byte	.LFE47-.LFB47
 24734 111a 01       		.uleb128 0x1
 24735 111b 9C       		.byte	0x9c
 24736 111c 5D110000 		.4byte	0x115d
 24737 1120 13       		.uleb128 0x13
 24738 1121 820C0000 		.4byte	.LASF109
 24739 1125 01       		.byte	0x1
 24740 1126 190C     		.2byte	0xc19
 24741 1128 64000000 		.4byte	0x64
 24742 112c 02       		.uleb128 0x2
 24743 112d 91       		.byte	0x91
 24744 112e 67       		.sleb128 -25
 24745 112f 13       		.uleb128 0x13
 24746 1130 F80B0000 		.4byte	.LASF120
 24747 1134 01       		.byte	0x1
 24748 1135 1A0C     		.2byte	0xc1a
 24749 1137 5F020000 		.4byte	0x25f
 24750 113b 02       		.uleb128 0x2
 24751 113c 91       		.byte	0x91
 24752 113d 60       		.sleb128 -32
 24753 113e 14       		.uleb128 0x14
 24754 113f A0120000 		.4byte	.LASF29
 24755 1143 01       		.byte	0x1
 24756 1144 1C0C     		.2byte	0xc1c
 24757 1146 64000000 		.4byte	0x64
 24758 114a 02       		.uleb128 0x2
 24759 114b 91       		.byte	0x91
 24760 114c 6E       		.sleb128 -18
 24761 114d 14       		.uleb128 0x14
 24762 114e 2F010000 		.4byte	.LASF34
 24763 1152 01       		.byte	0x1
 24764 1153 1F0C     		.2byte	0xc1f
 24765 1155 25000000 		.4byte	0x25
 24766 1159 02       		.uleb128 0x2
 24767 115a 91       		.byte	0x91
 24768 115b 6F       		.sleb128 -17
 24769 115c 00       		.byte	0
 24770 115d 12       		.uleb128 0x12
 24771 115e 5C0A0000 		.4byte	.LASF121
 24772 1162 01       		.byte	0x1
 24773 1163 5A0C     		.2byte	0xc5a
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 597


 24774 1165 25000000 		.4byte	0x25
 24775 1169 00000000 		.4byte	.LFB48
 24776 116d 30010000 		.4byte	.LFE48-.LFB48
 24777 1171 01       		.uleb128 0x1
 24778 1172 9C       		.byte	0x9c
 24779 1173 B4110000 		.4byte	0x11b4
 24780 1177 13       		.uleb128 0x13
 24781 1178 820C0000 		.4byte	.LASF109
 24782 117c 01       		.byte	0x1
 24783 117d 5A0C     		.2byte	0xc5a
 24784 117f 64000000 		.4byte	0x64
 24785 1183 02       		.uleb128 0x2
 24786 1184 91       		.byte	0x91
 24787 1185 67       		.sleb128 -25
 24788 1186 13       		.uleb128 0x13
 24789 1187 F80B0000 		.4byte	.LASF120
 24790 118b 01       		.byte	0x1
 24791 118c 5B0C     		.2byte	0xc5b
 24792 118e 64000000 		.4byte	0x64
 24793 1192 02       		.uleb128 0x2
 24794 1193 91       		.byte	0x91
 24795 1194 66       		.sleb128 -26
 24796 1195 14       		.uleb128 0x14
 24797 1196 A0120000 		.4byte	.LASF29
 24798 119a 01       		.byte	0x1
 24799 119b 5D0C     		.2byte	0xc5d
 24800 119d 64000000 		.4byte	0x64
 24801 11a1 02       		.uleb128 0x2
 24802 11a2 91       		.byte	0x91
 24803 11a3 6E       		.sleb128 -18
 24804 11a4 14       		.uleb128 0x14
 24805 11a5 2F010000 		.4byte	.LASF34
 24806 11a9 01       		.byte	0x1
 24807 11aa 600C     		.2byte	0xc60
 24808 11ac 25000000 		.4byte	0x25
 24809 11b0 02       		.uleb128 0x2
 24810 11b1 91       		.byte	0x91
 24811 11b2 6F       		.sleb128 -17
 24812 11b3 00       		.byte	0
 24813 11b4 12       		.uleb128 0x12
 24814 11b5 F1140000 		.4byte	.LASF122
 24815 11b9 01       		.byte	0x1
 24816 11ba A40C     		.2byte	0xca4
 24817 11bc 25000000 		.4byte	0x25
 24818 11c0 00000000 		.4byte	.LFB49
 24819 11c4 C0000000 		.4byte	.LFE49-.LFB49
 24820 11c8 01       		.uleb128 0x1
 24821 11c9 9C       		.byte	0x9c
 24822 11ca 0B120000 		.4byte	0x120b
 24823 11ce 13       		.uleb128 0x13
 24824 11cf 820C0000 		.4byte	.LASF109
 24825 11d3 01       		.byte	0x1
 24826 11d4 A40C     		.2byte	0xca4
 24827 11d6 64000000 		.4byte	0x64
 24828 11da 02       		.uleb128 0x2
 24829 11db 91       		.byte	0x91
 24830 11dc 67       		.sleb128 -25
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 598


 24831 11dd 13       		.uleb128 0x13
 24832 11de 35110000 		.4byte	.LASF123
 24833 11e2 01       		.byte	0x1
 24834 11e3 A50C     		.2byte	0xca5
 24835 11e5 5F020000 		.4byte	0x25f
 24836 11e9 02       		.uleb128 0x2
 24837 11ea 91       		.byte	0x91
 24838 11eb 60       		.sleb128 -32
 24839 11ec 14       		.uleb128 0x14
 24840 11ed A0120000 		.4byte	.LASF29
 24841 11f1 01       		.byte	0x1
 24842 11f2 A70C     		.2byte	0xca7
 24843 11f4 64000000 		.4byte	0x64
 24844 11f8 02       		.uleb128 0x2
 24845 11f9 91       		.byte	0x91
 24846 11fa 6E       		.sleb128 -18
 24847 11fb 14       		.uleb128 0x14
 24848 11fc 2F010000 		.4byte	.LASF34
 24849 1200 01       		.byte	0x1
 24850 1201 AA0C     		.2byte	0xcaa
 24851 1203 25000000 		.4byte	0x25
 24852 1207 02       		.uleb128 0x2
 24853 1208 91       		.byte	0x91
 24854 1209 6F       		.sleb128 -17
 24855 120a 00       		.byte	0
 24856 120b 12       		.uleb128 0x12
 24857 120c 96060000 		.4byte	.LASF124
 24858 1210 01       		.byte	0x1
 24859 1211 E60C     		.2byte	0xce6
 24860 1213 25000000 		.4byte	0x25
 24861 1217 00000000 		.4byte	.LFB50
 24862 121b 30010000 		.4byte	.LFE50-.LFB50
 24863 121f 01       		.uleb128 0x1
 24864 1220 9C       		.byte	0x9c
 24865 1221 62120000 		.4byte	0x1262
 24866 1225 13       		.uleb128 0x13
 24867 1226 820C0000 		.4byte	.LASF109
 24868 122a 01       		.byte	0x1
 24869 122b E60C     		.2byte	0xce6
 24870 122d 64000000 		.4byte	0x64
 24871 1231 02       		.uleb128 0x2
 24872 1232 91       		.byte	0x91
 24873 1233 67       		.sleb128 -25
 24874 1234 13       		.uleb128 0x13
 24875 1235 35110000 		.4byte	.LASF123
 24876 1239 01       		.byte	0x1
 24877 123a E70C     		.2byte	0xce7
 24878 123c 64000000 		.4byte	0x64
 24879 1240 02       		.uleb128 0x2
 24880 1241 91       		.byte	0x91
 24881 1242 66       		.sleb128 -26
 24882 1243 14       		.uleb128 0x14
 24883 1244 A0120000 		.4byte	.LASF29
 24884 1248 01       		.byte	0x1
 24885 1249 E90C     		.2byte	0xce9
 24886 124b 64000000 		.4byte	0x64
 24887 124f 02       		.uleb128 0x2
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 599


 24888 1250 91       		.byte	0x91
 24889 1251 6E       		.sleb128 -18
 24890 1252 14       		.uleb128 0x14
 24891 1253 2F010000 		.4byte	.LASF34
 24892 1257 01       		.byte	0x1
 24893 1258 EC0C     		.2byte	0xcec
 24894 125a 25000000 		.4byte	0x25
 24895 125e 02       		.uleb128 0x2
 24896 125f 91       		.byte	0x91
 24897 1260 6F       		.sleb128 -17
 24898 1261 00       		.byte	0
 24899 1262 12       		.uleb128 0x12
 24900 1263 B70D0000 		.4byte	.LASF125
 24901 1267 01       		.byte	0x1
 24902 1268 310D     		.2byte	0xd31
 24903 126a 25000000 		.4byte	0x25
 24904 126e 00000000 		.4byte	.LFB51
 24905 1272 C0000000 		.4byte	.LFE51-.LFB51
 24906 1276 01       		.uleb128 0x1
 24907 1277 9C       		.byte	0x9c
 24908 1278 B9120000 		.4byte	0x12b9
 24909 127c 13       		.uleb128 0x13
 24910 127d 820C0000 		.4byte	.LASF109
 24911 1281 01       		.byte	0x1
 24912 1282 310D     		.2byte	0xd31
 24913 1284 64000000 		.4byte	0x64
 24914 1288 02       		.uleb128 0x2
 24915 1289 91       		.byte	0x91
 24916 128a 67       		.sleb128 -25
 24917 128b 13       		.uleb128 0x13
 24918 128c F30D0000 		.4byte	.LASF126
 24919 1290 01       		.byte	0x1
 24920 1291 320D     		.2byte	0xd32
 24921 1293 5F020000 		.4byte	0x25f
 24922 1297 02       		.uleb128 0x2
 24923 1298 91       		.byte	0x91
 24924 1299 60       		.sleb128 -32
 24925 129a 14       		.uleb128 0x14
 24926 129b A0120000 		.4byte	.LASF29
 24927 129f 01       		.byte	0x1
 24928 12a0 340D     		.2byte	0xd34
 24929 12a2 64000000 		.4byte	0x64
 24930 12a6 02       		.uleb128 0x2
 24931 12a7 91       		.byte	0x91
 24932 12a8 6E       		.sleb128 -18
 24933 12a9 14       		.uleb128 0x14
 24934 12aa 2F010000 		.4byte	.LASF34
 24935 12ae 01       		.byte	0x1
 24936 12af 370D     		.2byte	0xd37
 24937 12b1 25000000 		.4byte	0x25
 24938 12b5 02       		.uleb128 0x2
 24939 12b6 91       		.byte	0x91
 24940 12b7 6F       		.sleb128 -17
 24941 12b8 00       		.byte	0
 24942 12b9 12       		.uleb128 0x12
 24943 12ba 320E0000 		.4byte	.LASF127
 24944 12be 01       		.byte	0x1
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 600


 24945 12bf 720D     		.2byte	0xd72
 24946 12c1 25000000 		.4byte	0x25
 24947 12c5 00000000 		.4byte	.LFB52
 24948 12c9 30010000 		.4byte	.LFE52-.LFB52
 24949 12cd 01       		.uleb128 0x1
 24950 12ce 9C       		.byte	0x9c
 24951 12cf 10130000 		.4byte	0x1310
 24952 12d3 13       		.uleb128 0x13
 24953 12d4 820C0000 		.4byte	.LASF109
 24954 12d8 01       		.byte	0x1
 24955 12d9 720D     		.2byte	0xd72
 24956 12db 64000000 		.4byte	0x64
 24957 12df 02       		.uleb128 0x2
 24958 12e0 91       		.byte	0x91
 24959 12e1 67       		.sleb128 -25
 24960 12e2 13       		.uleb128 0x13
 24961 12e3 F30D0000 		.4byte	.LASF126
 24962 12e7 01       		.byte	0x1
 24963 12e8 730D     		.2byte	0xd73
 24964 12ea 64000000 		.4byte	0x64
 24965 12ee 02       		.uleb128 0x2
 24966 12ef 91       		.byte	0x91
 24967 12f0 66       		.sleb128 -26
 24968 12f1 14       		.uleb128 0x14
 24969 12f2 A0120000 		.4byte	.LASF29
 24970 12f6 01       		.byte	0x1
 24971 12f7 750D     		.2byte	0xd75
 24972 12f9 64000000 		.4byte	0x64
 24973 12fd 02       		.uleb128 0x2
 24974 12fe 91       		.byte	0x91
 24975 12ff 6E       		.sleb128 -18
 24976 1300 14       		.uleb128 0x14
 24977 1301 2F010000 		.4byte	.LASF34
 24978 1305 01       		.byte	0x1
 24979 1306 780D     		.2byte	0xd78
 24980 1308 25000000 		.4byte	0x25
 24981 130c 02       		.uleb128 0x2
 24982 130d 91       		.byte	0x91
 24983 130e 6F       		.sleb128 -17
 24984 130f 00       		.byte	0
 24985 1310 12       		.uleb128 0x12
 24986 1311 0E120000 		.4byte	.LASF128
 24987 1315 01       		.byte	0x1
 24988 1316 BC0D     		.2byte	0xdbc
 24989 1318 25000000 		.4byte	0x25
 24990 131c 00000000 		.4byte	.LFB53
 24991 1320 C0000000 		.4byte	.LFE53-.LFB53
 24992 1324 01       		.uleb128 0x1
 24993 1325 9C       		.byte	0x9c
 24994 1326 67130000 		.4byte	0x1367
 24995 132a 13       		.uleb128 0x13
 24996 132b 820C0000 		.4byte	.LASF109
 24997 132f 01       		.byte	0x1
 24998 1330 BC0D     		.2byte	0xdbc
 24999 1332 64000000 		.4byte	0x64
 25000 1336 02       		.uleb128 0x2
 25001 1337 91       		.byte	0x91
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 601


 25002 1338 67       		.sleb128 -25
 25003 1339 13       		.uleb128 0x13
 25004 133a D0130000 		.4byte	.LASF129
 25005 133e 01       		.byte	0x1
 25006 133f BD0D     		.2byte	0xdbd
 25007 1341 5F020000 		.4byte	0x25f
 25008 1345 02       		.uleb128 0x2
 25009 1346 91       		.byte	0x91
 25010 1347 60       		.sleb128 -32
 25011 1348 14       		.uleb128 0x14
 25012 1349 A0120000 		.4byte	.LASF29
 25013 134d 01       		.byte	0x1
 25014 134e BF0D     		.2byte	0xdbf
 25015 1350 64000000 		.4byte	0x64
 25016 1354 02       		.uleb128 0x2
 25017 1355 91       		.byte	0x91
 25018 1356 6E       		.sleb128 -18
 25019 1357 14       		.uleb128 0x14
 25020 1358 2F010000 		.4byte	.LASF34
 25021 135c 01       		.byte	0x1
 25022 135d C20D     		.2byte	0xdc2
 25023 135f 25000000 		.4byte	0x25
 25024 1363 02       		.uleb128 0x2
 25025 1364 91       		.byte	0x91
 25026 1365 6F       		.sleb128 -17
 25027 1366 00       		.byte	0
 25028 1367 12       		.uleb128 0x12
 25029 1368 0F140000 		.4byte	.LASF130
 25030 136c 01       		.byte	0x1
 25031 136d FC0D     		.2byte	0xdfc
 25032 136f 25000000 		.4byte	0x25
 25033 1373 00000000 		.4byte	.LFB54
 25034 1377 30010000 		.4byte	.LFE54-.LFB54
 25035 137b 01       		.uleb128 0x1
 25036 137c 9C       		.byte	0x9c
 25037 137d BE130000 		.4byte	0x13be
 25038 1381 13       		.uleb128 0x13
 25039 1382 820C0000 		.4byte	.LASF109
 25040 1386 01       		.byte	0x1
 25041 1387 FC0D     		.2byte	0xdfc
 25042 1389 64000000 		.4byte	0x64
 25043 138d 02       		.uleb128 0x2
 25044 138e 91       		.byte	0x91
 25045 138f 67       		.sleb128 -25
 25046 1390 13       		.uleb128 0x13
 25047 1391 D0130000 		.4byte	.LASF129
 25048 1395 01       		.byte	0x1
 25049 1396 FD0D     		.2byte	0xdfd
 25050 1398 64000000 		.4byte	0x64
 25051 139c 02       		.uleb128 0x2
 25052 139d 91       		.byte	0x91
 25053 139e 66       		.sleb128 -26
 25054 139f 14       		.uleb128 0x14
 25055 13a0 A0120000 		.4byte	.LASF29
 25056 13a4 01       		.byte	0x1
 25057 13a5 FF0D     		.2byte	0xdff
 25058 13a7 64000000 		.4byte	0x64
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 602


 25059 13ab 02       		.uleb128 0x2
 25060 13ac 91       		.byte	0x91
 25061 13ad 6E       		.sleb128 -18
 25062 13ae 14       		.uleb128 0x14
 25063 13af 2F010000 		.4byte	.LASF34
 25064 13b3 01       		.byte	0x1
 25065 13b4 020E     		.2byte	0xe02
 25066 13b6 25000000 		.4byte	0x25
 25067 13ba 02       		.uleb128 0x2
 25068 13bb 91       		.byte	0x91
 25069 13bc 6F       		.sleb128 -17
 25070 13bd 00       		.byte	0
 25071 13be 12       		.uleb128 0x12
 25072 13bf EA100000 		.4byte	.LASF131
 25073 13c3 01       		.byte	0x1
 25074 13c4 440E     		.2byte	0xe44
 25075 13c6 25000000 		.4byte	0x25
 25076 13ca 00000000 		.4byte	.LFB55
 25077 13ce C0000000 		.4byte	.LFE55-.LFB55
 25078 13d2 01       		.uleb128 0x1
 25079 13d3 9C       		.byte	0x9c
 25080 13d4 15140000 		.4byte	0x1415
 25081 13d8 13       		.uleb128 0x13
 25082 13d9 820C0000 		.4byte	.LASF109
 25083 13dd 01       		.byte	0x1
 25084 13de 440E     		.2byte	0xe44
 25085 13e0 64000000 		.4byte	0x64
 25086 13e4 02       		.uleb128 0x2
 25087 13e5 91       		.byte	0x91
 25088 13e6 67       		.sleb128 -25
 25089 13e7 13       		.uleb128 0x13
 25090 13e8 7A060000 		.4byte	.LASF132
 25091 13ec 01       		.byte	0x1
 25092 13ed 450E     		.2byte	0xe45
 25093 13ef 5F020000 		.4byte	0x25f
 25094 13f3 02       		.uleb128 0x2
 25095 13f4 91       		.byte	0x91
 25096 13f5 60       		.sleb128 -32
 25097 13f6 14       		.uleb128 0x14
 25098 13f7 A0120000 		.4byte	.LASF29
 25099 13fb 01       		.byte	0x1
 25100 13fc 470E     		.2byte	0xe47
 25101 13fe 64000000 		.4byte	0x64
 25102 1402 02       		.uleb128 0x2
 25103 1403 91       		.byte	0x91
 25104 1404 6E       		.sleb128 -18
 25105 1405 14       		.uleb128 0x14
 25106 1406 2F010000 		.4byte	.LASF34
 25107 140a 01       		.byte	0x1
 25108 140b 4A0E     		.2byte	0xe4a
 25109 140d 25000000 		.4byte	0x25
 25110 1411 02       		.uleb128 0x2
 25111 1412 91       		.byte	0x91
 25112 1413 6F       		.sleb128 -17
 25113 1414 00       		.byte	0
 25114 1415 12       		.uleb128 0x12
 25115 1416 8D050000 		.4byte	.LASF133
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 603


 25116 141a 01       		.byte	0x1
 25117 141b 830E     		.2byte	0xe83
 25118 141d 25000000 		.4byte	0x25
 25119 1421 00000000 		.4byte	.LFB56
 25120 1425 30010000 		.4byte	.LFE56-.LFB56
 25121 1429 01       		.uleb128 0x1
 25122 142a 9C       		.byte	0x9c
 25123 142b 6C140000 		.4byte	0x146c
 25124 142f 13       		.uleb128 0x13
 25125 1430 820C0000 		.4byte	.LASF109
 25126 1434 01       		.byte	0x1
 25127 1435 830E     		.2byte	0xe83
 25128 1437 64000000 		.4byte	0x64
 25129 143b 02       		.uleb128 0x2
 25130 143c 91       		.byte	0x91
 25131 143d 67       		.sleb128 -25
 25132 143e 13       		.uleb128 0x13
 25133 143f 7A060000 		.4byte	.LASF132
 25134 1443 01       		.byte	0x1
 25135 1444 840E     		.2byte	0xe84
 25136 1446 64000000 		.4byte	0x64
 25137 144a 02       		.uleb128 0x2
 25138 144b 91       		.byte	0x91
 25139 144c 66       		.sleb128 -26
 25140 144d 14       		.uleb128 0x14
 25141 144e A0120000 		.4byte	.LASF29
 25142 1452 01       		.byte	0x1
 25143 1453 860E     		.2byte	0xe86
 25144 1455 64000000 		.4byte	0x64
 25145 1459 02       		.uleb128 0x2
 25146 145a 91       		.byte	0x91
 25147 145b 6E       		.sleb128 -18
 25148 145c 14       		.uleb128 0x14
 25149 145d 2F010000 		.4byte	.LASF34
 25150 1461 01       		.byte	0x1
 25151 1462 890E     		.2byte	0xe89
 25152 1464 25000000 		.4byte	0x25
 25153 1468 02       		.uleb128 0x2
 25154 1469 91       		.byte	0x91
 25155 146a 6F       		.sleb128 -17
 25156 146b 00       		.byte	0
 25157 146c 12       		.uleb128 0x12
 25158 146d 6B070000 		.4byte	.LASF134
 25159 1471 01       		.byte	0x1
 25160 1472 CC0E     		.2byte	0xecc
 25161 1474 25000000 		.4byte	0x25
 25162 1478 00000000 		.4byte	.LFB57
 25163 147c B4000000 		.4byte	.LFE57-.LFB57
 25164 1480 01       		.uleb128 0x1
 25165 1481 9C       		.byte	0x9c
 25166 1482 C3140000 		.4byte	0x14c3
 25167 1486 13       		.uleb128 0x13
 25168 1487 820C0000 		.4byte	.LASF109
 25169 148b 01       		.byte	0x1
 25170 148c CC0E     		.2byte	0xecc
 25171 148e 64000000 		.4byte	0x64
 25172 1492 02       		.uleb128 0x2
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 604


 25173 1493 91       		.byte	0x91
 25174 1494 67       		.sleb128 -25
 25175 1495 13       		.uleb128 0x13
 25176 1496 38120000 		.4byte	.LASF135
 25177 149a 01       		.byte	0x1
 25178 149b CD0E     		.2byte	0xecd
 25179 149d 5F020000 		.4byte	0x25f
 25180 14a1 02       		.uleb128 0x2
 25181 14a2 91       		.byte	0x91
 25182 14a3 60       		.sleb128 -32
 25183 14a4 14       		.uleb128 0x14
 25184 14a5 A0120000 		.4byte	.LASF29
 25185 14a9 01       		.byte	0x1
 25186 14aa CF0E     		.2byte	0xecf
 25187 14ac 64000000 		.4byte	0x64
 25188 14b0 02       		.uleb128 0x2
 25189 14b1 91       		.byte	0x91
 25190 14b2 6E       		.sleb128 -18
 25191 14b3 14       		.uleb128 0x14
 25192 14b4 2F010000 		.4byte	.LASF34
 25193 14b8 01       		.byte	0x1
 25194 14b9 D20E     		.2byte	0xed2
 25195 14bb 25000000 		.4byte	0x25
 25196 14bf 02       		.uleb128 0x2
 25197 14c0 91       		.byte	0x91
 25198 14c1 6F       		.sleb128 -17
 25199 14c2 00       		.byte	0
 25200 14c3 12       		.uleb128 0x12
 25201 14c4 BA100000 		.4byte	.LASF136
 25202 14c8 01       		.byte	0x1
 25203 14c9 0D0F     		.2byte	0xf0d
 25204 14cb 25000000 		.4byte	0x25
 25205 14cf 00000000 		.4byte	.LFB58
 25206 14d3 24010000 		.4byte	.LFE58-.LFB58
 25207 14d7 01       		.uleb128 0x1
 25208 14d8 9C       		.byte	0x9c
 25209 14d9 1A150000 		.4byte	0x151a
 25210 14dd 13       		.uleb128 0x13
 25211 14de 820C0000 		.4byte	.LASF109
 25212 14e2 01       		.byte	0x1
 25213 14e3 0D0F     		.2byte	0xf0d
 25214 14e5 64000000 		.4byte	0x64
 25215 14e9 02       		.uleb128 0x2
 25216 14ea 91       		.byte	0x91
 25217 14eb 67       		.sleb128 -25
 25218 14ec 13       		.uleb128 0x13
 25219 14ed 38120000 		.4byte	.LASF135
 25220 14f1 01       		.byte	0x1
 25221 14f2 0E0F     		.2byte	0xf0e
 25222 14f4 64000000 		.4byte	0x64
 25223 14f8 02       		.uleb128 0x2
 25224 14f9 91       		.byte	0x91
 25225 14fa 66       		.sleb128 -26
 25226 14fb 14       		.uleb128 0x14
 25227 14fc A0120000 		.4byte	.LASF29
 25228 1500 01       		.byte	0x1
 25229 1501 100F     		.2byte	0xf10
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 605


 25230 1503 64000000 		.4byte	0x64
 25231 1507 02       		.uleb128 0x2
 25232 1508 91       		.byte	0x91
 25233 1509 6E       		.sleb128 -18
 25234 150a 14       		.uleb128 0x14
 25235 150b 2F010000 		.4byte	.LASF34
 25236 150f 01       		.byte	0x1
 25237 1510 130F     		.2byte	0xf13
 25238 1512 25000000 		.4byte	0x25
 25239 1516 02       		.uleb128 0x2
 25240 1517 91       		.byte	0x91
 25241 1518 6F       		.sleb128 -17
 25242 1519 00       		.byte	0
 25243 151a 12       		.uleb128 0x12
 25244 151b E0060000 		.4byte	.LASF137
 25245 151f 01       		.byte	0x1
 25246 1520 550F     		.2byte	0xf55
 25247 1522 25000000 		.4byte	0x25
 25248 1526 00000000 		.4byte	.LFB59
 25249 152a B8000000 		.4byte	.LFE59-.LFB59
 25250 152e 01       		.uleb128 0x1
 25251 152f 9C       		.byte	0x9c
 25252 1530 71150000 		.4byte	0x1571
 25253 1534 13       		.uleb128 0x13
 25254 1535 820C0000 		.4byte	.LASF109
 25255 1539 01       		.byte	0x1
 25256 153a 550F     		.2byte	0xf55
 25257 153c 64000000 		.4byte	0x64
 25258 1540 02       		.uleb128 0x2
 25259 1541 91       		.byte	0x91
 25260 1542 67       		.sleb128 -25
 25261 1543 13       		.uleb128 0x13
 25262 1544 5C0D0000 		.4byte	.LASF138
 25263 1548 01       		.byte	0x1
 25264 1549 560F     		.2byte	0xf56
 25265 154b 5F020000 		.4byte	0x25f
 25266 154f 02       		.uleb128 0x2
 25267 1550 91       		.byte	0x91
 25268 1551 60       		.sleb128 -32
 25269 1552 14       		.uleb128 0x14
 25270 1553 A0120000 		.4byte	.LASF29
 25271 1557 01       		.byte	0x1
 25272 1558 580F     		.2byte	0xf58
 25273 155a 64000000 		.4byte	0x64
 25274 155e 02       		.uleb128 0x2
 25275 155f 91       		.byte	0x91
 25276 1560 6E       		.sleb128 -18
 25277 1561 14       		.uleb128 0x14
 25278 1562 2F010000 		.4byte	.LASF34
 25279 1566 01       		.byte	0x1
 25280 1567 5B0F     		.2byte	0xf5b
 25281 1569 25000000 		.4byte	0x25
 25282 156d 02       		.uleb128 0x2
 25283 156e 91       		.byte	0x91
 25284 156f 6F       		.sleb128 -17
 25285 1570 00       		.byte	0
 25286 1571 12       		.uleb128 0x12
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 606


 25287 1572 21110000 		.4byte	.LASF139
 25288 1576 01       		.byte	0x1
 25289 1577 950F     		.2byte	0xf95
 25290 1579 25000000 		.4byte	0x25
 25291 157d 00000000 		.4byte	.LFB60
 25292 1581 28010000 		.4byte	.LFE60-.LFB60
 25293 1585 01       		.uleb128 0x1
 25294 1586 9C       		.byte	0x9c
 25295 1587 C8150000 		.4byte	0x15c8
 25296 158b 13       		.uleb128 0x13
 25297 158c 820C0000 		.4byte	.LASF109
 25298 1590 01       		.byte	0x1
 25299 1591 950F     		.2byte	0xf95
 25300 1593 64000000 		.4byte	0x64
 25301 1597 02       		.uleb128 0x2
 25302 1598 91       		.byte	0x91
 25303 1599 67       		.sleb128 -25
 25304 159a 13       		.uleb128 0x13
 25305 159b 5C0D0000 		.4byte	.LASF138
 25306 159f 01       		.byte	0x1
 25307 15a0 960F     		.2byte	0xf96
 25308 15a2 64000000 		.4byte	0x64
 25309 15a6 02       		.uleb128 0x2
 25310 15a7 91       		.byte	0x91
 25311 15a8 66       		.sleb128 -26
 25312 15a9 14       		.uleb128 0x14
 25313 15aa A0120000 		.4byte	.LASF29
 25314 15ae 01       		.byte	0x1
 25315 15af 980F     		.2byte	0xf98
 25316 15b1 64000000 		.4byte	0x64
 25317 15b5 02       		.uleb128 0x2
 25318 15b6 91       		.byte	0x91
 25319 15b7 6E       		.sleb128 -18
 25320 15b8 14       		.uleb128 0x14
 25321 15b9 2F010000 		.4byte	.LASF34
 25322 15bd 01       		.byte	0x1
 25323 15be 9B0F     		.2byte	0xf9b
 25324 15c0 25000000 		.4byte	0x25
 25325 15c4 02       		.uleb128 0x2
 25326 15c5 91       		.byte	0x91
 25327 15c6 6F       		.sleb128 -17
 25328 15c7 00       		.byte	0
 25329 15c8 12       		.uleb128 0x12
 25330 15c9 B2050000 		.4byte	.LASF140
 25331 15cd 01       		.byte	0x1
 25332 15ce D40F     		.2byte	0xfd4
 25333 15d0 25000000 		.4byte	0x25
 25334 15d4 00000000 		.4byte	.LFB61
 25335 15d8 6C000000 		.4byte	.LFE61-.LFB61
 25336 15dc 01       		.uleb128 0x1
 25337 15dd 9C       		.byte	0x9c
 25338 15de 10160000 		.4byte	0x1610
 25339 15e2 13       		.uleb128 0x13
 25340 15e3 69060000 		.4byte	.LASF141
 25341 15e7 01       		.byte	0x1
 25342 15e8 D40F     		.2byte	0xfd4
 25343 15ea 5F020000 		.4byte	0x25f
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 607


 25344 15ee 02       		.uleb128 0x2
 25345 15ef 91       		.byte	0x91
 25346 15f0 64       		.sleb128 -28
 25347 15f1 14       		.uleb128 0x14
 25348 15f2 A0120000 		.4byte	.LASF29
 25349 15f6 01       		.byte	0x1
 25350 15f7 D60F     		.2byte	0xfd6
 25351 15f9 64000000 		.4byte	0x64
 25352 15fd 02       		.uleb128 0x2
 25353 15fe 91       		.byte	0x91
 25354 15ff 6E       		.sleb128 -18
 25355 1600 14       		.uleb128 0x14
 25356 1601 2F010000 		.4byte	.LASF34
 25357 1605 01       		.byte	0x1
 25358 1606 D90F     		.2byte	0xfd9
 25359 1608 25000000 		.4byte	0x25
 25360 160c 02       		.uleb128 0x2
 25361 160d 91       		.byte	0x91
 25362 160e 6F       		.sleb128 -17
 25363 160f 00       		.byte	0
 25364 1610 12       		.uleb128 0x12
 25365 1611 12080000 		.4byte	.LASF142
 25366 1615 01       		.byte	0x1
 25367 1616 FB0F     		.2byte	0xffb
 25368 1618 25000000 		.4byte	0x25
 25369 161c 00000000 		.4byte	.LFB62
 25370 1620 B8000000 		.4byte	.LFE62-.LFB62
 25371 1624 01       		.uleb128 0x1
 25372 1625 9C       		.byte	0x9c
 25373 1626 58160000 		.4byte	0x1658
 25374 162a 13       		.uleb128 0x13
 25375 162b 69060000 		.4byte	.LASF141
 25376 162f 01       		.byte	0x1
 25377 1630 FB0F     		.2byte	0xffb
 25378 1632 64000000 		.4byte	0x64
 25379 1636 02       		.uleb128 0x2
 25380 1637 91       		.byte	0x91
 25381 1638 67       		.sleb128 -25
 25382 1639 14       		.uleb128 0x14
 25383 163a A0120000 		.4byte	.LASF29
 25384 163e 01       		.byte	0x1
 25385 163f FD0F     		.2byte	0xffd
 25386 1641 64000000 		.4byte	0x64
 25387 1645 02       		.uleb128 0x2
 25388 1646 91       		.byte	0x91
 25389 1647 6E       		.sleb128 -18
 25390 1648 14       		.uleb128 0x14
 25391 1649 2F010000 		.4byte	.LASF34
 25392 164d 01       		.byte	0x1
 25393 164e 0010     		.2byte	0x1000
 25394 1650 25000000 		.4byte	0x25
 25395 1654 02       		.uleb128 0x2
 25396 1655 91       		.byte	0x91
 25397 1656 6F       		.sleb128 -17
 25398 1657 00       		.byte	0
 25399 1658 12       		.uleb128 0x12
 25400 1659 0D0F0000 		.4byte	.LASF143
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 608


 25401 165d 01       		.byte	0x1
 25402 165e 2B10     		.2byte	0x102b
 25403 1660 25000000 		.4byte	0x25
 25404 1664 00000000 		.4byte	.LFB63
 25405 1668 6C000000 		.4byte	.LFE63-.LFB63
 25406 166c 01       		.uleb128 0x1
 25407 166d 9C       		.byte	0x9c
 25408 166e A0160000 		.4byte	0x16a0
 25409 1672 13       		.uleb128 0x13
 25410 1673 060E0000 		.4byte	.LASF144
 25411 1677 01       		.byte	0x1
 25412 1678 2B10     		.2byte	0x102b
 25413 167a 5F020000 		.4byte	0x25f
 25414 167e 02       		.uleb128 0x2
 25415 167f 91       		.byte	0x91
 25416 1680 64       		.sleb128 -28
 25417 1681 14       		.uleb128 0x14
 25418 1682 A0120000 		.4byte	.LASF29
 25419 1686 01       		.byte	0x1
 25420 1687 2D10     		.2byte	0x102d
 25421 1689 64000000 		.4byte	0x64
 25422 168d 02       		.uleb128 0x2
 25423 168e 91       		.byte	0x91
 25424 168f 6E       		.sleb128 -18
 25425 1690 14       		.uleb128 0x14
 25426 1691 2F010000 		.4byte	.LASF34
 25427 1695 01       		.byte	0x1
 25428 1696 3010     		.2byte	0x1030
 25429 1698 25000000 		.4byte	0x25
 25430 169c 02       		.uleb128 0x2
 25431 169d 91       		.byte	0x91
 25432 169e 6F       		.sleb128 -17
 25433 169f 00       		.byte	0
 25434 16a0 12       		.uleb128 0x12
 25435 16a1 57120000 		.4byte	.LASF145
 25436 16a5 01       		.byte	0x1
 25437 16a6 5210     		.2byte	0x1052
 25438 16a8 25000000 		.4byte	0x25
 25439 16ac 00000000 		.4byte	.LFB64
 25440 16b0 B8000000 		.4byte	.LFE64-.LFB64
 25441 16b4 01       		.uleb128 0x1
 25442 16b5 9C       		.byte	0x9c
 25443 16b6 E8160000 		.4byte	0x16e8
 25444 16ba 13       		.uleb128 0x13
 25445 16bb 060E0000 		.4byte	.LASF144
 25446 16bf 01       		.byte	0x1
 25447 16c0 5210     		.2byte	0x1052
 25448 16c2 64000000 		.4byte	0x64
 25449 16c6 02       		.uleb128 0x2
 25450 16c7 91       		.byte	0x91
 25451 16c8 67       		.sleb128 -25
 25452 16c9 14       		.uleb128 0x14
 25453 16ca A0120000 		.4byte	.LASF29
 25454 16ce 01       		.byte	0x1
 25455 16cf 5410     		.2byte	0x1054
 25456 16d1 64000000 		.4byte	0x64
 25457 16d5 02       		.uleb128 0x2
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 609


 25458 16d6 91       		.byte	0x91
 25459 16d7 6E       		.sleb128 -18
 25460 16d8 14       		.uleb128 0x14
 25461 16d9 2F010000 		.4byte	.LASF34
 25462 16dd 01       		.byte	0x1
 25463 16de 5710     		.2byte	0x1057
 25464 16e0 25000000 		.4byte	0x25
 25465 16e4 02       		.uleb128 0x2
 25466 16e5 91       		.byte	0x91
 25467 16e6 6F       		.sleb128 -17
 25468 16e7 00       		.byte	0
 25469 16e8 12       		.uleb128 0x12
 25470 16e9 92040000 		.4byte	.LASF146
 25471 16ed 01       		.byte	0x1
 25472 16ee 8410     		.2byte	0x1084
 25473 16f0 25000000 		.4byte	0x25
 25474 16f4 00000000 		.4byte	.LFB65
 25475 16f8 6C000000 		.4byte	.LFE65-.LFB65
 25476 16fc 01       		.uleb128 0x1
 25477 16fd 9C       		.byte	0x9c
 25478 16fe 30170000 		.4byte	0x1730
 25479 1702 13       		.uleb128 0x13
 25480 1703 82030000 		.4byte	.LASF147
 25481 1707 01       		.byte	0x1
 25482 1708 8410     		.2byte	0x1084
 25483 170a 5F020000 		.4byte	0x25f
 25484 170e 02       		.uleb128 0x2
 25485 170f 91       		.byte	0x91
 25486 1710 64       		.sleb128 -28
 25487 1711 14       		.uleb128 0x14
 25488 1712 A0120000 		.4byte	.LASF29
 25489 1716 01       		.byte	0x1
 25490 1717 8610     		.2byte	0x1086
 25491 1719 64000000 		.4byte	0x64
 25492 171d 02       		.uleb128 0x2
 25493 171e 91       		.byte	0x91
 25494 171f 6E       		.sleb128 -18
 25495 1720 14       		.uleb128 0x14
 25496 1721 2F010000 		.4byte	.LASF34
 25497 1725 01       		.byte	0x1
 25498 1726 8910     		.2byte	0x1089
 25499 1728 25000000 		.4byte	0x25
 25500 172c 02       		.uleb128 0x2
 25501 172d 91       		.byte	0x91
 25502 172e 6F       		.sleb128 -17
 25503 172f 00       		.byte	0
 25504 1730 12       		.uleb128 0x12
 25505 1731 68140000 		.4byte	.LASF148
 25506 1735 01       		.byte	0x1
 25507 1736 AD10     		.2byte	0x10ad
 25508 1738 25000000 		.4byte	0x25
 25509 173c 00000000 		.4byte	.LFB66
 25510 1740 B8000000 		.4byte	.LFE66-.LFB66
 25511 1744 01       		.uleb128 0x1
 25512 1745 9C       		.byte	0x9c
 25513 1746 78170000 		.4byte	0x1778
 25514 174a 13       		.uleb128 0x13
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 610


 25515 174b 82030000 		.4byte	.LASF147
 25516 174f 01       		.byte	0x1
 25517 1750 AD10     		.2byte	0x10ad
 25518 1752 64000000 		.4byte	0x64
 25519 1756 02       		.uleb128 0x2
 25520 1757 91       		.byte	0x91
 25521 1758 67       		.sleb128 -25
 25522 1759 14       		.uleb128 0x14
 25523 175a A0120000 		.4byte	.LASF29
 25524 175e 01       		.byte	0x1
 25525 175f AF10     		.2byte	0x10af
 25526 1761 64000000 		.4byte	0x64
 25527 1765 02       		.uleb128 0x2
 25528 1766 91       		.byte	0x91
 25529 1767 6E       		.sleb128 -18
 25530 1768 14       		.uleb128 0x14
 25531 1769 2F010000 		.4byte	.LASF34
 25532 176d 01       		.byte	0x1
 25533 176e B210     		.2byte	0x10b2
 25534 1770 25000000 		.4byte	0x25
 25535 1774 02       		.uleb128 0x2
 25536 1775 91       		.byte	0x91
 25537 1776 6F       		.sleb128 -17
 25538 1777 00       		.byte	0
 25539 1778 12       		.uleb128 0x12
 25540 1779 D6140000 		.4byte	.LASF149
 25541 177d 01       		.byte	0x1
 25542 177e E010     		.2byte	0x10e0
 25543 1780 25000000 		.4byte	0x25
 25544 1784 00000000 		.4byte	.LFB67
 25545 1788 6C000000 		.4byte	.LFE67-.LFB67
 25546 178c 01       		.uleb128 0x1
 25547 178d 9C       		.byte	0x9c
 25548 178e C0170000 		.4byte	0x17c0
 25549 1792 13       		.uleb128 0x13
 25550 1793 94020000 		.4byte	.LASF150
 25551 1797 01       		.byte	0x1
 25552 1798 E010     		.2byte	0x10e0
 25553 179a 5F020000 		.4byte	0x25f
 25554 179e 02       		.uleb128 0x2
 25555 179f 91       		.byte	0x91
 25556 17a0 64       		.sleb128 -28
 25557 17a1 14       		.uleb128 0x14
 25558 17a2 A0120000 		.4byte	.LASF29
 25559 17a6 01       		.byte	0x1
 25560 17a7 E210     		.2byte	0x10e2
 25561 17a9 64000000 		.4byte	0x64
 25562 17ad 02       		.uleb128 0x2
 25563 17ae 91       		.byte	0x91
 25564 17af 6E       		.sleb128 -18
 25565 17b0 14       		.uleb128 0x14
 25566 17b1 2F010000 		.4byte	.LASF34
 25567 17b5 01       		.byte	0x1
 25568 17b6 E510     		.2byte	0x10e5
 25569 17b8 25000000 		.4byte	0x25
 25570 17bc 02       		.uleb128 0x2
 25571 17bd 91       		.byte	0x91
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 611


 25572 17be 6F       		.sleb128 -17
 25573 17bf 00       		.byte	0
 25574 17c0 12       		.uleb128 0x12
 25575 17c1 7C120000 		.4byte	.LASF151
 25576 17c5 01       		.byte	0x1
 25577 17c6 0A11     		.2byte	0x110a
 25578 17c8 25000000 		.4byte	0x25
 25579 17cc 00000000 		.4byte	.LFB68
 25580 17d0 B8000000 		.4byte	.LFE68-.LFB68
 25581 17d4 01       		.uleb128 0x1
 25582 17d5 9C       		.byte	0x9c
 25583 17d6 08180000 		.4byte	0x1808
 25584 17da 13       		.uleb128 0x13
 25585 17db 94020000 		.4byte	.LASF150
 25586 17df 01       		.byte	0x1
 25587 17e0 0A11     		.2byte	0x110a
 25588 17e2 64000000 		.4byte	0x64
 25589 17e6 02       		.uleb128 0x2
 25590 17e7 91       		.byte	0x91
 25591 17e8 67       		.sleb128 -25
 25592 17e9 14       		.uleb128 0x14
 25593 17ea A0120000 		.4byte	.LASF29
 25594 17ee 01       		.byte	0x1
 25595 17ef 0C11     		.2byte	0x110c
 25596 17f1 64000000 		.4byte	0x64
 25597 17f5 02       		.uleb128 0x2
 25598 17f6 91       		.byte	0x91
 25599 17f7 6E       		.sleb128 -18
 25600 17f8 14       		.uleb128 0x14
 25601 17f9 2F010000 		.4byte	.LASF34
 25602 17fd 01       		.byte	0x1
 25603 17fe 0F11     		.2byte	0x110f
 25604 1800 25000000 		.4byte	0x25
 25605 1804 02       		.uleb128 0x2
 25606 1805 91       		.byte	0x91
 25607 1806 6F       		.sleb128 -17
 25608 1807 00       		.byte	0
 25609 1808 12       		.uleb128 0x12
 25610 1809 92090000 		.4byte	.LASF152
 25611 180d 01       		.byte	0x1
 25612 180e 4611     		.2byte	0x1146
 25613 1810 25000000 		.4byte	0x25
 25614 1814 00000000 		.4byte	.LFB69
 25615 1818 98010000 		.4byte	.LFE69-.LFB69
 25616 181c 01       		.uleb128 0x1
 25617 181d 9C       		.byte	0x9c
 25618 181e 5F180000 		.4byte	0x185f
 25619 1822 13       		.uleb128 0x13
 25620 1823 820C0000 		.4byte	.LASF109
 25621 1827 01       		.byte	0x1
 25622 1828 4611     		.2byte	0x1146
 25623 182a 64000000 		.4byte	0x64
 25624 182e 02       		.uleb128 0x2
 25625 182f 91       		.byte	0x91
 25626 1830 67       		.sleb128 -25
 25627 1831 13       		.uleb128 0x13
 25628 1832 29120000 		.4byte	.LASF153
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 612


 25629 1836 01       		.byte	0x1
 25630 1837 4711     		.2byte	0x1147
 25631 1839 5F020000 		.4byte	0x25f
 25632 183d 02       		.uleb128 0x2
 25633 183e 91       		.byte	0x91
 25634 183f 60       		.sleb128 -32
 25635 1840 14       		.uleb128 0x14
 25636 1841 A0120000 		.4byte	.LASF29
 25637 1845 01       		.byte	0x1
 25638 1846 4911     		.2byte	0x1149
 25639 1848 64000000 		.4byte	0x64
 25640 184c 02       		.uleb128 0x2
 25641 184d 91       		.byte	0x91
 25642 184e 6E       		.sleb128 -18
 25643 184f 14       		.uleb128 0x14
 25644 1850 2F010000 		.4byte	.LASF34
 25645 1854 01       		.byte	0x1
 25646 1855 4C11     		.2byte	0x114c
 25647 1857 25000000 		.4byte	0x25
 25648 185b 02       		.uleb128 0x2
 25649 185c 91       		.byte	0x91
 25650 185d 6F       		.sleb128 -17
 25651 185e 00       		.byte	0
 25652 185f 12       		.uleb128 0x12
 25653 1860 CF0B0000 		.4byte	.LASF154
 25654 1864 01       		.byte	0x1
 25655 1865 A711     		.2byte	0x11a7
 25656 1867 25000000 		.4byte	0x25
 25657 186b 00000000 		.4byte	.LFB70
 25658 186f E4020000 		.4byte	.LFE70-.LFB70
 25659 1873 01       		.uleb128 0x1
 25660 1874 9C       		.byte	0x9c
 25661 1875 B6180000 		.4byte	0x18b6
 25662 1879 13       		.uleb128 0x13
 25663 187a 820C0000 		.4byte	.LASF109
 25664 187e 01       		.byte	0x1
 25665 187f A711     		.2byte	0x11a7
 25666 1881 64000000 		.4byte	0x64
 25667 1885 02       		.uleb128 0x2
 25668 1886 91       		.byte	0x91
 25669 1887 67       		.sleb128 -25
 25670 1888 13       		.uleb128 0x13
 25671 1889 29120000 		.4byte	.LASF153
 25672 188d 01       		.byte	0x1
 25673 188e A811     		.2byte	0x11a8
 25674 1890 64000000 		.4byte	0x64
 25675 1894 02       		.uleb128 0x2
 25676 1895 91       		.byte	0x91
 25677 1896 66       		.sleb128 -26
 25678 1897 14       		.uleb128 0x14
 25679 1898 A0120000 		.4byte	.LASF29
 25680 189c 01       		.byte	0x1
 25681 189d AA11     		.2byte	0x11aa
 25682 189f 64000000 		.4byte	0x64
 25683 18a3 02       		.uleb128 0x2
 25684 18a4 91       		.byte	0x91
 25685 18a5 6E       		.sleb128 -18
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 613


 25686 18a6 14       		.uleb128 0x14
 25687 18a7 2F010000 		.4byte	.LASF34
 25688 18ab 01       		.byte	0x1
 25689 18ac AD11     		.2byte	0x11ad
 25690 18ae 25000000 		.4byte	0x25
 25691 18b2 02       		.uleb128 0x2
 25692 18b3 91       		.byte	0x91
 25693 18b4 6F       		.sleb128 -17
 25694 18b5 00       		.byte	0
 25695 18b6 12       		.uleb128 0x12
 25696 18b7 7E110000 		.4byte	.LASF155
 25697 18bb 01       		.byte	0x1
 25698 18bc 1D12     		.2byte	0x121d
 25699 18be 25000000 		.4byte	0x25
 25700 18c2 00000000 		.4byte	.LFB71
 25701 18c6 C4000000 		.4byte	.LFE71-.LFB71
 25702 18ca 01       		.uleb128 0x1
 25703 18cb 9C       		.byte	0x9c
 25704 18cc 0D190000 		.4byte	0x190d
 25705 18d0 13       		.uleb128 0x13
 25706 18d1 820C0000 		.4byte	.LASF109
 25707 18d5 01       		.byte	0x1
 25708 18d6 1D12     		.2byte	0x121d
 25709 18d8 64000000 		.4byte	0x64
 25710 18dc 02       		.uleb128 0x2
 25711 18dd 91       		.byte	0x91
 25712 18de 67       		.sleb128 -25
 25713 18df 13       		.uleb128 0x13
 25714 18e0 79050000 		.4byte	.LASF156
 25715 18e4 01       		.byte	0x1
 25716 18e5 1E12     		.2byte	0x121e
 25717 18e7 5F020000 		.4byte	0x25f
 25718 18eb 02       		.uleb128 0x2
 25719 18ec 91       		.byte	0x91
 25720 18ed 60       		.sleb128 -32
 25721 18ee 14       		.uleb128 0x14
 25722 18ef A0120000 		.4byte	.LASF29
 25723 18f3 01       		.byte	0x1
 25724 18f4 2012     		.2byte	0x1220
 25725 18f6 64000000 		.4byte	0x64
 25726 18fa 02       		.uleb128 0x2
 25727 18fb 91       		.byte	0x91
 25728 18fc 6E       		.sleb128 -18
 25729 18fd 14       		.uleb128 0x14
 25730 18fe 2F010000 		.4byte	.LASF34
 25731 1902 01       		.byte	0x1
 25732 1903 2312     		.2byte	0x1223
 25733 1905 25000000 		.4byte	0x25
 25734 1909 02       		.uleb128 0x2
 25735 190a 91       		.byte	0x91
 25736 190b 6F       		.sleb128 -17
 25737 190c 00       		.byte	0
 25738 190d 12       		.uleb128 0x12
 25739 190e F30F0000 		.4byte	.LASF157
 25740 1912 01       		.byte	0x1
 25741 1913 5B12     		.2byte	0x125b
 25742 1915 25000000 		.4byte	0x25
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 614


 25743 1919 00000000 		.4byte	.LFB72
 25744 191d 34010000 		.4byte	.LFE72-.LFB72
 25745 1921 01       		.uleb128 0x1
 25746 1922 9C       		.byte	0x9c
 25747 1923 64190000 		.4byte	0x1964
 25748 1927 13       		.uleb128 0x13
 25749 1928 820C0000 		.4byte	.LASF109
 25750 192c 01       		.byte	0x1
 25751 192d 5B12     		.2byte	0x125b
 25752 192f 64000000 		.4byte	0x64
 25753 1933 02       		.uleb128 0x2
 25754 1934 91       		.byte	0x91
 25755 1935 67       		.sleb128 -25
 25756 1936 13       		.uleb128 0x13
 25757 1937 79050000 		.4byte	.LASF156
 25758 193b 01       		.byte	0x1
 25759 193c 5C12     		.2byte	0x125c
 25760 193e 64000000 		.4byte	0x64
 25761 1942 02       		.uleb128 0x2
 25762 1943 91       		.byte	0x91
 25763 1944 66       		.sleb128 -26
 25764 1945 14       		.uleb128 0x14
 25765 1946 A0120000 		.4byte	.LASF29
 25766 194a 01       		.byte	0x1
 25767 194b 5E12     		.2byte	0x125e
 25768 194d 64000000 		.4byte	0x64
 25769 1951 02       		.uleb128 0x2
 25770 1952 91       		.byte	0x91
 25771 1953 6E       		.sleb128 -18
 25772 1954 14       		.uleb128 0x14
 25773 1955 2F010000 		.4byte	.LASF34
 25774 1959 01       		.byte	0x1
 25775 195a 6112     		.2byte	0x1261
 25776 195c 25000000 		.4byte	0x25
 25777 1960 02       		.uleb128 0x2
 25778 1961 91       		.byte	0x91
 25779 1962 6F       		.sleb128 -17
 25780 1963 00       		.byte	0
 25781 1964 12       		.uleb128 0x12
 25782 1965 8A130000 		.4byte	.LASF158
 25783 1969 01       		.byte	0x1
 25784 196a A012     		.2byte	0x12a0
 25785 196c 25000000 		.4byte	0x25
 25786 1970 00000000 		.4byte	.LFB73
 25787 1974 C0000000 		.4byte	.LFE73-.LFB73
 25788 1978 01       		.uleb128 0x1
 25789 1979 9C       		.byte	0x9c
 25790 197a BB190000 		.4byte	0x19bb
 25791 197e 13       		.uleb128 0x13
 25792 197f 820C0000 		.4byte	.LASF109
 25793 1983 01       		.byte	0x1
 25794 1984 A012     		.2byte	0x12a0
 25795 1986 64000000 		.4byte	0x64
 25796 198a 02       		.uleb128 0x2
 25797 198b 91       		.byte	0x91
 25798 198c 67       		.sleb128 -25
 25799 198d 13       		.uleb128 0x13
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 615


 25800 198e DC100000 		.4byte	.LASF159
 25801 1992 01       		.byte	0x1
 25802 1993 A112     		.2byte	0x12a1
 25803 1995 5F020000 		.4byte	0x25f
 25804 1999 02       		.uleb128 0x2
 25805 199a 91       		.byte	0x91
 25806 199b 60       		.sleb128 -32
 25807 199c 14       		.uleb128 0x14
 25808 199d A0120000 		.4byte	.LASF29
 25809 19a1 01       		.byte	0x1
 25810 19a2 A312     		.2byte	0x12a3
 25811 19a4 64000000 		.4byte	0x64
 25812 19a8 02       		.uleb128 0x2
 25813 19a9 91       		.byte	0x91
 25814 19aa 6E       		.sleb128 -18
 25815 19ab 14       		.uleb128 0x14
 25816 19ac 2F010000 		.4byte	.LASF34
 25817 19b0 01       		.byte	0x1
 25818 19b1 A612     		.2byte	0x12a6
 25819 19b3 25000000 		.4byte	0x25
 25820 19b7 02       		.uleb128 0x2
 25821 19b8 91       		.byte	0x91
 25822 19b9 6F       		.sleb128 -17
 25823 19ba 00       		.byte	0
 25824 19bb 12       		.uleb128 0x12
 25825 19bc F1020000 		.4byte	.LASF160
 25826 19c0 01       		.byte	0x1
 25827 19c1 DD12     		.2byte	0x12dd
 25828 19c3 25000000 		.4byte	0x25
 25829 19c7 00000000 		.4byte	.LFB74
 25830 19cb 34010000 		.4byte	.LFE74-.LFB74
 25831 19cf 01       		.uleb128 0x1
 25832 19d0 9C       		.byte	0x9c
 25833 19d1 121A0000 		.4byte	0x1a12
 25834 19d5 13       		.uleb128 0x13
 25835 19d6 820C0000 		.4byte	.LASF109
 25836 19da 01       		.byte	0x1
 25837 19db DD12     		.2byte	0x12dd
 25838 19dd 64000000 		.4byte	0x64
 25839 19e1 02       		.uleb128 0x2
 25840 19e2 91       		.byte	0x91
 25841 19e3 67       		.sleb128 -25
 25842 19e4 13       		.uleb128 0x13
 25843 19e5 DC100000 		.4byte	.LASF159
 25844 19e9 01       		.byte	0x1
 25845 19ea DE12     		.2byte	0x12de
 25846 19ec 64000000 		.4byte	0x64
 25847 19f0 02       		.uleb128 0x2
 25848 19f1 91       		.byte	0x91
 25849 19f2 66       		.sleb128 -26
 25850 19f3 14       		.uleb128 0x14
 25851 19f4 A0120000 		.4byte	.LASF29
 25852 19f8 01       		.byte	0x1
 25853 19f9 E012     		.2byte	0x12e0
 25854 19fb 64000000 		.4byte	0x64
 25855 19ff 02       		.uleb128 0x2
 25856 1a00 91       		.byte	0x91
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 616


 25857 1a01 6E       		.sleb128 -18
 25858 1a02 14       		.uleb128 0x14
 25859 1a03 2F010000 		.4byte	.LASF34
 25860 1a07 01       		.byte	0x1
 25861 1a08 E312     		.2byte	0x12e3
 25862 1a0a 25000000 		.4byte	0x25
 25863 1a0e 02       		.uleb128 0x2
 25864 1a0f 91       		.byte	0x91
 25865 1a10 6F       		.sleb128 -17
 25866 1a11 00       		.byte	0
 25867 1a12 12       		.uleb128 0x12
 25868 1a13 30150000 		.4byte	.LASF161
 25869 1a17 01       		.byte	0x1
 25870 1a18 1C13     		.2byte	0x131c
 25871 1a1a 25000000 		.4byte	0x25
 25872 1a1e 00000000 		.4byte	.LFB75
 25873 1a22 A0000000 		.4byte	.LFE75-.LFB75
 25874 1a26 01       		.uleb128 0x1
 25875 1a27 9C       		.byte	0x9c
 25876 1a28 5A1A0000 		.4byte	0x1a5a
 25877 1a2c 13       		.uleb128 0x13
 25878 1a2d 8E010000 		.4byte	.LASF162
 25879 1a31 01       		.byte	0x1
 25880 1a32 1C13     		.2byte	0x131c
 25881 1a34 64000000 		.4byte	0x64
 25882 1a38 02       		.uleb128 0x2
 25883 1a39 91       		.byte	0x91
 25884 1a3a 67       		.sleb128 -25
 25885 1a3b 14       		.uleb128 0x14
 25886 1a3c A0120000 		.4byte	.LASF29
 25887 1a40 01       		.byte	0x1
 25888 1a41 1E13     		.2byte	0x131e
 25889 1a43 64000000 		.4byte	0x64
 25890 1a47 02       		.uleb128 0x2
 25891 1a48 91       		.byte	0x91
 25892 1a49 6E       		.sleb128 -18
 25893 1a4a 14       		.uleb128 0x14
 25894 1a4b 2F010000 		.4byte	.LASF34
 25895 1a4f 01       		.byte	0x1
 25896 1a50 2113     		.2byte	0x1321
 25897 1a52 25000000 		.4byte	0x25
 25898 1a56 02       		.uleb128 0x2
 25899 1a57 91       		.byte	0x91
 25900 1a58 6F       		.sleb128 -17
 25901 1a59 00       		.byte	0
 25902 1a5a 12       		.uleb128 0x12
 25903 1a5b FD090000 		.4byte	.LASF163
 25904 1a5f 01       		.byte	0x1
 25905 1a60 5113     		.2byte	0x1351
 25906 1a62 25000000 		.4byte	0x25
 25907 1a66 00000000 		.4byte	.LFB76
 25908 1a6a 68000000 		.4byte	.LFE76-.LFB76
 25909 1a6e 01       		.uleb128 0x1
 25910 1a6f 9C       		.byte	0x9c
 25911 1a70 A21A0000 		.4byte	0x1aa2
 25912 1a74 13       		.uleb128 0x13
 25913 1a75 A4050000 		.4byte	.LASF164
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 617


 25914 1a79 01       		.byte	0x1
 25915 1a7a 5113     		.2byte	0x1351
 25916 1a7c 5F020000 		.4byte	0x25f
 25917 1a80 02       		.uleb128 0x2
 25918 1a81 91       		.byte	0x91
 25919 1a82 64       		.sleb128 -28
 25920 1a83 14       		.uleb128 0x14
 25921 1a84 A0120000 		.4byte	.LASF29
 25922 1a88 01       		.byte	0x1
 25923 1a89 5313     		.2byte	0x1353
 25924 1a8b 64000000 		.4byte	0x64
 25925 1a8f 02       		.uleb128 0x2
 25926 1a90 91       		.byte	0x91
 25927 1a91 6E       		.sleb128 -18
 25928 1a92 14       		.uleb128 0x14
 25929 1a93 2F010000 		.4byte	.LASF34
 25930 1a97 01       		.byte	0x1
 25931 1a98 5613     		.2byte	0x1356
 25932 1a9a 25000000 		.4byte	0x25
 25933 1a9e 02       		.uleb128 0x2
 25934 1a9f 91       		.byte	0x91
 25935 1aa0 6F       		.sleb128 -17
 25936 1aa1 00       		.byte	0
 25937 1aa2 12       		.uleb128 0x12
 25938 1aa3 61010000 		.4byte	.LASF165
 25939 1aa7 01       		.byte	0x1
 25940 1aa8 8513     		.2byte	0x1385
 25941 1aaa 25000000 		.4byte	0x25
 25942 1aae 00000000 		.4byte	.LFB77
 25943 1ab2 7C010000 		.4byte	.LFE77-.LFB77
 25944 1ab6 01       		.uleb128 0x1
 25945 1ab7 9C       		.byte	0x9c
 25946 1ab8 F91A0000 		.4byte	0x1af9
 25947 1abc 13       		.uleb128 0x13
 25948 1abd A4050000 		.4byte	.LASF164
 25949 1ac1 01       		.byte	0x1
 25950 1ac2 8513     		.2byte	0x1385
 25951 1ac4 64000000 		.4byte	0x64
 25952 1ac8 02       		.uleb128 0x2
 25953 1ac9 91       		.byte	0x91
 25954 1aca 67       		.sleb128 -25
 25955 1acb 14       		.uleb128 0x14
 25956 1acc A0120000 		.4byte	.LASF29
 25957 1ad0 01       		.byte	0x1
 25958 1ad1 8713     		.2byte	0x1387
 25959 1ad3 64000000 		.4byte	0x64
 25960 1ad7 02       		.uleb128 0x2
 25961 1ad8 91       		.byte	0x91
 25962 1ad9 6D       		.sleb128 -19
 25963 1ada 14       		.uleb128 0x14
 25964 1adb 2F010000 		.4byte	.LASF34
 25965 1adf 01       		.byte	0x1
 25966 1ae0 8A13     		.2byte	0x138a
 25967 1ae2 25000000 		.4byte	0x25
 25968 1ae6 02       		.uleb128 0x2
 25969 1ae7 91       		.byte	0x91
 25970 1ae8 6F       		.sleb128 -17
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 618


 25971 1ae9 14       		.uleb128 0x14
 25972 1aea DA020000 		.4byte	.LASF166
 25973 1aee 01       		.byte	0x1
 25974 1aef 8B13     		.2byte	0x138b
 25975 1af1 64000000 		.4byte	0x64
 25976 1af5 02       		.uleb128 0x2
 25977 1af6 91       		.byte	0x91
 25978 1af7 6E       		.sleb128 -18
 25979 1af8 00       		.byte	0
 25980 1af9 12       		.uleb128 0x12
 25981 1afa 0B0B0000 		.4byte	.LASF167
 25982 1afe 01       		.byte	0x1
 25983 1aff 1A14     		.2byte	0x141a
 25984 1b01 25000000 		.4byte	0x25
 25985 1b05 00000000 		.4byte	.LFB78
 25986 1b09 18010000 		.4byte	.LFE78-.LFB78
 25987 1b0d 01       		.uleb128 0x1
 25988 1b0e 9C       		.byte	0x9c
 25989 1b0f 501B0000 		.4byte	0x1b50
 25990 1b13 13       		.uleb128 0x13
 25991 1b14 820C0000 		.4byte	.LASF109
 25992 1b18 01       		.byte	0x1
 25993 1b19 1A14     		.2byte	0x141a
 25994 1b1b 64000000 		.4byte	0x64
 25995 1b1f 02       		.uleb128 0x2
 25996 1b20 91       		.byte	0x91
 25997 1b21 67       		.sleb128 -25
 25998 1b22 13       		.uleb128 0x13
 25999 1b23 62080000 		.4byte	.LASF168
 26000 1b27 01       		.byte	0x1
 26001 1b28 1B14     		.2byte	0x141b
 26002 1b2a 5F020000 		.4byte	0x25f
 26003 1b2e 02       		.uleb128 0x2
 26004 1b2f 91       		.byte	0x91
 26005 1b30 60       		.sleb128 -32
 26006 1b31 14       		.uleb128 0x14
 26007 1b32 A0120000 		.4byte	.LASF29
 26008 1b36 01       		.byte	0x1
 26009 1b37 1D14     		.2byte	0x141d
 26010 1b39 64000000 		.4byte	0x64
 26011 1b3d 02       		.uleb128 0x2
 26012 1b3e 91       		.byte	0x91
 26013 1b3f 6E       		.sleb128 -18
 26014 1b40 14       		.uleb128 0x14
 26015 1b41 2F010000 		.4byte	.LASF34
 26016 1b45 01       		.byte	0x1
 26017 1b46 2014     		.2byte	0x1420
 26018 1b48 25000000 		.4byte	0x25
 26019 1b4c 02       		.uleb128 0x2
 26020 1b4d 91       		.byte	0x91
 26021 1b4e 6F       		.sleb128 -17
 26022 1b4f 00       		.byte	0
 26023 1b50 12       		.uleb128 0x12
 26024 1b51 06040000 		.4byte	.LASF169
 26025 1b55 01       		.byte	0x1
 26026 1b56 7514     		.2byte	0x1475
 26027 1b58 25000000 		.4byte	0x25
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 619


 26028 1b5c 00000000 		.4byte	.LFB79
 26029 1b60 78010000 		.4byte	.LFE79-.LFB79
 26030 1b64 01       		.uleb128 0x1
 26031 1b65 9C       		.byte	0x9c
 26032 1b66 A71B0000 		.4byte	0x1ba7
 26033 1b6a 13       		.uleb128 0x13
 26034 1b6b 820C0000 		.4byte	.LASF109
 26035 1b6f 01       		.byte	0x1
 26036 1b70 7514     		.2byte	0x1475
 26037 1b72 64000000 		.4byte	0x64
 26038 1b76 02       		.uleb128 0x2
 26039 1b77 91       		.byte	0x91
 26040 1b78 67       		.sleb128 -25
 26041 1b79 13       		.uleb128 0x13
 26042 1b7a 62080000 		.4byte	.LASF168
 26043 1b7e 01       		.byte	0x1
 26044 1b7f 7614     		.2byte	0x1476
 26045 1b81 64000000 		.4byte	0x64
 26046 1b85 02       		.uleb128 0x2
 26047 1b86 91       		.byte	0x91
 26048 1b87 66       		.sleb128 -26
 26049 1b88 14       		.uleb128 0x14
 26050 1b89 A0120000 		.4byte	.LASF29
 26051 1b8d 01       		.byte	0x1
 26052 1b8e 7814     		.2byte	0x1478
 26053 1b90 64000000 		.4byte	0x64
 26054 1b94 02       		.uleb128 0x2
 26055 1b95 91       		.byte	0x91
 26056 1b96 6E       		.sleb128 -18
 26057 1b97 14       		.uleb128 0x14
 26058 1b98 2F010000 		.4byte	.LASF34
 26059 1b9c 01       		.byte	0x1
 26060 1b9d 7B14     		.2byte	0x147b
 26061 1b9f 25000000 		.4byte	0x25
 26062 1ba3 02       		.uleb128 0x2
 26063 1ba4 91       		.byte	0x91
 26064 1ba5 6F       		.sleb128 -17
 26065 1ba6 00       		.byte	0
 26066 1ba7 12       		.uleb128 0x12
 26067 1ba8 FC0E0000 		.4byte	.LASF170
 26068 1bac 01       		.byte	0x1
 26069 1bad EB14     		.2byte	0x14eb
 26070 1baf 25000000 		.4byte	0x25
 26071 1bb3 00000000 		.4byte	.LFB80
 26072 1bb7 0C010000 		.4byte	.LFE80-.LFB80
 26073 1bbb 01       		.uleb128 0x1
 26074 1bbc 9C       		.byte	0x9c
 26075 1bbd FE1B0000 		.4byte	0x1bfe
 26076 1bc1 13       		.uleb128 0x13
 26077 1bc2 820C0000 		.4byte	.LASF109
 26078 1bc6 01       		.byte	0x1
 26079 1bc7 EB14     		.2byte	0x14eb
 26080 1bc9 64000000 		.4byte	0x64
 26081 1bcd 02       		.uleb128 0x2
 26082 1bce 91       		.byte	0x91
 26083 1bcf 67       		.sleb128 -25
 26084 1bd0 13       		.uleb128 0x13
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 620


 26085 1bd1 350A0000 		.4byte	.LASF171
 26086 1bd5 01       		.byte	0x1
 26087 1bd6 EC14     		.2byte	0x14ec
 26088 1bd8 5F020000 		.4byte	0x25f
 26089 1bdc 02       		.uleb128 0x2
 26090 1bdd 91       		.byte	0x91
 26091 1bde 60       		.sleb128 -32
 26092 1bdf 14       		.uleb128 0x14
 26093 1be0 A0120000 		.4byte	.LASF29
 26094 1be4 01       		.byte	0x1
 26095 1be5 EE14     		.2byte	0x14ee
 26096 1be7 64000000 		.4byte	0x64
 26097 1beb 02       		.uleb128 0x2
 26098 1bec 91       		.byte	0x91
 26099 1bed 6E       		.sleb128 -18
 26100 1bee 14       		.uleb128 0x14
 26101 1bef 2F010000 		.4byte	.LASF34
 26102 1bf3 01       		.byte	0x1
 26103 1bf4 F114     		.2byte	0x14f1
 26104 1bf6 25000000 		.4byte	0x25
 26105 1bfa 02       		.uleb128 0x2
 26106 1bfb 91       		.byte	0x91
 26107 1bfc 6F       		.sleb128 -17
 26108 1bfd 00       		.byte	0
 26109 1bfe 12       		.uleb128 0x12
 26110 1bff 3A020000 		.4byte	.LASF172
 26111 1c03 01       		.byte	0x1
 26112 1c04 5B15     		.2byte	0x155b
 26113 1c06 25000000 		.4byte	0x25
 26114 1c0a 00000000 		.4byte	.LFB81
 26115 1c0e F0000000 		.4byte	.LFE81-.LFB81
 26116 1c12 01       		.uleb128 0x1
 26117 1c13 9C       		.byte	0x9c
 26118 1c14 551C0000 		.4byte	0x1c55
 26119 1c18 13       		.uleb128 0x13
 26120 1c19 820C0000 		.4byte	.LASF109
 26121 1c1d 01       		.byte	0x1
 26122 1c1e 5B15     		.2byte	0x155b
 26123 1c20 64000000 		.4byte	0x64
 26124 1c24 02       		.uleb128 0x2
 26125 1c25 91       		.byte	0x91
 26126 1c26 67       		.sleb128 -25
 26127 1c27 13       		.uleb128 0x13
 26128 1c28 350A0000 		.4byte	.LASF171
 26129 1c2c 01       		.byte	0x1
 26130 1c2d 5C15     		.2byte	0x155c
 26131 1c2f 64000000 		.4byte	0x64
 26132 1c33 02       		.uleb128 0x2
 26133 1c34 91       		.byte	0x91
 26134 1c35 66       		.sleb128 -26
 26135 1c36 14       		.uleb128 0x14
 26136 1c37 A0120000 		.4byte	.LASF29
 26137 1c3b 01       		.byte	0x1
 26138 1c3c 5E15     		.2byte	0x155e
 26139 1c3e 64000000 		.4byte	0x64
 26140 1c42 02       		.uleb128 0x2
 26141 1c43 91       		.byte	0x91
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 621


 26142 1c44 6E       		.sleb128 -18
 26143 1c45 14       		.uleb128 0x14
 26144 1c46 2F010000 		.4byte	.LASF34
 26145 1c4a 01       		.byte	0x1
 26146 1c4b 6115     		.2byte	0x1561
 26147 1c4d 25000000 		.4byte	0x25
 26148 1c51 02       		.uleb128 0x2
 26149 1c52 91       		.byte	0x91
 26150 1c53 6F       		.sleb128 -17
 26151 1c54 00       		.byte	0
 26152 1c55 12       		.uleb128 0x12
 26153 1c56 9C0D0000 		.4byte	.LASF173
 26154 1c5a 01       		.byte	0x1
 26155 1c5b AC15     		.2byte	0x15ac
 26156 1c5d 25000000 		.4byte	0x25
 26157 1c61 00000000 		.4byte	.LFB82
 26158 1c65 B8000000 		.4byte	.LFE82-.LFB82
 26159 1c69 01       		.uleb128 0x1
 26160 1c6a 9C       		.byte	0x9c
 26161 1c6b AC1C0000 		.4byte	0x1cac
 26162 1c6f 13       		.uleb128 0x13
 26163 1c70 820C0000 		.4byte	.LASF109
 26164 1c74 01       		.byte	0x1
 26165 1c75 AC15     		.2byte	0x15ac
 26166 1c77 64000000 		.4byte	0x64
 26167 1c7b 02       		.uleb128 0x2
 26168 1c7c 91       		.byte	0x91
 26169 1c7d 67       		.sleb128 -25
 26170 1c7e 13       		.uleb128 0x13
 26171 1c7f CE060000 		.4byte	.LASF174
 26172 1c83 01       		.byte	0x1
 26173 1c84 AD15     		.2byte	0x15ad
 26174 1c86 5F020000 		.4byte	0x25f
 26175 1c8a 02       		.uleb128 0x2
 26176 1c8b 91       		.byte	0x91
 26177 1c8c 60       		.sleb128 -32
 26178 1c8d 14       		.uleb128 0x14
 26179 1c8e A0120000 		.4byte	.LASF29
 26180 1c92 01       		.byte	0x1
 26181 1c93 AF15     		.2byte	0x15af
 26182 1c95 64000000 		.4byte	0x64
 26183 1c99 02       		.uleb128 0x2
 26184 1c9a 91       		.byte	0x91
 26185 1c9b 6E       		.sleb128 -18
 26186 1c9c 14       		.uleb128 0x14
 26187 1c9d 2F010000 		.4byte	.LASF34
 26188 1ca1 01       		.byte	0x1
 26189 1ca2 B215     		.2byte	0x15b2
 26190 1ca4 25000000 		.4byte	0x25
 26191 1ca8 02       		.uleb128 0x2
 26192 1ca9 91       		.byte	0x91
 26193 1caa 6F       		.sleb128 -17
 26194 1cab 00       		.byte	0
 26195 1cac 12       		.uleb128 0x12
 26196 1cad 170E0000 		.4byte	.LASF175
 26197 1cb1 01       		.byte	0x1
 26198 1cb2 F115     		.2byte	0x15f1
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 622


 26199 1cb4 25000000 		.4byte	0x25
 26200 1cb8 00000000 		.4byte	.LFB83
 26201 1cbc 28010000 		.4byte	.LFE83-.LFB83
 26202 1cc0 01       		.uleb128 0x1
 26203 1cc1 9C       		.byte	0x9c
 26204 1cc2 031D0000 		.4byte	0x1d03
 26205 1cc6 13       		.uleb128 0x13
 26206 1cc7 820C0000 		.4byte	.LASF109
 26207 1ccb 01       		.byte	0x1
 26208 1ccc F115     		.2byte	0x15f1
 26209 1cce 64000000 		.4byte	0x64
 26210 1cd2 02       		.uleb128 0x2
 26211 1cd3 91       		.byte	0x91
 26212 1cd4 67       		.sleb128 -25
 26213 1cd5 13       		.uleb128 0x13
 26214 1cd6 CE060000 		.4byte	.LASF174
 26215 1cda 01       		.byte	0x1
 26216 1cdb F215     		.2byte	0x15f2
 26217 1cdd 64000000 		.4byte	0x64
 26218 1ce1 02       		.uleb128 0x2
 26219 1ce2 91       		.byte	0x91
 26220 1ce3 66       		.sleb128 -26
 26221 1ce4 14       		.uleb128 0x14
 26222 1ce5 A0120000 		.4byte	.LASF29
 26223 1ce9 01       		.byte	0x1
 26224 1cea F415     		.2byte	0x15f4
 26225 1cec 64000000 		.4byte	0x64
 26226 1cf0 02       		.uleb128 0x2
 26227 1cf1 91       		.byte	0x91
 26228 1cf2 6E       		.sleb128 -18
 26229 1cf3 14       		.uleb128 0x14
 26230 1cf4 2F010000 		.4byte	.LASF34
 26231 1cf8 01       		.byte	0x1
 26232 1cf9 F715     		.2byte	0x15f7
 26233 1cfb 25000000 		.4byte	0x25
 26234 1cff 02       		.uleb128 0x2
 26235 1d00 91       		.byte	0x91
 26236 1d01 6F       		.sleb128 -17
 26237 1d02 00       		.byte	0
 26238 1d03 12       		.uleb128 0x12
 26239 1d04 7A0F0000 		.4byte	.LASF176
 26240 1d08 01       		.byte	0x1
 26241 1d09 2D16     		.2byte	0x162d
 26242 1d0b 25000000 		.4byte	0x25
 26243 1d0f 00000000 		.4byte	.LFB84
 26244 1d13 6C000000 		.4byte	.LFE84-.LFB84
 26245 1d17 01       		.uleb128 0x1
 26246 1d18 9C       		.byte	0x9c
 26247 1d19 4B1D0000 		.4byte	0x1d4b
 26248 1d1d 13       		.uleb128 0x13
 26249 1d1e AE0A0000 		.4byte	.LASF177
 26250 1d22 01       		.byte	0x1
 26251 1d23 2D16     		.2byte	0x162d
 26252 1d25 5F020000 		.4byte	0x25f
 26253 1d29 02       		.uleb128 0x2
 26254 1d2a 91       		.byte	0x91
 26255 1d2b 64       		.sleb128 -28
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 623


 26256 1d2c 14       		.uleb128 0x14
 26257 1d2d A0120000 		.4byte	.LASF29
 26258 1d31 01       		.byte	0x1
 26259 1d32 2F16     		.2byte	0x162f
 26260 1d34 64000000 		.4byte	0x64
 26261 1d38 02       		.uleb128 0x2
 26262 1d39 91       		.byte	0x91
 26263 1d3a 6E       		.sleb128 -18
 26264 1d3b 14       		.uleb128 0x14
 26265 1d3c 2F010000 		.4byte	.LASF34
 26266 1d40 01       		.byte	0x1
 26267 1d41 3216     		.2byte	0x1632
 26268 1d43 25000000 		.4byte	0x25
 26269 1d47 02       		.uleb128 0x2
 26270 1d48 91       		.byte	0x91
 26271 1d49 6F       		.sleb128 -17
 26272 1d4a 00       		.byte	0
 26273 1d4b 12       		.uleb128 0x12
 26274 1d4c DA050000 		.4byte	.LASF178
 26275 1d50 01       		.byte	0x1
 26276 1d51 5316     		.2byte	0x1653
 26277 1d53 25000000 		.4byte	0x25
 26278 1d57 00000000 		.4byte	.LFB85
 26279 1d5b A8000000 		.4byte	.LFE85-.LFB85
 26280 1d5f 01       		.uleb128 0x1
 26281 1d60 9C       		.byte	0x9c
 26282 1d61 931D0000 		.4byte	0x1d93
 26283 1d65 13       		.uleb128 0x13
 26284 1d66 AE0A0000 		.4byte	.LASF177
 26285 1d6a 01       		.byte	0x1
 26286 1d6b 5316     		.2byte	0x1653
 26287 1d6d 64000000 		.4byte	0x64
 26288 1d71 02       		.uleb128 0x2
 26289 1d72 91       		.byte	0x91
 26290 1d73 67       		.sleb128 -25
 26291 1d74 14       		.uleb128 0x14
 26292 1d75 A0120000 		.4byte	.LASF29
 26293 1d79 01       		.byte	0x1
 26294 1d7a 5516     		.2byte	0x1655
 26295 1d7c 64000000 		.4byte	0x64
 26296 1d80 02       		.uleb128 0x2
 26297 1d81 91       		.byte	0x91
 26298 1d82 6E       		.sleb128 -18
 26299 1d83 14       		.uleb128 0x14
 26300 1d84 2F010000 		.4byte	.LASF34
 26301 1d88 01       		.byte	0x1
 26302 1d89 5816     		.2byte	0x1658
 26303 1d8b 25000000 		.4byte	0x25
 26304 1d8f 02       		.uleb128 0x2
 26305 1d90 91       		.byte	0x91
 26306 1d91 6F       		.sleb128 -17
 26307 1d92 00       		.byte	0
 26308 1d93 12       		.uleb128 0x12
 26309 1d94 71020000 		.4byte	.LASF179
 26310 1d98 01       		.byte	0x1
 26311 1d99 8416     		.2byte	0x1684
 26312 1d9b 25000000 		.4byte	0x25
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 624


 26313 1d9f 00000000 		.4byte	.LFB86
 26314 1da3 68000000 		.4byte	.LFE86-.LFB86
 26315 1da7 01       		.uleb128 0x1
 26316 1da8 9C       		.byte	0x9c
 26317 1da9 DB1D0000 		.4byte	0x1ddb
 26318 1dad 13       		.uleb128 0x13
 26319 1dae 00000000 		.4byte	.LASF180
 26320 1db2 01       		.byte	0x1
 26321 1db3 8416     		.2byte	0x1684
 26322 1db5 5F020000 		.4byte	0x25f
 26323 1db9 02       		.uleb128 0x2
 26324 1dba 91       		.byte	0x91
 26325 1dbb 64       		.sleb128 -28
 26326 1dbc 14       		.uleb128 0x14
 26327 1dbd A0120000 		.4byte	.LASF29
 26328 1dc1 01       		.byte	0x1
 26329 1dc2 8616     		.2byte	0x1686
 26330 1dc4 64000000 		.4byte	0x64
 26331 1dc8 02       		.uleb128 0x2
 26332 1dc9 91       		.byte	0x91
 26333 1dca 6E       		.sleb128 -18
 26334 1dcb 14       		.uleb128 0x14
 26335 1dcc 2F010000 		.4byte	.LASF34
 26336 1dd0 01       		.byte	0x1
 26337 1dd1 8916     		.2byte	0x1689
 26338 1dd3 25000000 		.4byte	0x25
 26339 1dd7 02       		.uleb128 0x2
 26340 1dd8 91       		.byte	0x91
 26341 1dd9 6F       		.sleb128 -17
 26342 1dda 00       		.byte	0
 26343 1ddb 12       		.uleb128 0x12
 26344 1ddc 8F0B0000 		.4byte	.LASF181
 26345 1de0 01       		.byte	0x1
 26346 1de1 B216     		.2byte	0x16b2
 26347 1de3 25000000 		.4byte	0x25
 26348 1de7 00000000 		.4byte	.LFB87
 26349 1deb A4000000 		.4byte	.LFE87-.LFB87
 26350 1def 01       		.uleb128 0x1
 26351 1df0 9C       		.byte	0x9c
 26352 1df1 231E0000 		.4byte	0x1e23
 26353 1df5 13       		.uleb128 0x13
 26354 1df6 00000000 		.4byte	.LASF180
 26355 1dfa 01       		.byte	0x1
 26356 1dfb B216     		.2byte	0x16b2
 26357 1dfd 64000000 		.4byte	0x64
 26358 1e01 02       		.uleb128 0x2
 26359 1e02 91       		.byte	0x91
 26360 1e03 67       		.sleb128 -25
 26361 1e04 14       		.uleb128 0x14
 26362 1e05 A0120000 		.4byte	.LASF29
 26363 1e09 01       		.byte	0x1
 26364 1e0a B416     		.2byte	0x16b4
 26365 1e0c 64000000 		.4byte	0x64
 26366 1e10 02       		.uleb128 0x2
 26367 1e11 91       		.byte	0x91
 26368 1e12 6E       		.sleb128 -18
 26369 1e13 14       		.uleb128 0x14
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 625


 26370 1e14 2F010000 		.4byte	.LASF34
 26371 1e18 01       		.byte	0x1
 26372 1e19 B716     		.2byte	0x16b7
 26373 1e1b 25000000 		.4byte	0x25
 26374 1e1f 02       		.uleb128 0x2
 26375 1e20 91       		.byte	0x91
 26376 1e21 6F       		.sleb128 -17
 26377 1e22 00       		.byte	0
 26378 1e23 12       		.uleb128 0x12
 26379 1e24 C0120000 		.4byte	.LASF182
 26380 1e28 01       		.byte	0x1
 26381 1e29 DD16     		.2byte	0x16dd
 26382 1e2b 25000000 		.4byte	0x25
 26383 1e2f 00000000 		.4byte	.LFB88
 26384 1e33 6C000000 		.4byte	.LFE88-.LFB88
 26385 1e37 01       		.uleb128 0x1
 26386 1e38 9C       		.byte	0x9c
 26387 1e39 6B1E0000 		.4byte	0x1e6b
 26388 1e3d 13       		.uleb128 0x13
 26389 1e3e BB140000 		.4byte	.LASF183
 26390 1e42 01       		.byte	0x1
 26391 1e43 DD16     		.2byte	0x16dd
 26392 1e45 5F020000 		.4byte	0x25f
 26393 1e49 02       		.uleb128 0x2
 26394 1e4a 91       		.byte	0x91
 26395 1e4b 64       		.sleb128 -28
 26396 1e4c 14       		.uleb128 0x14
 26397 1e4d A0120000 		.4byte	.LASF29
 26398 1e51 01       		.byte	0x1
 26399 1e52 DF16     		.2byte	0x16df
 26400 1e54 64000000 		.4byte	0x64
 26401 1e58 02       		.uleb128 0x2
 26402 1e59 91       		.byte	0x91
 26403 1e5a 6E       		.sleb128 -18
 26404 1e5b 14       		.uleb128 0x14
 26405 1e5c 2F010000 		.4byte	.LASF34
 26406 1e60 01       		.byte	0x1
 26407 1e61 E216     		.2byte	0x16e2
 26408 1e63 25000000 		.4byte	0x25
 26409 1e67 02       		.uleb128 0x2
 26410 1e68 91       		.byte	0x91
 26411 1e69 6F       		.sleb128 -17
 26412 1e6a 00       		.byte	0
 26413 1e6b 12       		.uleb128 0x12
 26414 1e6c DC030000 		.4byte	.LASF184
 26415 1e70 01       		.byte	0x1
 26416 1e71 0517     		.2byte	0x1705
 26417 1e73 25000000 		.4byte	0x25
 26418 1e77 00000000 		.4byte	.LFB89
 26419 1e7b A8000000 		.4byte	.LFE89-.LFB89
 26420 1e7f 01       		.uleb128 0x1
 26421 1e80 9C       		.byte	0x9c
 26422 1e81 B31E0000 		.4byte	0x1eb3
 26423 1e85 13       		.uleb128 0x13
 26424 1e86 BB140000 		.4byte	.LASF183
 26425 1e8a 01       		.byte	0x1
 26426 1e8b 0517     		.2byte	0x1705
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 626


 26427 1e8d 64000000 		.4byte	0x64
 26428 1e91 02       		.uleb128 0x2
 26429 1e92 91       		.byte	0x91
 26430 1e93 67       		.sleb128 -25
 26431 1e94 14       		.uleb128 0x14
 26432 1e95 A0120000 		.4byte	.LASF29
 26433 1e99 01       		.byte	0x1
 26434 1e9a 0717     		.2byte	0x1707
 26435 1e9c 64000000 		.4byte	0x64
 26436 1ea0 02       		.uleb128 0x2
 26437 1ea1 91       		.byte	0x91
 26438 1ea2 6E       		.sleb128 -18
 26439 1ea3 14       		.uleb128 0x14
 26440 1ea4 2F010000 		.4byte	.LASF34
 26441 1ea8 01       		.byte	0x1
 26442 1ea9 0A17     		.2byte	0x170a
 26443 1eab 25000000 		.4byte	0x25
 26444 1eaf 02       		.uleb128 0x2
 26445 1eb0 91       		.byte	0x91
 26446 1eb1 6F       		.sleb128 -17
 26447 1eb2 00       		.byte	0
 26448 1eb3 12       		.uleb128 0x12
 26449 1eb4 2B080000 		.4byte	.LASF185
 26450 1eb8 01       		.byte	0x1
 26451 1eb9 2F17     		.2byte	0x172f
 26452 1ebb 25000000 		.4byte	0x25
 26453 1ebf 00000000 		.4byte	.LFB90
 26454 1ec3 68000000 		.4byte	.LFE90-.LFB90
 26455 1ec7 01       		.uleb128 0x1
 26456 1ec8 9C       		.byte	0x9c
 26457 1ec9 FB1E0000 		.4byte	0x1efb
 26458 1ecd 13       		.uleb128 0x13
 26459 1ece 830D0000 		.4byte	.LASF186
 26460 1ed2 01       		.byte	0x1
 26461 1ed3 2F17     		.2byte	0x172f
 26462 1ed5 5F020000 		.4byte	0x25f
 26463 1ed9 02       		.uleb128 0x2
 26464 1eda 91       		.byte	0x91
 26465 1edb 64       		.sleb128 -28
 26466 1edc 14       		.uleb128 0x14
 26467 1edd A0120000 		.4byte	.LASF29
 26468 1ee1 01       		.byte	0x1
 26469 1ee2 3117     		.2byte	0x1731
 26470 1ee4 64000000 		.4byte	0x64
 26471 1ee8 02       		.uleb128 0x2
 26472 1ee9 91       		.byte	0x91
 26473 1eea 6E       		.sleb128 -18
 26474 1eeb 14       		.uleb128 0x14
 26475 1eec 2F010000 		.4byte	.LASF34
 26476 1ef0 01       		.byte	0x1
 26477 1ef1 3417     		.2byte	0x1734
 26478 1ef3 25000000 		.4byte	0x25
 26479 1ef7 02       		.uleb128 0x2
 26480 1ef8 91       		.byte	0x91
 26481 1ef9 6F       		.sleb128 -17
 26482 1efa 00       		.byte	0
 26483 1efb 12       		.uleb128 0x12
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 627


 26484 1efc 13000000 		.4byte	.LASF187
 26485 1f00 01       		.byte	0x1
 26486 1f01 5617     		.2byte	0x1756
 26487 1f03 25000000 		.4byte	0x25
 26488 1f07 00000000 		.4byte	.LFB91
 26489 1f0b A0000000 		.4byte	.LFE91-.LFB91
 26490 1f0f 01       		.uleb128 0x1
 26491 1f10 9C       		.byte	0x9c
 26492 1f11 431F0000 		.4byte	0x1f43
 26493 1f15 13       		.uleb128 0x13
 26494 1f16 830D0000 		.4byte	.LASF186
 26495 1f1a 01       		.byte	0x1
 26496 1f1b 5617     		.2byte	0x1756
 26497 1f1d 64000000 		.4byte	0x64
 26498 1f21 02       		.uleb128 0x2
 26499 1f22 91       		.byte	0x91
 26500 1f23 67       		.sleb128 -25
 26501 1f24 14       		.uleb128 0x14
 26502 1f25 A0120000 		.4byte	.LASF29
 26503 1f29 01       		.byte	0x1
 26504 1f2a 5817     		.2byte	0x1758
 26505 1f2c 64000000 		.4byte	0x64
 26506 1f30 02       		.uleb128 0x2
 26507 1f31 91       		.byte	0x91
 26508 1f32 6E       		.sleb128 -18
 26509 1f33 14       		.uleb128 0x14
 26510 1f34 2F010000 		.4byte	.LASF34
 26511 1f38 01       		.byte	0x1
 26512 1f39 5B17     		.2byte	0x175b
 26513 1f3b 25000000 		.4byte	0x25
 26514 1f3f 02       		.uleb128 0x2
 26515 1f40 91       		.byte	0x91
 26516 1f41 6F       		.sleb128 -17
 26517 1f42 00       		.byte	0
 26518 1f43 12       		.uleb128 0x12
 26519 1f44 FA130000 		.4byte	.LASF188
 26520 1f48 01       		.byte	0x1
 26521 1f49 8517     		.2byte	0x1785
 26522 1f4b 25000000 		.4byte	0x25
 26523 1f4f 00000000 		.4byte	.LFB92
 26524 1f53 68000000 		.4byte	.LFE92-.LFB92
 26525 1f57 01       		.uleb128 0x1
 26526 1f58 9C       		.byte	0x9c
 26527 1f59 8B1F0000 		.4byte	0x1f8b
 26528 1f5d 13       		.uleb128 0x13
 26529 1f5e A0130000 		.4byte	.LASF189
 26530 1f62 01       		.byte	0x1
 26531 1f63 8517     		.2byte	0x1785
 26532 1f65 5F020000 		.4byte	0x25f
 26533 1f69 02       		.uleb128 0x2
 26534 1f6a 91       		.byte	0x91
 26535 1f6b 64       		.sleb128 -28
 26536 1f6c 14       		.uleb128 0x14
 26537 1f6d A0120000 		.4byte	.LASF29
 26538 1f71 01       		.byte	0x1
 26539 1f72 8717     		.2byte	0x1787
 26540 1f74 64000000 		.4byte	0x64
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 628


 26541 1f78 02       		.uleb128 0x2
 26542 1f79 91       		.byte	0x91
 26543 1f7a 6E       		.sleb128 -18
 26544 1f7b 14       		.uleb128 0x14
 26545 1f7c 2F010000 		.4byte	.LASF34
 26546 1f80 01       		.byte	0x1
 26547 1f81 8A17     		.2byte	0x178a
 26548 1f83 25000000 		.4byte	0x25
 26549 1f87 02       		.uleb128 0x2
 26550 1f88 91       		.byte	0x91
 26551 1f89 6F       		.sleb128 -17
 26552 1f8a 00       		.byte	0
 26553 1f8b 12       		.uleb128 0x12
 26554 1f8c 16040000 		.4byte	.LASF190
 26555 1f90 01       		.byte	0x1
 26556 1f91 B017     		.2byte	0x17b0
 26557 1f93 25000000 		.4byte	0x25
 26558 1f97 00000000 		.4byte	.LFB93
 26559 1f9b A4000000 		.4byte	.LFE93-.LFB93
 26560 1f9f 01       		.uleb128 0x1
 26561 1fa0 9C       		.byte	0x9c
 26562 1fa1 D31F0000 		.4byte	0x1fd3
 26563 1fa5 13       		.uleb128 0x13
 26564 1fa6 A0130000 		.4byte	.LASF189
 26565 1faa 01       		.byte	0x1
 26566 1fab B017     		.2byte	0x17b0
 26567 1fad 64000000 		.4byte	0x64
 26568 1fb1 02       		.uleb128 0x2
 26569 1fb2 91       		.byte	0x91
 26570 1fb3 67       		.sleb128 -25
 26571 1fb4 14       		.uleb128 0x14
 26572 1fb5 A0120000 		.4byte	.LASF29
 26573 1fb9 01       		.byte	0x1
 26574 1fba B217     		.2byte	0x17b2
 26575 1fbc 64000000 		.4byte	0x64
 26576 1fc0 02       		.uleb128 0x2
 26577 1fc1 91       		.byte	0x91
 26578 1fc2 6E       		.sleb128 -18
 26579 1fc3 14       		.uleb128 0x14
 26580 1fc4 2F010000 		.4byte	.LASF34
 26581 1fc8 01       		.byte	0x1
 26582 1fc9 B517     		.2byte	0x17b5
 26583 1fcb 25000000 		.4byte	0x25
 26584 1fcf 02       		.uleb128 0x2
 26585 1fd0 91       		.byte	0x91
 26586 1fd1 6F       		.sleb128 -17
 26587 1fd2 00       		.byte	0
 26588 1fd3 12       		.uleb128 0x12
 26589 1fd4 F0050000 		.4byte	.LASF191
 26590 1fd8 01       		.byte	0x1
 26591 1fd9 DC17     		.2byte	0x17dc
 26592 1fdb 25000000 		.4byte	0x25
 26593 1fdf 00000000 		.4byte	.LFB94
 26594 1fe3 68000000 		.4byte	.LFE94-.LFB94
 26595 1fe7 01       		.uleb128 0x1
 26596 1fe8 9C       		.byte	0x9c
 26597 1fe9 1B200000 		.4byte	0x201b
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 629


 26598 1fed 13       		.uleb128 0x13
 26599 1fee C1090000 		.4byte	.LASF192
 26600 1ff2 01       		.byte	0x1
 26601 1ff3 DC17     		.2byte	0x17dc
 26602 1ff5 5F020000 		.4byte	0x25f
 26603 1ff9 02       		.uleb128 0x2
 26604 1ffa 91       		.byte	0x91
 26605 1ffb 64       		.sleb128 -28
 26606 1ffc 14       		.uleb128 0x14
 26607 1ffd A0120000 		.4byte	.LASF29
 26608 2001 01       		.byte	0x1
 26609 2002 DE17     		.2byte	0x17de
 26610 2004 64000000 		.4byte	0x64
 26611 2008 02       		.uleb128 0x2
 26612 2009 91       		.byte	0x91
 26613 200a 6E       		.sleb128 -18
 26614 200b 14       		.uleb128 0x14
 26615 200c 2F010000 		.4byte	.LASF34
 26616 2010 01       		.byte	0x1
 26617 2011 E117     		.2byte	0x17e1
 26618 2013 25000000 		.4byte	0x25
 26619 2017 02       		.uleb128 0x2
 26620 2018 91       		.byte	0x91
 26621 2019 6F       		.sleb128 -17
 26622 201a 00       		.byte	0
 26623 201b 12       		.uleb128 0x12
 26624 201c 300B0000 		.4byte	.LASF193
 26625 2020 01       		.byte	0x1
 26626 2021 0618     		.2byte	0x1806
 26627 2023 25000000 		.4byte	0x25
 26628 2027 00000000 		.4byte	.LFB95
 26629 202b A0000000 		.4byte	.LFE95-.LFB95
 26630 202f 01       		.uleb128 0x1
 26631 2030 9C       		.byte	0x9c
 26632 2031 63200000 		.4byte	0x2063
 26633 2035 13       		.uleb128 0x13
 26634 2036 C1090000 		.4byte	.LASF192
 26635 203a 01       		.byte	0x1
 26636 203b 0618     		.2byte	0x1806
 26637 203d 64000000 		.4byte	0x64
 26638 2041 02       		.uleb128 0x2
 26639 2042 91       		.byte	0x91
 26640 2043 67       		.sleb128 -25
 26641 2044 14       		.uleb128 0x14
 26642 2045 A0120000 		.4byte	.LASF29
 26643 2049 01       		.byte	0x1
 26644 204a 0818     		.2byte	0x1808
 26645 204c 64000000 		.4byte	0x64
 26646 2050 02       		.uleb128 0x2
 26647 2051 91       		.byte	0x91
 26648 2052 6E       		.sleb128 -18
 26649 2053 14       		.uleb128 0x14
 26650 2054 2F010000 		.4byte	.LASF34
 26651 2058 01       		.byte	0x1
 26652 2059 0B18     		.2byte	0x180b
 26653 205b 25000000 		.4byte	0x25
 26654 205f 02       		.uleb128 0x2
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 630


 26655 2060 91       		.byte	0x91
 26656 2061 6F       		.sleb128 -17
 26657 2062 00       		.byte	0
 26658 2063 12       		.uleb128 0x12
 26659 2064 DC0D0000 		.4byte	.LASF194
 26660 2068 01       		.byte	0x1
 26661 2069 3318     		.2byte	0x1833
 26662 206b 25000000 		.4byte	0x25
 26663 206f 00000000 		.4byte	.LFB96
 26664 2073 68000000 		.4byte	.LFE96-.LFB96
 26665 2077 01       		.uleb128 0x1
 26666 2078 9C       		.byte	0x9c
 26667 2079 AB200000 		.4byte	0x20ab
 26668 207d 13       		.uleb128 0x13
 26669 207e 85020000 		.4byte	.LASF195
 26670 2082 01       		.byte	0x1
 26671 2083 3318     		.2byte	0x1833
 26672 2085 5F020000 		.4byte	0x25f
 26673 2089 02       		.uleb128 0x2
 26674 208a 91       		.byte	0x91
 26675 208b 64       		.sleb128 -28
 26676 208c 14       		.uleb128 0x14
 26677 208d A0120000 		.4byte	.LASF29
 26678 2091 01       		.byte	0x1
 26679 2092 3518     		.2byte	0x1835
 26680 2094 64000000 		.4byte	0x64
 26681 2098 02       		.uleb128 0x2
 26682 2099 91       		.byte	0x91
 26683 209a 6E       		.sleb128 -18
 26684 209b 14       		.uleb128 0x14
 26685 209c 2F010000 		.4byte	.LASF34
 26686 20a0 01       		.byte	0x1
 26687 20a1 3818     		.2byte	0x1838
 26688 20a3 25000000 		.4byte	0x25
 26689 20a7 02       		.uleb128 0x2
 26690 20a8 91       		.byte	0x91
 26691 20a9 6F       		.sleb128 -17
 26692 20aa 00       		.byte	0
 26693 20ab 12       		.uleb128 0x12
 26694 20ac 6C0D0000 		.4byte	.LASF196
 26695 20b0 01       		.byte	0x1
 26696 20b1 5D18     		.2byte	0x185d
 26697 20b3 25000000 		.4byte	0x25
 26698 20b7 00000000 		.4byte	.LFB97
 26699 20bb A4000000 		.4byte	.LFE97-.LFB97
 26700 20bf 01       		.uleb128 0x1
 26701 20c0 9C       		.byte	0x9c
 26702 20c1 F3200000 		.4byte	0x20f3
 26703 20c5 13       		.uleb128 0x13
 26704 20c6 85020000 		.4byte	.LASF195
 26705 20ca 01       		.byte	0x1
 26706 20cb 5D18     		.2byte	0x185d
 26707 20cd 64000000 		.4byte	0x64
 26708 20d1 02       		.uleb128 0x2
 26709 20d2 91       		.byte	0x91
 26710 20d3 67       		.sleb128 -25
 26711 20d4 14       		.uleb128 0x14
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 631


 26712 20d5 A0120000 		.4byte	.LASF29
 26713 20d9 01       		.byte	0x1
 26714 20da 5F18     		.2byte	0x185f
 26715 20dc 64000000 		.4byte	0x64
 26716 20e0 02       		.uleb128 0x2
 26717 20e1 91       		.byte	0x91
 26718 20e2 6E       		.sleb128 -18
 26719 20e3 14       		.uleb128 0x14
 26720 20e4 2F010000 		.4byte	.LASF34
 26721 20e8 01       		.byte	0x1
 26722 20e9 6218     		.2byte	0x1862
 26723 20eb 25000000 		.4byte	0x25
 26724 20ef 02       		.uleb128 0x2
 26725 20f0 91       		.byte	0x91
 26726 20f1 6F       		.sleb128 -17
 26727 20f2 00       		.byte	0
 26728 20f3 12       		.uleb128 0x12
 26729 20f4 79080000 		.4byte	.LASF197
 26730 20f8 01       		.byte	0x1
 26731 20f9 8F18     		.2byte	0x188f
 26732 20fb 25000000 		.4byte	0x25
 26733 20ff 00000000 		.4byte	.LFB98
 26734 2103 6C000000 		.4byte	.LFE98-.LFB98
 26735 2107 01       		.uleb128 0x1
 26736 2108 9C       		.byte	0x9c
 26737 2109 3B210000 		.4byte	0x213b
 26738 210d 13       		.uleb128 0x13
 26739 210e 64130000 		.4byte	.LASF198
 26740 2112 01       		.byte	0x1
 26741 2113 9018     		.2byte	0x1890
 26742 2115 5F020000 		.4byte	0x25f
 26743 2119 02       		.uleb128 0x2
 26744 211a 91       		.byte	0x91
 26745 211b 64       		.sleb128 -28
 26746 211c 14       		.uleb128 0x14
 26747 211d A0120000 		.4byte	.LASF29
 26748 2121 01       		.byte	0x1
 26749 2122 9218     		.2byte	0x1892
 26750 2124 64000000 		.4byte	0x64
 26751 2128 02       		.uleb128 0x2
 26752 2129 91       		.byte	0x91
 26753 212a 6E       		.sleb128 -18
 26754 212b 14       		.uleb128 0x14
 26755 212c 2F010000 		.4byte	.LASF34
 26756 2130 01       		.byte	0x1
 26757 2131 9518     		.2byte	0x1895
 26758 2133 25000000 		.4byte	0x25
 26759 2137 02       		.uleb128 0x2
 26760 2138 91       		.byte	0x91
 26761 2139 6F       		.sleb128 -17
 26762 213a 00       		.byte	0
 26763 213b 12       		.uleb128 0x12
 26764 213c A2100000 		.4byte	.LASF199
 26765 2140 01       		.byte	0x1
 26766 2141 C018     		.2byte	0x18c0
 26767 2143 25000000 		.4byte	0x25
 26768 2147 00000000 		.4byte	.LFB99
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 632


 26769 214b A8000000 		.4byte	.LFE99-.LFB99
 26770 214f 01       		.uleb128 0x1
 26771 2150 9C       		.byte	0x9c
 26772 2151 83210000 		.4byte	0x2183
 26773 2155 13       		.uleb128 0x13
 26774 2156 64130000 		.4byte	.LASF198
 26775 215a 01       		.byte	0x1
 26776 215b C018     		.2byte	0x18c0
 26777 215d 64000000 		.4byte	0x64
 26778 2161 02       		.uleb128 0x2
 26779 2162 91       		.byte	0x91
 26780 2163 67       		.sleb128 -25
 26781 2164 14       		.uleb128 0x14
 26782 2165 A0120000 		.4byte	.LASF29
 26783 2169 01       		.byte	0x1
 26784 216a C218     		.2byte	0x18c2
 26785 216c 64000000 		.4byte	0x64
 26786 2170 02       		.uleb128 0x2
 26787 2171 91       		.byte	0x91
 26788 2172 6E       		.sleb128 -18
 26789 2173 14       		.uleb128 0x14
 26790 2174 2F010000 		.4byte	.LASF34
 26791 2178 01       		.byte	0x1
 26792 2179 C518     		.2byte	0x18c5
 26793 217b 25000000 		.4byte	0x25
 26794 217f 02       		.uleb128 0x2
 26795 2180 91       		.byte	0x91
 26796 2181 6F       		.sleb128 -17
 26797 2182 00       		.byte	0
 26798 2183 12       		.uleb128 0x12
 26799 2184 E3130000 		.4byte	.LASF200
 26800 2188 01       		.byte	0x1
 26801 2189 E818     		.2byte	0x18e8
 26802 218b 25000000 		.4byte	0x25
 26803 218f 00000000 		.4byte	.LFB100
 26804 2193 6C000000 		.4byte	.LFE100-.LFB100
 26805 2197 01       		.uleb128 0x1
 26806 2198 9C       		.byte	0x9c
 26807 2199 CB210000 		.4byte	0x21cb
 26808 219d 13       		.uleb128 0x13
 26809 219e DD090000 		.4byte	.LASF201
 26810 21a2 01       		.byte	0x1
 26811 21a3 E818     		.2byte	0x18e8
 26812 21a5 5F020000 		.4byte	0x25f
 26813 21a9 02       		.uleb128 0x2
 26814 21aa 91       		.byte	0x91
 26815 21ab 64       		.sleb128 -28
 26816 21ac 14       		.uleb128 0x14
 26817 21ad A0120000 		.4byte	.LASF29
 26818 21b1 01       		.byte	0x1
 26819 21b2 EA18     		.2byte	0x18ea
 26820 21b4 64000000 		.4byte	0x64
 26821 21b8 02       		.uleb128 0x2
 26822 21b9 91       		.byte	0x91
 26823 21ba 6E       		.sleb128 -18
 26824 21bb 14       		.uleb128 0x14
 26825 21bc 2F010000 		.4byte	.LASF34
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 633


 26826 21c0 01       		.byte	0x1
 26827 21c1 ED18     		.2byte	0x18ed
 26828 21c3 25000000 		.4byte	0x25
 26829 21c7 02       		.uleb128 0x2
 26830 21c8 91       		.byte	0x91
 26831 21c9 6F       		.sleb128 -17
 26832 21ca 00       		.byte	0
 26833 21cb 12       		.uleb128 0x12
 26834 21cc E10B0000 		.4byte	.LASF202
 26835 21d0 01       		.byte	0x1
 26836 21d1 0D19     		.2byte	0x190d
 26837 21d3 25000000 		.4byte	0x25
 26838 21d7 00000000 		.4byte	.LFB101
 26839 21db A8000000 		.4byte	.LFE101-.LFB101
 26840 21df 01       		.uleb128 0x1
 26841 21e0 9C       		.byte	0x9c
 26842 21e1 13220000 		.4byte	0x2213
 26843 21e5 13       		.uleb128 0x13
 26844 21e6 DD090000 		.4byte	.LASF201
 26845 21ea 01       		.byte	0x1
 26846 21eb 0D19     		.2byte	0x190d
 26847 21ed 64000000 		.4byte	0x64
 26848 21f1 02       		.uleb128 0x2
 26849 21f2 91       		.byte	0x91
 26850 21f3 67       		.sleb128 -25
 26851 21f4 14       		.uleb128 0x14
 26852 21f5 A0120000 		.4byte	.LASF29
 26853 21f9 01       		.byte	0x1
 26854 21fa 0F19     		.2byte	0x190f
 26855 21fc 64000000 		.4byte	0x64
 26856 2200 02       		.uleb128 0x2
 26857 2201 91       		.byte	0x91
 26858 2202 6E       		.sleb128 -18
 26859 2203 14       		.uleb128 0x14
 26860 2204 2F010000 		.4byte	.LASF34
 26861 2208 01       		.byte	0x1
 26862 2209 1219     		.2byte	0x1912
 26863 220b 25000000 		.4byte	0x25
 26864 220f 02       		.uleb128 0x2
 26865 2210 91       		.byte	0x91
 26866 2211 6F       		.sleb128 -17
 26867 2212 00       		.byte	0
 26868 2213 12       		.uleb128 0x12
 26869 2214 E40C0000 		.4byte	.LASF203
 26870 2218 01       		.byte	0x1
 26871 2219 3D19     		.2byte	0x193d
 26872 221b 25000000 		.4byte	0x25
 26873 221f 00000000 		.4byte	.LFB102
 26874 2223 B4000000 		.4byte	.LFE102-.LFB102
 26875 2227 01       		.uleb128 0x1
 26876 2228 9C       		.byte	0x9c
 26877 2229 6A220000 		.4byte	0x226a
 26878 222d 13       		.uleb128 0x13
 26879 222e 820C0000 		.4byte	.LASF109
 26880 2232 01       		.byte	0x1
 26881 2233 3D19     		.2byte	0x193d
 26882 2235 64000000 		.4byte	0x64
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 634


 26883 2239 02       		.uleb128 0x2
 26884 223a 91       		.byte	0x91
 26885 223b 67       		.sleb128 -25
 26886 223c 13       		.uleb128 0x13
 26887 223d 9A010000 		.4byte	.LASF204
 26888 2241 01       		.byte	0x1
 26889 2242 3E19     		.2byte	0x193e
 26890 2244 5F020000 		.4byte	0x25f
 26891 2248 02       		.uleb128 0x2
 26892 2249 91       		.byte	0x91
 26893 224a 60       		.sleb128 -32
 26894 224b 14       		.uleb128 0x14
 26895 224c A0120000 		.4byte	.LASF29
 26896 2250 01       		.byte	0x1
 26897 2251 4019     		.2byte	0x1940
 26898 2253 64000000 		.4byte	0x64
 26899 2257 02       		.uleb128 0x2
 26900 2258 91       		.byte	0x91
 26901 2259 6E       		.sleb128 -18
 26902 225a 14       		.uleb128 0x14
 26903 225b 2F010000 		.4byte	.LASF34
 26904 225f 01       		.byte	0x1
 26905 2260 4319     		.2byte	0x1943
 26906 2262 25000000 		.4byte	0x25
 26907 2266 02       		.uleb128 0x2
 26908 2267 91       		.byte	0x91
 26909 2268 6F       		.sleb128 -17
 26910 2269 00       		.byte	0
 26911 226a 12       		.uleb128 0x12
 26912 226b 53130000 		.4byte	.LASF205
 26913 226f 01       		.byte	0x1
 26914 2270 7B19     		.2byte	0x197b
 26915 2272 25000000 		.4byte	0x25
 26916 2276 00000000 		.4byte	.LFB103
 26917 227a E8000000 		.4byte	.LFE103-.LFB103
 26918 227e 01       		.uleb128 0x1
 26919 227f 9C       		.byte	0x9c
 26920 2280 C1220000 		.4byte	0x22c1
 26921 2284 13       		.uleb128 0x13
 26922 2285 820C0000 		.4byte	.LASF109
 26923 2289 01       		.byte	0x1
 26924 228a 7B19     		.2byte	0x197b
 26925 228c 64000000 		.4byte	0x64
 26926 2290 02       		.uleb128 0x2
 26927 2291 91       		.byte	0x91
 26928 2292 67       		.sleb128 -25
 26929 2293 13       		.uleb128 0x13
 26930 2294 9A010000 		.4byte	.LASF204
 26931 2298 01       		.byte	0x1
 26932 2299 7C19     		.2byte	0x197c
 26933 229b 64000000 		.4byte	0x64
 26934 229f 02       		.uleb128 0x2
 26935 22a0 91       		.byte	0x91
 26936 22a1 66       		.sleb128 -26
 26937 22a2 14       		.uleb128 0x14
 26938 22a3 A0120000 		.4byte	.LASF29
 26939 22a7 01       		.byte	0x1
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 635


 26940 22a8 7E19     		.2byte	0x197e
 26941 22aa 64000000 		.4byte	0x64
 26942 22ae 02       		.uleb128 0x2
 26943 22af 91       		.byte	0x91
 26944 22b0 6E       		.sleb128 -18
 26945 22b1 14       		.uleb128 0x14
 26946 22b2 2F010000 		.4byte	.LASF34
 26947 22b6 01       		.byte	0x1
 26948 22b7 8119     		.2byte	0x1981
 26949 22b9 25000000 		.4byte	0x25
 26950 22bd 02       		.uleb128 0x2
 26951 22be 91       		.byte	0x91
 26952 22bf 6F       		.sleb128 -17
 26953 22c0 00       		.byte	0
 26954 22c1 12       		.uleb128 0x12
 26955 22c2 79090000 		.4byte	.LASF206
 26956 22c6 01       		.byte	0x1
 26957 22c7 B619     		.2byte	0x19b6
 26958 22c9 25000000 		.4byte	0x25
 26959 22cd 00000000 		.4byte	.LFB104
 26960 22d1 6C000000 		.4byte	.LFE104-.LFB104
 26961 22d5 01       		.uleb128 0x1
 26962 22d6 9C       		.byte	0x9c
 26963 22d7 09230000 		.4byte	0x2309
 26964 22db 13       		.uleb128 0x13
 26965 22dc 7B100000 		.4byte	.LASF207
 26966 22e0 01       		.byte	0x1
 26967 22e1 B619     		.2byte	0x19b6
 26968 22e3 5F020000 		.4byte	0x25f
 26969 22e7 02       		.uleb128 0x2
 26970 22e8 91       		.byte	0x91
 26971 22e9 64       		.sleb128 -28
 26972 22ea 14       		.uleb128 0x14
 26973 22eb A0120000 		.4byte	.LASF29
 26974 22ef 01       		.byte	0x1
 26975 22f0 B819     		.2byte	0x19b8
 26976 22f2 64000000 		.4byte	0x64
 26977 22f6 02       		.uleb128 0x2
 26978 22f7 91       		.byte	0x91
 26979 22f8 6E       		.sleb128 -18
 26980 22f9 14       		.uleb128 0x14
 26981 22fa 2F010000 		.4byte	.LASF34
 26982 22fe 01       		.byte	0x1
 26983 22ff BB19     		.2byte	0x19bb
 26984 2301 25000000 		.4byte	0x25
 26985 2305 02       		.uleb128 0x2
 26986 2306 91       		.byte	0x91
 26987 2307 6F       		.sleb128 -17
 26988 2308 00       		.byte	0
 26989 2309 12       		.uleb128 0x12
 26990 230a 3A130000 		.4byte	.LASF208
 26991 230e 01       		.byte	0x1
 26992 230f DD19     		.2byte	0x19dd
 26993 2311 25000000 		.4byte	0x25
 26994 2315 00000000 		.4byte	.LFB105
 26995 2319 A8000000 		.4byte	.LFE105-.LFB105
 26996 231d 01       		.uleb128 0x1
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 636


 26997 231e 9C       		.byte	0x9c
 26998 231f 51230000 		.4byte	0x2351
 26999 2323 13       		.uleb128 0x13
 27000 2324 7B100000 		.4byte	.LASF207
 27001 2328 01       		.byte	0x1
 27002 2329 DD19     		.2byte	0x19dd
 27003 232b 64000000 		.4byte	0x64
 27004 232f 02       		.uleb128 0x2
 27005 2330 91       		.byte	0x91
 27006 2331 67       		.sleb128 -25
 27007 2332 14       		.uleb128 0x14
 27008 2333 A0120000 		.4byte	.LASF29
 27009 2337 01       		.byte	0x1
 27010 2338 DF19     		.2byte	0x19df
 27011 233a 64000000 		.4byte	0x64
 27012 233e 02       		.uleb128 0x2
 27013 233f 91       		.byte	0x91
 27014 2340 6E       		.sleb128 -18
 27015 2341 14       		.uleb128 0x14
 27016 2342 2F010000 		.4byte	.LASF34
 27017 2346 01       		.byte	0x1
 27018 2347 E219     		.2byte	0x19e2
 27019 2349 25000000 		.4byte	0x25
 27020 234d 02       		.uleb128 0x2
 27021 234e 91       		.byte	0x91
 27022 234f 6F       		.sleb128 -17
 27023 2350 00       		.byte	0
 27024 2351 12       		.uleb128 0x12
 27025 2352 310F0000 		.4byte	.LASF209
 27026 2356 01       		.byte	0x1
 27027 2357 061A     		.2byte	0x1a06
 27028 2359 25000000 		.4byte	0x25
 27029 235d 00000000 		.4byte	.LFB106
 27030 2361 68000000 		.4byte	.LFE106-.LFB106
 27031 2365 01       		.uleb128 0x1
 27032 2366 9C       		.byte	0x9c
 27033 2367 99230000 		.4byte	0x2399
 27034 236b 13       		.uleb128 0x13
 27035 236c 9A110000 		.4byte	.LASF210
 27036 2370 01       		.byte	0x1
 27037 2371 061A     		.2byte	0x1a06
 27038 2373 5F020000 		.4byte	0x25f
 27039 2377 02       		.uleb128 0x2
 27040 2378 91       		.byte	0x91
 27041 2379 64       		.sleb128 -28
 27042 237a 14       		.uleb128 0x14
 27043 237b A0120000 		.4byte	.LASF29
 27044 237f 01       		.byte	0x1
 27045 2380 081A     		.2byte	0x1a08
 27046 2382 64000000 		.4byte	0x64
 27047 2386 02       		.uleb128 0x2
 27048 2387 91       		.byte	0x91
 27049 2388 6E       		.sleb128 -18
 27050 2389 14       		.uleb128 0x14
 27051 238a 2F010000 		.4byte	.LASF34
 27052 238e 01       		.byte	0x1
 27053 238f 0B1A     		.2byte	0x1a0b
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 637


 27054 2391 25000000 		.4byte	0x25
 27055 2395 02       		.uleb128 0x2
 27056 2396 91       		.byte	0x91
 27057 2397 6F       		.sleb128 -17
 27058 2398 00       		.byte	0
 27059 2399 12       		.uleb128 0x12
 27060 239a 34030000 		.4byte	.LASF211
 27061 239e 01       		.byte	0x1
 27062 239f 2C1A     		.2byte	0x1a2c
 27063 23a1 25000000 		.4byte	0x25
 27064 23a5 00000000 		.4byte	.LFB107
 27065 23a9 A4000000 		.4byte	.LFE107-.LFB107
 27066 23ad 01       		.uleb128 0x1
 27067 23ae 9C       		.byte	0x9c
 27068 23af E1230000 		.4byte	0x23e1
 27069 23b3 13       		.uleb128 0x13
 27070 23b4 9A110000 		.4byte	.LASF210
 27071 23b8 01       		.byte	0x1
 27072 23b9 2C1A     		.2byte	0x1a2c
 27073 23bb 64000000 		.4byte	0x64
 27074 23bf 02       		.uleb128 0x2
 27075 23c0 91       		.byte	0x91
 27076 23c1 67       		.sleb128 -25
 27077 23c2 14       		.uleb128 0x14
 27078 23c3 A0120000 		.4byte	.LASF29
 27079 23c7 01       		.byte	0x1
 27080 23c8 2E1A     		.2byte	0x1a2e
 27081 23ca 64000000 		.4byte	0x64
 27082 23ce 02       		.uleb128 0x2
 27083 23cf 91       		.byte	0x91
 27084 23d0 6E       		.sleb128 -18
 27085 23d1 14       		.uleb128 0x14
 27086 23d2 2F010000 		.4byte	.LASF34
 27087 23d6 01       		.byte	0x1
 27088 23d7 311A     		.2byte	0x1a31
 27089 23d9 25000000 		.4byte	0x25
 27090 23dd 02       		.uleb128 0x2
 27091 23de 91       		.byte	0x91
 27092 23df 6F       		.sleb128 -17
 27093 23e0 00       		.byte	0
 27094 23e1 12       		.uleb128 0x12
 27095 23e2 0A050000 		.4byte	.LASF212
 27096 23e6 01       		.byte	0x1
 27097 23e7 591A     		.2byte	0x1a59
 27098 23e9 25000000 		.4byte	0x25
 27099 23ed 00000000 		.4byte	.LFB108
 27100 23f1 6C000000 		.4byte	.LFE108-.LFB108
 27101 23f5 01       		.uleb128 0x1
 27102 23f6 9C       		.byte	0x9c
 27103 23f7 29240000 		.4byte	0x2429
 27104 23fb 13       		.uleb128 0x13
 27105 23fc 130A0000 		.4byte	.LASF213
 27106 2400 01       		.byte	0x1
 27107 2401 5A1A     		.2byte	0x1a5a
 27108 2403 5F020000 		.4byte	0x25f
 27109 2407 02       		.uleb128 0x2
 27110 2408 91       		.byte	0x91
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 638


 27111 2409 64       		.sleb128 -28
 27112 240a 14       		.uleb128 0x14
 27113 240b A0120000 		.4byte	.LASF29
 27114 240f 01       		.byte	0x1
 27115 2410 5C1A     		.2byte	0x1a5c
 27116 2412 64000000 		.4byte	0x64
 27117 2416 02       		.uleb128 0x2
 27118 2417 91       		.byte	0x91
 27119 2418 6E       		.sleb128 -18
 27120 2419 14       		.uleb128 0x14
 27121 241a 2F010000 		.4byte	.LASF34
 27122 241e 01       		.byte	0x1
 27123 241f 5F1A     		.2byte	0x1a5f
 27124 2421 25000000 		.4byte	0x25
 27125 2425 02       		.uleb128 0x2
 27126 2426 91       		.byte	0x91
 27127 2427 6F       		.sleb128 -17
 27128 2428 00       		.byte	0
 27129 2429 12       		.uleb128 0x12
 27130 242a F4060000 		.4byte	.LASF214
 27131 242e 01       		.byte	0x1
 27132 242f 851A     		.2byte	0x1a85
 27133 2431 25000000 		.4byte	0x25
 27134 2435 00000000 		.4byte	.LFB109
 27135 2439 A8000000 		.4byte	.LFE109-.LFB109
 27136 243d 01       		.uleb128 0x1
 27137 243e 9C       		.byte	0x9c
 27138 243f 71240000 		.4byte	0x2471
 27139 2443 13       		.uleb128 0x13
 27140 2444 130A0000 		.4byte	.LASF213
 27141 2448 01       		.byte	0x1
 27142 2449 861A     		.2byte	0x1a86
 27143 244b 64000000 		.4byte	0x64
 27144 244f 02       		.uleb128 0x2
 27145 2450 91       		.byte	0x91
 27146 2451 67       		.sleb128 -25
 27147 2452 14       		.uleb128 0x14
 27148 2453 A0120000 		.4byte	.LASF29
 27149 2457 01       		.byte	0x1
 27150 2458 881A     		.2byte	0x1a88
 27151 245a 64000000 		.4byte	0x64
 27152 245e 02       		.uleb128 0x2
 27153 245f 91       		.byte	0x91
 27154 2460 6E       		.sleb128 -18
 27155 2461 14       		.uleb128 0x14
 27156 2462 2F010000 		.4byte	.LASF34
 27157 2466 01       		.byte	0x1
 27158 2467 8B1A     		.2byte	0x1a8b
 27159 2469 25000000 		.4byte	0x25
 27160 246d 02       		.uleb128 0x2
 27161 246e 91       		.byte	0x91
 27162 246f 6F       		.sleb128 -17
 27163 2470 00       		.byte	0
 27164 2471 12       		.uleb128 0x12
 27165 2472 A6000000 		.4byte	.LASF215
 27166 2476 01       		.byte	0x1
 27167 2477 AF1A     		.2byte	0x1aaf
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 639


 27168 2479 25000000 		.4byte	0x25
 27169 247d 00000000 		.4byte	.LFB110
 27170 2481 68000000 		.4byte	.LFE110-.LFB110
 27171 2485 01       		.uleb128 0x1
 27172 2486 9C       		.byte	0x9c
 27173 2487 B9240000 		.4byte	0x24b9
 27174 248b 13       		.uleb128 0x13
 27175 248c 28000000 		.4byte	.LASF216
 27176 2490 01       		.byte	0x1
 27177 2491 B01A     		.2byte	0x1ab0
 27178 2493 5F020000 		.4byte	0x25f
 27179 2497 02       		.uleb128 0x2
 27180 2498 91       		.byte	0x91
 27181 2499 64       		.sleb128 -28
 27182 249a 14       		.uleb128 0x14
 27183 249b A0120000 		.4byte	.LASF29
 27184 249f 01       		.byte	0x1
 27185 24a0 B21A     		.2byte	0x1ab2
 27186 24a2 64000000 		.4byte	0x64
 27187 24a6 02       		.uleb128 0x2
 27188 24a7 91       		.byte	0x91
 27189 24a8 6E       		.sleb128 -18
 27190 24a9 14       		.uleb128 0x14
 27191 24aa 2F010000 		.4byte	.LASF34
 27192 24ae 01       		.byte	0x1
 27193 24af B51A     		.2byte	0x1ab5
 27194 24b1 25000000 		.4byte	0x25
 27195 24b5 02       		.uleb128 0x2
 27196 24b6 91       		.byte	0x91
 27197 24b7 6F       		.sleb128 -17
 27198 24b8 00       		.byte	0
 27199 24b9 12       		.uleb128 0x12
 27200 24ba 59030000 		.4byte	.LASF217
 27201 24be 01       		.byte	0x1
 27202 24bf D61A     		.2byte	0x1ad6
 27203 24c1 25000000 		.4byte	0x25
 27204 24c5 00000000 		.4byte	.LFB111
 27205 24c9 18010000 		.4byte	.LFE111-.LFB111
 27206 24cd 01       		.uleb128 0x1
 27207 24ce 9C       		.byte	0x9c
 27208 24cf 10250000 		.4byte	0x2510
 27209 24d3 13       		.uleb128 0x13
 27210 24d4 28000000 		.4byte	.LASF216
 27211 24d8 01       		.byte	0x1
 27212 24d9 D71A     		.2byte	0x1ad7
 27213 24db 64000000 		.4byte	0x64
 27214 24df 02       		.uleb128 0x2
 27215 24e0 91       		.byte	0x91
 27216 24e1 67       		.sleb128 -25
 27217 24e2 14       		.uleb128 0x14
 27218 24e3 A0120000 		.4byte	.LASF29
 27219 24e7 01       		.byte	0x1
 27220 24e8 D91A     		.2byte	0x1ad9
 27221 24ea 64000000 		.4byte	0x64
 27222 24ee 02       		.uleb128 0x2
 27223 24ef 91       		.byte	0x91
 27224 24f0 6E       		.sleb128 -18
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 640


 27225 24f1 14       		.uleb128 0x14
 27226 24f2 060C0000 		.4byte	.LASF218
 27227 24f6 01       		.byte	0x1
 27228 24f7 DA1A     		.2byte	0x1ada
 27229 24f9 64000000 		.4byte	0x64
 27230 24fd 02       		.uleb128 0x2
 27231 24fe 91       		.byte	0x91
 27232 24ff 6D       		.sleb128 -19
 27233 2500 14       		.uleb128 0x14
 27234 2501 2F010000 		.4byte	.LASF34
 27235 2505 01       		.byte	0x1
 27236 2506 DD1A     		.2byte	0x1add
 27237 2508 25000000 		.4byte	0x25
 27238 250c 02       		.uleb128 0x2
 27239 250d 91       		.byte	0x91
 27240 250e 6F       		.sleb128 -17
 27241 250f 00       		.byte	0
 27242 2510 12       		.uleb128 0x12
 27243 2511 690B0000 		.4byte	.LASF219
 27244 2515 01       		.byte	0x1
 27245 2516 0D1B     		.2byte	0x1b0d
 27246 2518 25000000 		.4byte	0x25
 27247 251c 00000000 		.4byte	.LFB112
 27248 2520 68000000 		.4byte	.LFE112-.LFB112
 27249 2524 01       		.uleb128 0x1
 27250 2525 9C       		.byte	0x9c
 27251 2526 58250000 		.4byte	0x2558
 27252 252a 13       		.uleb128 0x13
 27253 252b 37100000 		.4byte	.LASF220
 27254 252f 01       		.byte	0x1
 27255 2530 0E1B     		.2byte	0x1b0e
 27256 2532 5F020000 		.4byte	0x25f
 27257 2536 02       		.uleb128 0x2
 27258 2537 91       		.byte	0x91
 27259 2538 64       		.sleb128 -28
 27260 2539 14       		.uleb128 0x14
 27261 253a A0120000 		.4byte	.LASF29
 27262 253e 01       		.byte	0x1
 27263 253f 101B     		.2byte	0x1b10
 27264 2541 64000000 		.4byte	0x64
 27265 2545 02       		.uleb128 0x2
 27266 2546 91       		.byte	0x91
 27267 2547 6E       		.sleb128 -18
 27268 2548 14       		.uleb128 0x14
 27269 2549 2F010000 		.4byte	.LASF34
 27270 254d 01       		.byte	0x1
 27271 254e 131B     		.2byte	0x1b13
 27272 2550 25000000 		.4byte	0x25
 27273 2554 02       		.uleb128 0x2
 27274 2555 91       		.byte	0x91
 27275 2556 6F       		.sleb128 -17
 27276 2557 00       		.byte	0
 27277 2558 12       		.uleb128 0x12
 27278 2559 04020000 		.4byte	.LASF221
 27279 255d 01       		.byte	0x1
 27280 255e 381B     		.2byte	0x1b38
 27281 2560 25000000 		.4byte	0x25
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 641


 27282 2564 00000000 		.4byte	.LFB113
 27283 2568 B8000000 		.4byte	.LFE113-.LFB113
 27284 256c 01       		.uleb128 0x1
 27285 256d 9C       		.byte	0x9c
 27286 256e A0250000 		.4byte	0x25a0
 27287 2572 13       		.uleb128 0x13
 27288 2573 37100000 		.4byte	.LASF220
 27289 2577 01       		.byte	0x1
 27290 2578 391B     		.2byte	0x1b39
 27291 257a 64000000 		.4byte	0x64
 27292 257e 02       		.uleb128 0x2
 27293 257f 91       		.byte	0x91
 27294 2580 67       		.sleb128 -25
 27295 2581 14       		.uleb128 0x14
 27296 2582 A0120000 		.4byte	.LASF29
 27297 2586 01       		.byte	0x1
 27298 2587 3B1B     		.2byte	0x1b3b
 27299 2589 64000000 		.4byte	0x64
 27300 258d 02       		.uleb128 0x2
 27301 258e 91       		.byte	0x91
 27302 258f 6E       		.sleb128 -18
 27303 2590 14       		.uleb128 0x14
 27304 2591 2F010000 		.4byte	.LASF34
 27305 2595 01       		.byte	0x1
 27306 2596 3E1B     		.2byte	0x1b3e
 27307 2598 25000000 		.4byte	0x25
 27308 259c 02       		.uleb128 0x2
 27309 259d 91       		.byte	0x91
 27310 259e 6F       		.sleb128 -17
 27311 259f 00       		.byte	0
 27312 25a0 12       		.uleb128 0x12
 27313 25a1 C1080000 		.4byte	.LASF222
 27314 25a5 01       		.byte	0x1
 27315 25a6 681B     		.2byte	0x1b68
 27316 25a8 25000000 		.4byte	0x25
 27317 25ac 00000000 		.4byte	.LFB114
 27318 25b0 6C000000 		.4byte	.LFE114-.LFB114
 27319 25b4 01       		.uleb128 0x1
 27320 25b5 9C       		.byte	0x9c
 27321 25b6 E8250000 		.4byte	0x25e8
 27322 25ba 13       		.uleb128 0x13
 27323 25bb 43140000 		.4byte	.LASF223
 27324 25bf 01       		.byte	0x1
 27325 25c0 691B     		.2byte	0x1b69
 27326 25c2 5F020000 		.4byte	0x25f
 27327 25c6 02       		.uleb128 0x2
 27328 25c7 91       		.byte	0x91
 27329 25c8 64       		.sleb128 -28
 27330 25c9 14       		.uleb128 0x14
 27331 25ca A0120000 		.4byte	.LASF29
 27332 25ce 01       		.byte	0x1
 27333 25cf 6B1B     		.2byte	0x1b6b
 27334 25d1 64000000 		.4byte	0x64
 27335 25d5 02       		.uleb128 0x2
 27336 25d6 91       		.byte	0x91
 27337 25d7 6E       		.sleb128 -18
 27338 25d8 14       		.uleb128 0x14
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 642


 27339 25d9 2F010000 		.4byte	.LASF34
 27340 25dd 01       		.byte	0x1
 27341 25de 6E1B     		.2byte	0x1b6e
 27342 25e0 25000000 		.4byte	0x25
 27343 25e4 02       		.uleb128 0x2
 27344 25e5 91       		.byte	0x91
 27345 25e6 6F       		.sleb128 -17
 27346 25e7 00       		.byte	0
 27347 25e8 12       		.uleb128 0x12
 27348 25e9 A8080000 		.4byte	.LASF224
 27349 25ed 01       		.byte	0x1
 27350 25ee 911B     		.2byte	0x1b91
 27351 25f0 25000000 		.4byte	0x25
 27352 25f4 00000000 		.4byte	.LFB115
 27353 25f8 B8000000 		.4byte	.LFE115-.LFB115
 27354 25fc 01       		.uleb128 0x1
 27355 25fd 9C       		.byte	0x9c
 27356 25fe 30260000 		.4byte	0x2630
 27357 2602 13       		.uleb128 0x13
 27358 2603 43140000 		.4byte	.LASF223
 27359 2607 01       		.byte	0x1
 27360 2608 921B     		.2byte	0x1b92
 27361 260a 64000000 		.4byte	0x64
 27362 260e 02       		.uleb128 0x2
 27363 260f 91       		.byte	0x91
 27364 2610 67       		.sleb128 -25
 27365 2611 14       		.uleb128 0x14
 27366 2612 A0120000 		.4byte	.LASF29
 27367 2616 01       		.byte	0x1
 27368 2617 941B     		.2byte	0x1b94
 27369 2619 64000000 		.4byte	0x64
 27370 261d 02       		.uleb128 0x2
 27371 261e 91       		.byte	0x91
 27372 261f 6E       		.sleb128 -18
 27373 2620 14       		.uleb128 0x14
 27374 2621 2F010000 		.4byte	.LASF34
 27375 2625 01       		.byte	0x1
 27376 2626 971B     		.2byte	0x1b97
 27377 2628 25000000 		.4byte	0x25
 27378 262c 02       		.uleb128 0x2
 27379 262d 91       		.byte	0x91
 27380 262e 6F       		.sleb128 -17
 27381 262f 00       		.byte	0
 27382 2630 12       		.uleb128 0x12
 27383 2631 CC0F0000 		.4byte	.LASF225
 27384 2635 01       		.byte	0x1
 27385 2636 C01B     		.2byte	0x1bc0
 27386 2638 25000000 		.4byte	0x25
 27387 263c 00000000 		.4byte	.LFB116
 27388 2640 6C000000 		.4byte	.LFE116-.LFB116
 27389 2644 01       		.uleb128 0x1
 27390 2645 9C       		.byte	0x9c
 27391 2646 78260000 		.4byte	0x2678
 27392 264a 13       		.uleb128 0x13
 27393 264b 72030000 		.4byte	.LASF226
 27394 264f 01       		.byte	0x1
 27395 2650 C11B     		.2byte	0x1bc1
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 643


 27396 2652 5F020000 		.4byte	0x25f
 27397 2656 02       		.uleb128 0x2
 27398 2657 91       		.byte	0x91
 27399 2658 64       		.sleb128 -28
 27400 2659 14       		.uleb128 0x14
 27401 265a A0120000 		.4byte	.LASF29
 27402 265e 01       		.byte	0x1
 27403 265f C31B     		.2byte	0x1bc3
 27404 2661 64000000 		.4byte	0x64
 27405 2665 02       		.uleb128 0x2
 27406 2666 91       		.byte	0x91
 27407 2667 6E       		.sleb128 -18
 27408 2668 14       		.uleb128 0x14
 27409 2669 2F010000 		.4byte	.LASF34
 27410 266d 01       		.byte	0x1
 27411 266e C61B     		.2byte	0x1bc6
 27412 2670 25000000 		.4byte	0x25
 27413 2674 02       		.uleb128 0x2
 27414 2675 91       		.byte	0x91
 27415 2676 6F       		.sleb128 -17
 27416 2677 00       		.byte	0
 27417 2678 12       		.uleb128 0x12
 27418 2679 37040000 		.4byte	.LASF227
 27419 267d 01       		.byte	0x1
 27420 267e E61B     		.2byte	0x1be6
 27421 2680 25000000 		.4byte	0x25
 27422 2684 00000000 		.4byte	.LFB117
 27423 2688 A8000000 		.4byte	.LFE117-.LFB117
 27424 268c 01       		.uleb128 0x1
 27425 268d 9C       		.byte	0x9c
 27426 268e C0260000 		.4byte	0x26c0
 27427 2692 13       		.uleb128 0x13
 27428 2693 72030000 		.4byte	.LASF226
 27429 2697 01       		.byte	0x1
 27430 2698 E61B     		.2byte	0x1be6
 27431 269a 64000000 		.4byte	0x64
 27432 269e 02       		.uleb128 0x2
 27433 269f 91       		.byte	0x91
 27434 26a0 67       		.sleb128 -25
 27435 26a1 14       		.uleb128 0x14
 27436 26a2 A0120000 		.4byte	.LASF29
 27437 26a6 01       		.byte	0x1
 27438 26a7 E81B     		.2byte	0x1be8
 27439 26a9 64000000 		.4byte	0x64
 27440 26ad 02       		.uleb128 0x2
 27441 26ae 91       		.byte	0x91
 27442 26af 6E       		.sleb128 -18
 27443 26b0 14       		.uleb128 0x14
 27444 26b1 2F010000 		.4byte	.LASF34
 27445 26b5 01       		.byte	0x1
 27446 26b6 EB1B     		.2byte	0x1beb
 27447 26b8 25000000 		.4byte	0x25
 27448 26bc 02       		.uleb128 0x2
 27449 26bd 91       		.byte	0x91
 27450 26be 6F       		.sleb128 -17
 27451 26bf 00       		.byte	0
 27452 26c0 12       		.uleb128 0x12
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 644


 27453 26c1 4C050000 		.4byte	.LASF228
 27454 26c5 01       		.byte	0x1
 27455 26c6 121C     		.2byte	0x1c12
 27456 26c8 25000000 		.4byte	0x25
 27457 26cc 00000000 		.4byte	.LFB118
 27458 26d0 AC000000 		.4byte	.LFE118-.LFB118
 27459 26d4 01       		.uleb128 0x1
 27460 26d5 9C       		.byte	0x9c
 27461 26d6 08270000 		.4byte	0x2708
 27462 26da 13       		.uleb128 0x13
 27463 26db 310D0000 		.4byte	.LASF229
 27464 26df 01       		.byte	0x1
 27465 26e0 121C     		.2byte	0x1c12
 27466 26e2 64000000 		.4byte	0x64
 27467 26e6 02       		.uleb128 0x2
 27468 26e7 91       		.byte	0x91
 27469 26e8 67       		.sleb128 -25
 27470 26e9 14       		.uleb128 0x14
 27471 26ea A0120000 		.4byte	.LASF29
 27472 26ee 01       		.byte	0x1
 27473 26ef 141C     		.2byte	0x1c14
 27474 26f1 64000000 		.4byte	0x64
 27475 26f5 02       		.uleb128 0x2
 27476 26f6 91       		.byte	0x91
 27477 26f7 6E       		.sleb128 -18
 27478 26f8 14       		.uleb128 0x14
 27479 26f9 2F010000 		.4byte	.LASF34
 27480 26fd 01       		.byte	0x1
 27481 26fe 171C     		.2byte	0x1c17
 27482 2700 25000000 		.4byte	0x25
 27483 2704 02       		.uleb128 0x2
 27484 2705 91       		.byte	0x91
 27485 2706 6F       		.sleb128 -17
 27486 2707 00       		.byte	0
 27487 2708 12       		.uleb128 0x12
 27488 2709 B5060000 		.4byte	.LASF230
 27489 270d 01       		.byte	0x1
 27490 270e 3D1C     		.2byte	0x1c3d
 27491 2710 25000000 		.4byte	0x25
 27492 2714 00000000 		.4byte	.LFB119
 27493 2718 70000000 		.4byte	.LFE119-.LFB119
 27494 271c 01       		.uleb128 0x1
 27495 271d 9C       		.byte	0x9c
 27496 271e 50270000 		.4byte	0x2750
 27497 2722 13       		.uleb128 0x13
 27498 2723 CA020000 		.4byte	.LASF231
 27499 2727 01       		.byte	0x1
 27500 2728 3D1C     		.2byte	0x1c3d
 27501 272a 5F020000 		.4byte	0x25f
 27502 272e 02       		.uleb128 0x2
 27503 272f 91       		.byte	0x91
 27504 2730 64       		.sleb128 -28
 27505 2731 14       		.uleb128 0x14
 27506 2732 2F010000 		.4byte	.LASF34
 27507 2736 01       		.byte	0x1
 27508 2737 411C     		.2byte	0x1c41
 27509 2739 25000000 		.4byte	0x25
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 645


 27510 273d 02       		.uleb128 0x2
 27511 273e 91       		.byte	0x91
 27512 273f 6F       		.sleb128 -17
 27513 2740 14       		.uleb128 0x14
 27514 2741 A0120000 		.4byte	.LASF29
 27515 2745 01       		.byte	0x1
 27516 2746 421C     		.2byte	0x1c42
 27517 2748 64000000 		.4byte	0x64
 27518 274c 02       		.uleb128 0x2
 27519 274d 91       		.byte	0x91
 27520 274e 6E       		.sleb128 -18
 27521 274f 00       		.byte	0
 27522 2750 12       		.uleb128 0x12
 27523 2751 440C0000 		.4byte	.LASF232
 27524 2755 01       		.byte	0x1
 27525 2756 651C     		.2byte	0x1c65
 27526 2758 25000000 		.4byte	0x25
 27527 275c 00000000 		.4byte	.LFB120
 27528 2760 6C000000 		.4byte	.LFE120-.LFB120
 27529 2764 01       		.uleb128 0x1
 27530 2765 9C       		.byte	0x9c
 27531 2766 98270000 		.4byte	0x2798
 27532 276a 13       		.uleb128 0x13
 27533 276b 95000000 		.4byte	.LASF233
 27534 276f 01       		.byte	0x1
 27535 2770 651C     		.2byte	0x1c65
 27536 2772 5F020000 		.4byte	0x25f
 27537 2776 02       		.uleb128 0x2
 27538 2777 91       		.byte	0x91
 27539 2778 64       		.sleb128 -28
 27540 2779 14       		.uleb128 0x14
 27541 277a 2F010000 		.4byte	.LASF34
 27542 277e 01       		.byte	0x1
 27543 277f 691C     		.2byte	0x1c69
 27544 2781 25000000 		.4byte	0x25
 27545 2785 02       		.uleb128 0x2
 27546 2786 91       		.byte	0x91
 27547 2787 6F       		.sleb128 -17
 27548 2788 14       		.uleb128 0x14
 27549 2789 A0120000 		.4byte	.LASF29
 27550 278d 01       		.byte	0x1
 27551 278e 6A1C     		.2byte	0x1c6a
 27552 2790 64000000 		.4byte	0x64
 27553 2794 02       		.uleb128 0x2
 27554 2795 91       		.byte	0x91
 27555 2796 6E       		.sleb128 -18
 27556 2797 00       		.byte	0
 27557 2798 12       		.uleb128 0x12
 27558 2799 250A0000 		.4byte	.LASF234
 27559 279d 01       		.byte	0x1
 27560 279e 8D1C     		.2byte	0x1c8d
 27561 27a0 25000000 		.4byte	0x25
 27562 27a4 00000000 		.4byte	.LFB121
 27563 27a8 68000000 		.4byte	.LFE121-.LFB121
 27564 27ac 01       		.uleb128 0x1
 27565 27ad 9C       		.byte	0x9c
 27566 27ae E0270000 		.4byte	0x27e0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 646


 27567 27b2 13       		.uleb128 0x13
 27568 27b3 1C010000 		.4byte	.LASF235
 27569 27b7 01       		.byte	0x1
 27570 27b8 8D1C     		.2byte	0x1c8d
 27571 27ba 5F020000 		.4byte	0x25f
 27572 27be 02       		.uleb128 0x2
 27573 27bf 91       		.byte	0x91
 27574 27c0 64       		.sleb128 -28
 27575 27c1 14       		.uleb128 0x14
 27576 27c2 A0120000 		.4byte	.LASF29
 27577 27c6 01       		.byte	0x1
 27578 27c7 8F1C     		.2byte	0x1c8f
 27579 27c9 64000000 		.4byte	0x64
 27580 27cd 02       		.uleb128 0x2
 27581 27ce 91       		.byte	0x91
 27582 27cf 6E       		.sleb128 -18
 27583 27d0 14       		.uleb128 0x14
 27584 27d1 2F010000 		.4byte	.LASF34
 27585 27d5 01       		.byte	0x1
 27586 27d6 921C     		.2byte	0x1c92
 27587 27d8 25000000 		.4byte	0x25
 27588 27dc 02       		.uleb128 0x2
 27589 27dd 91       		.byte	0x91
 27590 27de 6F       		.sleb128 -17
 27591 27df 00       		.byte	0
 27592 27e0 12       		.uleb128 0x12
 27593 27e1 FE000000 		.4byte	.LASF236
 27594 27e5 01       		.byte	0x1
 27595 27e6 B61C     		.2byte	0x1cb6
 27596 27e8 25000000 		.4byte	0x25
 27597 27ec 00000000 		.4byte	.LFB122
 27598 27f0 A4000000 		.4byte	.LFE122-.LFB122
 27599 27f4 01       		.uleb128 0x1
 27600 27f5 9C       		.byte	0x9c
 27601 27f6 28280000 		.4byte	0x2828
 27602 27fa 13       		.uleb128 0x13
 27603 27fb 1C010000 		.4byte	.LASF235
 27604 27ff 01       		.byte	0x1
 27605 2800 B61C     		.2byte	0x1cb6
 27606 2802 64000000 		.4byte	0x64
 27607 2806 02       		.uleb128 0x2
 27608 2807 91       		.byte	0x91
 27609 2808 67       		.sleb128 -25
 27610 2809 14       		.uleb128 0x14
 27611 280a A0120000 		.4byte	.LASF29
 27612 280e 01       		.byte	0x1
 27613 280f B81C     		.2byte	0x1cb8
 27614 2811 64000000 		.4byte	0x64
 27615 2815 02       		.uleb128 0x2
 27616 2816 91       		.byte	0x91
 27617 2817 6E       		.sleb128 -18
 27618 2818 14       		.uleb128 0x14
 27619 2819 2F010000 		.4byte	.LASF34
 27620 281d 01       		.byte	0x1
 27621 281e BB1C     		.2byte	0x1cbb
 27622 2820 25000000 		.4byte	0x25
 27623 2824 02       		.uleb128 0x2
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 647


 27624 2825 91       		.byte	0x91
 27625 2826 6F       		.sleb128 -17
 27626 2827 00       		.byte	0
 27627 2828 12       		.uleb128 0x12
 27628 2829 05130000 		.4byte	.LASF237
 27629 282d 01       		.byte	0x1
 27630 282e ED1C     		.2byte	0x1ced
 27631 2830 25000000 		.4byte	0x25
 27632 2834 00000000 		.4byte	.LFB123
 27633 2838 C0000000 		.4byte	.LFE123-.LFB123
 27634 283c 01       		.uleb128 0x1
 27635 283d 9C       		.byte	0x9c
 27636 283e 7F280000 		.4byte	0x287f
 27637 2842 13       		.uleb128 0x13
 27638 2843 820C0000 		.4byte	.LASF109
 27639 2847 01       		.byte	0x1
 27640 2848 ED1C     		.2byte	0x1ced
 27641 284a 64000000 		.4byte	0x64
 27642 284e 02       		.uleb128 0x2
 27643 284f 91       		.byte	0x91
 27644 2850 67       		.sleb128 -25
 27645 2851 13       		.uleb128 0x13
 27646 2852 87040000 		.4byte	.LASF238
 27647 2856 01       		.byte	0x1
 27648 2857 EE1C     		.2byte	0x1cee
 27649 2859 5F020000 		.4byte	0x25f
 27650 285d 02       		.uleb128 0x2
 27651 285e 91       		.byte	0x91
 27652 285f 60       		.sleb128 -32
 27653 2860 14       		.uleb128 0x14
 27654 2861 A0120000 		.4byte	.LASF29
 27655 2865 01       		.byte	0x1
 27656 2866 F01C     		.2byte	0x1cf0
 27657 2868 64000000 		.4byte	0x64
 27658 286c 02       		.uleb128 0x2
 27659 286d 91       		.byte	0x91
 27660 286e 6E       		.sleb128 -18
 27661 286f 14       		.uleb128 0x14
 27662 2870 2F010000 		.4byte	.LASF34
 27663 2874 01       		.byte	0x1
 27664 2875 F31C     		.2byte	0x1cf3
 27665 2877 25000000 		.4byte	0x25
 27666 287b 02       		.uleb128 0x2
 27667 287c 91       		.byte	0x91
 27668 287d 6F       		.sleb128 -17
 27669 287e 00       		.byte	0
 27670 287f 12       		.uleb128 0x12
 27671 2880 A4090000 		.4byte	.LASF239
 27672 2884 01       		.byte	0x1
 27673 2885 301D     		.2byte	0x1d30
 27674 2887 25000000 		.4byte	0x25
 27675 288b 00000000 		.4byte	.LFB124
 27676 288f 30010000 		.4byte	.LFE124-.LFB124
 27677 2893 01       		.uleb128 0x1
 27678 2894 9C       		.byte	0x9c
 27679 2895 D6280000 		.4byte	0x28d6
 27680 2899 13       		.uleb128 0x13
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 648


 27681 289a 820C0000 		.4byte	.LASF109
 27682 289e 01       		.byte	0x1
 27683 289f 301D     		.2byte	0x1d30
 27684 28a1 64000000 		.4byte	0x64
 27685 28a5 02       		.uleb128 0x2
 27686 28a6 91       		.byte	0x91
 27687 28a7 67       		.sleb128 -25
 27688 28a8 13       		.uleb128 0x13
 27689 28a9 87040000 		.4byte	.LASF238
 27690 28ad 01       		.byte	0x1
 27691 28ae 311D     		.2byte	0x1d31
 27692 28b0 64000000 		.4byte	0x64
 27693 28b4 02       		.uleb128 0x2
 27694 28b5 91       		.byte	0x91
 27695 28b6 66       		.sleb128 -26
 27696 28b7 14       		.uleb128 0x14
 27697 28b8 A0120000 		.4byte	.LASF29
 27698 28bc 01       		.byte	0x1
 27699 28bd 331D     		.2byte	0x1d33
 27700 28bf 64000000 		.4byte	0x64
 27701 28c3 02       		.uleb128 0x2
 27702 28c4 91       		.byte	0x91
 27703 28c5 6E       		.sleb128 -18
 27704 28c6 14       		.uleb128 0x14
 27705 28c7 2F010000 		.4byte	.LASF34
 27706 28cb 01       		.byte	0x1
 27707 28cc 361D     		.2byte	0x1d36
 27708 28ce 25000000 		.4byte	0x25
 27709 28d2 02       		.uleb128 0x2
 27710 28d3 91       		.byte	0x91
 27711 28d4 6F       		.sleb128 -17
 27712 28d5 00       		.byte	0
 27713 28d6 12       		.uleb128 0x12
 27714 28d7 AF070000 		.4byte	.LASF240
 27715 28db 01       		.byte	0x1
 27716 28dc 791D     		.2byte	0x1d79
 27717 28de 25000000 		.4byte	0x25
 27718 28e2 00000000 		.4byte	.LFB125
 27719 28e6 F4000000 		.4byte	.LFE125-.LFB125
 27720 28ea 01       		.uleb128 0x1
 27721 28eb 9C       		.byte	0x9c
 27722 28ec 2D290000 		.4byte	0x292d
 27723 28f0 13       		.uleb128 0x13
 27724 28f1 820C0000 		.4byte	.LASF109
 27725 28f5 01       		.byte	0x1
 27726 28f6 791D     		.2byte	0x1d79
 27727 28f8 64000000 		.4byte	0x64
 27728 28fc 02       		.uleb128 0x2
 27729 28fd 91       		.byte	0x91
 27730 28fe 67       		.sleb128 -25
 27731 28ff 13       		.uleb128 0x13
 27732 2900 C5110000 		.4byte	.LASF241
 27733 2904 01       		.byte	0x1
 27734 2905 7A1D     		.2byte	0x1d7a
 27735 2907 5F020000 		.4byte	0x25f
 27736 290b 02       		.uleb128 0x2
 27737 290c 91       		.byte	0x91
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 649


 27738 290d 60       		.sleb128 -32
 27739 290e 14       		.uleb128 0x14
 27740 290f A0120000 		.4byte	.LASF29
 27741 2913 01       		.byte	0x1
 27742 2914 7C1D     		.2byte	0x1d7c
 27743 2916 64000000 		.4byte	0x64
 27744 291a 02       		.uleb128 0x2
 27745 291b 91       		.byte	0x91
 27746 291c 6E       		.sleb128 -18
 27747 291d 14       		.uleb128 0x14
 27748 291e 2F010000 		.4byte	.LASF34
 27749 2922 01       		.byte	0x1
 27750 2923 7F1D     		.2byte	0x1d7f
 27751 2925 25000000 		.4byte	0x25
 27752 2929 02       		.uleb128 0x2
 27753 292a 91       		.byte	0x91
 27754 292b 6F       		.sleb128 -17
 27755 292c 00       		.byte	0
 27756 292d 12       		.uleb128 0x12
 27757 292e BC0A0000 		.4byte	.LASF242
 27758 2932 01       		.byte	0x1
 27759 2933 C51D     		.2byte	0x1dc5
 27760 2935 25000000 		.4byte	0x25
 27761 2939 00000000 		.4byte	.LFB126
 27762 293d 9C010000 		.4byte	.LFE126-.LFB126
 27763 2941 01       		.uleb128 0x1
 27764 2942 9C       		.byte	0x9c
 27765 2943 84290000 		.4byte	0x2984
 27766 2947 13       		.uleb128 0x13
 27767 2948 820C0000 		.4byte	.LASF109
 27768 294c 01       		.byte	0x1
 27769 294d C51D     		.2byte	0x1dc5
 27770 294f 64000000 		.4byte	0x64
 27771 2953 02       		.uleb128 0x2
 27772 2954 91       		.byte	0x91
 27773 2955 67       		.sleb128 -25
 27774 2956 13       		.uleb128 0x13
 27775 2957 C5110000 		.4byte	.LASF241
 27776 295b 01       		.byte	0x1
 27777 295c C61D     		.2byte	0x1dc6
 27778 295e 64000000 		.4byte	0x64
 27779 2962 02       		.uleb128 0x2
 27780 2963 91       		.byte	0x91
 27781 2964 66       		.sleb128 -26
 27782 2965 14       		.uleb128 0x14
 27783 2966 A0120000 		.4byte	.LASF29
 27784 296a 01       		.byte	0x1
 27785 296b C81D     		.2byte	0x1dc8
 27786 296d 64000000 		.4byte	0x64
 27787 2971 02       		.uleb128 0x2
 27788 2972 91       		.byte	0x91
 27789 2973 6E       		.sleb128 -18
 27790 2974 14       		.uleb128 0x14
 27791 2975 2F010000 		.4byte	.LASF34
 27792 2979 01       		.byte	0x1
 27793 297a CB1D     		.2byte	0x1dcb
 27794 297c 25000000 		.4byte	0x25
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 650


 27795 2980 02       		.uleb128 0x2
 27796 2981 91       		.byte	0x91
 27797 2982 6F       		.sleb128 -17
 27798 2983 00       		.byte	0
 27799 2984 12       		.uleb128 0x12
 27800 2985 B2110000 		.4byte	.LASF243
 27801 2989 01       		.byte	0x1
 27802 298a 121E     		.2byte	0x1e12
 27803 298c 25000000 		.4byte	0x25
 27804 2990 00000000 		.4byte	.LFB127
 27805 2994 6C000000 		.4byte	.LFE127-.LFB127
 27806 2998 01       		.uleb128 0x1
 27807 2999 9C       		.byte	0x9c
 27808 299a CC290000 		.4byte	0x29cc
 27809 299e 13       		.uleb128 0x13
 27810 299f 60070000 		.4byte	.LASF244
 27811 29a3 01       		.byte	0x1
 27812 29a4 121E     		.2byte	0x1e12
 27813 29a6 5F020000 		.4byte	0x25f
 27814 29aa 02       		.uleb128 0x2
 27815 29ab 91       		.byte	0x91
 27816 29ac 64       		.sleb128 -28
 27817 29ad 14       		.uleb128 0x14
 27818 29ae A0120000 		.4byte	.LASF29
 27819 29b2 01       		.byte	0x1
 27820 29b3 141E     		.2byte	0x1e14
 27821 29b5 64000000 		.4byte	0x64
 27822 29b9 02       		.uleb128 0x2
 27823 29ba 91       		.byte	0x91
 27824 29bb 6E       		.sleb128 -18
 27825 29bc 14       		.uleb128 0x14
 27826 29bd 2F010000 		.4byte	.LASF34
 27827 29c1 01       		.byte	0x1
 27828 29c2 171E     		.2byte	0x1e17
 27829 29c4 25000000 		.4byte	0x25
 27830 29c8 02       		.uleb128 0x2
 27831 29c9 91       		.byte	0x91
 27832 29ca 6F       		.sleb128 -17
 27833 29cb 00       		.byte	0
 27834 29cc 12       		.uleb128 0x12
 27835 29cd A4140000 		.4byte	.LASF245
 27836 29d1 01       		.byte	0x1
 27837 29d2 381E     		.2byte	0x1e38
 27838 29d4 25000000 		.4byte	0x25
 27839 29d8 00000000 		.4byte	.LFB128
 27840 29dc A8000000 		.4byte	.LFE128-.LFB128
 27841 29e0 01       		.uleb128 0x1
 27842 29e1 9C       		.byte	0x9c
 27843 29e2 142A0000 		.4byte	0x2a14
 27844 29e6 13       		.uleb128 0x13
 27845 29e7 6A080000 		.4byte	.LASF246
 27846 29eb 01       		.byte	0x1
 27847 29ec 381E     		.2byte	0x1e38
 27848 29ee 64000000 		.4byte	0x64
 27849 29f2 02       		.uleb128 0x2
 27850 29f3 91       		.byte	0x91
 27851 29f4 67       		.sleb128 -25
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 651


 27852 29f5 14       		.uleb128 0x14
 27853 29f6 A0120000 		.4byte	.LASF29
 27854 29fa 01       		.byte	0x1
 27855 29fb 3A1E     		.2byte	0x1e3a
 27856 29fd 64000000 		.4byte	0x64
 27857 2a01 02       		.uleb128 0x2
 27858 2a02 91       		.byte	0x91
 27859 2a03 6E       		.sleb128 -18
 27860 2a04 14       		.uleb128 0x14
 27861 2a05 2F010000 		.4byte	.LASF34
 27862 2a09 01       		.byte	0x1
 27863 2a0a 3D1E     		.2byte	0x1e3d
 27864 2a0c 25000000 		.4byte	0x25
 27865 2a10 02       		.uleb128 0x2
 27866 2a11 91       		.byte	0x91
 27867 2a12 6F       		.sleb128 -17
 27868 2a13 00       		.byte	0
 27869 2a14 12       		.uleb128 0x12
 27870 2a15 F8110000 		.4byte	.LASF247
 27871 2a19 01       		.byte	0x1
 27872 2a1a 601E     		.2byte	0x1e60
 27873 2a1c 25000000 		.4byte	0x25
 27874 2a20 00000000 		.4byte	.LFB129
 27875 2a24 A0000000 		.4byte	.LFE129-.LFB129
 27876 2a28 01       		.uleb128 0x1
 27877 2a29 9C       		.byte	0x9c
 27878 2a2a 5C2A0000 		.4byte	0x2a5c
 27879 2a2e 13       		.uleb128 0x13
 27880 2a2f 4E0D0000 		.4byte	.LASF248
 27881 2a33 01       		.byte	0x1
 27882 2a34 601E     		.2byte	0x1e60
 27883 2a36 64000000 		.4byte	0x64
 27884 2a3a 02       		.uleb128 0x2
 27885 2a3b 91       		.byte	0x91
 27886 2a3c 67       		.sleb128 -25
 27887 2a3d 14       		.uleb128 0x14
 27888 2a3e A0120000 		.4byte	.LASF29
 27889 2a42 01       		.byte	0x1
 27890 2a43 621E     		.2byte	0x1e62
 27891 2a45 64000000 		.4byte	0x64
 27892 2a49 02       		.uleb128 0x2
 27893 2a4a 91       		.byte	0x91
 27894 2a4b 6E       		.sleb128 -18
 27895 2a4c 14       		.uleb128 0x14
 27896 2a4d 2F010000 		.4byte	.LASF34
 27897 2a51 01       		.byte	0x1
 27898 2a52 651E     		.2byte	0x1e65
 27899 2a54 25000000 		.4byte	0x25
 27900 2a58 02       		.uleb128 0x2
 27901 2a59 91       		.byte	0x91
 27902 2a5a 6F       		.sleb128 -17
 27903 2a5b 00       		.byte	0
 27904 2a5c 12       		.uleb128 0x12
 27905 2a5d 2A140000 		.4byte	.LASF249
 27906 2a61 01       		.byte	0x1
 27907 2a62 9E1E     		.2byte	0x1e9e
 27908 2a64 25000000 		.4byte	0x25
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 652


 27909 2a68 00000000 		.4byte	.LFB130
 27910 2a6c 30010000 		.4byte	.LFE130-.LFB130
 27911 2a70 01       		.uleb128 0x1
 27912 2a71 9C       		.byte	0x9c
 27913 2a72 B32A0000 		.4byte	0x2ab3
 27914 2a76 13       		.uleb128 0x13
 27915 2a77 820C0000 		.4byte	.LASF109
 27916 2a7b 01       		.byte	0x1
 27917 2a7c 9E1E     		.2byte	0x1e9e
 27918 2a7e 64000000 		.4byte	0x64
 27919 2a82 02       		.uleb128 0x2
 27920 2a83 91       		.byte	0x91
 27921 2a84 67       		.sleb128 -25
 27922 2a85 13       		.uleb128 0x13
 27923 2a86 B7090000 		.4byte	.LASF250
 27924 2a8a 01       		.byte	0x1
 27925 2a8b 9F1E     		.2byte	0x1e9f
 27926 2a8d 5F020000 		.4byte	0x25f
 27927 2a91 02       		.uleb128 0x2
 27928 2a92 91       		.byte	0x91
 27929 2a93 60       		.sleb128 -32
 27930 2a94 14       		.uleb128 0x14
 27931 2a95 A0120000 		.4byte	.LASF29
 27932 2a99 01       		.byte	0x1
 27933 2a9a A11E     		.2byte	0x1ea1
 27934 2a9c 64000000 		.4byte	0x64
 27935 2aa0 02       		.uleb128 0x2
 27936 2aa1 91       		.byte	0x91
 27937 2aa2 6E       		.sleb128 -18
 27938 2aa3 14       		.uleb128 0x14
 27939 2aa4 2F010000 		.4byte	.LASF34
 27940 2aa8 01       		.byte	0x1
 27941 2aa9 A41E     		.2byte	0x1ea4
 27942 2aab 25000000 		.4byte	0x25
 27943 2aaf 02       		.uleb128 0x2
 27944 2ab0 91       		.byte	0x91
 27945 2ab1 6F       		.sleb128 -17
 27946 2ab2 00       		.byte	0
 27947 2ab3 12       		.uleb128 0x12
 27948 2ab4 EC120000 		.4byte	.LASF251
 27949 2ab8 01       		.byte	0x1
 27950 2ab9 FC1E     		.2byte	0x1efc
 27951 2abb 25000000 		.4byte	0x25
 27952 2abf 00000000 		.4byte	.LFB131
 27953 2ac3 10020000 		.4byte	.LFE131-.LFB131
 27954 2ac7 01       		.uleb128 0x1
 27955 2ac8 9C       		.byte	0x9c
 27956 2ac9 0A2B0000 		.4byte	0x2b0a
 27957 2acd 13       		.uleb128 0x13
 27958 2ace 820C0000 		.4byte	.LASF109
 27959 2ad2 01       		.byte	0x1
 27960 2ad3 FC1E     		.2byte	0x1efc
 27961 2ad5 64000000 		.4byte	0x64
 27962 2ad9 02       		.uleb128 0x2
 27963 2ada 91       		.byte	0x91
 27964 2adb 67       		.sleb128 -25
 27965 2adc 13       		.uleb128 0x13
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 653


 27966 2add B7090000 		.4byte	.LASF250
 27967 2ae1 01       		.byte	0x1
 27968 2ae2 FD1E     		.2byte	0x1efd
 27969 2ae4 64000000 		.4byte	0x64
 27970 2ae8 02       		.uleb128 0x2
 27971 2ae9 91       		.byte	0x91
 27972 2aea 66       		.sleb128 -26
 27973 2aeb 14       		.uleb128 0x14
 27974 2aec A0120000 		.4byte	.LASF29
 27975 2af0 01       		.byte	0x1
 27976 2af1 FF1E     		.2byte	0x1eff
 27977 2af3 64000000 		.4byte	0x64
 27978 2af7 02       		.uleb128 0x2
 27979 2af8 91       		.byte	0x91
 27980 2af9 6E       		.sleb128 -18
 27981 2afa 14       		.uleb128 0x14
 27982 2afb 2F010000 		.4byte	.LASF34
 27983 2aff 01       		.byte	0x1
 27984 2b00 021F     		.2byte	0x1f02
 27985 2b02 25000000 		.4byte	0x25
 27986 2b06 02       		.uleb128 0x2
 27987 2b07 91       		.byte	0x91
 27988 2b08 6F       		.sleb128 -17
 27989 2b09 00       		.byte	0
 27990 2b0a 12       		.uleb128 0x12
 27991 2b0b AB030000 		.4byte	.LASF252
 27992 2b0f 01       		.byte	0x1
 27993 2b10 591F     		.2byte	0x1f59
 27994 2b12 25000000 		.4byte	0x25
 27995 2b16 00000000 		.4byte	.LFB132
 27996 2b1a E0000000 		.4byte	.LFE132-.LFB132
 27997 2b1e 01       		.uleb128 0x1
 27998 2b1f 9C       		.byte	0x9c
 27999 2b20 612B0000 		.4byte	0x2b61
 28000 2b24 13       		.uleb128 0x13
 28001 2b25 820C0000 		.4byte	.LASF109
 28002 2b29 01       		.byte	0x1
 28003 2b2a 591F     		.2byte	0x1f59
 28004 2b2c 64000000 		.4byte	0x64
 28005 2b30 02       		.uleb128 0x2
 28006 2b31 91       		.byte	0x91
 28007 2b32 67       		.sleb128 -25
 28008 2b33 13       		.uleb128 0x13
 28009 2b34 B7090000 		.4byte	.LASF250
 28010 2b38 01       		.byte	0x1
 28011 2b39 5A1F     		.2byte	0x1f5a
 28012 2b3b D5040000 		.4byte	0x4d5
 28013 2b3f 02       		.uleb128 0x2
 28014 2b40 91       		.byte	0x91
 28015 2b41 60       		.sleb128 -32
 28016 2b42 14       		.uleb128 0x14
 28017 2b43 A0120000 		.4byte	.LASF29
 28018 2b47 01       		.byte	0x1
 28019 2b48 5C1F     		.2byte	0x1f5c
 28020 2b4a 64000000 		.4byte	0x64
 28021 2b4e 02       		.uleb128 0x2
 28022 2b4f 91       		.byte	0x91
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 654


 28023 2b50 6E       		.sleb128 -18
 28024 2b51 14       		.uleb128 0x14
 28025 2b52 2F010000 		.4byte	.LASF34
 28026 2b56 01       		.byte	0x1
 28027 2b57 5F1F     		.2byte	0x1f5f
 28028 2b59 25000000 		.4byte	0x25
 28029 2b5d 02       		.uleb128 0x2
 28030 2b5e 91       		.byte	0x91
 28031 2b5f 6F       		.sleb128 -17
 28032 2b60 00       		.byte	0
 28033 2b61 12       		.uleb128 0x12
 28034 2b62 18130000 		.4byte	.LASF253
 28035 2b66 01       		.byte	0x1
 28036 2b67 9B1F     		.2byte	0x1f9b
 28037 2b69 25000000 		.4byte	0x25
 28038 2b6d 00000000 		.4byte	.LFB133
 28039 2b71 C4000000 		.4byte	.LFE133-.LFB133
 28040 2b75 01       		.uleb128 0x1
 28041 2b76 9C       		.byte	0x9c
 28042 2b77 B82B0000 		.4byte	0x2bb8
 28043 2b7b 13       		.uleb128 0x13
 28044 2b7c 820C0000 		.4byte	.LASF109
 28045 2b80 01       		.byte	0x1
 28046 2b81 9B1F     		.2byte	0x1f9b
 28047 2b83 64000000 		.4byte	0x64
 28048 2b87 02       		.uleb128 0x2
 28049 2b88 91       		.byte	0x91
 28050 2b89 67       		.sleb128 -25
 28051 2b8a 13       		.uleb128 0x13
 28052 2b8b B7090000 		.4byte	.LASF250
 28053 2b8f 01       		.byte	0x1
 28054 2b90 9C1F     		.2byte	0x1f9c
 28055 2b92 25000000 		.4byte	0x25
 28056 2b96 02       		.uleb128 0x2
 28057 2b97 91       		.byte	0x91
 28058 2b98 66       		.sleb128 -26
 28059 2b99 14       		.uleb128 0x14
 28060 2b9a A0120000 		.4byte	.LASF29
 28061 2b9e 01       		.byte	0x1
 28062 2b9f 9E1F     		.2byte	0x1f9e
 28063 2ba1 64000000 		.4byte	0x64
 28064 2ba5 02       		.uleb128 0x2
 28065 2ba6 91       		.byte	0x91
 28066 2ba7 6E       		.sleb128 -18
 28067 2ba8 14       		.uleb128 0x14
 28068 2ba9 2F010000 		.4byte	.LASF34
 28069 2bad 01       		.byte	0x1
 28070 2bae A11F     		.2byte	0x1fa1
 28071 2bb0 25000000 		.4byte	0x25
 28072 2bb4 02       		.uleb128 0x2
 28073 2bb5 91       		.byte	0x91
 28074 2bb6 6F       		.sleb128 -17
 28075 2bb7 00       		.byte	0
 28076 2bb8 12       		.uleb128 0x12
 28077 2bb9 1B0B0000 		.4byte	.LASF254
 28078 2bbd 01       		.byte	0x1
 28079 2bbe D61F     		.2byte	0x1fd6
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 655


 28080 2bc0 25000000 		.4byte	0x25
 28081 2bc4 00000000 		.4byte	.LFB134
 28082 2bc8 68000000 		.4byte	.LFE134-.LFB134
 28083 2bcc 01       		.uleb128 0x1
 28084 2bcd 9C       		.byte	0x9c
 28085 2bce 002C0000 		.4byte	0x2c00
 28086 2bd2 13       		.uleb128 0x13
 28087 2bd3 E4010000 		.4byte	.LASF255
 28088 2bd7 01       		.byte	0x1
 28089 2bd8 D61F     		.2byte	0x1fd6
 28090 2bda 5F020000 		.4byte	0x25f
 28091 2bde 02       		.uleb128 0x2
 28092 2bdf 91       		.byte	0x91
 28093 2be0 64       		.sleb128 -28
 28094 2be1 14       		.uleb128 0x14
 28095 2be2 2F010000 		.4byte	.LASF34
 28096 2be6 01       		.byte	0x1
 28097 2be7 DA1F     		.2byte	0x1fda
 28098 2be9 25000000 		.4byte	0x25
 28099 2bed 02       		.uleb128 0x2
 28100 2bee 91       		.byte	0x91
 28101 2bef 6F       		.sleb128 -17
 28102 2bf0 14       		.uleb128 0x14
 28103 2bf1 A0120000 		.4byte	.LASF29
 28104 2bf5 01       		.byte	0x1
 28105 2bf6 DB1F     		.2byte	0x1fdb
 28106 2bf8 64000000 		.4byte	0x64
 28107 2bfc 02       		.uleb128 0x2
 28108 2bfd 91       		.byte	0x91
 28109 2bfe 6E       		.sleb128 -18
 28110 2bff 00       		.byte	0
 28111 2c00 12       		.uleb128 0x12
 28112 2c01 530F0000 		.4byte	.LASF256
 28113 2c05 01       		.byte	0x1
 28114 2c06 FF1F     		.2byte	0x1fff
 28115 2c08 25000000 		.4byte	0x25
 28116 2c0c 00000000 		.4byte	.LFB135
 28117 2c10 40010000 		.4byte	.LFE135-.LFB135
 28118 2c14 01       		.uleb128 0x1
 28119 2c15 9C       		.byte	0x9c
 28120 2c16 572C0000 		.4byte	0x2c57
 28121 2c1a 13       		.uleb128 0x13
 28122 2c1b E4010000 		.4byte	.LASF255
 28123 2c1f 01       		.byte	0x1
 28124 2c20 FF1F     		.2byte	0x1fff
 28125 2c22 64000000 		.4byte	0x64
 28126 2c26 02       		.uleb128 0x2
 28127 2c27 91       		.byte	0x91
 28128 2c28 67       		.sleb128 -25
 28129 2c29 14       		.uleb128 0x14
 28130 2c2a A0120000 		.4byte	.LASF29
 28131 2c2e 01       		.byte	0x1
 28132 2c2f 0120     		.2byte	0x2001
 28133 2c31 64000000 		.4byte	0x64
 28134 2c35 02       		.uleb128 0x2
 28135 2c36 91       		.byte	0x91
 28136 2c37 6E       		.sleb128 -18
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 656


 28137 2c38 14       		.uleb128 0x14
 28138 2c39 060C0000 		.4byte	.LASF218
 28139 2c3d 01       		.byte	0x1
 28140 2c3e 0220     		.2byte	0x2002
 28141 2c40 64000000 		.4byte	0x64
 28142 2c44 02       		.uleb128 0x2
 28143 2c45 91       		.byte	0x91
 28144 2c46 6D       		.sleb128 -19
 28145 2c47 14       		.uleb128 0x14
 28146 2c48 2F010000 		.4byte	.LASF34
 28147 2c4c 01       		.byte	0x1
 28148 2c4d 0520     		.2byte	0x2005
 28149 2c4f 25000000 		.4byte	0x25
 28150 2c53 02       		.uleb128 0x2
 28151 2c54 91       		.byte	0x91
 28152 2c55 6F       		.sleb128 -17
 28153 2c56 00       		.byte	0
 28154 2c57 12       		.uleb128 0x12
 28155 2c58 18030000 		.4byte	.LASF257
 28156 2c5c 01       		.byte	0x1
 28157 2c5d 3C20     		.2byte	0x203c
 28158 2c5f 25000000 		.4byte	0x25
 28159 2c63 00000000 		.4byte	.LFB136
 28160 2c67 68000000 		.4byte	.LFE136-.LFB136
 28161 2c6b 01       		.uleb128 0x1
 28162 2c6c 9C       		.byte	0x9c
 28163 2c6d 9F2C0000 		.4byte	0x2c9f
 28164 2c71 13       		.uleb128 0x13
 28165 2c72 4C070000 		.4byte	.LASF258
 28166 2c76 01       		.byte	0x1
 28167 2c77 3D20     		.2byte	0x203d
 28168 2c79 5F020000 		.4byte	0x25f
 28169 2c7d 02       		.uleb128 0x2
 28170 2c7e 91       		.byte	0x91
 28171 2c7f 64       		.sleb128 -28
 28172 2c80 14       		.uleb128 0x14
 28173 2c81 2F010000 		.4byte	.LASF34
 28174 2c85 01       		.byte	0x1
 28175 2c86 4120     		.2byte	0x2041
 28176 2c88 25000000 		.4byte	0x25
 28177 2c8c 02       		.uleb128 0x2
 28178 2c8d 91       		.byte	0x91
 28179 2c8e 6F       		.sleb128 -17
 28180 2c8f 14       		.uleb128 0x14
 28181 2c90 A0120000 		.4byte	.LASF29
 28182 2c94 01       		.byte	0x1
 28183 2c95 4220     		.2byte	0x2042
 28184 2c97 64000000 		.4byte	0x64
 28185 2c9b 02       		.uleb128 0x2
 28186 2c9c 91       		.byte	0x91
 28187 2c9d 6E       		.sleb128 -18
 28188 2c9e 00       		.byte	0
 28189 2c9f 12       		.uleb128 0x12
 28190 2ca0 4B020000 		.4byte	.LASF259
 28191 2ca4 01       		.byte	0x1
 28192 2ca5 6620     		.2byte	0x2066
 28193 2ca7 25000000 		.4byte	0x25
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 657


 28194 2cab 00000000 		.4byte	.LFB137
 28195 2caf 44010000 		.4byte	.LFE137-.LFB137
 28196 2cb3 01       		.uleb128 0x1
 28197 2cb4 9C       		.byte	0x9c
 28198 2cb5 F62C0000 		.4byte	0x2cf6
 28199 2cb9 13       		.uleb128 0x13
 28200 2cba 4C070000 		.4byte	.LASF258
 28201 2cbe 01       		.byte	0x1
 28202 2cbf 6720     		.2byte	0x2067
 28203 2cc1 64000000 		.4byte	0x64
 28204 2cc5 02       		.uleb128 0x2
 28205 2cc6 91       		.byte	0x91
 28206 2cc7 67       		.sleb128 -25
 28207 2cc8 14       		.uleb128 0x14
 28208 2cc9 A0120000 		.4byte	.LASF29
 28209 2ccd 01       		.byte	0x1
 28210 2cce 6920     		.2byte	0x2069
 28211 2cd0 64000000 		.4byte	0x64
 28212 2cd4 02       		.uleb128 0x2
 28213 2cd5 91       		.byte	0x91
 28214 2cd6 6E       		.sleb128 -18
 28215 2cd7 14       		.uleb128 0x14
 28216 2cd8 060C0000 		.4byte	.LASF218
 28217 2cdc 01       		.byte	0x1
 28218 2cdd 6A20     		.2byte	0x206a
 28219 2cdf 64000000 		.4byte	0x64
 28220 2ce3 02       		.uleb128 0x2
 28221 2ce4 91       		.byte	0x91
 28222 2ce5 6D       		.sleb128 -19
 28223 2ce6 14       		.uleb128 0x14
 28224 2ce7 2F010000 		.4byte	.LASF34
 28225 2ceb 01       		.byte	0x1
 28226 2cec 6D20     		.2byte	0x206d
 28227 2cee 25000000 		.4byte	0x25
 28228 2cf2 02       		.uleb128 0x2
 28229 2cf3 91       		.byte	0x91
 28230 2cf4 6F       		.sleb128 -17
 28231 2cf5 00       		.byte	0
 28232 2cf6 12       		.uleb128 0x12
 28233 2cf7 BD030000 		.4byte	.LASF260
 28234 2cfb 01       		.byte	0x1
 28235 2cfc A820     		.2byte	0x20a8
 28236 2cfe 25000000 		.4byte	0x25
 28237 2d02 00000000 		.4byte	.LFB138
 28238 2d06 00010000 		.4byte	.LFE138-.LFB138
 28239 2d0a 01       		.uleb128 0x1
 28240 2d0b 9C       		.byte	0x9c
 28241 2d0c 5C2D0000 		.4byte	0x2d5c
 28242 2d10 13       		.uleb128 0x13
 28243 2d11 67020000 		.4byte	.LASF261
 28244 2d15 01       		.byte	0x1
 28245 2d16 A920     		.2byte	0x20a9
 28246 2d18 5C2D0000 		.4byte	0x2d5c
 28247 2d1c 02       		.uleb128 0x2
 28248 2d1d 91       		.byte	0x91
 28249 2d1e 64       		.sleb128 -28
 28250 2d1f 14       		.uleb128 0x14
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 658


 28251 2d20 EC090000 		.4byte	.LASF262
 28252 2d24 01       		.byte	0x1
 28253 2d25 AB20     		.2byte	0x20ab
 28254 2d27 64000000 		.4byte	0x64
 28255 2d2b 02       		.uleb128 0x2
 28256 2d2c 91       		.byte	0x91
 28257 2d2d 6D       		.sleb128 -19
 28258 2d2e 14       		.uleb128 0x14
 28259 2d2f 4D0E0000 		.4byte	.LASF263
 28260 2d33 01       		.byte	0x1
 28261 2d34 AC20     		.2byte	0x20ac
 28262 2d36 64000000 		.4byte	0x64
 28263 2d3a 02       		.uleb128 0x2
 28264 2d3b 91       		.byte	0x91
 28265 2d3c 6F       		.sleb128 -17
 28266 2d3d 14       		.uleb128 0x14
 28267 2d3e DA080000 		.4byte	.LASF264
 28268 2d42 01       		.byte	0x1
 28269 2d43 AD20     		.2byte	0x20ad
 28270 2d45 64000000 		.4byte	0x64
 28271 2d49 02       		.uleb128 0x2
 28272 2d4a 91       		.byte	0x91
 28273 2d4b 6C       		.sleb128 -20
 28274 2d4c 14       		.uleb128 0x14
 28275 2d4d 2F010000 		.4byte	.LASF34
 28276 2d51 01       		.byte	0x1
 28277 2d52 B020     		.2byte	0x20b0
 28278 2d54 25000000 		.4byte	0x25
 28279 2d58 02       		.uleb128 0x2
 28280 2d59 91       		.byte	0x91
 28281 2d5a 6E       		.sleb128 -18
 28282 2d5b 00       		.byte	0
 28283 2d5c 0D       		.uleb128 0xd
 28284 2d5d 04       		.byte	0x4
 28285 2d5e A0020000 		.4byte	0x2a0
 28286 2d62 12       		.uleb128 0x12
 28287 2d63 900F0000 		.4byte	.LASF265
 28288 2d67 01       		.byte	0x1
 28289 2d68 EF20     		.2byte	0x20ef
 28290 2d6a 25000000 		.4byte	0x25
 28291 2d6e 00000000 		.4byte	.LFB139
 28292 2d72 D0000000 		.4byte	.LFE139-.LFB139
 28293 2d76 01       		.uleb128 0x1
 28294 2d77 9C       		.byte	0x9c
 28295 2d78 F52D0000 		.4byte	0x2df5
 28296 2d7c 13       		.uleb128 0x13
 28297 2d7d 70120000 		.4byte	.LASF266
 28298 2d81 01       		.byte	0x1
 28299 2d82 EF20     		.2byte	0x20ef
 28300 2d84 F52D0000 		.4byte	0x2df5
 28301 2d88 02       		.uleb128 0x2
 28302 2d89 91       		.byte	0x91
 28303 2d8a 64       		.sleb128 -28
 28304 2d8b 13       		.uleb128 0x13
 28305 2d8c 45120000 		.4byte	.LASF267
 28306 2d90 01       		.byte	0x1
 28307 2d91 F020     		.2byte	0x20f0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 659


 28308 2d93 5F020000 		.4byte	0x25f
 28309 2d97 02       		.uleb128 0x2
 28310 2d98 91       		.byte	0x91
 28311 2d99 60       		.sleb128 -32
 28312 2d9a 13       		.uleb128 0x13
 28313 2d9b 67020000 		.4byte	.LASF261
 28314 2d9f 01       		.byte	0x1
 28315 2da0 F020     		.2byte	0x20f0
 28316 2da2 5C2D0000 		.4byte	0x2d5c
 28317 2da6 02       		.uleb128 0x2
 28318 2da7 91       		.byte	0x91
 28319 2da8 5C       		.sleb128 -36
 28320 2da9 14       		.uleb128 0x14
 28321 2daa 720A0000 		.4byte	.LASF268
 28322 2dae 01       		.byte	0x1
 28323 2daf F220     		.2byte	0x20f2
 28324 2db1 64000000 		.4byte	0x64
 28325 2db5 02       		.uleb128 0x2
 28326 2db6 91       		.byte	0x91
 28327 2db7 6D       		.sleb128 -19
 28328 2db8 14       		.uleb128 0x14
 28329 2db9 E0120000 		.4byte	.LASF269
 28330 2dbd 01       		.byte	0x1
 28331 2dbe F320     		.2byte	0x20f3
 28332 2dc0 64000000 		.4byte	0x64
 28333 2dc4 02       		.uleb128 0x2
 28334 2dc5 91       		.byte	0x91
 28335 2dc6 6C       		.sleb128 -20
 28336 2dc7 14       		.uleb128 0x14
 28337 2dc8 CC0C0000 		.4byte	.LASF270
 28338 2dcc 01       		.byte	0x1
 28339 2dcd F420     		.2byte	0x20f4
 28340 2dcf 64000000 		.4byte	0x64
 28341 2dd3 02       		.uleb128 0x2
 28342 2dd4 91       		.byte	0x91
 28343 2dd5 6B       		.sleb128 -21
 28344 2dd6 14       		.uleb128 0x14
 28345 2dd7 DA080000 		.4byte	.LASF264
 28346 2ddb 01       		.byte	0x1
 28347 2ddc F520     		.2byte	0x20f5
 28348 2dde 64000000 		.4byte	0x64
 28349 2de2 02       		.uleb128 0x2
 28350 2de3 91       		.byte	0x91
 28351 2de4 6E       		.sleb128 -18
 28352 2de5 14       		.uleb128 0x14
 28353 2de6 2F010000 		.4byte	.LASF34
 28354 2dea 01       		.byte	0x1
 28355 2deb F720     		.2byte	0x20f7
 28356 2ded 25000000 		.4byte	0x25
 28357 2df1 02       		.uleb128 0x2
 28358 2df2 91       		.byte	0x91
 28359 2df3 6F       		.sleb128 -17
 28360 2df4 00       		.byte	0
 28361 2df5 0D       		.uleb128 0xd
 28362 2df6 04       		.byte	0x4
 28363 2df7 79010000 		.4byte	0x179
 28364 2dfb 18       		.uleb128 0x18
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 660


 28365 2dfc 2D0C0000 		.4byte	.LASF271
 28366 2e00 01       		.byte	0x1
 28367 2e01 1721     		.2byte	0x2117
 28368 2e03 00000000 		.4byte	.LFB140
 28369 2e07 62000000 		.4byte	.LFE140-.LFB140
 28370 2e0b 01       		.uleb128 0x1
 28371 2e0c 9C       		.byte	0x9c
 28372 2e0d 5D2E0000 		.4byte	0x2e5d
 28373 2e11 13       		.uleb128 0x13
 28374 2e12 720A0000 		.4byte	.LASF268
 28375 2e16 01       		.byte	0x1
 28376 2e17 1721     		.2byte	0x2117
 28377 2e19 5F020000 		.4byte	0x25f
 28378 2e1d 02       		.uleb128 0x2
 28379 2e1e 91       		.byte	0x91
 28380 2e1f 74       		.sleb128 -12
 28381 2e20 13       		.uleb128 0x13
 28382 2e21 CC0C0000 		.4byte	.LASF270
 28383 2e25 01       		.byte	0x1
 28384 2e26 1721     		.2byte	0x2117
 28385 2e28 5F020000 		.4byte	0x25f
 28386 2e2c 02       		.uleb128 0x2
 28387 2e2d 91       		.byte	0x91
 28388 2e2e 70       		.sleb128 -16
 28389 2e2f 13       		.uleb128 0x13
 28390 2e30 45120000 		.4byte	.LASF267
 28391 2e34 01       		.byte	0x1
 28392 2e35 1821     		.2byte	0x2118
 28393 2e37 64000000 		.4byte	0x64
 28394 2e3b 02       		.uleb128 0x2
 28395 2e3c 91       		.byte	0x91
 28396 2e3d 6F       		.sleb128 -17
 28397 2e3e 13       		.uleb128 0x13
 28398 2e3f DA080000 		.4byte	.LASF264
 28399 2e43 01       		.byte	0x1
 28400 2e44 1821     		.2byte	0x2118
 28401 2e46 64000000 		.4byte	0x64
 28402 2e4a 02       		.uleb128 0x2
 28403 2e4b 91       		.byte	0x91
 28404 2e4c 6E       		.sleb128 -18
 28405 2e4d 13       		.uleb128 0x13
 28406 2e4e 67020000 		.4byte	.LASF261
 28407 2e52 01       		.byte	0x1
 28408 2e53 1921     		.2byte	0x2119
 28409 2e55 5C2D0000 		.4byte	0x2d5c
 28410 2e59 02       		.uleb128 0x2
 28411 2e5a 91       		.byte	0x91
 28412 2e5b 00       		.sleb128 0
 28413 2e5c 00       		.byte	0
 28414 2e5d 19       		.uleb128 0x19
 28415 2e5e 0E110000 		.4byte	.LASF272
 28416 2e62 01       		.byte	0x1
 28417 2e63 3A21     		.2byte	0x213a
 28418 2e65 00000000 		.4byte	.LFB141
 28419 2e69 D8030000 		.4byte	.LFE141-.LFB141
 28420 2e6d 01       		.uleb128 0x1
 28421 2e6e 9C       		.byte	0x9c
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 661


 28422 2e6f DD2E0000 		.4byte	0x2edd
 28423 2e73 13       		.uleb128 0x13
 28424 2e74 70120000 		.4byte	.LASF266
 28425 2e78 01       		.byte	0x1
 28426 2e79 3A21     		.2byte	0x213a
 28427 2e7b F52D0000 		.4byte	0x2df5
 28428 2e7f 02       		.uleb128 0x2
 28429 2e80 91       		.byte	0x91
 28430 2e81 6C       		.sleb128 -20
 28431 2e82 13       		.uleb128 0x13
 28432 2e83 720A0000 		.4byte	.LASF268
 28433 2e87 01       		.byte	0x1
 28434 2e88 3A21     		.2byte	0x213a
 28435 2e8a 5F020000 		.4byte	0x25f
 28436 2e8e 02       		.uleb128 0x2
 28437 2e8f 91       		.byte	0x91
 28438 2e90 68       		.sleb128 -24
 28439 2e91 13       		.uleb128 0x13
 28440 2e92 E0120000 		.4byte	.LASF269
 28441 2e96 01       		.byte	0x1
 28442 2e97 3B21     		.2byte	0x213b
 28443 2e99 5F020000 		.4byte	0x25f
 28444 2e9d 02       		.uleb128 0x2
 28445 2e9e 91       		.byte	0x91
 28446 2e9f 64       		.sleb128 -28
 28447 2ea0 13       		.uleb128 0x13
 28448 2ea1 DA080000 		.4byte	.LASF264
 28449 2ea5 01       		.byte	0x1
 28450 2ea6 3B21     		.2byte	0x213b
 28451 2ea8 64000000 		.4byte	0x64
 28452 2eac 02       		.uleb128 0x2
 28453 2ead 91       		.byte	0x91
 28454 2eae 63       		.sleb128 -29
 28455 2eaf 13       		.uleb128 0x13
 28456 2eb0 67020000 		.4byte	.LASF261
 28457 2eb4 01       		.byte	0x1
 28458 2eb5 3C21     		.2byte	0x213c
 28459 2eb7 5C2D0000 		.4byte	0x2d5c
 28460 2ebb 02       		.uleb128 0x2
 28461 2ebc 91       		.byte	0x91
 28462 2ebd 00       		.sleb128 0
 28463 2ebe 14       		.uleb128 0x14
 28464 2ebf EB0A0000 		.4byte	.LASF273
 28465 2ec3 01       		.byte	0x1
 28466 2ec4 3E21     		.2byte	0x213e
 28467 2ec6 76000000 		.4byte	0x76
 28468 2eca 02       		.uleb128 0x2
 28469 2ecb 91       		.byte	0x91
 28470 2ecc 76       		.sleb128 -10
 28471 2ecd 14       		.uleb128 0x14
 28472 2ece 31020000 		.4byte	.LASF274
 28473 2ed2 01       		.byte	0x1
 28474 2ed3 3F21     		.2byte	0x213f
 28475 2ed5 76000000 		.4byte	0x76
 28476 2ed9 02       		.uleb128 0x2
 28477 2eda 91       		.byte	0x91
 28478 2edb 74       		.sleb128 -12
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 662


 28479 2edc 00       		.byte	0
 28480 2edd 18       		.uleb128 0x18
 28481 2ede 3B070000 		.4byte	.LASF275
 28482 2ee2 01       		.byte	0x1
 28483 2ee3 9521     		.2byte	0x2195
 28484 2ee5 00000000 		.4byte	.LFB142
 28485 2ee9 AC010000 		.4byte	.LFE142-.LFB142
 28486 2eed 01       		.uleb128 0x1
 28487 2eee 9C       		.byte	0x9c
 28488 2eef 3F2F0000 		.4byte	0x2f3f
 28489 2ef3 13       		.uleb128 0x13
 28490 2ef4 70120000 		.4byte	.LASF266
 28491 2ef8 01       		.byte	0x1
 28492 2ef9 9521     		.2byte	0x2195
 28493 2efb F52D0000 		.4byte	0x2df5
 28494 2eff 02       		.uleb128 0x2
 28495 2f00 91       		.byte	0x91
 28496 2f01 6C       		.sleb128 -20
 28497 2f02 13       		.uleb128 0x13
 28498 2f03 720A0000 		.4byte	.LASF268
 28499 2f07 01       		.byte	0x1
 28500 2f08 9521     		.2byte	0x2195
 28501 2f0a 5F020000 		.4byte	0x25f
 28502 2f0e 02       		.uleb128 0x2
 28503 2f0f 91       		.byte	0x91
 28504 2f10 68       		.sleb128 -24
 28505 2f11 13       		.uleb128 0x13
 28506 2f12 67020000 		.4byte	.LASF261
 28507 2f16 01       		.byte	0x1
 28508 2f17 9621     		.2byte	0x2196
 28509 2f19 5C2D0000 		.4byte	0x2d5c
 28510 2f1d 02       		.uleb128 0x2
 28511 2f1e 91       		.byte	0x91
 28512 2f1f 64       		.sleb128 -28
 28513 2f20 14       		.uleb128 0x14
 28514 2f21 EB0A0000 		.4byte	.LASF273
 28515 2f25 01       		.byte	0x1
 28516 2f26 9821     		.2byte	0x2198
 28517 2f28 76000000 		.4byte	0x76
 28518 2f2c 02       		.uleb128 0x2
 28519 2f2d 91       		.byte	0x91
 28520 2f2e 76       		.sleb128 -10
 28521 2f2f 14       		.uleb128 0x14
 28522 2f30 31020000 		.4byte	.LASF274
 28523 2f34 01       		.byte	0x1
 28524 2f35 9921     		.2byte	0x2199
 28525 2f37 76000000 		.4byte	0x76
 28526 2f3b 02       		.uleb128 0x2
 28527 2f3c 91       		.byte	0x91
 28528 2f3d 74       		.sleb128 -12
 28529 2f3e 00       		.byte	0
 28530 2f3f 12       		.uleb128 0x12
 28531 2f40 7D0A0000 		.4byte	.LASF276
 28532 2f44 01       		.byte	0x1
 28533 2f45 CA21     		.2byte	0x21ca
 28534 2f47 25000000 		.4byte	0x25
 28535 2f4b 00000000 		.4byte	.LFB143
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 663


 28536 2f4f 64000000 		.4byte	.LFE143-.LFB143
 28537 2f53 01       		.uleb128 0x1
 28538 2f54 9C       		.byte	0x9c
 28539 2f55 872F0000 		.4byte	0x2f87
 28540 2f59 13       		.uleb128 0x13
 28541 2f5a FE070000 		.4byte	.LASF277
 28542 2f5e 01       		.byte	0x1
 28543 2f5f CA21     		.2byte	0x21ca
 28544 2f61 D5040000 		.4byte	0x4d5
 28545 2f65 02       		.uleb128 0x2
 28546 2f66 91       		.byte	0x91
 28547 2f67 64       		.sleb128 -28
 28548 2f68 14       		.uleb128 0x14
 28549 2f69 A0120000 		.4byte	.LASF29
 28550 2f6d 01       		.byte	0x1
 28551 2f6e CC21     		.2byte	0x21cc
 28552 2f70 64000000 		.4byte	0x64
 28553 2f74 02       		.uleb128 0x2
 28554 2f75 91       		.byte	0x91
 28555 2f76 6E       		.sleb128 -18
 28556 2f77 14       		.uleb128 0x14
 28557 2f78 2F010000 		.4byte	.LASF34
 28558 2f7c 01       		.byte	0x1
 28559 2f7d CF21     		.2byte	0x21cf
 28560 2f7f 25000000 		.4byte	0x25
 28561 2f83 02       		.uleb128 0x2
 28562 2f84 91       		.byte	0x91
 28563 2f85 6F       		.sleb128 -17
 28564 2f86 00       		.byte	0
 28565 2f87 12       		.uleb128 0x12
 28566 2f88 F40A0000 		.4byte	.LASF278
 28567 2f8c 01       		.byte	0x1
 28568 2f8d EC21     		.2byte	0x21ec
 28569 2f8f 25000000 		.4byte	0x25
 28570 2f93 00000000 		.4byte	.LFB144
 28571 2f97 90020000 		.4byte	.LFE144-.LFB144
 28572 2f9b 01       		.uleb128 0x1
 28573 2f9c 9C       		.byte	0x9c
 28574 2f9d CF2F0000 		.4byte	0x2fcf
 28575 2fa1 13       		.uleb128 0x13
 28576 2fa2 2B020000 		.4byte	.LASF55
 28577 2fa6 01       		.byte	0x1
 28578 2fa7 ED21     		.2byte	0x21ed
 28579 2fa9 CF2F0000 		.4byte	0x2fcf
 28580 2fad 02       		.uleb128 0x2
 28581 2fae 91       		.byte	0x91
 28582 2faf 64       		.sleb128 -28
 28583 2fb0 14       		.uleb128 0x14
 28584 2fb1 2F010000 		.4byte	.LASF34
 28585 2fb5 01       		.byte	0x1
 28586 2fb6 F121     		.2byte	0x21f1
 28587 2fb8 25000000 		.4byte	0x25
 28588 2fbc 02       		.uleb128 0x2
 28589 2fbd 91       		.byte	0x91
 28590 2fbe 6F       		.sleb128 -17
 28591 2fbf 14       		.uleb128 0x14
 28592 2fc0 A0120000 		.4byte	.LASF29
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 664


 28593 2fc4 01       		.byte	0x1
 28594 2fc5 F221     		.2byte	0x21f2
 28595 2fc7 D52F0000 		.4byte	0x2fd5
 28596 2fcb 02       		.uleb128 0x2
 28597 2fcc 91       		.byte	0x91
 28598 2fcd 68       		.sleb128 -24
 28599 2fce 00       		.byte	0
 28600 2fcf 0D       		.uleb128 0xd
 28601 2fd0 04       		.byte	0x4
 28602 2fd1 D2000000 		.4byte	0xd2
 28603 2fd5 15       		.uleb128 0x15
 28604 2fd6 64000000 		.4byte	0x64
 28605 2fda E52F0000 		.4byte	0x2fe5
 28606 2fde 16       		.uleb128 0x16
 28607 2fdf 86040000 		.4byte	0x486
 28608 2fe3 06       		.byte	0x6
 28609 2fe4 00       		.byte	0
 28610 2fe5 12       		.uleb128 0x12
 28611 2fe6 24050000 		.4byte	.LASF279
 28612 2fea 01       		.byte	0x1
 28613 2feb 7122     		.2byte	0x2271
 28614 2fed 25000000 		.4byte	0x25
 28615 2ff1 00000000 		.4byte	.LFB145
 28616 2ff5 E4000000 		.4byte	.LFE145-.LFB145
 28617 2ff9 01       		.uleb128 0x1
 28618 2ffa 9C       		.byte	0x9c
 28619 2ffb 2D300000 		.4byte	0x302d
 28620 2fff 13       		.uleb128 0x13
 28621 3000 2B020000 		.4byte	.LASF55
 28622 3004 01       		.byte	0x1
 28623 3005 7222     		.2byte	0x2272
 28624 3007 2D300000 		.4byte	0x302d
 28625 300b 02       		.uleb128 0x2
 28626 300c 91       		.byte	0x91
 28627 300d 64       		.sleb128 -28
 28628 300e 14       		.uleb128 0x14
 28629 300f 2F010000 		.4byte	.LASF34
 28630 3013 01       		.byte	0x1
 28631 3014 7622     		.2byte	0x2276
 28632 3016 25000000 		.4byte	0x25
 28633 301a 02       		.uleb128 0x2
 28634 301b 91       		.byte	0x91
 28635 301c 6F       		.sleb128 -17
 28636 301d 14       		.uleb128 0x14
 28637 301e A0120000 		.4byte	.LASF29
 28638 3022 01       		.byte	0x1
 28639 3023 7722     		.2byte	0x2277
 28640 3025 64000000 		.4byte	0x64
 28641 3029 02       		.uleb128 0x2
 28642 302a 91       		.byte	0x91
 28643 302b 6E       		.sleb128 -18
 28644 302c 00       		.byte	0
 28645 302d 0D       		.uleb128 0xd
 28646 302e 04       		.byte	0x4
 28647 302f 3D010000 		.4byte	0x13d
 28648 3033 12       		.uleb128 0x12
 28649 3034 17100000 		.4byte	.LASF280
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 665


 28650 3038 01       		.byte	0x1
 28651 3039 A922     		.2byte	0x22a9
 28652 303b 25000000 		.4byte	0x25
 28653 303f 00000000 		.4byte	.LFB146
 28654 3043 64000000 		.4byte	.LFE146-.LFB146
 28655 3047 01       		.uleb128 0x1
 28656 3048 9C       		.byte	0x9c
 28657 3049 7B300000 		.4byte	0x307b
 28658 304d 13       		.uleb128 0x13
 28659 304e 1D020000 		.4byte	.LASF281
 28660 3052 01       		.byte	0x1
 28661 3053 A922     		.2byte	0x22a9
 28662 3055 5F020000 		.4byte	0x25f
 28663 3059 02       		.uleb128 0x2
 28664 305a 91       		.byte	0x91
 28665 305b 64       		.sleb128 -28
 28666 305c 14       		.uleb128 0x14
 28667 305d A0120000 		.4byte	.LASF29
 28668 3061 01       		.byte	0x1
 28669 3062 B022     		.2byte	0x22b0
 28670 3064 64000000 		.4byte	0x64
 28671 3068 02       		.uleb128 0x2
 28672 3069 91       		.byte	0x91
 28673 306a 6E       		.sleb128 -18
 28674 306b 14       		.uleb128 0x14
 28675 306c 2F010000 		.4byte	.LASF34
 28676 3070 01       		.byte	0x1
 28677 3071 B322     		.2byte	0x22b3
 28678 3073 25000000 		.4byte	0x25
 28679 3077 02       		.uleb128 0x2
 28680 3078 91       		.byte	0x91
 28681 3079 6F       		.sleb128 -17
 28682 307a 00       		.byte	0
 28683 307b 11       		.uleb128 0x11
 28684 307c E8020000 		.4byte	.LASF282
 28685 3080 01       		.byte	0x1
 28686 3081 55       		.byte	0x55
 28687 3082 79030000 		.4byte	0x379
 28688 3086 05       		.uleb128 0x5
 28689 3087 03       		.byte	0x3
 28690 3088 00000000 		.4byte	p_bma2x2
 28691 308c 1A       		.uleb128 0x1a
 28692 308d B90B0000 		.4byte	.LASF287
 28693 3091 01       		.byte	0x1
 28694 3092 57       		.byte	0x57
 28695 3093 64000000 		.4byte	0x64
 28696 3097 05       		.uleb128 0x5
 28697 3098 03       		.byte	0x3
 28698 3099 00000000 		.4byte	V_BMA2x2RESOLUTION_U8
 28699 309d 00       		.byte	0
 28700              		.section	.debug_abbrev,"",%progbits
 28701              	.Ldebug_abbrev0:
 28702 0000 01       		.uleb128 0x1
 28703 0001 11       		.uleb128 0x11
 28704 0002 01       		.byte	0x1
 28705 0003 25       		.uleb128 0x25
 28706 0004 0E       		.uleb128 0xe
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 666


 28707 0005 13       		.uleb128 0x13
 28708 0006 0B       		.uleb128 0xb
 28709 0007 03       		.uleb128 0x3
 28710 0008 0E       		.uleb128 0xe
 28711 0009 1B       		.uleb128 0x1b
 28712 000a 0E       		.uleb128 0xe
 28713 000b 55       		.uleb128 0x55
 28714 000c 17       		.uleb128 0x17
 28715 000d 11       		.uleb128 0x11
 28716 000e 01       		.uleb128 0x1
 28717 000f 10       		.uleb128 0x10
 28718 0010 17       		.uleb128 0x17
 28719 0011 00       		.byte	0
 28720 0012 00       		.byte	0
 28721 0013 02       		.uleb128 0x2
 28722 0014 16       		.uleb128 0x16
 28723 0015 00       		.byte	0
 28724 0016 03       		.uleb128 0x3
 28725 0017 08       		.uleb128 0x8
 28726 0018 3A       		.uleb128 0x3a
 28727 0019 0B       		.uleb128 0xb
 28728 001a 3B       		.uleb128 0x3b
 28729 001b 05       		.uleb128 0x5
 28730 001c 49       		.uleb128 0x49
 28731 001d 13       		.uleb128 0x13
 28732 001e 00       		.byte	0
 28733 001f 00       		.byte	0
 28734 0020 03       		.uleb128 0x3
 28735 0021 24       		.uleb128 0x24
 28736 0022 00       		.byte	0
 28737 0023 0B       		.uleb128 0xb
 28738 0024 0B       		.uleb128 0xb
 28739 0025 3E       		.uleb128 0x3e
 28740 0026 0B       		.uleb128 0xb
 28741 0027 03       		.uleb128 0x3
 28742 0028 0E       		.uleb128 0xe
 28743 0029 00       		.byte	0
 28744 002a 00       		.byte	0
 28745 002b 04       		.uleb128 0x4
 28746 002c 24       		.uleb128 0x24
 28747 002d 00       		.byte	0
 28748 002e 0B       		.uleb128 0xb
 28749 002f 0B       		.uleb128 0xb
 28750 0030 3E       		.uleb128 0x3e
 28751 0031 0B       		.uleb128 0xb
 28752 0032 03       		.uleb128 0x3
 28753 0033 08       		.uleb128 0x8
 28754 0034 00       		.byte	0
 28755 0035 00       		.byte	0
 28756 0036 05       		.uleb128 0x5
 28757 0037 13       		.uleb128 0x13
 28758 0038 01       		.byte	0x1
 28759 0039 03       		.uleb128 0x3
 28760 003a 0E       		.uleb128 0xe
 28761 003b 0B       		.uleb128 0xb
 28762 003c 0B       		.uleb128 0xb
 28763 003d 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 667


 28764 003e 0B       		.uleb128 0xb
 28765 003f 3B       		.uleb128 0x3b
 28766 0040 05       		.uleb128 0x5
 28767 0041 01       		.uleb128 0x1
 28768 0042 13       		.uleb128 0x13
 28769 0043 00       		.byte	0
 28770 0044 00       		.byte	0
 28771 0045 06       		.uleb128 0x6
 28772 0046 0D       		.uleb128 0xd
 28773 0047 00       		.byte	0
 28774 0048 03       		.uleb128 0x3
 28775 0049 08       		.uleb128 0x8
 28776 004a 3A       		.uleb128 0x3a
 28777 004b 0B       		.uleb128 0xb
 28778 004c 3B       		.uleb128 0x3b
 28779 004d 05       		.uleb128 0x5
 28780 004e 49       		.uleb128 0x49
 28781 004f 13       		.uleb128 0x13
 28782 0050 38       		.uleb128 0x38
 28783 0051 0B       		.uleb128 0xb
 28784 0052 00       		.byte	0
 28785 0053 00       		.byte	0
 28786 0054 07       		.uleb128 0x7
 28787 0055 0D       		.uleb128 0xd
 28788 0056 00       		.byte	0
 28789 0057 03       		.uleb128 0x3
 28790 0058 0E       		.uleb128 0xe
 28791 0059 3A       		.uleb128 0x3a
 28792 005a 0B       		.uleb128 0xb
 28793 005b 3B       		.uleb128 0x3b
 28794 005c 05       		.uleb128 0x5
 28795 005d 49       		.uleb128 0x49
 28796 005e 13       		.uleb128 0x13
 28797 005f 38       		.uleb128 0x38
 28798 0060 0B       		.uleb128 0xb
 28799 0061 00       		.byte	0
 28800 0062 00       		.byte	0
 28801 0063 08       		.uleb128 0x8
 28802 0064 17       		.uleb128 0x17
 28803 0065 01       		.byte	0x1
 28804 0066 03       		.uleb128 0x3
 28805 0067 0E       		.uleb128 0xe
 28806 0068 0B       		.uleb128 0xb
 28807 0069 0B       		.uleb128 0xb
 28808 006a 3A       		.uleb128 0x3a
 28809 006b 0B       		.uleb128 0xb
 28810 006c 3B       		.uleb128 0x3b
 28811 006d 05       		.uleb128 0x5
 28812 006e 01       		.uleb128 0x1
 28813 006f 13       		.uleb128 0x13
 28814 0070 00       		.byte	0
 28815 0071 00       		.byte	0
 28816 0072 09       		.uleb128 0x9
 28817 0073 0D       		.uleb128 0xd
 28818 0074 00       		.byte	0
 28819 0075 03       		.uleb128 0x3
 28820 0076 0E       		.uleb128 0xe
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 668


 28821 0077 3A       		.uleb128 0x3a
 28822 0078 0B       		.uleb128 0xb
 28823 0079 3B       		.uleb128 0x3b
 28824 007a 05       		.uleb128 0x5
 28825 007b 49       		.uleb128 0x49
 28826 007c 13       		.uleb128 0x13
 28827 007d 00       		.byte	0
 28828 007e 00       		.byte	0
 28829 007f 0A       		.uleb128 0xa
 28830 0080 0D       		.uleb128 0xd
 28831 0081 00       		.byte	0
 28832 0082 03       		.uleb128 0x3
 28833 0083 08       		.uleb128 0x8
 28834 0084 3A       		.uleb128 0x3a
 28835 0085 0B       		.uleb128 0xb
 28836 0086 3B       		.uleb128 0x3b
 28837 0087 05       		.uleb128 0x5
 28838 0088 49       		.uleb128 0x49
 28839 0089 13       		.uleb128 0x13
 28840 008a 00       		.byte	0
 28841 008b 00       		.byte	0
 28842 008c 0B       		.uleb128 0xb
 28843 008d 15       		.uleb128 0x15
 28844 008e 01       		.byte	0x1
 28845 008f 27       		.uleb128 0x27
 28846 0090 19       		.uleb128 0x19
 28847 0091 49       		.uleb128 0x49
 28848 0092 13       		.uleb128 0x13
 28849 0093 01       		.uleb128 0x1
 28850 0094 13       		.uleb128 0x13
 28851 0095 00       		.byte	0
 28852 0096 00       		.byte	0
 28853 0097 0C       		.uleb128 0xc
 28854 0098 05       		.uleb128 0x5
 28855 0099 00       		.byte	0
 28856 009a 49       		.uleb128 0x49
 28857 009b 13       		.uleb128 0x13
 28858 009c 00       		.byte	0
 28859 009d 00       		.byte	0
 28860 009e 0D       		.uleb128 0xd
 28861 009f 0F       		.uleb128 0xf
 28862 00a0 00       		.byte	0
 28863 00a1 0B       		.uleb128 0xb
 28864 00a2 0B       		.uleb128 0xb
 28865 00a3 49       		.uleb128 0x49
 28866 00a4 13       		.uleb128 0x13
 28867 00a5 00       		.byte	0
 28868 00a6 00       		.byte	0
 28869 00a7 0E       		.uleb128 0xe
 28870 00a8 15       		.uleb128 0x15
 28871 00a9 01       		.byte	0x1
 28872 00aa 27       		.uleb128 0x27
 28873 00ab 19       		.uleb128 0x19
 28874 00ac 01       		.uleb128 0x1
 28875 00ad 13       		.uleb128 0x13
 28876 00ae 00       		.byte	0
 28877 00af 00       		.byte	0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 669


 28878 00b0 0F       		.uleb128 0xf
 28879 00b1 2E       		.uleb128 0x2e
 28880 00b2 01       		.byte	0x1
 28881 00b3 3F       		.uleb128 0x3f
 28882 00b4 19       		.uleb128 0x19
 28883 00b5 03       		.uleb128 0x3
 28884 00b6 0E       		.uleb128 0xe
 28885 00b7 3A       		.uleb128 0x3a
 28886 00b8 0B       		.uleb128 0xb
 28887 00b9 3B       		.uleb128 0x3b
 28888 00ba 0B       		.uleb128 0xb
 28889 00bb 27       		.uleb128 0x27
 28890 00bc 19       		.uleb128 0x19
 28891 00bd 49       		.uleb128 0x49
 28892 00be 13       		.uleb128 0x13
 28893 00bf 11       		.uleb128 0x11
 28894 00c0 01       		.uleb128 0x1
 28895 00c1 12       		.uleb128 0x12
 28896 00c2 06       		.uleb128 0x6
 28897 00c3 40       		.uleb128 0x40
 28898 00c4 18       		.uleb128 0x18
 28899 00c5 9642     		.uleb128 0x2116
 28900 00c7 19       		.uleb128 0x19
 28901 00c8 01       		.uleb128 0x1
 28902 00c9 13       		.uleb128 0x13
 28903 00ca 00       		.byte	0
 28904 00cb 00       		.byte	0
 28905 00cc 10       		.uleb128 0x10
 28906 00cd 05       		.uleb128 0x5
 28907 00ce 00       		.byte	0
 28908 00cf 03       		.uleb128 0x3
 28909 00d0 0E       		.uleb128 0xe
 28910 00d1 3A       		.uleb128 0x3a
 28911 00d2 0B       		.uleb128 0xb
 28912 00d3 3B       		.uleb128 0x3b
 28913 00d4 0B       		.uleb128 0xb
 28914 00d5 49       		.uleb128 0x49
 28915 00d6 13       		.uleb128 0x13
 28916 00d7 02       		.uleb128 0x2
 28917 00d8 18       		.uleb128 0x18
 28918 00d9 00       		.byte	0
 28919 00da 00       		.byte	0
 28920 00db 11       		.uleb128 0x11
 28921 00dc 34       		.uleb128 0x34
 28922 00dd 00       		.byte	0
 28923 00de 03       		.uleb128 0x3
 28924 00df 0E       		.uleb128 0xe
 28925 00e0 3A       		.uleb128 0x3a
 28926 00e1 0B       		.uleb128 0xb
 28927 00e2 3B       		.uleb128 0x3b
 28928 00e3 0B       		.uleb128 0xb
 28929 00e4 49       		.uleb128 0x49
 28930 00e5 13       		.uleb128 0x13
 28931 00e6 02       		.uleb128 0x2
 28932 00e7 18       		.uleb128 0x18
 28933 00e8 00       		.byte	0
 28934 00e9 00       		.byte	0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 670


 28935 00ea 12       		.uleb128 0x12
 28936 00eb 2E       		.uleb128 0x2e
 28937 00ec 01       		.byte	0x1
 28938 00ed 3F       		.uleb128 0x3f
 28939 00ee 19       		.uleb128 0x19
 28940 00ef 03       		.uleb128 0x3
 28941 00f0 0E       		.uleb128 0xe
 28942 00f1 3A       		.uleb128 0x3a
 28943 00f2 0B       		.uleb128 0xb
 28944 00f3 3B       		.uleb128 0x3b
 28945 00f4 05       		.uleb128 0x5
 28946 00f5 27       		.uleb128 0x27
 28947 00f6 19       		.uleb128 0x19
 28948 00f7 49       		.uleb128 0x49
 28949 00f8 13       		.uleb128 0x13
 28950 00f9 11       		.uleb128 0x11
 28951 00fa 01       		.uleb128 0x1
 28952 00fb 12       		.uleb128 0x12
 28953 00fc 06       		.uleb128 0x6
 28954 00fd 40       		.uleb128 0x40
 28955 00fe 18       		.uleb128 0x18
 28956 00ff 9642     		.uleb128 0x2116
 28957 0101 19       		.uleb128 0x19
 28958 0102 01       		.uleb128 0x1
 28959 0103 13       		.uleb128 0x13
 28960 0104 00       		.byte	0
 28961 0105 00       		.byte	0
 28962 0106 13       		.uleb128 0x13
 28963 0107 05       		.uleb128 0x5
 28964 0108 00       		.byte	0
 28965 0109 03       		.uleb128 0x3
 28966 010a 0E       		.uleb128 0xe
 28967 010b 3A       		.uleb128 0x3a
 28968 010c 0B       		.uleb128 0xb
 28969 010d 3B       		.uleb128 0x3b
 28970 010e 05       		.uleb128 0x5
 28971 010f 49       		.uleb128 0x49
 28972 0110 13       		.uleb128 0x13
 28973 0111 02       		.uleb128 0x2
 28974 0112 18       		.uleb128 0x18
 28975 0113 00       		.byte	0
 28976 0114 00       		.byte	0
 28977 0115 14       		.uleb128 0x14
 28978 0116 34       		.uleb128 0x34
 28979 0117 00       		.byte	0
 28980 0118 03       		.uleb128 0x3
 28981 0119 0E       		.uleb128 0xe
 28982 011a 3A       		.uleb128 0x3a
 28983 011b 0B       		.uleb128 0xb
 28984 011c 3B       		.uleb128 0x3b
 28985 011d 05       		.uleb128 0x5
 28986 011e 49       		.uleb128 0x49
 28987 011f 13       		.uleb128 0x13
 28988 0120 02       		.uleb128 0x2
 28989 0121 18       		.uleb128 0x18
 28990 0122 00       		.byte	0
 28991 0123 00       		.byte	0
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 671


 28992 0124 15       		.uleb128 0x15
 28993 0125 01       		.uleb128 0x1
 28994 0126 01       		.byte	0x1
 28995 0127 49       		.uleb128 0x49
 28996 0128 13       		.uleb128 0x13
 28997 0129 01       		.uleb128 0x1
 28998 012a 13       		.uleb128 0x13
 28999 012b 00       		.byte	0
 29000 012c 00       		.byte	0
 29001 012d 16       		.uleb128 0x16
 29002 012e 21       		.uleb128 0x21
 29003 012f 00       		.byte	0
 29004 0130 49       		.uleb128 0x49
 29005 0131 13       		.uleb128 0x13
 29006 0132 2F       		.uleb128 0x2f
 29007 0133 0B       		.uleb128 0xb
 29008 0134 00       		.byte	0
 29009 0135 00       		.byte	0
 29010 0136 17       		.uleb128 0x17
 29011 0137 2E       		.uleb128 0x2e
 29012 0138 01       		.byte	0x1
 29013 0139 3F       		.uleb128 0x3f
 29014 013a 19       		.uleb128 0x19
 29015 013b 03       		.uleb128 0x3
 29016 013c 0E       		.uleb128 0xe
 29017 013d 3A       		.uleb128 0x3a
 29018 013e 0B       		.uleb128 0xb
 29019 013f 3B       		.uleb128 0x3b
 29020 0140 05       		.uleb128 0x5
 29021 0141 27       		.uleb128 0x27
 29022 0142 19       		.uleb128 0x19
 29023 0143 49       		.uleb128 0x49
 29024 0144 13       		.uleb128 0x13
 29025 0145 11       		.uleb128 0x11
 29026 0146 01       		.uleb128 0x1
 29027 0147 12       		.uleb128 0x12
 29028 0148 06       		.uleb128 0x6
 29029 0149 40       		.uleb128 0x40
 29030 014a 18       		.uleb128 0x18
 29031 014b 9742     		.uleb128 0x2117
 29032 014d 19       		.uleb128 0x19
 29033 014e 01       		.uleb128 0x1
 29034 014f 13       		.uleb128 0x13
 29035 0150 00       		.byte	0
 29036 0151 00       		.byte	0
 29037 0152 18       		.uleb128 0x18
 29038 0153 2E       		.uleb128 0x2e
 29039 0154 01       		.byte	0x1
 29040 0155 03       		.uleb128 0x3
 29041 0156 0E       		.uleb128 0xe
 29042 0157 3A       		.uleb128 0x3a
 29043 0158 0B       		.uleb128 0xb
 29044 0159 3B       		.uleb128 0x3b
 29045 015a 05       		.uleb128 0x5
 29046 015b 27       		.uleb128 0x27
 29047 015c 19       		.uleb128 0x19
 29048 015d 11       		.uleb128 0x11
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 672


 29049 015e 01       		.uleb128 0x1
 29050 015f 12       		.uleb128 0x12
 29051 0160 06       		.uleb128 0x6
 29052 0161 40       		.uleb128 0x40
 29053 0162 18       		.uleb128 0x18
 29054 0163 9742     		.uleb128 0x2117
 29055 0165 19       		.uleb128 0x19
 29056 0166 01       		.uleb128 0x1
 29057 0167 13       		.uleb128 0x13
 29058 0168 00       		.byte	0
 29059 0169 00       		.byte	0
 29060 016a 19       		.uleb128 0x19
 29061 016b 2E       		.uleb128 0x2e
 29062 016c 01       		.byte	0x1
 29063 016d 03       		.uleb128 0x3
 29064 016e 0E       		.uleb128 0xe
 29065 016f 3A       		.uleb128 0x3a
 29066 0170 0B       		.uleb128 0xb
 29067 0171 3B       		.uleb128 0x3b
 29068 0172 05       		.uleb128 0x5
 29069 0173 27       		.uleb128 0x27
 29070 0174 19       		.uleb128 0x19
 29071 0175 11       		.uleb128 0x11
 29072 0176 01       		.uleb128 0x1
 29073 0177 12       		.uleb128 0x12
 29074 0178 06       		.uleb128 0x6
 29075 0179 40       		.uleb128 0x40
 29076 017a 18       		.uleb128 0x18
 29077 017b 9642     		.uleb128 0x2116
 29078 017d 19       		.uleb128 0x19
 29079 017e 01       		.uleb128 0x1
 29080 017f 13       		.uleb128 0x13
 29081 0180 00       		.byte	0
 29082 0181 00       		.byte	0
 29083 0182 1A       		.uleb128 0x1a
 29084 0183 34       		.uleb128 0x34
 29085 0184 00       		.byte	0
 29086 0185 03       		.uleb128 0x3
 29087 0186 0E       		.uleb128 0xe
 29088 0187 3A       		.uleb128 0x3a
 29089 0188 0B       		.uleb128 0xb
 29090 0189 3B       		.uleb128 0x3b
 29091 018a 0B       		.uleb128 0xb
 29092 018b 49       		.uleb128 0x49
 29093 018c 13       		.uleb128 0x13
 29094 018d 3F       		.uleb128 0x3f
 29095 018e 19       		.uleb128 0x19
 29096 018f 02       		.uleb128 0x2
 29097 0190 18       		.uleb128 0x18
 29098 0191 00       		.byte	0
 29099 0192 00       		.byte	0
 29100 0193 00       		.byte	0
 29101              		.section	.debug_aranges,"",%progbits
 29102 0000 AC040000 		.4byte	0x4ac
 29103 0004 0200     		.2byte	0x2
 29104 0006 00000000 		.4byte	.Ldebug_info0
 29105 000a 04       		.byte	0x4
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 673


 29106 000b 00       		.byte	0
 29107 000c 0000     		.2byte	0
 29108 000e 0000     		.2byte	0
 29109 0010 00000000 		.4byte	.LFB0
 29110 0014 60000000 		.4byte	.LFE0-.LFB0
 29111 0018 00000000 		.4byte	.LFB1
 29112 001c A4000000 		.4byte	.LFE1-.LFB1
 29113 0020 00000000 		.4byte	.LFB2
 29114 0024 78000000 		.4byte	.LFE2-.LFB2
 29115 0028 00000000 		.4byte	.LFB3
 29116 002c 64000000 		.4byte	.LFE3-.LFB3
 29117 0030 00000000 		.4byte	.LFB4
 29118 0034 48010000 		.4byte	.LFE4-.LFB4
 29119 0038 00000000 		.4byte	.LFB5
 29120 003c 64000000 		.4byte	.LFE5-.LFB5
 29121 0040 00000000 		.4byte	.LFB6
 29122 0044 48010000 		.4byte	.LFE6-.LFB6
 29123 0048 00000000 		.4byte	.LFB7
 29124 004c 64000000 		.4byte	.LFE7-.LFB7
 29125 0050 00000000 		.4byte	.LFB8
 29126 0054 48010000 		.4byte	.LFE8-.LFB8
 29127 0058 00000000 		.4byte	.LFB9
 29128 005c 64000000 		.4byte	.LFE9-.LFB9
 29129 0060 00000000 		.4byte	.LFB10
 29130 0064 6C020000 		.4byte	.LFE10-.LFB10
 29131 0068 00000000 		.4byte	.LFB11
 29132 006c B8000000 		.4byte	.LFE11-.LFB11
 29133 0070 00000000 		.4byte	.LFB12
 29134 0074 50000000 		.4byte	.LFE12-.LFB12
 29135 0078 00000000 		.4byte	.LFB13
 29136 007c 50000000 		.4byte	.LFE13-.LFB13
 29137 0080 00000000 		.4byte	.LFB14
 29138 0084 50000000 		.4byte	.LFE14-.LFB14
 29139 0088 00000000 		.4byte	.LFB15
 29140 008c 68000000 		.4byte	.LFE15-.LFB15
 29141 0090 00000000 		.4byte	.LFB16
 29142 0094 68000000 		.4byte	.LFE16-.LFB16
 29143 0098 00000000 		.4byte	.LFB17
 29144 009c 50000000 		.4byte	.LFE17-.LFB17
 29145 00a0 00000000 		.4byte	.LFB18
 29146 00a4 74000000 		.4byte	.LFE18-.LFB18
 29147 00a8 00000000 		.4byte	.LFB19
 29148 00ac 3C010000 		.4byte	.LFE19-.LFB19
 29149 00b0 00000000 		.4byte	.LFB20
 29150 00b4 74000000 		.4byte	.LFE20-.LFB20
 29151 00b8 00000000 		.4byte	.LFB21
 29152 00bc 24020000 		.4byte	.LFE21-.LFB21
 29153 00c0 00000000 		.4byte	.LFB22
 29154 00c4 70010000 		.4byte	.LFE22-.LFB22
 29155 00c8 00000000 		.4byte	.LFB23
 29156 00cc 50020000 		.4byte	.LFE23-.LFB23
 29157 00d0 00000000 		.4byte	.LFB24
 29158 00d4 C8000000 		.4byte	.LFE24-.LFB24
 29159 00d8 00000000 		.4byte	.LFB25
 29160 00dc 6C000000 		.4byte	.LFE25-.LFB25
 29161 00e0 00000000 		.4byte	.LFB26
 29162 00e4 58010000 		.4byte	.LFE26-.LFB26
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 674


 29163 00e8 00000000 		.4byte	.LFB27
 29164 00ec 6C000000 		.4byte	.LFE27-.LFB27
 29165 00f0 00000000 		.4byte	.LFB28
 29166 00f4 B8000000 		.4byte	.LFE28-.LFB28
 29167 00f8 00000000 		.4byte	.LFB29
 29168 00fc 68000000 		.4byte	.LFE29-.LFB29
 29169 0100 00000000 		.4byte	.LFB30
 29170 0104 A0000000 		.4byte	.LFE30-.LFB30
 29171 0108 00000000 		.4byte	.LFB31
 29172 010c 6C000000 		.4byte	.LFE31-.LFB31
 29173 0110 00000000 		.4byte	.LFB32
 29174 0114 A8000000 		.4byte	.LFE32-.LFB32
 29175 0118 00000000 		.4byte	.LFB33
 29176 011c 44000000 		.4byte	.LFE33-.LFB33
 29177 0120 00000000 		.4byte	.LFB34
 29178 0124 78000000 		.4byte	.LFE34-.LFB34
 29179 0128 00000000 		.4byte	.LFB35
 29180 012c C4020000 		.4byte	.LFE35-.LFB35
 29181 0130 00000000 		.4byte	.LFB36
 29182 0134 F4020000 		.4byte	.LFE36-.LFB36
 29183 0138 00000000 		.4byte	.LFB37
 29184 013c 6C000000 		.4byte	.LFE37-.LFB37
 29185 0140 00000000 		.4byte	.LFB38
 29186 0144 B8000000 		.4byte	.LFE38-.LFB38
 29187 0148 00000000 		.4byte	.LFB39
 29188 014c 6C000000 		.4byte	.LFE39-.LFB39
 29189 0150 00000000 		.4byte	.LFB40
 29190 0154 B8000000 		.4byte	.LFE40-.LFB40
 29191 0158 00000000 		.4byte	.LFB41
 29192 015c 30010000 		.4byte	.LFE41-.LFB41
 29193 0160 00000000 		.4byte	.LFB42
 29194 0164 10020000 		.4byte	.LFE42-.LFB42
 29195 0168 00000000 		.4byte	.LFB43
 29196 016c B8000000 		.4byte	.LFE43-.LFB43
 29197 0170 00000000 		.4byte	.LFB44
 29198 0174 2C010000 		.4byte	.LFE44-.LFB44
 29199 0178 00000000 		.4byte	.LFB45
 29200 017c C0000000 		.4byte	.LFE45-.LFB45
 29201 0180 00000000 		.4byte	.LFB46
 29202 0184 30010000 		.4byte	.LFE46-.LFB46
 29203 0188 00000000 		.4byte	.LFB47
 29204 018c C0000000 		.4byte	.LFE47-.LFB47
 29205 0190 00000000 		.4byte	.LFB48
 29206 0194 30010000 		.4byte	.LFE48-.LFB48
 29207 0198 00000000 		.4byte	.LFB49
 29208 019c C0000000 		.4byte	.LFE49-.LFB49
 29209 01a0 00000000 		.4byte	.LFB50
 29210 01a4 30010000 		.4byte	.LFE50-.LFB50
 29211 01a8 00000000 		.4byte	.LFB51
 29212 01ac C0000000 		.4byte	.LFE51-.LFB51
 29213 01b0 00000000 		.4byte	.LFB52
 29214 01b4 30010000 		.4byte	.LFE52-.LFB52
 29215 01b8 00000000 		.4byte	.LFB53
 29216 01bc C0000000 		.4byte	.LFE53-.LFB53
 29217 01c0 00000000 		.4byte	.LFB54
 29218 01c4 30010000 		.4byte	.LFE54-.LFB54
 29219 01c8 00000000 		.4byte	.LFB55
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 675


 29220 01cc C0000000 		.4byte	.LFE55-.LFB55
 29221 01d0 00000000 		.4byte	.LFB56
 29222 01d4 30010000 		.4byte	.LFE56-.LFB56
 29223 01d8 00000000 		.4byte	.LFB57
 29224 01dc B4000000 		.4byte	.LFE57-.LFB57
 29225 01e0 00000000 		.4byte	.LFB58
 29226 01e4 24010000 		.4byte	.LFE58-.LFB58
 29227 01e8 00000000 		.4byte	.LFB59
 29228 01ec B8000000 		.4byte	.LFE59-.LFB59
 29229 01f0 00000000 		.4byte	.LFB60
 29230 01f4 28010000 		.4byte	.LFE60-.LFB60
 29231 01f8 00000000 		.4byte	.LFB61
 29232 01fc 6C000000 		.4byte	.LFE61-.LFB61
 29233 0200 00000000 		.4byte	.LFB62
 29234 0204 B8000000 		.4byte	.LFE62-.LFB62
 29235 0208 00000000 		.4byte	.LFB63
 29236 020c 6C000000 		.4byte	.LFE63-.LFB63
 29237 0210 00000000 		.4byte	.LFB64
 29238 0214 B8000000 		.4byte	.LFE64-.LFB64
 29239 0218 00000000 		.4byte	.LFB65
 29240 021c 6C000000 		.4byte	.LFE65-.LFB65
 29241 0220 00000000 		.4byte	.LFB66
 29242 0224 B8000000 		.4byte	.LFE66-.LFB66
 29243 0228 00000000 		.4byte	.LFB67
 29244 022c 6C000000 		.4byte	.LFE67-.LFB67
 29245 0230 00000000 		.4byte	.LFB68
 29246 0234 B8000000 		.4byte	.LFE68-.LFB68
 29247 0238 00000000 		.4byte	.LFB69
 29248 023c 98010000 		.4byte	.LFE69-.LFB69
 29249 0240 00000000 		.4byte	.LFB70
 29250 0244 E4020000 		.4byte	.LFE70-.LFB70
 29251 0248 00000000 		.4byte	.LFB71
 29252 024c C4000000 		.4byte	.LFE71-.LFB71
 29253 0250 00000000 		.4byte	.LFB72
 29254 0254 34010000 		.4byte	.LFE72-.LFB72
 29255 0258 00000000 		.4byte	.LFB73
 29256 025c C0000000 		.4byte	.LFE73-.LFB73
 29257 0260 00000000 		.4byte	.LFB74
 29258 0264 34010000 		.4byte	.LFE74-.LFB74
 29259 0268 00000000 		.4byte	.LFB75
 29260 026c A0000000 		.4byte	.LFE75-.LFB75
 29261 0270 00000000 		.4byte	.LFB76
 29262 0274 68000000 		.4byte	.LFE76-.LFB76
 29263 0278 00000000 		.4byte	.LFB77
 29264 027c 7C010000 		.4byte	.LFE77-.LFB77
 29265 0280 00000000 		.4byte	.LFB78
 29266 0284 18010000 		.4byte	.LFE78-.LFB78
 29267 0288 00000000 		.4byte	.LFB79
 29268 028c 78010000 		.4byte	.LFE79-.LFB79
 29269 0290 00000000 		.4byte	.LFB80
 29270 0294 0C010000 		.4byte	.LFE80-.LFB80
 29271 0298 00000000 		.4byte	.LFB81
 29272 029c F0000000 		.4byte	.LFE81-.LFB81
 29273 02a0 00000000 		.4byte	.LFB82
 29274 02a4 B8000000 		.4byte	.LFE82-.LFB82
 29275 02a8 00000000 		.4byte	.LFB83
 29276 02ac 28010000 		.4byte	.LFE83-.LFB83
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 676


 29277 02b0 00000000 		.4byte	.LFB84
 29278 02b4 6C000000 		.4byte	.LFE84-.LFB84
 29279 02b8 00000000 		.4byte	.LFB85
 29280 02bc A8000000 		.4byte	.LFE85-.LFB85
 29281 02c0 00000000 		.4byte	.LFB86
 29282 02c4 68000000 		.4byte	.LFE86-.LFB86
 29283 02c8 00000000 		.4byte	.LFB87
 29284 02cc A4000000 		.4byte	.LFE87-.LFB87
 29285 02d0 00000000 		.4byte	.LFB88
 29286 02d4 6C000000 		.4byte	.LFE88-.LFB88
 29287 02d8 00000000 		.4byte	.LFB89
 29288 02dc A8000000 		.4byte	.LFE89-.LFB89
 29289 02e0 00000000 		.4byte	.LFB90
 29290 02e4 68000000 		.4byte	.LFE90-.LFB90
 29291 02e8 00000000 		.4byte	.LFB91
 29292 02ec A0000000 		.4byte	.LFE91-.LFB91
 29293 02f0 00000000 		.4byte	.LFB92
 29294 02f4 68000000 		.4byte	.LFE92-.LFB92
 29295 02f8 00000000 		.4byte	.LFB93
 29296 02fc A4000000 		.4byte	.LFE93-.LFB93
 29297 0300 00000000 		.4byte	.LFB94
 29298 0304 68000000 		.4byte	.LFE94-.LFB94
 29299 0308 00000000 		.4byte	.LFB95
 29300 030c A0000000 		.4byte	.LFE95-.LFB95
 29301 0310 00000000 		.4byte	.LFB96
 29302 0314 68000000 		.4byte	.LFE96-.LFB96
 29303 0318 00000000 		.4byte	.LFB97
 29304 031c A4000000 		.4byte	.LFE97-.LFB97
 29305 0320 00000000 		.4byte	.LFB98
 29306 0324 6C000000 		.4byte	.LFE98-.LFB98
 29307 0328 00000000 		.4byte	.LFB99
 29308 032c A8000000 		.4byte	.LFE99-.LFB99
 29309 0330 00000000 		.4byte	.LFB100
 29310 0334 6C000000 		.4byte	.LFE100-.LFB100
 29311 0338 00000000 		.4byte	.LFB101
 29312 033c A8000000 		.4byte	.LFE101-.LFB101
 29313 0340 00000000 		.4byte	.LFB102
 29314 0344 B4000000 		.4byte	.LFE102-.LFB102
 29315 0348 00000000 		.4byte	.LFB103
 29316 034c E8000000 		.4byte	.LFE103-.LFB103
 29317 0350 00000000 		.4byte	.LFB104
 29318 0354 6C000000 		.4byte	.LFE104-.LFB104
 29319 0358 00000000 		.4byte	.LFB105
 29320 035c A8000000 		.4byte	.LFE105-.LFB105
 29321 0360 00000000 		.4byte	.LFB106
 29322 0364 68000000 		.4byte	.LFE106-.LFB106
 29323 0368 00000000 		.4byte	.LFB107
 29324 036c A4000000 		.4byte	.LFE107-.LFB107
 29325 0370 00000000 		.4byte	.LFB108
 29326 0374 6C000000 		.4byte	.LFE108-.LFB108
 29327 0378 00000000 		.4byte	.LFB109
 29328 037c A8000000 		.4byte	.LFE109-.LFB109
 29329 0380 00000000 		.4byte	.LFB110
 29330 0384 68000000 		.4byte	.LFE110-.LFB110
 29331 0388 00000000 		.4byte	.LFB111
 29332 038c 18010000 		.4byte	.LFE111-.LFB111
 29333 0390 00000000 		.4byte	.LFB112
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 677


 29334 0394 68000000 		.4byte	.LFE112-.LFB112
 29335 0398 00000000 		.4byte	.LFB113
 29336 039c B8000000 		.4byte	.LFE113-.LFB113
 29337 03a0 00000000 		.4byte	.LFB114
 29338 03a4 6C000000 		.4byte	.LFE114-.LFB114
 29339 03a8 00000000 		.4byte	.LFB115
 29340 03ac B8000000 		.4byte	.LFE115-.LFB115
 29341 03b0 00000000 		.4byte	.LFB116
 29342 03b4 6C000000 		.4byte	.LFE116-.LFB116
 29343 03b8 00000000 		.4byte	.LFB117
 29344 03bc A8000000 		.4byte	.LFE117-.LFB117
 29345 03c0 00000000 		.4byte	.LFB118
 29346 03c4 AC000000 		.4byte	.LFE118-.LFB118
 29347 03c8 00000000 		.4byte	.LFB119
 29348 03cc 70000000 		.4byte	.LFE119-.LFB119
 29349 03d0 00000000 		.4byte	.LFB120
 29350 03d4 6C000000 		.4byte	.LFE120-.LFB120
 29351 03d8 00000000 		.4byte	.LFB121
 29352 03dc 68000000 		.4byte	.LFE121-.LFB121
 29353 03e0 00000000 		.4byte	.LFB122
 29354 03e4 A4000000 		.4byte	.LFE122-.LFB122
 29355 03e8 00000000 		.4byte	.LFB123
 29356 03ec C0000000 		.4byte	.LFE123-.LFB123
 29357 03f0 00000000 		.4byte	.LFB124
 29358 03f4 30010000 		.4byte	.LFE124-.LFB124
 29359 03f8 00000000 		.4byte	.LFB125
 29360 03fc F4000000 		.4byte	.LFE125-.LFB125
 29361 0400 00000000 		.4byte	.LFB126
 29362 0404 9C010000 		.4byte	.LFE126-.LFB126
 29363 0408 00000000 		.4byte	.LFB127
 29364 040c 6C000000 		.4byte	.LFE127-.LFB127
 29365 0410 00000000 		.4byte	.LFB128
 29366 0414 A8000000 		.4byte	.LFE128-.LFB128
 29367 0418 00000000 		.4byte	.LFB129
 29368 041c A0000000 		.4byte	.LFE129-.LFB129
 29369 0420 00000000 		.4byte	.LFB130
 29370 0424 30010000 		.4byte	.LFE130-.LFB130
 29371 0428 00000000 		.4byte	.LFB131
 29372 042c 10020000 		.4byte	.LFE131-.LFB131
 29373 0430 00000000 		.4byte	.LFB132
 29374 0434 E0000000 		.4byte	.LFE132-.LFB132
 29375 0438 00000000 		.4byte	.LFB133
 29376 043c C4000000 		.4byte	.LFE133-.LFB133
 29377 0440 00000000 		.4byte	.LFB134
 29378 0444 68000000 		.4byte	.LFE134-.LFB134
 29379 0448 00000000 		.4byte	.LFB135
 29380 044c 40010000 		.4byte	.LFE135-.LFB135
 29381 0450 00000000 		.4byte	.LFB136
 29382 0454 68000000 		.4byte	.LFE136-.LFB136
 29383 0458 00000000 		.4byte	.LFB137
 29384 045c 44010000 		.4byte	.LFE137-.LFB137
 29385 0460 00000000 		.4byte	.LFB138
 29386 0464 00010000 		.4byte	.LFE138-.LFB138
 29387 0468 00000000 		.4byte	.LFB139
 29388 046c D0000000 		.4byte	.LFE139-.LFB139
 29389 0470 00000000 		.4byte	.LFB140
 29390 0474 62000000 		.4byte	.LFE140-.LFB140
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 678


 29391 0478 00000000 		.4byte	.LFB141
 29392 047c D8030000 		.4byte	.LFE141-.LFB141
 29393 0480 00000000 		.4byte	.LFB142
 29394 0484 AC010000 		.4byte	.LFE142-.LFB142
 29395 0488 00000000 		.4byte	.LFB143
 29396 048c 64000000 		.4byte	.LFE143-.LFB143
 29397 0490 00000000 		.4byte	.LFB144
 29398 0494 90020000 		.4byte	.LFE144-.LFB144
 29399 0498 00000000 		.4byte	.LFB145
 29400 049c E4000000 		.4byte	.LFE145-.LFB145
 29401 04a0 00000000 		.4byte	.LFB146
 29402 04a4 64000000 		.4byte	.LFE146-.LFB146
 29403 04a8 00000000 		.4byte	0
 29404 04ac 00000000 		.4byte	0
 29405              		.section	.debug_ranges,"",%progbits
 29406              	.Ldebug_ranges0:
 29407 0000 00000000 		.4byte	.LFB0
 29408 0004 60000000 		.4byte	.LFE0
 29409 0008 00000000 		.4byte	.LFB1
 29410 000c A4000000 		.4byte	.LFE1
 29411 0010 00000000 		.4byte	.LFB2
 29412 0014 78000000 		.4byte	.LFE2
 29413 0018 00000000 		.4byte	.LFB3
 29414 001c 64000000 		.4byte	.LFE3
 29415 0020 00000000 		.4byte	.LFB4
 29416 0024 48010000 		.4byte	.LFE4
 29417 0028 00000000 		.4byte	.LFB5
 29418 002c 64000000 		.4byte	.LFE5
 29419 0030 00000000 		.4byte	.LFB6
 29420 0034 48010000 		.4byte	.LFE6
 29421 0038 00000000 		.4byte	.LFB7
 29422 003c 64000000 		.4byte	.LFE7
 29423 0040 00000000 		.4byte	.LFB8
 29424 0044 48010000 		.4byte	.LFE8
 29425 0048 00000000 		.4byte	.LFB9
 29426 004c 64000000 		.4byte	.LFE9
 29427 0050 00000000 		.4byte	.LFB10
 29428 0054 6C020000 		.4byte	.LFE10
 29429 0058 00000000 		.4byte	.LFB11
 29430 005c B8000000 		.4byte	.LFE11
 29431 0060 00000000 		.4byte	.LFB12
 29432 0064 50000000 		.4byte	.LFE12
 29433 0068 00000000 		.4byte	.LFB13
 29434 006c 50000000 		.4byte	.LFE13
 29435 0070 00000000 		.4byte	.LFB14
 29436 0074 50000000 		.4byte	.LFE14
 29437 0078 00000000 		.4byte	.LFB15
 29438 007c 68000000 		.4byte	.LFE15
 29439 0080 00000000 		.4byte	.LFB16
 29440 0084 68000000 		.4byte	.LFE16
 29441 0088 00000000 		.4byte	.LFB17
 29442 008c 50000000 		.4byte	.LFE17
 29443 0090 00000000 		.4byte	.LFB18
 29444 0094 74000000 		.4byte	.LFE18
 29445 0098 00000000 		.4byte	.LFB19
 29446 009c 3C010000 		.4byte	.LFE19
 29447 00a0 00000000 		.4byte	.LFB20
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 679


 29448 00a4 74000000 		.4byte	.LFE20
 29449 00a8 00000000 		.4byte	.LFB21
 29450 00ac 24020000 		.4byte	.LFE21
 29451 00b0 00000000 		.4byte	.LFB22
 29452 00b4 70010000 		.4byte	.LFE22
 29453 00b8 00000000 		.4byte	.LFB23
 29454 00bc 50020000 		.4byte	.LFE23
 29455 00c0 00000000 		.4byte	.LFB24
 29456 00c4 C8000000 		.4byte	.LFE24
 29457 00c8 00000000 		.4byte	.LFB25
 29458 00cc 6C000000 		.4byte	.LFE25
 29459 00d0 00000000 		.4byte	.LFB26
 29460 00d4 58010000 		.4byte	.LFE26
 29461 00d8 00000000 		.4byte	.LFB27
 29462 00dc 6C000000 		.4byte	.LFE27
 29463 00e0 00000000 		.4byte	.LFB28
 29464 00e4 B8000000 		.4byte	.LFE28
 29465 00e8 00000000 		.4byte	.LFB29
 29466 00ec 68000000 		.4byte	.LFE29
 29467 00f0 00000000 		.4byte	.LFB30
 29468 00f4 A0000000 		.4byte	.LFE30
 29469 00f8 00000000 		.4byte	.LFB31
 29470 00fc 6C000000 		.4byte	.LFE31
 29471 0100 00000000 		.4byte	.LFB32
 29472 0104 A8000000 		.4byte	.LFE32
 29473 0108 00000000 		.4byte	.LFB33
 29474 010c 44000000 		.4byte	.LFE33
 29475 0110 00000000 		.4byte	.LFB34
 29476 0114 78000000 		.4byte	.LFE34
 29477 0118 00000000 		.4byte	.LFB35
 29478 011c C4020000 		.4byte	.LFE35
 29479 0120 00000000 		.4byte	.LFB36
 29480 0124 F4020000 		.4byte	.LFE36
 29481 0128 00000000 		.4byte	.LFB37
 29482 012c 6C000000 		.4byte	.LFE37
 29483 0130 00000000 		.4byte	.LFB38
 29484 0134 B8000000 		.4byte	.LFE38
 29485 0138 00000000 		.4byte	.LFB39
 29486 013c 6C000000 		.4byte	.LFE39
 29487 0140 00000000 		.4byte	.LFB40
 29488 0144 B8000000 		.4byte	.LFE40
 29489 0148 00000000 		.4byte	.LFB41
 29490 014c 30010000 		.4byte	.LFE41
 29491 0150 00000000 		.4byte	.LFB42
 29492 0154 10020000 		.4byte	.LFE42
 29493 0158 00000000 		.4byte	.LFB43
 29494 015c B8000000 		.4byte	.LFE43
 29495 0160 00000000 		.4byte	.LFB44
 29496 0164 2C010000 		.4byte	.LFE44
 29497 0168 00000000 		.4byte	.LFB45
 29498 016c C0000000 		.4byte	.LFE45
 29499 0170 00000000 		.4byte	.LFB46
 29500 0174 30010000 		.4byte	.LFE46
 29501 0178 00000000 		.4byte	.LFB47
 29502 017c C0000000 		.4byte	.LFE47
 29503 0180 00000000 		.4byte	.LFB48
 29504 0184 30010000 		.4byte	.LFE48
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 680


 29505 0188 00000000 		.4byte	.LFB49
 29506 018c C0000000 		.4byte	.LFE49
 29507 0190 00000000 		.4byte	.LFB50
 29508 0194 30010000 		.4byte	.LFE50
 29509 0198 00000000 		.4byte	.LFB51
 29510 019c C0000000 		.4byte	.LFE51
 29511 01a0 00000000 		.4byte	.LFB52
 29512 01a4 30010000 		.4byte	.LFE52
 29513 01a8 00000000 		.4byte	.LFB53
 29514 01ac C0000000 		.4byte	.LFE53
 29515 01b0 00000000 		.4byte	.LFB54
 29516 01b4 30010000 		.4byte	.LFE54
 29517 01b8 00000000 		.4byte	.LFB55
 29518 01bc C0000000 		.4byte	.LFE55
 29519 01c0 00000000 		.4byte	.LFB56
 29520 01c4 30010000 		.4byte	.LFE56
 29521 01c8 00000000 		.4byte	.LFB57
 29522 01cc B4000000 		.4byte	.LFE57
 29523 01d0 00000000 		.4byte	.LFB58
 29524 01d4 24010000 		.4byte	.LFE58
 29525 01d8 00000000 		.4byte	.LFB59
 29526 01dc B8000000 		.4byte	.LFE59
 29527 01e0 00000000 		.4byte	.LFB60
 29528 01e4 28010000 		.4byte	.LFE60
 29529 01e8 00000000 		.4byte	.LFB61
 29530 01ec 6C000000 		.4byte	.LFE61
 29531 01f0 00000000 		.4byte	.LFB62
 29532 01f4 B8000000 		.4byte	.LFE62
 29533 01f8 00000000 		.4byte	.LFB63
 29534 01fc 6C000000 		.4byte	.LFE63
 29535 0200 00000000 		.4byte	.LFB64
 29536 0204 B8000000 		.4byte	.LFE64
 29537 0208 00000000 		.4byte	.LFB65
 29538 020c 6C000000 		.4byte	.LFE65
 29539 0210 00000000 		.4byte	.LFB66
 29540 0214 B8000000 		.4byte	.LFE66
 29541 0218 00000000 		.4byte	.LFB67
 29542 021c 6C000000 		.4byte	.LFE67
 29543 0220 00000000 		.4byte	.LFB68
 29544 0224 B8000000 		.4byte	.LFE68
 29545 0228 00000000 		.4byte	.LFB69
 29546 022c 98010000 		.4byte	.LFE69
 29547 0230 00000000 		.4byte	.LFB70
 29548 0234 E4020000 		.4byte	.LFE70
 29549 0238 00000000 		.4byte	.LFB71
 29550 023c C4000000 		.4byte	.LFE71
 29551 0240 00000000 		.4byte	.LFB72
 29552 0244 34010000 		.4byte	.LFE72
 29553 0248 00000000 		.4byte	.LFB73
 29554 024c C0000000 		.4byte	.LFE73
 29555 0250 00000000 		.4byte	.LFB74
 29556 0254 34010000 		.4byte	.LFE74
 29557 0258 00000000 		.4byte	.LFB75
 29558 025c A0000000 		.4byte	.LFE75
 29559 0260 00000000 		.4byte	.LFB76
 29560 0264 68000000 		.4byte	.LFE76
 29561 0268 00000000 		.4byte	.LFB77
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 681


 29562 026c 7C010000 		.4byte	.LFE77
 29563 0270 00000000 		.4byte	.LFB78
 29564 0274 18010000 		.4byte	.LFE78
 29565 0278 00000000 		.4byte	.LFB79
 29566 027c 78010000 		.4byte	.LFE79
 29567 0280 00000000 		.4byte	.LFB80
 29568 0284 0C010000 		.4byte	.LFE80
 29569 0288 00000000 		.4byte	.LFB81
 29570 028c F0000000 		.4byte	.LFE81
 29571 0290 00000000 		.4byte	.LFB82
 29572 0294 B8000000 		.4byte	.LFE82
 29573 0298 00000000 		.4byte	.LFB83
 29574 029c 28010000 		.4byte	.LFE83
 29575 02a0 00000000 		.4byte	.LFB84
 29576 02a4 6C000000 		.4byte	.LFE84
 29577 02a8 00000000 		.4byte	.LFB85
 29578 02ac A8000000 		.4byte	.LFE85
 29579 02b0 00000000 		.4byte	.LFB86
 29580 02b4 68000000 		.4byte	.LFE86
 29581 02b8 00000000 		.4byte	.LFB87
 29582 02bc A4000000 		.4byte	.LFE87
 29583 02c0 00000000 		.4byte	.LFB88
 29584 02c4 6C000000 		.4byte	.LFE88
 29585 02c8 00000000 		.4byte	.LFB89
 29586 02cc A8000000 		.4byte	.LFE89
 29587 02d0 00000000 		.4byte	.LFB90
 29588 02d4 68000000 		.4byte	.LFE90
 29589 02d8 00000000 		.4byte	.LFB91
 29590 02dc A0000000 		.4byte	.LFE91
 29591 02e0 00000000 		.4byte	.LFB92
 29592 02e4 68000000 		.4byte	.LFE92
 29593 02e8 00000000 		.4byte	.LFB93
 29594 02ec A4000000 		.4byte	.LFE93
 29595 02f0 00000000 		.4byte	.LFB94
 29596 02f4 68000000 		.4byte	.LFE94
 29597 02f8 00000000 		.4byte	.LFB95
 29598 02fc A0000000 		.4byte	.LFE95
 29599 0300 00000000 		.4byte	.LFB96
 29600 0304 68000000 		.4byte	.LFE96
 29601 0308 00000000 		.4byte	.LFB97
 29602 030c A4000000 		.4byte	.LFE97
 29603 0310 00000000 		.4byte	.LFB98
 29604 0314 6C000000 		.4byte	.LFE98
 29605 0318 00000000 		.4byte	.LFB99
 29606 031c A8000000 		.4byte	.LFE99
 29607 0320 00000000 		.4byte	.LFB100
 29608 0324 6C000000 		.4byte	.LFE100
 29609 0328 00000000 		.4byte	.LFB101
 29610 032c A8000000 		.4byte	.LFE101
 29611 0330 00000000 		.4byte	.LFB102
 29612 0334 B4000000 		.4byte	.LFE102
 29613 0338 00000000 		.4byte	.LFB103
 29614 033c E8000000 		.4byte	.LFE103
 29615 0340 00000000 		.4byte	.LFB104
 29616 0344 6C000000 		.4byte	.LFE104
 29617 0348 00000000 		.4byte	.LFB105
 29618 034c A8000000 		.4byte	.LFE105
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 682


 29619 0350 00000000 		.4byte	.LFB106
 29620 0354 68000000 		.4byte	.LFE106
 29621 0358 00000000 		.4byte	.LFB107
 29622 035c A4000000 		.4byte	.LFE107
 29623 0360 00000000 		.4byte	.LFB108
 29624 0364 6C000000 		.4byte	.LFE108
 29625 0368 00000000 		.4byte	.LFB109
 29626 036c A8000000 		.4byte	.LFE109
 29627 0370 00000000 		.4byte	.LFB110
 29628 0374 68000000 		.4byte	.LFE110
 29629 0378 00000000 		.4byte	.LFB111
 29630 037c 18010000 		.4byte	.LFE111
 29631 0380 00000000 		.4byte	.LFB112
 29632 0384 68000000 		.4byte	.LFE112
 29633 0388 00000000 		.4byte	.LFB113
 29634 038c B8000000 		.4byte	.LFE113
 29635 0390 00000000 		.4byte	.LFB114
 29636 0394 6C000000 		.4byte	.LFE114
 29637 0398 00000000 		.4byte	.LFB115
 29638 039c B8000000 		.4byte	.LFE115
 29639 03a0 00000000 		.4byte	.LFB116
 29640 03a4 6C000000 		.4byte	.LFE116
 29641 03a8 00000000 		.4byte	.LFB117
 29642 03ac A8000000 		.4byte	.LFE117
 29643 03b0 00000000 		.4byte	.LFB118
 29644 03b4 AC000000 		.4byte	.LFE118
 29645 03b8 00000000 		.4byte	.LFB119
 29646 03bc 70000000 		.4byte	.LFE119
 29647 03c0 00000000 		.4byte	.LFB120
 29648 03c4 6C000000 		.4byte	.LFE120
 29649 03c8 00000000 		.4byte	.LFB121
 29650 03cc 68000000 		.4byte	.LFE121
 29651 03d0 00000000 		.4byte	.LFB122
 29652 03d4 A4000000 		.4byte	.LFE122
 29653 03d8 00000000 		.4byte	.LFB123
 29654 03dc C0000000 		.4byte	.LFE123
 29655 03e0 00000000 		.4byte	.LFB124
 29656 03e4 30010000 		.4byte	.LFE124
 29657 03e8 00000000 		.4byte	.LFB125
 29658 03ec F4000000 		.4byte	.LFE125
 29659 03f0 00000000 		.4byte	.LFB126
 29660 03f4 9C010000 		.4byte	.LFE126
 29661 03f8 00000000 		.4byte	.LFB127
 29662 03fc 6C000000 		.4byte	.LFE127
 29663 0400 00000000 		.4byte	.LFB128
 29664 0404 A8000000 		.4byte	.LFE128
 29665 0408 00000000 		.4byte	.LFB129
 29666 040c A0000000 		.4byte	.LFE129
 29667 0410 00000000 		.4byte	.LFB130
 29668 0414 30010000 		.4byte	.LFE130
 29669 0418 00000000 		.4byte	.LFB131
 29670 041c 10020000 		.4byte	.LFE131
 29671 0420 00000000 		.4byte	.LFB132
 29672 0424 E0000000 		.4byte	.LFE132
 29673 0428 00000000 		.4byte	.LFB133
 29674 042c C4000000 		.4byte	.LFE133
 29675 0430 00000000 		.4byte	.LFB134
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 683


 29676 0434 68000000 		.4byte	.LFE134
 29677 0438 00000000 		.4byte	.LFB135
 29678 043c 40010000 		.4byte	.LFE135
 29679 0440 00000000 		.4byte	.LFB136
 29680 0444 68000000 		.4byte	.LFE136
 29681 0448 00000000 		.4byte	.LFB137
 29682 044c 44010000 		.4byte	.LFE137
 29683 0450 00000000 		.4byte	.LFB138
 29684 0454 00010000 		.4byte	.LFE138
 29685 0458 00000000 		.4byte	.LFB139
 29686 045c D0000000 		.4byte	.LFE139
 29687 0460 00000000 		.4byte	.LFB140
 29688 0464 62000000 		.4byte	.LFE140
 29689 0468 00000000 		.4byte	.LFB141
 29690 046c D8030000 		.4byte	.LFE141
 29691 0470 00000000 		.4byte	.LFB142
 29692 0474 AC010000 		.4byte	.LFE142
 29693 0478 00000000 		.4byte	.LFB143
 29694 047c 64000000 		.4byte	.LFE143
 29695 0480 00000000 		.4byte	.LFB144
 29696 0484 90020000 		.4byte	.LFE144
 29697 0488 00000000 		.4byte	.LFB145
 29698 048c E4000000 		.4byte	.LFE145
 29699 0490 00000000 		.4byte	.LFB146
 29700 0494 64000000 		.4byte	.LFE146
 29701 0498 00000000 		.4byte	0
 29702 049c 00000000 		.4byte	0
 29703              		.section	.debug_line,"",%progbits
 29704              	.Ldebug_line0:
 29705 0000 3F150000 		.section	.debug_str,"MS",%progbits,1
 29705      02002B00 
 29705      00000201 
 29705      FB0E0D00 
 29705      01010101 
 29706              	.LASF180:
 29707 0000 7461705F 		.ascii	"tap_durn_u8\000"
 29707      6475726E 
 29707      5F753800 
 29708              	.LASF33:
 29709 000c 626D6132 		.ascii	"bma2x2\000"
 29709      783200
 29710              	.LASF187:
 29711 0013 626D6132 		.ascii	"bma2x2_set_tap_quiet\000"
 29711      78325F73 
 29711      65745F74 
 29711      61705F71 
 29711      75696574 
 29712              	.LASF216:
 29713 0028 6669666F 		.ascii	"fifo_wml_trig\000"
 29713      5F776D6C 
 29713      5F747269 
 29713      6700
 29714              	.LASF40:
 29715 0036 626D6132 		.ascii	"bma2x2_read_accel_x\000"
 29715      78325F72 
 29715      6561645F 
 29715      61636365 
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 684


 29715      6C5F7800 
 29716              	.LASF46:
 29717 004a 626D6132 		.ascii	"bma2x2_read_accel_y\000"
 29717      78325F72 
 29717      6561645F 
 29717      61636365 
 29717      6C5F7900 
 29718              	.LASF50:
 29719 005e 626D6132 		.ascii	"bma2x2_read_accel_z\000"
 29719      78325F72 
 29719      6561645F 
 29719      61636365 
 29719      6C5F7A00 
 29720              	.LASF11:
 29721 0072 626D6132 		.ascii	"bma2x2_accel_eight_resolution_temp\000"
 29721      78325F61 
 29721      6363656C 
 29721      5F656967 
 29721      68745F72 
 29722              	.LASF233:
 29723 0095 6E767072 		.ascii	"nvprog_remain_u8\000"
 29723      6F675F72 
 29723      656D6169 
 29723      6E5F7538 
 29723      00
 29724              	.LASF215:
 29725 00a6 626D6132 		.ascii	"bma2x2_get_fifo_wml_trig\000"
 29725      78325F67 
 29725      65745F66 
 29725      69666F5F 
 29725      776D6C5F 
 29726              	.LASF57:
 29727 00bf 626D6132 		.ascii	"bma2x2_get_intr_tap_stat\000"
 29727      78325F67 
 29727      65745F69 
 29727      6E74725F 
 29727      7461705F 
 29728              	.LASF63:
 29729 00d8 626D6132 		.ascii	"bma2x2_get_fifo_frame_count\000"
 29729      78325F67 
 29729      65745F66 
 29729      69666F5F 
 29729      6672616D 
 29730              	.LASF20:
 29731 00f4 6275735F 		.ascii	"bus_write\000"
 29731      77726974 
 29731      6500
 29732              	.LASF236:
 29733 00fe 626D6132 		.ascii	"bma2x2_set_spi3\000"
 29733      78325F73 
 29733      65745F73 
 29733      70693300 
 29734              	.LASF84:
 29735 010e 736C6565 		.ascii	"sleep_durn_u8\000"
 29735      705F6475 
 29735      726E5F75 
 29735      3800
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 685


 29736              	.LASF235:
 29737 011c 73706933 		.ascii	"spi3_u8\000"
 29737      5F753800 
 29738              	.LASF286:
 29739 0124 6669666F 		.ascii	"fifo_frame\000"
 29739      5F667261 
 29739      6D6500
 29740              	.LASF34:
 29741 012f 636F6D5F 		.ascii	"com_rslt\000"
 29741      72736C74 
 29741      00
 29742              	.LASF86:
 29743 0138 64617461 		.ascii	"data_sleep_durn_u8\000"
 29743      5F736C65 
 29743      65705F64 
 29743      75726E5F 
 29743      753800
 29744              	.LASF114:
 29745 014b 626D6132 		.ascii	"bma2x2_set_intr_low_g\000"
 29745      78325F73 
 29745      65745F69 
 29745      6E74725F 
 29745      6C6F775F 
 29746              	.LASF165:
 29747 0161 626D6132 		.ascii	"bma2x2_set_latch_intr\000"
 29747      78325F73 
 29747      65745F6C 
 29747      61746368 
 29747      5F696E74 
 29748              	.LASF6:
 29749 0177 6C6F6E67 		.ascii	"long long unsigned int\000"
 29749      206C6F6E 
 29749      6720756E 
 29749      7369676E 
 29749      65642069 
 29750              	.LASF162:
 29751 018e 7273745F 		.ascii	"rst_intr_u8\000"
 29751      696E7472 
 29751      5F753800 
 29752              	.LASF204:
 29753 019a 74686574 		.ascii	"theta_u8\000"
 29753      615F7538 
 29753      00
 29754              	.LASF285:
 29755 01a3 433A5C55 		.ascii	"C:\\Users\\Tudor\\Documents\\PSoC Creator\\Workspac"
 29755      73657273 
 29755      5C547564 
 29755      6F725C44 
 29755      6F63756D 
 29756 01d1 6530335C 		.ascii	"e03\\Design01.cydsn\000"
 29756      44657369 
 29756      676E3031 
 29756      2E637964 
 29756      736E00
 29757              	.LASF255:
 29758 01e4 6669666F 		.ascii	"fifo_mode_u8\000"
 29758      5F6D6F64 
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 686


 29758      655F7538 
 29758      00
 29759              	.LASF90:
 29760 01f1 626D6132 		.ascii	"bma2x2_get_high_bw\000"
 29760      78325F67 
 29760      65745F68 
 29760      6967685F 
 29760      627700
 29761              	.LASF221:
 29762 0204 626D6132 		.ascii	"bma2x2_set_selftest_axis\000"
 29762      78325F73 
 29762      65745F73 
 29762      656C6674 
 29762      6573745F 
 29763              	.LASF281:
 29764 021d 6F757470 		.ascii	"output_reg_u8\000"
 29764      75745F72 
 29764      65675F75 
 29764      3800
 29765              	.LASF55:
 29766 022b 61636365 		.ascii	"accel\000"
 29766      6C00
 29767              	.LASF274:
 29768 0231 64617461 		.ascii	"data_msb\000"
 29768      5F6D7362 
 29768      00
 29769              	.LASF172:
 29770 023a 626D6132 		.ascii	"bma2x2_set_thres\000"
 29770      78325F73 
 29770      65745F74 
 29770      68726573 
 29770      00
 29771              	.LASF259:
 29772 024b 626D6132 		.ascii	"bma2x2_set_fifo_data_select\000"
 29772      78325F73 
 29772      65745F66 
 29772      69666F5F 
 29772      64617461 
 29773              	.LASF261:
 29774 0267 6669666F 		.ascii	"fifo_conf\000"
 29774      5F636F6E 
 29774      6600
 29775              	.LASF179:
 29776 0271 626D6132 		.ascii	"bma2x2_get_tap_durn\000"
 29776      78325F67 
 29776      65745F74 
 29776      61705F64 
 29776      75726E00 
 29777              	.LASF195:
 29778 0285 6F726965 		.ascii	"orient_mode_u8\000"
 29778      6E745F6D 
 29778      6F64655F 
 29778      753800
 29779              	.LASF150:
 29780 0294 696E7472 		.ascii	"intr2_fifo_full_u8\000"
 29780      325F6669 
 29780      666F5F66 
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 687


 29780      756C6C5F 
 29780      753800
 29781              	.LASF2:
 29782 02a7 6C6F6E67 		.ascii	"long long int\000"
 29782      206C6F6E 
 29782      6720696E 
 29782      7400
 29783              	.LASF0:
 29784 02b5 7369676E 		.ascii	"signed char\000"
 29784      65642063 
 29784      68617200 
 29785              	.LASF18:
 29786 02c1 6465765F 		.ascii	"dev_addr\000"
 29786      61646472 
 29786      00
 29787              	.LASF231:
 29788 02ca 6E767072 		.ascii	"nvprog_ready_u8\000"
 29788      6F675F72 
 29788      65616479 
 29788      5F753800 
 29789              	.LASF166:
 29790 02da 6C617463 		.ascii	"latch_durn_u8\000"
 29790      685F6475 
 29790      726E5F75 
 29790      3800
 29791              	.LASF282:
 29792 02e8 705F626D 		.ascii	"p_bma2x2\000"
 29792      61327832 
 29792      00
 29793              	.LASF160:
 29794 02f1 626D6132 		.ascii	"bma2x2_set_intr_level\000"
 29794      78325F73 
 29794      65745F69 
 29794      6E74725F 
 29794      6C657665 
 29795              	.LASF71:
 29796 0307 626D6132 		.ascii	"bma2x2_set_range\000"
 29796      78325F73 
 29796      65745F72 
 29796      616E6765 
 29796      00
 29797              	.LASF257:
 29798 0318 626D6132 		.ascii	"bma2x2_get_fifo_data_select\000"
 29798      78325F67 
 29798      65745F66 
 29798      69666F5F 
 29798      64617461 
 29799              	.LASF211:
 29800 0334 626D6132 		.ascii	"bma2x2_set_flat_hyst\000"
 29800      78325F73 
 29800      65745F66 
 29800      6C61745F 
 29800      68797374 
 29801              	.LASF96:
 29802 0349 626D6132 		.ascii	"bma2x2_soft_rst\000"
 29802      78325F73 
 29802      6F66745F 
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 688


 29802      72737400 
 29803              	.LASF217:
 29804 0359 626D6132 		.ascii	"bma2x2_set_fifo_wml_trig\000"
 29804      78325F73 
 29804      65745F66 
 29804      69666F5F 
 29804      776D6C5F 
 29805              	.LASF226:
 29806 0372 6E766D70 		.ascii	"nvmprog_mode_u8\000"
 29806      726F675F 
 29806      6D6F6465 
 29806      5F753800 
 29807              	.LASF147:
 29808 0382 696E7472 		.ascii	"intr1_fifo_full_u8\000"
 29808      315F6669 
 29808      666F5F66 
 29808      756C6C5F 
 29808      753800
 29809              	.LASF82:
 29810 0395 626D6132 		.ascii	"bma2x2_set_mode_value\000"
 29810      78325F73 
 29810      65745F6D 
 29810      6F64655F 
 29810      76616C75 
 29811              	.LASF252:
 29812 03ab 626D6132 		.ascii	"bma2x2_get_offset\000"
 29812      78325F67 
 29812      65745F6F 
 29812      66667365 
 29812      7400
 29813              	.LASF260:
 29814 03bd 626D6132 		.ascii	"bma2x2_read_fifo_data\000"
 29814      78325F72 
 29814      6561645F 
 29814      6669666F 
 29814      5F646174 
 29815              	.LASF70:
 29816 03d3 72616E67 		.ascii	"range_u8\000"
 29816      655F7538 
 29816      00
 29817              	.LASF184:
 29818 03dc 626D6132 		.ascii	"bma2x2_set_tap_shock\000"
 29818      78325F73 
 29818      65745F74 
 29818      61705F73 
 29818      686F636B 
 29819              	.LASF67:
 29820 03f1 626D6132 		.ascii	"bma2x2_get_intr_stat\000"
 29820      78325F67 
 29820      65745F69 
 29820      6E74725F 
 29820      73746174 
 29821              	.LASF169:
 29822 0406 626D6132 		.ascii	"bma2x2_set_durn\000"
 29822      78325F73 
 29822      65745F64 
 29822      75726E00 
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 689


 29823              	.LASF190:
 29824 0416 626D6132 		.ascii	"bma2x2_set_tap_thres\000"
 29824      78325F73 
 29824      65745F74 
 29824      61705F74 
 29824      68726573 
 29825              	.LASF47:
 29826 042b 61636365 		.ascii	"accel_y_s16\000"
 29826      6C5F795F 
 29826      73313600 
 29827              	.LASF227:
 29828 0437 626D6132 		.ascii	"bma2x2_set_nvmprog_mode\000"
 29828      78325F73 
 29828      65745F6E 
 29828      766D7072 
 29828      6F675F6D 
 29829              	.LASF93:
 29830 044f 626D6132 		.ascii	"bma2x2_get_shadow_dis\000"
 29830      78325F67 
 29830      65745F73 
 29830      6861646F 
 29830      775F6469 
 29831              	.LASF92:
 29832 0465 626D6132 		.ascii	"bma2x2_set_high_bw\000"
 29832      78325F73 
 29832      65745F68 
 29832      6967685F 
 29832      627700
 29833              	.LASF64:
 29834 0478 6672616D 		.ascii	"frame_count_u8\000"
 29834      655F636F 
 29834      756E745F 
 29834      753800
 29835              	.LASF238:
 29836 0487 6932635F 		.ascii	"i2c_wdt_u8\000"
 29836      7764745F 
 29836      753800
 29837              	.LASF146:
 29838 0492 626D6132 		.ascii	"bma2x2_get_intr1_fifo_full\000"
 29838      78325F67 
 29838      65745F69 
 29838      6E747231 
 29838      5F666966 
 29839              	.LASF119:
 29840 04ad 626D6132 		.ascii	"bma2x2_get_intr_slope\000"
 29840      78325F67 
 29840      65745F69 
 29840      6E74725F 
 29840      736C6F70 
 29841              	.LASF104:
 29842 04c3 626D6132 		.ascii	"bma2x2_set_intr_fifo_full\000"
 29842      78325F73 
 29842      65745F69 
 29842      6E74725F 
 29842      6669666F 
 29843              	.LASF38:
 29844 04dd 6C656E5F 		.ascii	"len_u8\000"
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 690


 29844      753800
 29845              	.LASF111:
 29846 04e4 626D6132 		.ascii	"bma2x2_set_slow_no_motion\000"
 29846      78325F73 
 29846      65745F73 
 29846      6C6F775F 
 29846      6E6F5F6D 
 29847              	.LASF32:
 29848 04fe 626D6132 		.ascii	"bma2x2_init\000"
 29848      78325F69 
 29848      6E697400 
 29849              	.LASF212:
 29850 050a 626D6132 		.ascii	"bma2x2_get_flat_hold_time\000"
 29850      78325F67 
 29850      65745F66 
 29850      6C61745F 
 29850      686F6C64 
 29851              	.LASF279:
 29852 0524 626D6132 		.ascii	"bma2x2_read_accel_eight_resolution_xyzt\000"
 29852      78325F72 
 29852      6561645F 
 29852      61636365 
 29852      6C5F6569 
 29853              	.LASF228:
 29854 054c 626D6132 		.ascii	"bma2x2_set_nvprog_trig\000"
 29854      78325F73 
 29854      65745F6E 
 29854      7670726F 
 29854      675F7472 
 29855              	.LASF85:
 29856 0563 626D6132 		.ascii	"bma2x2_set_sleep_durn\000"
 29856      78325F73 
 29856      65745F73 
 29856      6C656570 
 29856      5F647572 
 29857              	.LASF156:
 29858 0579 696E7472 		.ascii	"intr_output_type_u8\000"
 29858      5F6F7574 
 29858      7075745F 
 29858      74797065 
 29858      5F753800 
 29859              	.LASF133:
 29860 058d 626D6132 		.ascii	"bma2x2_set_intr_orient\000"
 29860      78325F73 
 29860      65745F69 
 29860      6E74725F 
 29860      6F726965 
 29861              	.LASF164:
 29862 05a4 6C617463 		.ascii	"latch_intr_u8\000"
 29862      685F696E 
 29862      74725F75 
 29862      3800
 29863              	.LASF140:
 29864 05b2 626D6132 		.ascii	"bma2x2_get_intr1_fifo_wm\000"
 29864      78325F67 
 29864      65745F69 
 29864      6E747231 
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 691


 29864      5F666966 
 29865              	.LASF284:
 29866 05cb 626D6132 		.ascii	"bma2x2.c\000"
 29866      78322E63 
 29866      00
 29867              	.LASF73:
 29868 05d4 62775F75 		.ascii	"bw_u8\000"
 29868      3800
 29869              	.LASF178:
 29870 05da 626D6132 		.ascii	"bma2x2_set_low_g_mode\000"
 29870      78325F73 
 29870      65745F6C 
 29870      6F775F67 
 29870      5F6D6F64 
 29871              	.LASF191:
 29872 05f0 626D6132 		.ascii	"bma2x2_get_tap_sample\000"
 29872      78325F67 
 29872      65745F74 
 29872      61705F73 
 29872      616D706C 
 29873              	.LASF27:
 29874 0606 6669666F 		.ascii	"fifo_length\000"
 29874      5F6C656E 
 29874      67746800 
 29875              	.LASF116:
 29876 0612 626D6132 		.ascii	"bma2x2_get_intr_high_g\000"
 29876      78325F67 
 29876      65745F69 
 29876      6E74725F 
 29876      68696768 
 29877              	.LASF19:
 29878 0629 6669666F 		.ascii	"fifo_config\000"
 29878      5F636F6E 
 29878      66696700 
 29879              	.LASF105:
 29880 0635 626D6132 		.ascii	"bma2x2_get_intr_fifo_wm\000"
 29880      78325F67 
 29880      65745F69 
 29880      6E74725F 
 29880      6669666F 
 29881              	.LASF9:
 29882 064d 74656D70 		.ascii	"temp\000"
 29882      00
 29883              	.LASF8:
 29884 0652 626D6132 		.ascii	"bma2x2_accel_data_temp\000"
 29884      78325F61 
 29884      6363656C 
 29884      5F646174 
 29884      615F7465 
 29885              	.LASF141:
 29886 0669 696E7472 		.ascii	"intr1_fifo_wm_u8\000"
 29886      315F6669 
 29886      666F5F77 
 29886      6D5F7538 
 29886      00
 29887              	.LASF132:
 29888 067a 696E7472 		.ascii	"intr_orient_u8\000"
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 692


 29888      5F6F7269 
 29888      656E745F 
 29888      753800
 29889              	.LASF5:
 29890 0689 756E7369 		.ascii	"unsigned int\000"
 29890      676E6564 
 29890      20696E74 
 29890      00
 29891              	.LASF124:
 29892 0696 626D6132 		.ascii	"bma2x2_set_intr_slow_no_motion\000"
 29892      78325F73 
 29892      65745F69 
 29892      6E74725F 
 29892      736C6F77 
 29893              	.LASF230:
 29894 06b5 626D6132 		.ascii	"bma2x2_get_nvmprog_ready\000"
 29894      78325F67 
 29894      65745F6E 
 29894      766D7072 
 29894      6F675F72 
 29895              	.LASF174:
 29896 06ce 68797374 		.ascii	"hyst_u8\000"
 29896      5F753800 
 29897              	.LASF25:
 29898 06d6 6669666F 		.ascii	"fifo_data\000"
 29898      5F646174 
 29898      6100
 29899              	.LASF137:
 29900 06e0 626D6132 		.ascii	"bma2x2_get_new_data\000"
 29900      78325F67 
 29900      65745F6E 
 29900      65775F64 
 29900      61746100 
 29901              	.LASF214:
 29902 06f4 626D6132 		.ascii	"bma2x2_set_flat_hold_time\000"
 29902      78325F73 
 29902      65745F66 
 29902      6C61745F 
 29902      686F6C64 
 29903              	.LASF36:
 29904 070e 626D6132 		.ascii	"bma2x2_write_reg\000"
 29904      78325F77 
 29904      72697465 
 29904      5F726567 
 29904      00
 29905              	.LASF89:
 29906 071f 626D6132 		.ascii	"bma2x2_set_sleep_timer_mode\000"
 29906      78325F73 
 29906      65745F73 
 29906      6C656570 
 29906      5F74696D 
 29907              	.LASF275:
 29908 073b 756E7061 		.ascii	"unpack_accel_xyz\000"
 29908      636B5F61 
 29908      6363656C 
 29908      5F78797A 
 29908      00
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 693


 29909              	.LASF258:
 29910 074c 6669666F 		.ascii	"fifo_data_select_u8\000"
 29910      5F646174 
 29910      615F7365 
 29910      6C656374 
 29910      5F753800 
 29911              	.LASF244:
 29912 0760 63616C5F 		.ascii	"cal_rdy_u8\000"
 29912      7264795F 
 29912      753800
 29913              	.LASF134:
 29914 076b 626D6132 		.ascii	"bma2x2_get_intr_flat\000"
 29914      78325F67 
 29914      65745F69 
 29914      6E74725F 
 29914      666C6174 
 29915              	.LASF79:
 29916 0780 6D6F6465 		.ascii	"mode_ctr_eleven_reg\000"
 29916      5F637472 
 29916      5F656C65 
 29916      76656E5F 
 29916      72656700 
 29917              	.LASF76:
 29918 0794 626D6132 		.ascii	"bma2x2_get_power_mode\000"
 29918      78325F67 
 29918      65745F70 
 29918      6F776572 
 29918      5F6D6F64 
 29919              	.LASF45:
 29920 07aa 64617461 		.ascii	"data\000"
 29920      00
 29921              	.LASF240:
 29922 07af 626D6132 		.ascii	"bma2x2_get_slow_comp\000"
 29922      78325F67 
 29922      65745F73 
 29922      6C6F775F 
 29922      636F6D70 
 29923              	.LASF4:
 29924 07c4 73686F72 		.ascii	"short unsigned int\000"
 29924      7420756E 
 29924      7369676E 
 29924      65642069 
 29924      6E7400
 29925              	.LASF56:
 29926 07d7 626D6132 		.ascii	"bma2x2_read_accel_eight_resolution_xyz\000"
 29926      78325F72 
 29926      6561645F 
 29926      61636365 
 29926      6C5F6569 
 29927              	.LASF277:
 29928 07fe 74656D70 		.ascii	"temp_s8\000"
 29928      5F733800 
 29929              	.LASF41:
 29930 0806 61636365 		.ascii	"accel_x_s16\000"
 29930      6C5F785F 
 29930      73313600 
 29931              	.LASF142:
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 694


 29932 0812 626D6132 		.ascii	"bma2x2_set_intr1_fifo_wm\000"
 29932      78325F73 
 29932      65745F69 
 29932      6E747231 
 29932      5F666966 
 29933              	.LASF185:
 29934 082b 626D6132 		.ascii	"bma2x2_get_tap_quiet\000"
 29934      78325F67 
 29934      65745F74 
 29934      61705F71 
 29934      75696574 
 29935              	.LASF106:
 29936 0840 6669666F 		.ascii	"fifo_wm_u8\000"
 29936      5F776D5F 
 29936      753800
 29937              	.LASF98:
 29938 084b 626D6132 		.ascii	"bma2x2_get_intr_enable\000"
 29938      78325F67 
 29938      65745F69 
 29938      6E74725F 
 29938      656E6162 
 29939              	.LASF168:
 29940 0862 6475726E 		.ascii	"durn_u8\000"
 29940      5F753800 
 29941              	.LASF246:
 29942 086a 63616C5F 		.ascii	"cal_trigger_u8\000"
 29942      74726967 
 29942      6765725F 
 29942      753800
 29943              	.LASF197:
 29944 0879 626D6132 		.ascii	"bma2x2_get_orient_block\000"
 29944      78325F67 
 29944      65745F6F 
 29944      7269656E 
 29944      745F626C 
 29945              	.LASF58:
 29946 0891 73746174 		.ascii	"stat_tap_u8\000"
 29946      5F746170 
 29946      5F753800 
 29947              	.LASF91:
 29948 089d 68696768 		.ascii	"high_bw_u8\000"
 29948      5F62775F 
 29948      753800
 29949              	.LASF224:
 29950 08a8 626D6132 		.ascii	"bma2x2_set_selftest_sign\000"
 29950      78325F73 
 29950      65745F73 
 29950      656C6674 
 29950      6573745F 
 29951              	.LASF222:
 29952 08c1 626D6132 		.ascii	"bma2x2_get_selftest_sign\000"
 29952      78325F67 
 29952      65745F73 
 29952      656C6674 
 29952      6573745F 
 29953              	.LASF264:
 29954 08da 6669666F 		.ascii	"fifo_data_select\000"
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 695


 29954      5F646174 
 29954      615F7365 
 29954      6C656374 
 29954      00
 29955              	.LASF283:
 29956 08eb 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 29956      43313120 
 29956      352E342E 
 29956      31203230 
 29956      31363036 
 29957 091e 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 29957      20726576 
 29957      6973696F 
 29957      6E203233 
 29957      37373135 
 29958 0951 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 29958      66756E63 
 29958      74696F6E 
 29958      2D736563 
 29958      74696F6E 
 29959              	.LASF206:
 29960 0979 626D6132 		.ascii	"bma2x2_get_orient_enable\000"
 29960      78325F67 
 29960      65745F6F 
 29960      7269656E 
 29960      745F656E 
 29961              	.LASF152:
 29962 0992 626D6132 		.ascii	"bma2x2_get_source\000"
 29962      78325F67 
 29962      65745F73 
 29962      6F757263 
 29962      6500
 29963              	.LASF239:
 29964 09a4 626D6132 		.ascii	"bma2x2_set_i2c_wdt\000"
 29964      78325F73 
 29964      65745F69 
 29964      32635F77 
 29964      647400
 29965              	.LASF250:
 29966 09b7 6F666673 		.ascii	"offset_u8\000"
 29966      65745F75 
 29966      3800
 29967              	.LASF192:
 29968 09c1 7461705F 		.ascii	"tap_sample_u8\000"
 29968      73616D70 
 29968      6C655F75 
 29968      3800
 29969              	.LASF14:
 29970 09cf 706F7765 		.ascii	"power_mode_u8\000"
 29970      725F6D6F 
 29970      64655F75 
 29970      3800
 29971              	.LASF201:
 29972 09dd 6F726965 		.ascii	"orient_hyst_u8\000"
 29972      6E745F68 
 29972      7973745F 
 29972      753800
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 696


 29973              	.LASF262:
 29974 09ec 6669666F 		.ascii	"fifo_frame_count\000"
 29974      5F667261 
 29974      6D655F63 
 29974      6F756E74 
 29974      00
 29975              	.LASF163:
 29976 09fd 626D6132 		.ascii	"bma2x2_get_latch_intr\000"
 29976      78325F67 
 29976      65745F6C 
 29976      61746368 
 29976      5F696E74 
 29977              	.LASF213:
 29978 0a13 666C6174 		.ascii	"flat_hold_time_u8\000"
 29978      5F686F6C 
 29978      645F7469 
 29978      6D655F75 
 29978      3800
 29979              	.LASF234:
 29980 0a25 626D6132 		.ascii	"bma2x2_get_spi3\000"
 29980      78325F67 
 29980      65745F73 
 29980      70693300 
 29981              	.LASF171:
 29982 0a35 74687265 		.ascii	"thres_u8\000"
 29982      735F7538 
 29982      00
 29983              	.LASF10:
 29984 0a3e 626D6132 		.ascii	"bma2x2_accel_eight_resolution\000"
 29984      78325F61 
 29984      6363656C 
 29984      5F656967 
 29984      68745F72 
 29985              	.LASF121:
 29986 0a5c 626D6132 		.ascii	"bma2x2_set_intr_slope\000"
 29986      78325F73 
 29986      65745F69 
 29986      6E74725F 
 29986      736C6F70 
 29987              	.LASF268:
 29988 0a72 64617461 		.ascii	"data_index\000"
 29988      5F696E64 
 29988      657800
 29989              	.LASF276:
 29990 0a7d 626D6132 		.ascii	"bma2x2_read_temp\000"
 29990      78325F72 
 29990      6561645F 
 29990      74656D70 
 29990      00
 29991              	.LASF42:
 29992 0a8e 73697A65 		.ascii	"sizetype\000"
 29992      74797065 
 29992      00
 29993              	.LASF26:
 29994 0a97 61636365 		.ascii	"accel_byte_start_index\000"
 29994      6C5F6279 
 29994      74655F73 
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 697


 29994      74617274 
 29994      5F696E64 
 29995              	.LASF177:
 29996 0aae 6C6F775F 		.ascii	"low_g_mode_u8\000"
 29996      675F6D6F 
 29996      64655F75 
 29996      3800
 29997              	.LASF242:
 29998 0abc 626D6132 		.ascii	"bma2x2_set_slow_comp\000"
 29998      78325F73 
 29998      65745F73 
 29998      6C6F775F 
 29998      636F6D70 
 29999              	.LASF102:
 30000 0ad1 626D6132 		.ascii	"bma2x2_get_intr_fifo_full\000"
 30000      78325F67 
 30000      65745F69 
 30000      6E74725F 
 30000      6669666F 
 30001              	.LASF273:
 30002 0aeb 64617461 		.ascii	"data_lsb\000"
 30002      5F6C7362 
 30002      00
 30003              	.LASF278:
 30004 0af4 626D6132 		.ascii	"bma2x2_read_accel_xyzt\000"
 30004      78325F72 
 30004      6561645F 
 30004      61636365 
 30004      6C5F7879 
 30005              	.LASF167:
 30006 0b0b 626D6132 		.ascii	"bma2x2_get_durn\000"
 30006      78325F67 
 30006      65745F64 
 30006      75726E00 
 30007              	.LASF254:
 30008 0b1b 626D6132 		.ascii	"bma2x2_get_fifo_mode\000"
 30008      78325F67 
 30008      65745F66 
 30008      69666F5F 
 30008      6D6F6465 
 30009              	.LASF193:
 30010 0b30 626D6132 		.ascii	"bma2x2_set_tap_sample\000"
 30010      78325F73 
 30010      65745F74 
 30010      61705F73 
 30010      616D706C 
 30011              	.LASF110:
 30012 0b46 736C6F77 		.ascii	"slow_no_motion_u8\000"
 30012      5F6E6F5F 
 30012      6D6F7469 
 30012      6F6E5F75 
 30012      3800
 30013              	.LASF30:
 30014 0b58 6C656E5F 		.ascii	"len_u32\000"
 30014      75333200 
 30015              	.LASF100:
 30016 0b60 76616C75 		.ascii	"value_u8\000"
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 698


 30016      655F7538 
 30016      00
 30017              	.LASF219:
 30018 0b69 626D6132 		.ascii	"bma2x2_get_selftest_axis\000"
 30018      78325F67 
 30018      65745F73 
 30018      656C6674 
 30018      6573745F 
 30019              	.LASF17:
 30020 0b82 6C6F775F 		.ascii	"low_mode_reg\000"
 30020      6D6F6465 
 30020      5F726567 
 30020      00
 30021              	.LASF181:
 30022 0b8f 626D6132 		.ascii	"bma2x2_set_tap_durn\000"
 30022      78325F73 
 30022      65745F74 
 30022      61705F64 
 30022      75726E00 
 30023              	.LASF54:
 30024 0ba3 626D6132 		.ascii	"bma2x2_read_accel_xyz\000"
 30024      78325F72 
 30024      6561645F 
 30024      61636365 
 30024      6C5F7879 
 30025              	.LASF287:
 30026 0bb9 565F424D 		.ascii	"V_BMA2x2RESOLUTION_U8\000"
 30026      41327832 
 30026      5245534F 
 30026      4C555449 
 30026      4F4E5F55 
 30027              	.LASF154:
 30028 0bcf 626D6132 		.ascii	"bma2x2_set_source\000"
 30028      78325F73 
 30028      65745F73 
 30028      6F757263 
 30028      6500
 30029              	.LASF202:
 30030 0be1 626D6132 		.ascii	"bma2x2_set_orient_hyst\000"
 30030      78325F73 
 30030      65745F6F 
 30030      7269656E 
 30030      745F6879 
 30031              	.LASF120:
 30032 0bf8 696E7472 		.ascii	"intr_slope_u8\000"
 30032      5F736C6F 
 30032      70655F75 
 30032      3800
 30033              	.LASF218:
 30034 0c06 706F7765 		.ascii	"power_mode\000"
 30034      725F6D6F 
 30034      646500
 30035              	.LASF59:
 30036 0c11 626D6132 		.ascii	"bma2x2_get_intr_orient_stat\000"
 30036      78325F67 
 30036      65745F69 
 30036      6E74725F 
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 699


 30036      6F726965 
 30037              	.LASF271:
 30038 0c2d 6765745F 		.ascii	"get_accel_len_to_parse\000"
 30038      61636365 
 30038      6C5F6C65 
 30038      6E5F746F 
 30038      5F706172 
 30039              	.LASF232:
 30040 0c44 626D6132 		.ascii	"bma2x2_get_nvmprog_remain\000"
 30040      78325F67 
 30040      65745F6E 
 30040      766D7072 
 30040      6F675F72 
 30041              	.LASF22:
 30042 0c5e 62757273 		.ascii	"burst_read\000"
 30042      745F7265 
 30042      616400
 30043              	.LASF49:
 30044 0c69 61636365 		.ascii	"accel_y_s8\000"
 30044      6C5F795F 
 30044      733800
 30045              	.LASF16:
 30046 0c74 6374726C 		.ascii	"ctrl_mode_reg\000"
 30046      5F6D6F64 
 30046      655F7265 
 30046      6700
 30047              	.LASF109:
 30048 0c82 6368616E 		.ascii	"channel_u8\000"
 30048      6E656C5F 
 30048      753800
 30049              	.LASF61:
 30050 0c8d 626D6132 		.ascii	"bma2x2_get_fifo_stat\000"
 30050      78325F67 
 30050      65745F66 
 30050      69666F5F 
 30050      73746174 
 30051              	.LASF72:
 30052 0ca2 626D6132 		.ascii	"bma2x2_get_bw\000"
 30052      78325F67 
 30052      65745F62 
 30052      7700
 30053              	.LASF87:
 30054 0cb0 626D6132 		.ascii	"bma2x2_get_sleep_timer_mode\000"
 30054      78325F67 
 30054      65745F73 
 30054      6C656570 
 30054      5F74696D 
 30055              	.LASF270:
 30056 0ccc 64617461 		.ascii	"data_read_length\000"
 30056      5F726561 
 30056      645F6C65 
 30056      6E677468 
 30056      00
 30057              	.LASF37:
 30058 0cdd 6164725F 		.ascii	"adr_u8\000"
 30058      753800
 30059              	.LASF203:
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 700


 30060 0ce4 626D6132 		.ascii	"bma2x2_get_theta\000"
 30060      78325F67 
 30060      65745F74 
 30060      68657461 
 30060      00
 30061              	.LASF65:
 30062 0cf5 626D6132 		.ascii	"bma2x2_get_fifo_overrun\000"
 30062      78325F67 
 30062      65745F66 
 30062      69666F5F 
 30062      6F766572 
 30063              	.LASF94:
 30064 0d0d 73686164 		.ascii	"shadow_dis_u8\000"
 30064      6F775F64 
 30064      69735F75 
 30064      3800
 30065              	.LASF78:
 30066 0d1b 626D6132 		.ascii	"bma2x2_set_power_mode\000"
 30066      78325F73 
 30066      65745F70 
 30066      6F776572 
 30066      5F6D6F64 
 30067              	.LASF229:
 30068 0d31 6E767072 		.ascii	"nvprog_trig_u8\000"
 30068      6F675F74 
 30068      7269675F 
 30068      753800
 30069              	.LASF3:
 30070 0d40 756E7369 		.ascii	"unsigned char\000"
 30070      676E6564 
 30070      20636861 
 30070      7200
 30071              	.LASF248:
 30072 0d4e 6F666673 		.ascii	"offset_rst_u8\000"
 30072      65745F72 
 30072      73745F75 
 30072      3800
 30073              	.LASF138:
 30074 0d5c 696E7472 		.ascii	"intr_newdata_u8\000"
 30074      5F6E6577 
 30074      64617461 
 30074      5F753800 
 30075              	.LASF196:
 30076 0d6c 626D6132 		.ascii	"bma2x2_set_orient_mode\000"
 30076      78325F73 
 30076      65745F6F 
 30076      7269656E 
 30076      745F6D6F 
 30077              	.LASF186:
 30078 0d83 7461705F 		.ascii	"tap_quiet_u8\000"
 30078      71756965 
 30078      745F7538 
 30078      00
 30079              	.LASF51:
 30080 0d90 61636365 		.ascii	"accel_z_s16\000"
 30080      6C5F7A5F 
 30080      73313600 
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 701


 30081              	.LASF173:
 30082 0d9c 626D6132 		.ascii	"bma2x2_get_low_high_g_hyst\000"
 30082      78325F67 
 30082      65745F6C 
 30082      6F775F68 
 30082      6967685F 
 30083              	.LASF125:
 30084 0db7 626D6132 		.ascii	"bma2x2_get_intr_double_tap\000"
 30084      78325F67 
 30084      65745F69 
 30084      6E74725F 
 30084      646F7562 
 30085              	.LASF1:
 30086 0dd2 73686F72 		.ascii	"short int\000"
 30086      7420696E 
 30086      7400
 30087              	.LASF194:
 30088 0ddc 626D6132 		.ascii	"bma2x2_get_orient_mode\000"
 30088      78325F67 
 30088      65745F6F 
 30088      7269656E 
 30088      745F6D6F 
 30089              	.LASF126:
 30090 0df3 696E7472 		.ascii	"intr_double_tap_u8\000"
 30090      5F646F75 
 30090      626C655F 
 30090      7461705F 
 30090      753800
 30091              	.LASF144:
 30092 0e06 696E7472 		.ascii	"intr2_fifo_wm_u8\000"
 30092      325F6669 
 30092      666F5F77 
 30092      6D5F7538 
 30092      00
 30093              	.LASF175:
 30094 0e17 626D6132 		.ascii	"bma2x2_set_low_high_g_hyst\000"
 30094      78325F73 
 30094      65745F6C 
 30094      6F775F68 
 30094      6967685F 
 30095              	.LASF127:
 30096 0e32 626D6132 		.ascii	"bma2x2_set_intr_double_tap\000"
 30096      78325F73 
 30096      65745F69 
 30096      6E74725F 
 30096      646F7562 
 30097              	.LASF263:
 30098 0e4d 6669666F 		.ascii	"fifo_data_bytes\000"
 30098      5F646174 
 30098      615F6279 
 30098      74657300 
 30099              	.LASF43:
 30100 0e5d 626D6132 		.ascii	"bma2x2_read_accel_eight_resolution_x\000"
 30100      78325F72 
 30100      6561645F 
 30100      61636365 
 30100      6C5F6569 
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 702


 30101              	.LASF48:
 30102 0e82 626D6132 		.ascii	"bma2x2_read_accel_eight_resolution_y\000"
 30102      78325F72 
 30102      6561645F 
 30102      61636365 
 30102      6C5F6569 
 30103              	.LASF52:
 30104 0ea7 626D6132 		.ascii	"bma2x2_read_accel_eight_resolution_z\000"
 30104      78325F72 
 30104      6561645F 
 30104      61636365 
 30104      6C5F6569 
 30105              	.LASF80:
 30106 0ecc 6D6F6465 		.ascii	"mode_ctr_twel_reg\000"
 30106      5F637472 
 30106      5F747765 
 30106      6C5F7265 
 30106      6700
 30107              	.LASF88:
 30108 0ede 736C6565 		.ascii	"sleep_timer_u8\000"
 30108      705F7469 
 30108      6D65725F 
 30108      753800
 30109              	.LASF117:
 30110 0eed 696E7472 		.ascii	"intr_high_g_u8\000"
 30110      5F686967 
 30110      685F675F 
 30110      753800
 30111              	.LASF170:
 30112 0efc 626D6132 		.ascii	"bma2x2_get_thres\000"
 30112      78325F67 
 30112      65745F74 
 30112      68726573 
 30112      00
 30113              	.LASF143:
 30114 0f0d 626D6132 		.ascii	"bma2x2_get_intr2_fifo_wm\000"
 30114      78325F67 
 30114      65745F69 
 30114      6E747232 
 30114      5F666966 
 30115              	.LASF44:
 30116 0f26 61636365 		.ascii	"accel_x_s8\000"
 30116      6C5F785F 
 30116      733800
 30117              	.LASF209:
 30118 0f31 626D6132 		.ascii	"bma2x2_get_flat_hyst\000"
 30118      78325F67 
 30118      65745F66 
 30118      6C61745F 
 30118      68797374 
 30119              	.LASF68:
 30120 0f46 696E7472 		.ascii	"intr_stat_u8\000"
 30120      5F737461 
 30120      745F7538 
 30120      00
 30121              	.LASF256:
 30122 0f53 626D6132 		.ascii	"bma2x2_set_fifo_mode\000"
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 703


 30122      78325F73 
 30122      65745F66 
 30122      69666F5F 
 30122      6D6F6465 
 30123              	.LASF7:
 30124 0f68 626D6132 		.ascii	"bma2x2_accel_data\000"
 30124      78325F61 
 30124      6363656C 
 30124      5F646174 
 30124      6100
 30125              	.LASF176:
 30126 0f7a 626D6132 		.ascii	"bma2x2_get_low_g_mode\000"
 30126      78325F67 
 30126      65745F6C 
 30126      6F775F67 
 30126      5F6D6F64 
 30127              	.LASF265:
 30128 0f90 626D6132 		.ascii	"bma2x2_extract_accel\000"
 30128      78325F65 
 30128      78747261 
 30128      63745F61 
 30128      6363656C 
 30129              	.LASF62:
 30130 0fa5 73746174 		.ascii	"stat_fifo_u8\000"
 30130      5F666966 
 30130      6F5F7538 
 30130      00
 30131              	.LASF108:
 30132 0fb2 626D6132 		.ascii	"bma2x2_get_slow_no_motion\000"
 30132      78325F67 
 30132      65745F73 
 30132      6C6F775F 
 30132      6E6F5F6D 
 30133              	.LASF225:
 30134 0fcc 626D6132 		.ascii	"bma2x2_get_nvmprog_mode\000"
 30134      78325F67 
 30134      65745F6E 
 30134      766D7072 
 30134      6F675F6D 
 30135              	.LASF60:
 30136 0fe4 73746174 		.ascii	"stat_orient_u8\000"
 30136      5F6F7269 
 30136      656E745F 
 30136      753800
 30137              	.LASF157:
 30138 0ff3 626D6132 		.ascii	"bma2x2_set_intr_output_type\000"
 30138      78325F73 
 30138      65745F69 
 30138      6E74725F 
 30138      6F757470 
 30139              	.LASF15:
 30140 100f 63686970 		.ascii	"chip_id\000"
 30140      5F696400 
 30141              	.LASF280:
 30142 1017 626D6132 		.ascii	"bma2x2_get_fifo_data_output_reg\000"
 30142      78325F67 
 30142      65745F66 
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 704


 30142      69666F5F 
 30142      64617461 
 30143              	.LASF220:
 30144 1037 73656C66 		.ascii	"selftest_axis_u8\000"
 30144      74657374 
 30144      5F617869 
 30144      735F7538 
 30144      00
 30145              	.LASF28:
 30146 1048 61646472 		.ascii	"addr_u8\000"
 30146      5F753800 
 30147              	.LASF101:
 30148 1050 626D6132 		.ascii	"bma2x2_set_intr_enable\000"
 30148      78325F73 
 30148      65745F69 
 30148      6E74725F 
 30148      656E6162 
 30149              	.LASF13:
 30150 1067 626D6132 		.ascii	"bma2x2_t\000"
 30150      78325F74 
 30150      00
 30151              	.LASF12:
 30152 1070 61636365 		.ascii	"accel_data\000"
 30152      6C5F6461 
 30152      746100
 30153              	.LASF207:
 30154 107b 6F726965 		.ascii	"orient_enable_u8\000"
 30154      6E745F65 
 30154      6E61626C 
 30154      655F7538 
 30154      00
 30155              	.LASF95:
 30156 108c 626D6132 		.ascii	"bma2x2_set_shadow_dis\000"
 30156      78325F73 
 30156      65745F73 
 30156      6861646F 
 30156      775F6469 
 30157              	.LASF199:
 30158 10a2 626D6132 		.ascii	"bma2x2_set_orient_block\000"
 30158      78325F73 
 30158      65745F6F 
 30158      7269656E 
 30158      745F626C 
 30159              	.LASF136:
 30160 10ba 626D6132 		.ascii	"bma2x2_set_intr_flat\000"
 30160      78325F73 
 30160      65745F69 
 30160      6E74725F 
 30160      666C6174 
 30161              	.LASF103:
 30162 10cf 6669666F 		.ascii	"fifo_full_u8\000"
 30162      5F66756C 
 30162      6C5F7538 
 30162      00
 30163              	.LASF159:
 30164 10dc 696E7472 		.ascii	"intr_level_u8\000"
 30164      5F6C6576 
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 705


 30164      656C5F75 
 30164      3800
 30165              	.LASF131:
 30166 10ea 626D6132 		.ascii	"bma2x2_get_intr_orient\000"
 30166      78325F67 
 30166      65745F69 
 30166      6E74725F 
 30166      6F726965 
 30167              	.LASF99:
 30168 1101 696E7472 		.ascii	"intr_type_u8\000"
 30168      5F747970 
 30168      655F7538 
 30168      00
 30169              	.LASF272:
 30170 110e 756E7061 		.ascii	"unpack_accel_frame\000"
 30170      636B5F61 
 30170      6363656C 
 30170      5F667261 
 30170      6D6500
 30171              	.LASF139:
 30172 1121 626D6132 		.ascii	"bma2x2_set_new_data\000"
 30172      78325F73 
 30172      65745F6E 
 30172      65775F64 
 30172      61746100 
 30173              	.LASF123:
 30174 1135 696E7472 		.ascii	"intr_slow_no_motion_u8\000"
 30174      5F736C6F 
 30174      775F6E6F 
 30174      5F6D6F74 
 30174      696F6E5F 
 30175              	.LASF35:
 30176 114c 636F6E66 		.ascii	"config_data_u8\000"
 30176      69675F64 
 30176      6174615F 
 30176      753800
 30177              	.LASF31:
 30178 115b 626D6132 		.ascii	"bma2x2_burst_read\000"
 30178      78325F62 
 30178      75727374 
 30178      5F726561 
 30178      6400
 30179              	.LASF69:
 30180 116d 626D6132 		.ascii	"bma2x2_get_range\000"
 30180      78325F67 
 30180      65745F72 
 30180      616E6765 
 30180      00
 30181              	.LASF155:
 30182 117e 626D6132 		.ascii	"bma2x2_get_intr_output_type\000"
 30182      78325F67 
 30182      65745F69 
 30182      6E74725F 
 30182      6F757470 
 30183              	.LASF210:
 30184 119a 666C6174 		.ascii	"flat_hyst_u8\000"
 30184      5F687973 
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 706


 30184      745F7538 
 30184      00
 30185              	.LASF53:
 30186 11a7 61636365 		.ascii	"accel_z_s8\000"
 30186      6C5F7A5F 
 30186      733800
 30187              	.LASF243:
 30188 11b2 626D6132 		.ascii	"bma2x2_get_cal_rdy\000"
 30188      78325F67 
 30188      65745F63 
 30188      616C5F72 
 30188      647900
 30189              	.LASF241:
 30190 11c5 736C6F77 		.ascii	"slow_comp_u8\000"
 30190      5F636F6D 
 30190      705F7538 
 30190      00
 30191              	.LASF112:
 30192 11d2 626D6132 		.ascii	"bma2x2_get_intr_low_g\000"
 30192      78325F67 
 30192      65745F69 
 30192      6E74725F 
 30192      6C6F775F 
 30193              	.LASF66:
 30194 11e8 6669666F 		.ascii	"fifo_overrun_u8\000"
 30194      5F6F7665 
 30194      7272756E 
 30194      5F753800 
 30195              	.LASF247:
 30196 11f8 626D6132 		.ascii	"bma2x2_set_offset_rst\000"
 30196      78325F73 
 30196      65745F6F 
 30196      66667365 
 30196      745F7273 
 30197              	.LASF128:
 30198 120e 626D6132 		.ascii	"bma2x2_get_intr_single_tap\000"
 30198      78325F67 
 30198      65745F69 
 30198      6E74725F 
 30198      73696E67 
 30199              	.LASF153:
 30200 1229 696E7472 		.ascii	"intr_source_u8\000"
 30200      5F736F75 
 30200      7263655F 
 30200      753800
 30201              	.LASF135:
 30202 1238 696E7472 		.ascii	"intr_flat_u8\000"
 30202      5F666C61 
 30202      745F7538 
 30202      00
 30203              	.LASF267:
 30204 1245 61636365 		.ascii	"accel_frame_count\000"
 30204      6C5F6672 
 30204      616D655F 
 30204      636F756E 
 30204      7400
 30205              	.LASF145:
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 707


 30206 1257 626D6132 		.ascii	"bma2x2_set_intr2_fifo_wm\000"
 30206      78325F73 
 30206      65745F69 
 30206      6E747232 
 30206      5F666966 
 30207              	.LASF266:
 30208 1270 61636365 		.ascii	"accel_frame\000"
 30208      6C5F6672 
 30208      616D6500 
 30209              	.LASF151:
 30210 127c 626D6132 		.ascii	"bma2x2_set_intr2_fifo_full\000"
 30210      78325F73 
 30210      65745F69 
 30210      6E747232 
 30210      5F666966 
 30211              	.LASF21:
 30212 1297 6275735F 		.ascii	"bus_read\000"
 30212      72656164 
 30212      00
 30213              	.LASF29:
 30214 12a0 64617461 		.ascii	"data_u8\000"
 30214      5F753800 
 30215              	.LASF107:
 30216 12a8 626D6132 		.ascii	"bma2x2_set_intr_fifo_wm\000"
 30216      78325F73 
 30216      65745F69 
 30216      6E74725F 
 30216      6669666F 
 30217              	.LASF182:
 30218 12c0 626D6132 		.ascii	"bma2x2_get_tap_shock\000"
 30218      78325F67 
 30218      65745F74 
 30218      61705F73 
 30218      686F636B 
 30219              	.LASF23:
 30220 12d5 64656C61 		.ascii	"delay_msec\000"
 30220      795F6D73 
 30220      656300
 30221              	.LASF269:
 30222 12e0 61636365 		.ascii	"accel_index\000"
 30222      6C5F696E 
 30222      64657800 
 30223              	.LASF251:
 30224 12ec 626D6132 		.ascii	"bma2x2_set_offset_target\000"
 30224      78325F73 
 30224      65745F6F 
 30224      66667365 
 30224      745F7461 
 30225              	.LASF237:
 30226 1305 626D6132 		.ascii	"bma2x2_get_i2c_wdt\000"
 30226      78325F67 
 30226      65745F69 
 30226      32635F77 
 30226      647400
 30227              	.LASF253:
 30228 1318 626D6132 		.ascii	"bma2x2_set_offset\000"
 30228      78325F73 
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 708


 30228      65745F6F 
 30228      66667365 
 30228      7400
 30229              	.LASF39:
 30230 132a 626D6132 		.ascii	"bma2x2_read_reg\000"
 30230      78325F72 
 30230      6561645F 
 30230      72656700 
 30231              	.LASF208:
 30232 133a 626D6132 		.ascii	"bma2x2_set_orient_enable\000"
 30232      78325F73 
 30232      65745F6F 
 30232      7269656E 
 30232      745F656E 
 30233              	.LASF205:
 30234 1353 626D6132 		.ascii	"bma2x2_set_theta\000"
 30234      78325F73 
 30234      65745F74 
 30234      68657461 
 30234      00
 30235              	.LASF198:
 30236 1364 6F726965 		.ascii	"orient_block_u8\000"
 30236      6E745F62 
 30236      6C6F636B 
 30236      5F753800 
 30237              	.LASF83:
 30238 1374 626D6132 		.ascii	"bma2x2_get_sleep_durn\000"
 30238      78325F67 
 30238      65745F73 
 30238      6C656570 
 30238      5F647572 
 30239              	.LASF158:
 30240 138a 626D6132 		.ascii	"bma2x2_get_intr_level\000"
 30240      78325F67 
 30240      65745F69 
 30240      6E74725F 
 30240      6C657665 
 30241              	.LASF189:
 30242 13a0 7461705F 		.ascii	"tap_thres_u8\000"
 30242      74687265 
 30242      735F7538 
 30242      00
 30243              	.LASF115:
 30244 13ad 696E7472 		.ascii	"intr_low_u8\000"
 30244      5F6C6F77 
 30244      5F753800 
 30245              	.LASF118:
 30246 13b9 626D6132 		.ascii	"bma2x2_set_intr_high_g\000"
 30246      78325F73 
 30246      65745F69 
 30246      6E74725F 
 30246      68696768 
 30247              	.LASF129:
 30248 13d0 696E7472 		.ascii	"intr_single_tap_u8\000"
 30248      5F73696E 
 30248      676C655F 
 30248      7461705F 
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 709


 30248      753800
 30249              	.LASF200:
 30250 13e3 626D6132 		.ascii	"bma2x2_get_orient_hyst\000"
 30250      78325F67 
 30250      65745F6F 
 30250      7269656E 
 30250      745F6879 
 30251              	.LASF188:
 30252 13fa 626D6132 		.ascii	"bma2x2_get_tap_thres\000"
 30252      78325F67 
 30252      65745F74 
 30252      61705F74 
 30252      68726573 
 30253              	.LASF130:
 30254 140f 626D6132 		.ascii	"bma2x2_set_intr_single_tap\000"
 30254      78325F73 
 30254      65745F69 
 30254      6E74725F 
 30254      73696E67 
 30255              	.LASF249:
 30256 142a 626D6132 		.ascii	"bma2x2_get_offset_target\000"
 30256      78325F67 
 30256      65745F6F 
 30256      66667365 
 30256      745F7461 
 30257              	.LASF223:
 30258 1443 73656C66 		.ascii	"selftest_sign_u8\000"
 30258      74657374 
 30258      5F736967 
 30258      6E5F7538 
 30258      00
 30259              	.LASF97:
 30260 1454 626D6132 		.ascii	"bma2x2_update_image\000"
 30260      78325F75 
 30260      70646174 
 30260      655F696D 
 30260      61676500 
 30261              	.LASF148:
 30262 1468 626D6132 		.ascii	"bma2x2_set_intr1_fifo_full\000"
 30262      78325F73 
 30262      65745F69 
 30262      6E747231 
 30262      5F666966 
 30263              	.LASF113:
 30264 1483 696E7472 		.ascii	"intr_low_g_u8\000"
 30264      5F6C6F77 
 30264      5F675F75 
 30264      3800
 30265              	.LASF24:
 30266 1491 6669666F 		.ascii	"fifo_configuration\000"
 30266      5F636F6E 
 30266      66696775 
 30266      72617469 
 30266      6F6E00
 30267              	.LASF245:
 30268 14a4 626D6132 		.ascii	"bma2x2_set_cal_trigger\000"
 30268      78325F73 
ARM GAS  C:\Users\Tudor\AppData\Local\Temp\ccXfETcH.s 			page 710


 30268      65745F63 
 30268      616C5F74 
 30268      72696767 
 30269              	.LASF183:
 30270 14bb 7461705F 		.ascii	"tap_shock_u8\000"
 30270      73686F63 
 30270      6B5F7538 
 30270      00
 30271              	.LASF74:
 30272 14c8 626D6132 		.ascii	"bma2x2_set_bw\000"
 30272      78325F73 
 30272      65745F62 
 30272      7700
 30273              	.LASF149:
 30274 14d6 626D6132 		.ascii	"bma2x2_get_intr2_fifo_full\000"
 30274      78325F67 
 30274      65745F69 
 30274      6E747232 
 30274      5F666966 
 30275              	.LASF122:
 30276 14f1 626D6132 		.ascii	"bma2x2_get_intr_slow_no_motion\000"
 30276      78325F67 
 30276      65745F69 
 30276      6E74725F 
 30276      736C6F77 
 30277              	.LASF75:
 30278 1510 64617461 		.ascii	"data_bw_u8\000"
 30278      5F62775F 
 30278      753800
 30279              	.LASF81:
 30280 151b 7072655F 		.ascii	"pre_fifo_config_data\000"
 30280      6669666F 
 30280      5F636F6E 
 30280      6669675F 
 30280      64617461 
 30281              	.LASF161:
 30282 1530 626D6132 		.ascii	"bma2x2_rst_intr\000"
 30282      78325F72 
 30282      73745F69 
 30282      6E747200 
 30283              	.LASF77:
 30284 1540 64617461 		.ascii	"data2_u8\000"
 30284      325F7538 
 30284      00
 30285              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
